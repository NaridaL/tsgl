#version 300 es
precision highp float;
const float INFINITY = 1.0e9;
in vec4 pos;
uniform vec3 sphereCenters[8];
uniform mat4 ts_ModelViewProjectionMatrixInverse;
uniform float sphereRadii[8];
const int TRIANGLE_COUNT = 1024;
out vec4 fragColor;


uniform sampler2D vertices;
uniform sampler2D texCoords;
uniform sampler2D triangleTexture;

float intersectSphere(vec3 origin, vec3 ray, vec3 sphereCenter, float sphereRadius) {
	vec3 toSphere = origin - sphereCenter;
	float a = dot(ray, ray);
	float b = 2.0 * dot(toSphere, ray);
	float c = dot(toSphere, toSphere) - sphereRadius * sphereRadius;
	float discriminant = b * b - 4.0 * a * c;
	if (discriminant > 0.0) {
		float t = (-b - sqrt(discriminant)) / (2.0 * a);
		if (t > 0.0) return t;
	}
	return INFINITY;
}

struct TriangleHitTest {
	float t;
	vec3 hit;
	float u;
	float v;
};
const TriangleHitTest INFINITY_HIT = TriangleHitTest(INFINITY, vec3(0.0), 0.0, 0.0);


// taken from https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm
TriangleHitTest intersectTriangle(vec3 rayOrigin, vec3 rayVector, vec3 vertex0, vec3 vertex1, vec3 vertex2) {
    const float EPSILON = 0.0000001;
    vec3 edge1, edge2, h, s, q;
    float a,f,u,v;
    edge1 = vertex1 - vertex0;
    edge2 = vertex2 - vertex0;
    h = cross(rayVector, edge2);
    a = dot(edge1, h);
    if (a > -EPSILON && a < EPSILON)
        return INFINITY_HIT;
    f = 1.0/a;
    s = rayOrigin - vertex0;
    u = f * dot(s, h);
    if (u < 0.0 || u > 1.0)
        return INFINITY_HIT;
    q = cross(s, edge1);
    v = f * dot(rayVector, q);
    if (v < 0.0 || u + v > 1.0)
        return INFINITY_HIT;
    // At this stage we can compute t to find out where the intersection point is on the line.
    float t = f * dot(edge2, q);
    if (t > 0.0001) // ray intersection
    {
        return TriangleHitTest(t, rayOrigin + rayVector * t, u, v);
    }
    else // This means that there is a line intersection but not a ray intersection.
        return INFINITY_HIT;
}

// use texelFetch because we don't want to interpolate values
vec3 vertexi(int i) {
	return texelFetch(vertices, ivec2(i, 0), 0).xyz;
}
vec3 textcoordi(int i) {
	return texelFetch(texCoords, ivec2(i, 0), 0).xyz;
}

void main() {
	// pos.xy is the pixel we are drawing in normalized device coordinates (NDC, from -1 to +1)
	// the starting ray in NDC is (origin=pos.xy, dir=Z)
	// with ts_ModelViewProjectionMatrixInverse we transform the start and end point into world coordinates
	vec3 rayStart = (ts_ModelViewProjectionMatrixInverse * vec4(pos.xy, 1.0, 1.0)).xyz;
	vec3 rayEnd = (ts_ModelViewProjectionMatrixInverse * vec4(pos.xy, -1.0, 1.0)).xyz;
	vec3 rayDir = rayEnd - rayStart;

	// start with a black fragment
	fragColor = vec4(0.0, 0.0, 0.0, 1.0);

	// mask is the fraction of the fragment we haven't calculated yet
	vec4 mask = vec4(1.0, 1.0, 1.0, 1.0);

	for (int bounce = 0; bounce < 8; bounce++) {
		/* Find the closest intersection with the scene */
		vec3 closestHit;
		vec4 closestColor = vec4(0.0);
		float closestT = INFINITY;
		vec3 closestNormal;
		float closestSpecular = 0.0;
		for (int s = 0; s < 8; s++) {
			if (sphereRadii[s] == 0.0) {
				break;
			}
			float sphereT = intersectSphere(rayStart, rayDir, sphereCenters[s], sphereRadii[s]);
			if (sphereT < closestT) {
				closestT = sphereT;
				closestHit = rayStart + rayDir * sphereT;
				closestNormal = (closestHit - sphereCenters[s]) / sphereRadii[s];
				closestSpecular = 0.95;
				closestColor = vec4(0.0);
			}
		}
		for (int i = 0; i < TRIANGLE_COUNT; i++) {
			vec3 a = vertexi(i*3);
			vec3 b = vertexi(i*3+1);
			vec3 c = vertexi(i*3 + 2);

			if (a == vec3(0.0) && b == vec3(0.0)) {
				break;
			}
			TriangleHitTest hitTest = intersectTriangle(rayStart, rayDir, a, b, c);
			float triangleT = hitTest.t;
			if (triangleT < closestT) {
				closestT = triangleT;
				vec3 ab = b - a;
				vec3 ac = c - a;
				closestNormal = normalize(cross(ab, ac));
				closestHit = hitTest.hit;

				// interpolate the texCoords of the three triangle vertices
				vec3 texCoordsAndSheen = textcoordi(i*3) * (1.0 - hitTest.u - hitTest.v) // a
					+ textcoordi(i*3+1) * (hitTest.u) // b
					+ textcoordi(i*3+2) * (hitTest.v); // c
				closestColor = texture(triangleTexture, texCoordsAndSheen.xy);
				closestSpecular = texCoordsAndSheen.z;
			}
		}

		/* The background is white */
		if (closestT == INFINITY) {
			fragColor += mask;
			break;
		}

		fragColor += mask * (1.0 - closestSpecular) * closestColor;
		if (0.0 == closestSpecular) {
			break;
		}
		rayDir = reflect(rayDir, closestNormal);
		rayStart = closestHit;
		mask *= closestSpecular;
	}
}