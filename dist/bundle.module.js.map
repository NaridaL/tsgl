{"version":3,"file":"bundle.module.js","sources":["../src/Mesh.ts","../src/Shader.ts","../src/LightGLContext.ts","../src/Buffer.ts","../src/Texture.ts"],"sourcesContent":["import {\n\tAABB, arrayFromFunction, assert, assertVectors, int, lerp, M4, NLA_PRECISION, raddd, Transformable, Tuple3, V, V3,\n} from 'ts3dutils'\n\nimport {Buffer} from './Buffer'\nimport {currentGL, GL_COLOR, LightGLContext, pushQuad} from './LightGLContext'\n\nconst {cos, sin, PI, min, max} = Math\nconst WGL = WebGLRenderingContext\n\n/**\n * @example new Mesh()\n *        .addIndexBuffer('TRIANGLES')\n *        .addIndexBuffer('LINES')\n *        .addVertexBuffer('normals', 'LGL_Normal')\n */\nexport class Mesh extends Transformable {\n\thasBeenCompiled: boolean = false\n\tvertexBuffers: { [name: string]: Buffer } = {}\n\tindexBuffers: { [name: string]: Buffer } = {}\n\n\n\tvertices: V3[]\n\tnormals?: V3[]\n\tcoords?: [number, number][]\n\tcolors?: GL_COLOR[]\n\tTRIANGLES?: int[]\n\tLINES?: int[]\n\n\tconstructor() {\n\t\tsuper()\n\t\tthis.addVertexBuffer('vertices', 'LGL_Vertex')\n\t\t//if (options.coords) this.addVertexBuffer('coords', 'LGL_TexCoord')\n\t\t//if (options.normals) this.addVertexBuffer('normals', 'LGL_Normal')\n\t\t//if (options.colors) this.addVertexBuffer('colors', 'LGL_Color')\n\t}\n\n\tcalcVolume(this: Mesh & { TRIANGLES: int[] }): { volume: number, centroid: V3, area: number } {\n\t\tlet totalVolume = 0, totalCentroid = V3.O, totalAreaX2 = 0\n\t\tconst triangles = this.TRIANGLES\n\t\tconst vertices = this.vertices\n\t\tfor (let i = 0; i < triangles.length; i += 3) {\n\t\t\tconst i0 = triangles[i + 0], i1 = triangles[i + 1], i2 = triangles[i + 2]\n\t\t\tconst v0 = vertices[i0], v1 = vertices[i1], v2 = vertices[i2]\n\t\t\tconst v01 = v1.minus(v0), v02 = v2.minus(v0)\n\t\t\tconst normal = v01.cross(v02)\n\t\t\t//const centroidZ = (v0.z + v1.z + v2.z) / 3\n\t\t\t//totalVolume += centroidZ * (area === v01.cross(v02).length() / 2) * v01.cross(v02).unit().z\n\t\t\tconst faceCentroid = v0.plus(v1.plus(v2)).div(3)\n\t\t\ttotalVolume += faceCentroid.z * normal.z / 2\n\t\t\tconst faceAreaX2 = normal.length()\n\t\t\ttotalAreaX2 += faceAreaX2\n\t\t\ttotalCentroid = totalCentroid.plus(new V3(faceCentroid.x, faceCentroid.y, faceCentroid.z / 2).times(faceCentroid.z * normal.z / 2))\n\t\t}\n\t\t// sumInPlaceTree adds negligible additional accuracy for XY sphere\n\t\treturn {volume: totalVolume, centroid: totalCentroid.div(triangles.length / 3), area: totalAreaX2 / 2}\n\t}\n\n\t/**\n\t * Add a new vertex buffer with a list as a property called `name` on this object and map it to\n\t * the attribute called `attribute` in all shaders that draw this mesh.\n\t * @example new Mesh().addVertexBuffer('coords', 'LGL_TexCoord')\n\t */\n\n\taddVertexBuffer<K extends string>(name: K, attribute: string): this & { [k in K]: any[] } {\n\t\tassert(!this.vertexBuffers[attribute], 'Buffer ' + attribute + ' already exists.')\n\t\t//assert(!this[name])\n\t\tthis.hasBeenCompiled = false\n\t\tassert('string' == typeof name)\n\t\tassert('string' == typeof attribute)\n\t\tconst buffer = this.vertexBuffers[attribute] = new Buffer(WGL.ARRAY_BUFFER, Float32Array)\n\t\tbuffer.name = name\n\t\t;(this as any)[name] = []\n\t\treturn this as any\n\t}\n\n\t/**\n\t * Add a new index buffer.\n\t * @example new Mesh().addIndexBuffer('TRIANGLES')\n\t * @example new Mesh().addIndexBuffer('LINES')\n\t */\n\taddIndexBuffer<K extends string>(name: K): this & { [k in K]: int[] } {\n\t\tthis.hasBeenCompiled = false\n\t\tconst buffer = this.indexBuffers[name] = new Buffer(WGL.ELEMENT_ARRAY_BUFFER, Uint16Array)\n\t\tbuffer.name = name\n\t\t;(this as any)[name] = []\n\t\treturn this as any\n\t}\n\n\tconcat<T extends Mesh>(...others: T[]): T {\n\t\tconst mesh = new Mesh() as any\n\t\t;[this as Mesh].concat(others).forEach((oldMesh: any) => {\n\t\t\tconst startIndex = mesh.vertices ? mesh.vertices.length : 0\n\t\t\tObject.getOwnPropertyNames(oldMesh.vertexBuffers).forEach(attribute => {\n\t\t\t\tconst bufferName = this.vertexBuffers[attribute].name!\n\t\t\t\tif (!mesh.vertexBuffers[attribute]) {\n\t\t\t\t\tmesh.addVertexBuffer(bufferName, attribute)\n\t\t\t\t}\n\t\t\t\tmesh[bufferName].push(oldMesh[bufferName])\n\t\t\t})\n\t\t\tObject.getOwnPropertyNames(oldMesh.indexBuffers).forEach(name => {\n\t\t\t\tif (!mesh.indexBuffers[name]) {\n\t\t\t\t\tmesh.addIndexBuffer(name)\n\t\t\t\t}\n\t\t\t\tmesh[name].push(...(oldMesh[name] as int[]).map(index => index + startIndex))\n\t\t\t})\n\t\t})\n\t\treturn mesh as any\n\t}\n\n\t/**\n\t * Upload all attached buffers to the GPU in preparation for rendering. This doesn't need to be called every\n\t * frame, only needs to be done when the data changes.\n\t *\n\t * Sets `this.hasBeenCompiled` to true.\n\t */\n\tcompile(gl: LightGLContext = currentGL()) {\n\t\t// figure out shortest vertex buffer to make sure indexBuffers are in bounds\n\t\tlet minVertexBufferLength = Infinity, minBufferName\n\t\tObject.getOwnPropertyNames(this.vertexBuffers).forEach(attribute => {\n\t\t\tconst buffer = this.vertexBuffers[attribute]\n\t\t\tbuffer.data = (this as any)[buffer.name!]\n\t\t\tbuffer.compile(undefined, gl)\n\t\t\tif ((this as any)[buffer.name!].length < minVertexBufferLength) {\n\t\t\t\tminBufferName = attribute\n\t\t\t\tminVertexBufferLength = (this as any)[buffer.name!].length\n\t\t\t}\n\t\t})\n\n\t\tfor (const name in this.indexBuffers) {\n\t\t\tconst buffer = this.indexBuffers[name]\n\t\t\tbuffer.data = (this as any)[buffer.name!]\n\t\t\tbuffer.compile(undefined, gl)\n\t\t\t// if (NLA_DEBUG && buffer.maxValue >= minVertexBufferLength) {\n\t\t\t// \tthrow new Error(`max index value for buffer ${name}\n\t\t\t// \tis too large ${buffer.maxValue} min Vbuffer size: ${minVertexBufferLength} ${minBufferName}`)\n\t\t\t// }\n\t\t}\n\t\tthis.hasBeenCompiled = true\n\t\treturn this\n\t}\n\n\tstatic async fromBinarySTL(stl: Blob) {\n\t\treturn new Promise<Mesh & { normals: V3[] }>((resolve, reject) => {\n\t\t\tconst mesh = new Mesh()\n\t\t\t\t.addVertexBuffer('normals', 'LGL_Normal')\n\t\t\tconst fileReader = new FileReader()\n\t\t\tfileReader.onerror = reject\n\t\t\tfileReader.onload = function (progressEvent) {\n\t\t\t\tconst dataView = new DataView(this.result)\n\t\t\t\tconst HEADER_BYTE_SIZE = 80\n\t\t\t\tconst triangleCount = dataView.getUint32(HEADER_BYTE_SIZE, true)\n\t\t\t\tmesh.normals.length = triangleCount * 3\n\t\t\t\tmesh.vertices.length = triangleCount * 3\n\t\t\t\tlet i = triangleCount * 3, bufferPtr = HEADER_BYTE_SIZE + 4\n\n\t\t\t\tfunction readV3() {\n\t\t\t\t\tconst x = dataView.getFloat32(bufferPtr, true)\n\t\t\t\t\tbufferPtr += 4\n\t\t\t\t\tconst y = dataView.getFloat32(bufferPtr, true)\n\t\t\t\t\tbufferPtr += 4\n\t\t\t\t\tconst z = dataView.getFloat32(bufferPtr, true)\n\t\t\t\t\tbufferPtr += 4\n\t\t\t\t\treturn new V3(x, y, z)\n\t\t\t\t}\n\n\t\t\t\twhile (i) {\n\t\t\t\t\ti -= 3\n\t\t\t\t\tconst normal = readV3()\n\t\t\t\t\tmesh.normals[i + 0] = normal\n\t\t\t\t\tmesh.normals[i + 1] = normal\n\t\t\t\t\tmesh.normals[i + 2] = normal\n\t\t\t\t\tmesh.vertices[i + 0] = readV3()\n\t\t\t\t\tmesh.vertices[i + 1] = readV3()\n\t\t\t\t\tmesh.vertices[i + 2] = readV3()\n\n\t\t\t\t\tbufferPtr += 2\n\t\t\t\t}\n\t\t\t\tresolve(mesh)\n\t\t\t}\n\t\t\tfileReader.readAsArrayBuffer(stl)\n\t\t})\n\t}\n\n\ttoBinarySTL(this: Mesh & { TRIANGLES: number[] }): Blob {\n\t\tif (!this.TRIANGLES) throw new Error('TRIANGLES must be defined.')\n\t\tconst HEADER_BYTE_SIZE = 80, FLOAT_BYTE_SIZE = 4\n\t\tconst triangles = this.TRIANGLES\n\t\tconst triangleCount = triangles.length / 3\n\t\tconst buffer = new ArrayBuffer(HEADER_BYTE_SIZE + 4 + triangleCount * (4 * 3 * FLOAT_BYTE_SIZE + 2))\n\t\tconst dataView = new DataView(buffer)\n\t\tdataView.setUint32(HEADER_BYTE_SIZE, triangleCount, true)\n\t\tlet bufferPtr = HEADER_BYTE_SIZE + 4\n\t\tlet i = triangles.length\n\t\twhile (i) {\n\t\t\ti -= 3\n\t\t\tconst a = this.vertices[triangles[i]], b = this.vertices[triangles[i + 1]],\n\t\t\t\tc = this.vertices[triangles[i + 2]]\n\t\t\tconst normal = V3.normalOnPoints(a, b, c)\n\n\t\t\t;[normal, a, b, c].forEach(v => {\n\t\t\t\tdataView.setFloat32(bufferPtr, v.x, true)\n\t\t\t\tbufferPtr += 4\n\t\t\t\tdataView.setFloat32(bufferPtr, v.y, true)\n\t\t\t\tbufferPtr += 4\n\t\t\t\tdataView.setFloat32(bufferPtr, v.z, true)\n\t\t\t\tbufferPtr += 4\n\t\t\t})\n\t\t\t// skip 2 bytes, already initalized to zero\n\t\t\tbufferPtr += 2\n\t\t}\n\t\tassert(bufferPtr == buffer.byteLength, bufferPtr + ' ' + buffer.byteLength)\n\t\treturn new Blob([buffer], {type: 'application/octet-stream'})\n\n\t}\n\n\t/**\n\t * Transform all vertices by `matrix` and all normals by the inverse transpose of `matrix`.\n\t *\n\t * Index buffer data is referenced.\n\t */\n\ttransform(m4: M4): this {\n\t\tconst mesh = new Mesh()\n\t\tmesh.vertices = m4.transformedPoints(this.vertices)\n\t\tif (this.normals) {\n\t\t\tmesh.addVertexBuffer('normals', 'LGL_Normal')\n\t\t\tconst invTrans = m4.as3x3().inversed().transposed().normalized()\n\t\t\tmesh.normals = this.normals.map(n => invTrans.transformVector(n).unit())\n\t\t\t// mesh.normals.forEach(n => assert(n.hasLength(1)))\n\t\t}\n\t\tfor (const name in this.indexBuffers) {\n\t\t\tmesh.addIndexBuffer(name)\n\t\t\t;(mesh as any)[name] = (this as any)[name]\n\t\t}\n\t\tmesh.compile()\n\t\treturn mesh as this\n\t}\n\n\t/**\n\t * Computes a new normal1 for each vertex from the average normal1 of the neighboring triangles. This means\n\t * adjacent triangles must share vertices for the resulting normals to be smooth.\n\t */\n\tcomputeNormalsFromFlatTriangles(this: Mesh & { TRIANGLES: int[] }): this & { normals: V3[] } {\n\t\tif (!this.normals) this.addVertexBuffer('normals', 'LGL_Normal')\n\t\t// tslint:disable:no-string-literal\n\t\t//this.vertexBuffers['LGL_Normal'].data = arrayFromFunction(this.vertices.length, i => V3.O)\n\n\t\tconst TRIANGLES = this.TRIANGLES, vertices = this.vertices, normals = this.normals!\n\t\tnormals.length = vertices.length\n\t\tfor (let i = 0; i < TRIANGLES.length; i += 3) {\n\t\t\tconst ai = TRIANGLES[i], bi = TRIANGLES[i + 1], ci = TRIANGLES[i + 2]\n\t\t\tconst a = vertices[ai]\n\t\t\tconst b = vertices[bi]\n\t\t\tconst c = vertices[ci]\n\t\t\tconst normal = b.minus(a).cross(c.minus(a)).unit()\n\t\t\tnormals[ai] = normals[ai].plus(normal)\n\t\t\tnormals[bi] = normals[bi].plus(normal)\n\t\t\tnormals[ci] = normals[ci].plus(normal)\n\t\t}\n\t\tfor (let i = 0; i < vertices.length; i++) {\n\t\t\tnormals[i] = normals[i].unit()\n\t\t}\n\t\tthis.hasBeenCompiled = false\n\t\treturn this as any\n\t}\n\n\n\t/**\n\t * Populate the `LINES` index buffer from the `triangles` index buffer.\n\t */\n\tcomputeWireframeFromFlatTriangles(this: Mesh & { TRIANGLES: int[] }): this & { LINES: int[] }\n\tcomputeWireframeFromFlatTriangles<T extends string>(this: Mesh & { TRIANGLES: int[] },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tindexBufferName: T): this & { [k in T]: int[] }\n\tcomputeWireframeFromFlatTriangles(this: any, indexBufferName: string = 'LINES'): this {\n\t\tif (!this.TRIANGLES) throw new Error('TRIANGLES must be defined.')\n\t\tconst canonEdges = new Set()\n\n\t\tfunction canonEdge(i0: int, i1: int) {\n\t\t\tconst iMin = min(i0, i1), iMax = max(i0, i1)\n\t\t\treturn (iMin << 16) | iMax\n\t\t}\n\n\t\t// function uncanonEdge(key) {\n\t\t// \treturn [key >> 16, key & 0xffff]\n\t\t// }\n\t\tconst t = this.TRIANGLES\n\t\tfor (let i = 0; i < t.length; i += 3) {\n\t\t\tcanonEdges.add(canonEdge(t[i + 0], t[i + 1]))\n\t\t\tcanonEdges.add(canonEdge(t[i + 1], t[i + 2]))\n\t\t\tcanonEdges.add(canonEdge(t[i + 2], t[i + 0]))\n\t\t}\n\t\tconst data = indexBufferName\n\t\tif (!this[data]) this.addIndexBuffer(indexBufferName)\n\t\t//this.LINES = new Array(canonEdges.size)\n\t\tcanonEdges.forEach(val => this[data].push(val >> 16, val & 0xffff))\n\t\tthis.hasBeenCompiled = false\n\t\treturn this\n\t}\n\n\tcomputeWireframeFromFlatTrianglesClosedMesh(this: Mesh & { TRIANGLES: int[] }): this & { LINES: int[] }\n\tcomputeWireframeFromFlatTrianglesClosedMesh<T extends string>(this: Mesh & { TRIANGLES: int[] },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  indexBufferName: T): this & { [k in T]: int[] }\n\tcomputeWireframeFromFlatTrianglesClosedMesh(this: any, indexBufferName: string = 'LINES'): this {\n\t\tif (!this.TRIANGLES) throw new Error('TRIANGLES must be defined.')\n\t\tif (!this.LINES) this.addIndexBuffer('LINES')\n\t\tconst tris = this.TRIANGLES\n\t\tif (!this[indexBufferName]) this.addIndexBuffer(indexBufferName)\n\t\tconst lines = this[indexBufferName]\n\t\tfor (let i = 0; i < tris.length; i += 3) {\n\t\t\tif (tris[i + 0] < tris[i + 1]) lines.push(tris[i + 0], tris[i + 1])\n\t\t\tif (tris[i + 1] < tris[i + 2]) lines.push(tris[i + 1], tris[i + 2])\n\t\t\tif (tris[i + 2] < tris[i + 0]) lines.push(tris[i + 2], tris[i + 0])\n\t\t}\n\t\tthis.hasBeenCompiled = false\n\t\treturn this\n\t}\n\n\tcomputeNormalLines(this: Mesh & { normals: V3[] }, length: number): this & { LINES: int[] }\n\tcomputeNormalLines<T extends string>(this: Mesh & { normals: V3[] },\n\t\t\t\t\t\t\t\t\t\t length: number, indexBufferName: T): this & { [k in T]: int[] }\n\tcomputeNormalLines(this: any, length: number = 1, indexBufferName: string = 'LINES') {\n\t\tif (!this.normals) {\n\t\t\tthrow new Error('normals must be defined.')\n\t\t}\n\t\tconst vs = this.vertices, si = this.vertices.length\n\t\tif (!this[indexBufferName]) this.addIndexBuffer(indexBufferName)\n\n\t\tfor (let i = 0; i < this.normals.length; i++) {\n\t\t\tvs[si + i] = vs[i].plus(this.normals[i].toLength(length))\n\t\t\tthis[indexBufferName].push(si + i, i)\n\t\t}\n\t\tthis.hasBeenCompiled = false\n\t\treturn this\n\t}\n\n\tgetAABB(): AABB {\n\t\treturn new AABB().addPoints(this.vertices)\n\t}\n\n\tgetBoundingSphere(): { center: V3, radius: number } {\n\t\tconst sphere = {center: this.getAABB().getCenter(), radius: 0}\n\t\tfor (let i = 0; i < this.vertices.length; i++) {\n\t\t\tsphere.radius = Math.max(sphere.radius, this.vertices[i].minus(sphere.center).length())\n\t\t}\n\t\treturn sphere\n\t}\n\n\n\t// ### Mesh.plane([options])\n\t//\n\t// Generates a square 2x2 mesh the xy plane centered at the origin. The\n\t// `options` argument specifies options to pass to the mesh constructor.\n\t// Additional options include `detailX` and `detailY`, which set the tesselation\n\t// in x and y, and `detail`, which sets both `detailX` and `detailY` at once.\n\t// Two triangles are generated by default.\n\t// Example usage:\n\t//\n\t//     var mesh1 = Mesh.plane();\n\t//     var mesh2 = Mesh.plane({ detail: 5 });\n\t//     var mesh3 = Mesh.plane({ detailX: 20, detailY: 40 });\n\t//\n\t/**\n\t * Generates a square mesh in the XY plane.\n\t * Texture coordinates (buffer \"coords\") are set to go from 0 to 1 in either direction.\n\t *\n\t *\n\t * @param {Object=} options\n\t * @param {number=} options.detail Defaults to 1\n\t * @param {number=} options.detailX Defaults to options.detail. Number of subdivisions in X direction.\n\t * @param {number=} options.detailY Defaults to options.detail. Number of subdivisions in Y direction.j\n\t * @param {number=} options.width defaults to 1\n\t * @param {number=} options.height defaults to 1\n\t * @param {number=} options.startX defaults to 0\n\t * @param {number=} options.startY defaults to 0\n\t */\n\tstatic plane(options: {\n\t\tdetail?: int,\n\t\tdetailX?: int,\n\t\tdetailY?: int,\n\t\twidth?: number,\n\t\theight?: number,\n\t\tstartX?: number,\n\t\tstartY?: number\n\t} = {}) {\n\t\tconst detailX = options.detailX || options.detail || 1\n\t\tconst detailY = options.detailY || options.detail || 1\n\t\tconst startX = options.startX || 0\n\t\tconst startY = options.startY || 0\n\t\tconst width = options.width || 1\n\t\tconst height = options.height || 1\n\t\tconst mesh = new Mesh()\n\t\t\t.addIndexBuffer('LINES')\n\t\t\t.addIndexBuffer('TRIANGLES')\n\t\t\t.addVertexBuffer('normals', 'LGL_Normal')\n\t\t\t.addVertexBuffer('coords', 'LGL_TexCoord')\n\n\t\tfor (let j = 0; j <= detailY; j++) {\n\t\t\tconst t = j / detailY\n\t\t\tfor (let i = 0; i <= detailX; i++) {\n\t\t\t\tconst s = i / detailX\n\t\t\t\tmesh.vertices.push(new V3(startX + s * width, startY + t * height, 0))\n\t\t\t\tmesh.coords.push([s, t])\n\t\t\t\tmesh.normals.push(V3.Z)\n\t\t\t\tif (i < detailX && j < detailY) {\n\t\t\t\t\tconst offset = i + j * (detailX + 1)\n\t\t\t\t\tmesh.TRIANGLES.push(\n\t\t\t\t\t\toffset, offset + detailX + 1, offset + 1,\n\t\t\t\t\t\toffset + detailX + 1, offset + detailX + 2, offset + 1)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < detailX; i++) {\n\t\t\tmesh.LINES.push(i, i + 1)\n\t\t\tmesh.LINES.push((detailX + 1) * detailY + i, (detailX + 1) * detailY + i + 1)\n\t\t}\n\t\tfor (let j = 0; j < detailY; j++) {\n\t\t\tmesh.LINES.push(detailX * j, detailX * (j + 1) + 1)\n\t\t\tmesh.LINES.push(detailX * (j + 1), detailX * (j + 2) + 1)\n\t\t}\n\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\t// unique corners of a unit cube. Used by Mesh.cube to generate a cube mesh.\n\tstatic UNIT_CUBE_CORNERS = [\n\t\tV3.O,\n\t\tnew V3(0, 0, 1),\n\t\tnew V3(0, 1, 0),\n\t\tnew V3(0, 1, 1),\n\n\t\tnew V3(1, 0, 0),\n\t\tnew V3(1, 0, 1),\n\t\tnew V3(1, 1, 0),\n\t\tV3.XYZ,\n\t]\n\n\t/**\n\t * Generates a unit cube (1x1x1) starting at the origin and extending into the (+ + +) octant.\n\t * I.e. box from V3.O to V3(1,1,1)\n\t * Creates line, triangle, vertex and normal1 buffers.\n\t */\n\tstatic cube() {\n\t\tconst mesh = new Mesh()\n\t\t\t.addVertexBuffer('normals', 'LGL_Normal')\n\t\t\t.addIndexBuffer('TRIANGLES')\n\t\t\t.addIndexBuffer('LINES')\n\n\t\t// basically indexes for faces of the cube. vertices each need to be added 3 times,\n\t\t// as they have different normals depending on the face being rendered\n\t\tconst VERTEX_CORNERS = [\n\t\t\t0, 1, 2, 3, // X = 0\n\t\t\t4, 5, 6, 7, // X = 1\n\n\t\t\t0, 4, 1, 5, // Y = 0\n\t\t\t2, 6, 3, 7, // Y = 1\n\n\t\t\t2, 6, 0, 4, // Z = 0\n\t\t\t3, 7, 1, 5, // Z = 1\n\t\t]\n\t\tmesh.vertices = VERTEX_CORNERS.map(i => Mesh.UNIT_CUBE_CORNERS[i])\n\t\tmesh.normals = [V3.X.negated(), V3.X, V3.Y.negated(), V3.Y, V3.Z.negated(), V3.Z].map(v => [v, v, v, v]).concatenated()\n\t\tfor (let i = 0; i < 6 * 4; i += 4) {\n\t\t\tpushQuad(mesh.TRIANGLES, 0 != i % 8,\n\t\t\t\tVERTEX_CORNERS[i], VERTEX_CORNERS[i + 1], VERTEX_CORNERS[i + 2], VERTEX_CORNERS[i + 3])\n\t\t}\n\t\t// indexes of LINES relative to UNIT_CUBE_CORNERS. Mapped to VERTEX_CORNERS.indexOf\n\t\t// so they make sense in the context of the mesh\n\t\tmesh.LINES = [\n\t\t\t0, 1,\n\t\t\t0, 2,\n\t\t\t1, 3,\n\t\t\t2, 3,\n\n\t\t\t0, 4,\n\t\t\t1, 5,\n\t\t\t2, 6,\n\t\t\t3, 7,\n\n\t\t\t4, 5,\n\t\t\t4, 6,\n\t\t\t5, 7,\n\t\t\t6, 7,\n\t\t].map(i => VERTEX_CORNERS.indexOf(i))\n\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\tstatic isocahedron() {\n\t\treturn Mesh.sphere(0)\n\t}\n\n\tstatic sphere2(las: int, longs: int) {\n\t\tconst baseVertices = arrayFromFunction(las, i => {\n\t\t\tconst angle = i / (las - 1) * PI - PI / 2\n\t\t\treturn new V3(0, cos(angle), sin(angle))\n\t\t})\n\t\treturn Mesh.rotation(baseVertices, {anchor: V3.O, dir1: V3.Z}, 2 * PI, longs, true, baseVertices)\n\t}\n\n\t/**\n\t * Returns a sphere mesh with radius 1 created by subdividing the faces of a isocahedron (20-sided) recursively\n\t * The sphere is positioned at the origin\n\t * @param subdivisions\n\t *      How many recursive divisions to do. A subdivision divides a triangle into 4,\n\t *      so the total number of triangles is 20 * 4^subdivisions\n\t * @returns\n\t *      Contains vertex and normal1 buffers and index buffers for triangles and LINES\n\t */\n\tstatic sphere(subdivisions: int = 3) {\n\t\tconst golden = (1 + Math.sqrt(5)) / 2, u = new V3(1, golden, 0).unit(), s = u.x, t = u.y\n\t\t// base vertices of isocahedron\n\t\tconst vertices = [\n\t\t\tnew V3(-s, t, 0),\n\t\t\tnew V3(s, t, 0),\n\t\t\tnew V3(-s, -t, 0),\n\t\t\tnew V3(s, -t, 0),\n\n\t\t\tnew V3(0, -s, t),\n\t\t\tnew V3(0, s, t),\n\t\t\tnew V3(0, -s, -t),\n\t\t\tnew V3(0, s, -t),\n\n\t\t\tnew V3(t, 0, -s),\n\t\t\tnew V3(t, 0, s),\n\t\t\tnew V3(-t, 0, -s),\n\t\t\tnew V3(-t, 0, s)]\n\t\t// base triangles of isocahedron\n\t\tconst triangles = [\n\t\t\t// 5 faces around point 0\n\t\t\t0, 11, 5,\n\t\t\t0, 5, 1,\n\t\t\t0, 1, 7,\n\t\t\t0, 7, 10,\n\t\t\t0, 10, 11,\n\n\t\t\t// 5 adjacent faces\n\t\t\t1, 5, 9,\n\t\t\t5, 11, 4,\n\t\t\t11, 10, 2,\n\t\t\t10, 7, 6,\n\t\t\t7, 1, 8,\n\n\t\t\t// 5 faces around point 3\n\t\t\t3, 9, 4,\n\t\t\t3, 4, 2,\n\t\t\t3, 2, 6,\n\t\t\t3, 6, 8,\n\t\t\t3, 8, 9,\n\n\t\t\t// 5 adjacent faces\n\t\t\t4, 9, 5,\n\t\t\t2, 4, 11,\n\t\t\t6, 2, 10,\n\t\t\t8, 6, 7,\n\t\t\t9, 8, 1,\n\t\t]\n\n\t\t/**\n\t\t * Tesselates triangle a b c\n\t\t * a b c must already be in vertices with the indexes ia ib ic\n\t\t * res is the number of subdivisions to do. 0 just results in triangle and line indexes being added to the\n\t\t * respective buffers.\n\t\t */\n\t\tfunction tesselateRecursively(a: V3, b: V3, c: V3, res: int, vertices: V3[], triangles: int[],\n\t\t\t\t\t\t\t\t\t  ia: int, ib: int, ic: int, lines: int[]) {\n\t\t\tif (0 == res) {\n\t\t\t\ttriangles.push(ia, ib, ic)\n\t\t\t\tif (ia < ib) lines.push(ia, ib)\n\t\t\t\tif (ib < ic) lines.push(ib, ic)\n\t\t\t\tif (ic < ia) lines.push(ic, ia)\n\t\t\t} else {\n\t\t\t\t// subdivide the triangle abc into 4 by adding a vertex (with the correct distance from the origin)\n\t\t\t\t// between each segment ab, bc and cd, then calling the function recursively\n\t\t\t\tconst abMid1 = a.plus(b).toLength(1), bcMid1 = b.plus(c).toLength(1), caMid1 = c.plus(a).toLength(1)\n\t\t\t\t// indexes of new vertices:\n\t\t\t\tconst iabm = vertices.length, ibcm = iabm + 1, icam = iabm + 2\n\t\t\t\tvertices.push(abMid1, bcMid1, caMid1)\n\t\t\t\ttesselateRecursively(abMid1, bcMid1, caMid1, res - 1, vertices, triangles, iabm, ibcm, icam, lines)\n\t\t\t\ttesselateRecursively(a, abMid1, caMid1, res - 1, vertices, triangles, ia, iabm, icam, lines)\n\t\t\t\ttesselateRecursively(b, bcMid1, abMid1, res - 1, vertices, triangles, ib, ibcm, iabm, lines)\n\t\t\t\ttesselateRecursively(c, caMid1, bcMid1, res - 1, vertices, triangles, ic, icam, ibcm, lines)\n\t\t\t}\n\t\t}\n\n\t\tconst mesh = new Mesh()\n\t\t\t.addVertexBuffer('normals', 'LGL_Normal')\n\t\t\t.addIndexBuffer('TRIANGLES')\n\t\t\t.addIndexBuffer('LINES')\n\t\tmesh.vertices.push(...vertices)\n\t\tsubdivisions = undefined == subdivisions ? 4 : subdivisions\n\t\tfor (let i = 0; i < 20; i++) {\n\t\t\tconst [ia, ic, ib] = triangles.slice(i * 3, i * 3 + 3)\n\t\t\ttesselateRecursively(vertices[ia], vertices[ic], vertices[ib], subdivisions, mesh.vertices, mesh.TRIANGLES, ia, ic, ib, mesh.LINES)\n\t\t}\n\n\t\tmesh.normals = mesh.vertices\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\tstatic aabb(aabb: AABB) {\n\t\tconst matrix = M4.multiplyMultiple(\n\t\t\tM4.translate(aabb.min),\n\t\t\tM4.scale(aabb.size().max(new V3(NLA_PRECISION, NLA_PRECISION, NLA_PRECISION))))\n\t\tconst mesh = Mesh.cube().transform(matrix)\n\t\t// mesh.vertices = aabb.corners()\n\t\tmesh.computeNormalLines(20)\n\t\tmesh.compile()\n\n\t\treturn mesh\n\t}\n\n\n\tstatic offsetVertices(vertices: V3[], offset: V3, close: boolean): Mesh & { TRIANGLES: int[], coords: [number, number][] }\n\tstatic offsetVertices(vertices: V3[], offset: V3, close: boolean, normals: V3[]): Mesh & { TRIANGLES: int[], coords: [number, number][], normals: V3[] }\n\tstatic offsetVertices(vertices: V3[], offset: V3, close: boolean, normals?: V3[]) {\n\t\tassertVectors.apply(undefined, vertices)\n\t\tassertVectors(offset)\n\n\t\tconst mesh = new Mesh()\n\t\t\t.addIndexBuffer('TRIANGLES')\n\t\t\t.addVertexBuffer('coords', 'LGL_TexCoord')\n\t\tnormals && mesh.addVertexBuffer('normals', 'LGL_Normal')\n\t\tmesh.vertices = vertices.concat(vertices.map(v => v.plus(offset)))\n\t\tconst vl = vertices.length\n\t\tmesh.coords = arrayFromFunction(vl * 2, (i): [number, number] => [(i % vl) / vl, (i / vl) | 0])\n\n\t\tconst triangles = mesh.TRIANGLES\n\t\tfor (let i = 0; i < vertices.length - 1; i++) {\n\t\t\tpushQuad(triangles, false,\n\t\t\t\ti, i + 1,\n\t\t\t\tvertices.length + i, vertices.length + i + 1)\n\t\t}\n\t\tif (close) {\n\t\t\tpushQuad(triangles, false, 0, vertices.length - 1, vertices.length, vertices.length * 2 - 1)\n\t\t}\n\t\tif (normals) {\n\t\t\tmesh.normals = normals.concat(normals)\n\t\t}\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\t// Creates a new $Mesh by rotating $vertices by $totalRads around $lineAxis (according to the right-hand\n\t// rule). $steps is the number of steps to take. $close is whether the vertices of the first and last step\n\t// should be connected by triangles. If $normals is set (pass an array of V3s of the same length as $vertices),\n\t// these will also be rotated and correctly added to the mesh.\n\t// @example const precious = Mesh.rotation([V(10, 0, -2), V(10, 0, 2), V(11, 0, 2), V(11, 0, -2)], , L3.Z, 512)\n\tstatic rotation(vertices: V3[], lineAxis: { anchor: V3, dir1: V3 }, totalRads: raddd, steps: int, close = true, normals?: V3[]) {\n\t\tconst mesh = new Mesh().addIndexBuffer('TRIANGLES')\n\t\tnormals && mesh.addVertexBuffer('normals', 'LGL_Normal')\n\t\tconst vc = vertices.length, vTotal = vc * steps\n\n\t\tconst rotMat = new M4()\n\t\tconst triangles = mesh.TRIANGLES\n\t\tfor (let i = 0; i < steps; i++) {\n\t\t\t// add triangles\n\t\t\tconst rads = totalRads / steps * i\n\t\t\tM4.rotateLine(lineAxis.anchor, lineAxis.dir1, rads, rotMat)\n\t\t\tmesh.vertices.push(...rotMat.transformedPoints(vertices))\n\n\t\t\tnormals && mesh.normals!.push(...rotMat.transformedVectors(normals))\n\t\t\tif (close || i !== steps - 1) {\n\t\t\t\tfor (let j = 0; j < vc - 1; j++) {\n\t\t\t\t\tpushQuad(triangles, false,\n\t\t\t\t\t\ti * vc + j + 1, i * vc + j,\n\t\t\t\t\t\t((i + 1) * vc + j + 1) % vTotal, ((i + 1) * vc + j) % vTotal)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\tstatic parametric(pF: (d: number, z: number) => V3, pN: (d: number, z: number) => V3,\n\t\t\t\t\t  sMin: number, sMax: number, tMin: number, tMax: number, sRes: number, tRes: number) {\n\t\tconst mesh = new Mesh()\n\t\t\t.addVertexBuffer('normals', 'LGL_Normal')\n\t\t\t.addIndexBuffer('TRIANGLES')\n\t\tfor (let si = 0; si <= sRes; si++) {\n\t\t\tconst s = lerp(sMin, sMax, si / sRes)\n\t\t\tfor (let ti = 0; ti <= tRes; ti++) {\n\t\t\t\tconst t = lerp(tMin, tMax, ti / tRes)\n\t\t\t\tmesh.vertices.push(pF(s, t))\n\t\t\t\tmesh.normals.push(pN(s, t))\n\t\t\t\tif (ti < tRes && si < sRes) {\n\t\t\t\t\tconst offset = ti + si * (tRes + 1)\n\t\t\t\t\tpushQuad(mesh.TRIANGLES, false,\n\t\t\t\t\t\toffset, offset + tRes + 1, offset + 1, offset + tRes + 2)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\tstatic load(json: { vertices: Tuple3<number>[], triangles?: Tuple3<number>[], normals?: Tuple3<number>[] }) {\n\t\tconst mesh = new Mesh()\n\t\tif (Array.isArray(json.vertices[0])) {\n\t\t\tmesh.vertices = json.vertices.map(x => V(x))\n\t\t} else {\n\t\t\tthrow new Error()\n\t\t}\n\t\tif (json.triangles) {\n\t\t\tmesh.addIndexBuffer('TRIANGLES')\n\t\t\t;(mesh as any).TRIANGLES = json.triangles\n\t\t}\n\t\tif (json.normals) {\n\t\t\tmesh.addVertexBuffer('normals', 'LGL_Normal')\n\t\t\t;(mesh as any).normals = json.normals\n\t\t}\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n}","/* tslint:disable:no-string-literal */\nimport {assert, assertf, assertInst, assertVectors, int, M4, NLA_DEBUG, V3} from 'ts3dutils'\n\nimport {Buffer} from './Buffer'\nimport {currentGL, GL_COLOR, LightGLContext} from './LightGLContext'\nimport {Mesh} from './Mesh'\n\nconst WGL = WebGLRenderingContext\n\n/**\n * These are all the draw modes usable in OpenGL ES\n */\nexport enum DRAW_MODES {\n\tPOINTS = WGL.POINTS,\n\tLINES = WGL.LINES,\n\tLINE_STRIP = WGL.LINE_STRIP,\n\tLINE_LOOP = WGL.LINE_LOOP,\n\tTRIANGLES = WGL.TRIANGLES,\n\tTRIANGLE_STRIP = WGL.TRIANGLE_STRIP,\n\tTRIANGLE_FAN = WGL.TRIANGLE_FAN\n}\n\nexport type DRAW_MODES_ENUM = keyof typeof DRAW_MODES\nexport const SHADER_VAR_TYPES = ['FLOAT', 'FLOAT_MAT2', 'FLOAT_MAT3', 'FLOAT_MAT4', 'FLOAT_VEC2', 'FLOAT_VEC3', 'FLOAT_VEC4', 'INT', 'INT_VEC2', 'INT_VEC3', 'INT_VEC4', 'UNSIGNED_INT']\n\nconst DRAW_MODE_CHECKS: { [type: string]: (x: int) => boolean } = {\n\t[DRAW_MODES.POINTS]: x => true,\n\t[DRAW_MODES.LINES]: x => 0 == x % 2, // divisible by 2\n\t[DRAW_MODES.LINE_STRIP]: x => x > 2, // need at least 2\n\t[DRAW_MODES.LINE_LOOP]: x => x > 2, // more like > 3, but oh well\n\t[DRAW_MODES.TRIANGLES]: x => 0 == x % 3, // divisible by 3\n\t[DRAW_MODES.TRIANGLE_STRIP]: x => x > 3,\n\t[DRAW_MODES.TRIANGLE_FAN]: x => x > 3,\n}\n\nexport function isArray<T>(obj: any): obj is T[] {\n\treturn Array == obj.constructor || Float32Array == obj.constructor || Float64Array == obj.constructor\n}\n\nexport interface UniformTypesMap {\n\tFLOAT_VEC4: GL_COLOR | V3\n\tFLOAT_VEC3: [number, number, number] | V3\n\tFLOAT_VEC2: [number, number] | V3\n\tFLOAT: number\n\tINT: int\n\tFLOAT_MAT4: M4 | number[]\n\tFLOAT_MAT3: M4 | number[]\n\tSAMPLER_2D: int\n\tBOOL: boolean\n}\n\nfunction isFloatArray(obj: any): obj is number[] | Float64Array | Float32Array {\n\treturn Float32Array == obj.constructor || Float64Array == obj.constructor ||\n\t\tArray.isArray(obj) && obj.every(x => 'number' == typeof x)\n}\n\nfunction isIntArray(x: any) {\n\tif ([Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array]\n\t\t\t.some(y => x instanceof y)) {\n\t\treturn true\n\t}\n\treturn (x instanceof Float32Array || x instanceof Float64Array || Array.isArray(x)) &&\n\t\t(x as number[]).every(x => Number.isInteger(x))\n}\n\nexport type ShaderType<UniformTypes> = string & { T?: UniformTypes }\n\n//const x:keyof UniformTypesMap = undefined as 'FLOAT_VEC4' | 'FLOAT_VEC3'\nexport class Shader<UniformTypes extends { [uniformName: string]: keyof UniformTypesMap } = any> {\n\tprogram: WebGLProgram\n\tactiveMatrices: { [matrixName: string ]: boolean }\n\tattributes: { [attributeName: string ]: number }\n\tuniformLocations: { [uniformName: string ]: WebGLUniformLocation }\n\tuniformInfos: { [uniformName: string ]: WebGLActiveInfo }\n\tprojectionMatrixVersion = -1\n\tmodelViewMatrixVersion = -1\n\tgl: LightGLContext\n\n\tstatic create<S extends { [uniformName: string]: keyof UniformTypesMap },\n\t\tT extends { [uniformName: string]: keyof UniformTypesMap }>\n\t(vertexSource: ShaderType<S>, fragmentSource: ShaderType<T>): Shader<S & T> {\n\t\treturn new Shader(vertexSource, fragmentSource) as any\n\t}\n\n\t/**\n\t * Provides a convenient wrapper for WebGL shaders. A few uniforms and attributes,\n\t * prefixed with `gl_`, are automatically added to all shader sources to make\n\t * simple shaders easier to write.\n\t * Headers for the following variables are automatically prepended to the passed source. The correct variables\n\t * are also automatically passed to the shader when drawing.\n\t *\n\t * For vertex and fragment shaders:\n\t uniform mat3 LGL_NormalMatrix;\n\t uniform mat4 LGL_ModelViewMatrix;\n\t uniform mat4 LGL_ProjectionMatrix;\n\t uniform mat4 LGL_ModelViewProjectionMatrix;\n\t uniform mat4 LGL_ModelViewMatrixInverse;\n\t uniform mat4 LGL_ProjectionMatrixInverse;\n\t uniform mat4 LGL_ModelViewProjectionMatrixInverse;\n\t *\n\t *\n\t * Example usage:\n\t *\n\t *  const shader = new GL.Shader(\n\t *      `void main() { gl_Position = LGL_ModelViewProjectionMatrix * LGL_Vertex; }`,\n\t *      `uniform vec4 color; void main() { gl_FragColor = color; }`)\n\t *\n\t *  shader.uniforms({ color: [1, 0, 0, 1] }).draw(mesh)\n\t *\n\t * Compiles a shader program using the provided vertex and fragment shaders.\n\t */\n\tconstructor(vertexSource: string, fragmentSource: string, gl = currentGL()) {\n\n\t\t// Headers are prepended to the sources to provide some automatic functionality.\n\t\tconst header = `\n\t\tuniform mat3 LGL_NormalMatrix;\n\t\tuniform mat4 LGL_ModelViewMatrix;\n\t\tuniform mat4 LGL_ProjectionMatrix;\n\t\tuniform mat4 LGL_ModelViewProjectionMatrix;\n\t\tuniform mat4 LGL_ModelViewMatrixInverse;\n\t\tuniform mat4 LGL_ProjectionMatrixInverse;\n\t\tuniform mat4 LGL_ModelViewProjectionMatrixInverse;\n\t`\n\t\tconst vertexHeader = header + `\n\t\tattribute vec4 LGL_Vertex;\n\t\tattribute vec2 LGL_TexCoord;\n\t\tattribute vec3 LGL_Normal;\n\t\tattribute vec4 LGL_Color;\n\t`\n\t\tconst fragmentHeader = `  precision highp float;` + header\n\n\t\tconst matrixNames = header.match(/\\bLGL_\\w+/g)\n\n\t\t// Compile and link errors are thrown as strings.\n\t\tfunction compileSource(type: number, source: string) {\n\t\t\tconst shader = gl.createShader(type)\n\t\t\tgl.shaderSource(shader, source)\n\t\t\tgl.compileShader(shader)\n\t\t\tif (!gl.getShaderParameter(shader, WGL.COMPILE_STATUS)) {\n\t\t\t\tthrow new Error('compile error: ' + gl.getShaderInfoLog(shader))\n\t\t\t}\n\t\t\treturn shader\n\t\t}\n\n\t\tthis.gl = gl\n\t\tconst program = gl.createProgram()\n\t\tif (!program) {\n\t\t\tgl.handleError()\n\t\t}\n\t\tthis.program = program!\n\t\tgl.attachShader(this.program, compileSource(WGL.VERTEX_SHADER, vertexHeader + vertexSource))\n\t\tgl.attachShader(this.program, compileSource(WGL.FRAGMENT_SHADER, fragmentHeader + fragmentSource))\n\t\tgl.linkProgram(this.program)\n\t\tif (!gl.getProgramParameter(this.program, WGL.LINK_STATUS)) {\n\t\t\tthrow new Error('link error: ' + gl.getProgramInfoLog(this.program))\n\t\t}\n\t\tthis.attributes = {}\n\t\tthis.uniformLocations = {}\n\n\t\t// Check for the use of built-in matrices that require expensive matrix\n\t\t// multiplications to compute, and record these in `activeMatrices`.\n\t\tthis.activeMatrices = {}\n\t\tmatrixNames && matrixNames.forEach(name => {\n\t\t\tif (gl.getUniformLocation(this.program, name)) {\n\t\t\t\tthis.activeMatrices[name] = true\n\t\t\t}\n\t\t})\n\n\t\tthis.uniformInfos = {}\n\t\tfor (let i = gl.getProgramParameter(this.program, WGL.ACTIVE_UNIFORMS); i-- > 0;) {\n\t\t\t// see https://www.khronos.org/registry/OpenGL-Refpages/es2.0/xhtml/glGetActiveUniform.xml\n\t\t\t// this.program has already been checked\n\t\t\t// i is in bounds\n\t\t\tconst info = gl.getActiveUniform(this.program, i)!\n\t\t\tthis.uniformInfos[info.name] = info\n\t\t}\n\t\tgl.handleError()\n\t}\n\n\n\t/**\n\t * Set a uniform for each property of `uniforms`. The correct `viewerGL.uniform*()` method is inferred from the\n\t * value types and from the stored uniform sampler flags.\n\t */\n\tuniforms(uniforms: Partial<{ [K in keyof UniformTypes]: UniformTypesMap[UniformTypes[K]] }>): this {\n\t\tconst gl = this.gl\n\t\tgl.useProgram(this.program)\n\t\tgl.handleError()\n\n\t\tfor (const name in uniforms) {\n\t\t\tconst location = this.uniformLocations[name] || gl.getUniformLocation(this.program, name)\n\t\t\t!location && console.warn(name + ' uniform is not used in shader')\n\t\t\tif (!location) continue\n\t\t\tthis.uniformLocations[name] = location\n\t\t\tlet value: any = uniforms[name] as any\n\t\t\tconst info = this.uniformInfos[name]\n\t\t\tif (NLA_DEBUG) {\n\t\t\t\t// TODO: better errors\n\t\t\t\tif (gl.SAMPLER_2D == info.type || gl.SAMPLER_CUBE == info.type || gl.INT == info.type) {\n\t\t\t\t\tif (1 == info.size) {\n\t\t\t\t\t\tassert(Number.isInteger(value))\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert(isIntArray(value) && value.length == info.size, 'value must be int array if info.size != 1')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tassert(gl.FLOAT != info.type ||\n\t\t\t\t\t(1 == info.size && 'number' === typeof value || isFloatArray(value) && info.size == value.length))\n\t\t\t\tassert(gl.FLOAT_VEC3 != info.type ||\n\t\t\t\t\t(1 == info.size && value instanceof V3 ||\n\t\t\t\t\t\tArray.isArray(value) && info.size == value.length && assertVectors(...value)))\n\t\t\t\tassert(gl.FLOAT_VEC4 != info.type || 1 != info.size || isFloatArray(value) && value.length == 4)\n\t\t\t\tassert(gl.FLOAT_MAT4 != info.type || value instanceof M4, () => value.toSource())\n\t\t\t\tassert(gl.FLOAT_MAT3 != info.type || value.length == 9 || value instanceof M4)\n\t\t\t}\n\t\t\tif (value instanceof V3) {\n\t\t\t\tvalue = value.toArray()\n\t\t\t}\n\t\t\tif (gl.FLOAT_VEC4 == info.type && info.size != 1) {\n\t\t\t\tgl.uniform4fv(location, value.concatenated())\n\t\t\t} else if (value.length) {\n\t\t\t\tswitch (value.length) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tgl.uniform1fv(location, value)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tgl.uniform2fv(location, value)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tgl.uniform3fv(location, value)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tgl.uniform4fv(location, value)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t// Matrices are automatically transposed, since WebGL uses column-major\n\t\t\t\t\t// indices instead of row-major indices.\n\t\t\t\t\tcase 9:\n\t\t\t\t\t\tgl.uniformMatrix3fv(location, false, new Float32Array([\n\t\t\t\t\t\t\tvalue[0], value[3], value[6],\n\t\t\t\t\t\t\tvalue[1], value[4], value[7],\n\t\t\t\t\t\t\tvalue[2], value[5], value[8],\n\t\t\t\t\t\t]))\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 16:\n\t\t\t\t\t\tgl.uniformMatrix4fv(location, false, new Float32Array([\n\t\t\t\t\t\t\tvalue[0], value[4], value[8], value[12],\n\t\t\t\t\t\t\tvalue[1], value[5], value[9], value[13],\n\t\t\t\t\t\t\tvalue[2], value[6], value[10], value[14],\n\t\t\t\t\t\t\tvalue[3], value[7], value[11], value[15],\n\t\t\t\t\t\t]))\n\t\t\t\t\t\tbreak\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error('don\\'t know how to load uniform \"' + name + '\" of length ' + value.length)\n\t\t\t\t}\n\t\t\t} else if ('number' == typeof value) {\n\t\t\t\tif (gl.SAMPLER_2D == info.type || gl.SAMPLER_CUBE == info.type || gl.INT == info.type) {\n\t\t\t\t\tgl.uniform1i(location, value)\n\t\t\t\t} else {\n\t\t\t\t\tgl.uniform1f(location, value)\n\t\t\t\t}\n\t\t\t} else if ('boolean' == typeof value) {\n\t\t\t\tgl.uniform1i(location, +value)\n\t\t\t} else if (value instanceof M4) {\n\t\t\t\tconst m = value.m\n\t\t\t\tif (gl.FLOAT_MAT4 == info.type) {\n\t\t\t\t\tgl.uniformMatrix4fv(location, false, [\n\t\t\t\t\t\tm[0], m[4], m[8], m[12],\n\t\t\t\t\t\tm[1], m[5], m[9], m[13],\n\t\t\t\t\t\tm[2], m[6], m[10], m[14],\n\t\t\t\t\t\tm[3], m[7], m[11], m[15]])\n\t\t\t\t} else if (gl.FLOAT_MAT3 == info.type) {\n\t\t\t\t\tgl.uniformMatrix3fv(location, false, [\n\t\t\t\t\t\tm[0], m[4], m[8],\n\t\t\t\t\t\tm[1], m[5], m[9],\n\t\t\t\t\t\tm[2], m[6], m[10]])\n\t\t\t\t} else if (gl.FLOAT_MAT2 == info.type) {\n\t\t\t\t\tgl.uniformMatrix2fv(location, false, new Float32Array([\n\t\t\t\t\t\tm[0], m[4],\n\t\t\t\t\t\tm[1], m[5]]))\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(`Can't assign M4 to ${info.type}`)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new Error('attempted to set uniform \"' + name + '\" to invalid value ' + value)\n\t\t\t}\n\t\t\tgl.handleError()\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Sets all uniform matrix attributes, binds all relevant buffers, and draws the mesh geometry as indexed\n\t * triangles or indexed LINES. Set `mode` to `WGL.LINES` (and either add indices to `LINES` or call\n\t * `computeWireframe()`) to draw the mesh in wireframe.\n\t *\n\t * @param mesh\n\t * @param mode Defaults to 'TRIANGLES'. Must be passed as string so the correct index buffer can be\n\t *     automatically drawn.\n\t * @param start int\n\t * @param count int\n\t */\n\tdraw(mesh: Mesh, mode: DRAW_MODES = DRAW_MODES.TRIANGLES, start?: int, count?: int): this {\n\t\tassert(mesh.hasBeenCompiled, 'mesh.hasBeenCompiled')\n\t\tassert(undefined != DRAW_MODES[mode])\n\t\tconst modeStr: string = DRAW_MODES[mode]\n\t\t// assert(mesh.indexBuffers[modeStr], `mesh.indexBuffers[${modeStr}] undefined`)\n\t\treturn this.drawBuffers(mesh.vertexBuffers, mesh.indexBuffers[modeStr], mode, start, count)\n\t}\n\n\t/**\n\t * Sets all uniform matrix attributes, binds all relevant buffers, and draws the\n\t * indexed mesh geometry. The `vertexBuffers` argument is a map from attribute\n\t * names to `Buffer` objects of type `WGL.ARRAY_BUFFER`, `indexBuffer` is a `Buffer`\n\t * object of type `WGL.ELEMENT_ARRAY_BUFFER`, and `mode` is a WebGL primitive mode\n\t * like `WGL.TRIANGLES` or `WGL.LINES`. This method automatically creates and caches\n\t * vertex attribute pointers for attributes as needed.\n\t */\n\tdrawBuffers(vertexBuffers: { [attributeName: string]: Buffer },\n\t\t\t\tindexBuffer: Buffer | undefined,\n\t\t\t\tmode: DRAW_MODES = DRAW_MODES.TRIANGLES,\n\t\t\t\tstart: int = 0, count?: int): this {\n\t\tconst gl = this.gl\n\t\tgl.handleError()\n\t\tassert(undefined != DRAW_MODES[mode])\n\t\tassertf(() => 1 <= Object.keys(vertexBuffers).length)\n\t\tObject.keys(vertexBuffers).forEach(key => assertInst(Buffer, vertexBuffers[key]))\n\n\t\t// Only varruct up the built-in matrices that are active in the shader\n\t\tconst on = this.activeMatrices\n\t\tconst modelViewMatrixInverse = (on['LGL_ModelViewMatrixInverse'] || on['LGL_NormalMatrix'])\n\t\t\t//&& this.modelViewMatrixVersion != gl.modelViewMatrixVersion\n\t\t\t&& gl.modelViewMatrix.inversed()\n\t\tconst projectionMatrixInverse = on['LGL_ProjectionMatrixInverse']\n\t\t\t//&& this.projectionMatrixVersion != gl.projectionMatrixVersion\n\t\t\t&& gl.projectionMatrix.inversed()\n\t\tconst modelViewProjectionMatrix = (on['LGL_ModelViewProjectionMatrix'] || on['LGL_ModelViewProjectionMatrixInverse'])\n\t\t\t//&& (this.projectionMatrixVersion != gl.projectionMatrixVersion || this.modelViewMatrixVersion !=\n\t\t\t// gl.modelViewMatrixVersion)\n\t\t\t&& gl.projectionMatrix.times(gl.modelViewMatrix)\n\n\t\tconst uni: { [matrixName: string ]: M4 } = {} // Uniform Matrices\n\t\ton['LGL_ModelViewMatrix']\n\t\t&& this.modelViewMatrixVersion != gl.modelViewMatrixVersion\n\t\t&& (uni['LGL_ModelViewMatrix'] = gl.modelViewMatrix)\n\t\ton['LGL_ModelViewMatrixInverse'] && (uni['LGL_ModelViewMatrixInverse'] = modelViewMatrixInverse as M4)\n\t\ton['LGL_ProjectionMatrix']\n\t\t&& this.projectionMatrixVersion != gl.projectionMatrixVersion\n\t\t&& (uni['LGL_ProjectionMatrix'] = gl.projectionMatrix)\n\t\tprojectionMatrixInverse && (uni['LGL_ProjectionMatrixInverse'] = projectionMatrixInverse)\n\t\tmodelViewProjectionMatrix && (uni['LGL_ModelViewProjectionMatrix'] = modelViewProjectionMatrix)\n\t\tmodelViewProjectionMatrix && on['LGL_ModelViewProjectionMatrixInverse']\n\t\t&& (uni['LGL_ModelViewProjectionMatrixInverse'] = modelViewProjectionMatrix.inversed())\n\t\ton['LGL_NormalMatrix']\n\t\t&& this.modelViewMatrixVersion != gl.modelViewMatrixVersion\n\t\t&& (uni['LGL_NormalMatrix'] = (modelViewMatrixInverse as M4).transposed())\n\t\tthis.uniforms(uni as any)\n\t\tthis.projectionMatrixVersion = gl.projectionMatrixVersion\n\t\tthis.modelViewMatrixVersion = gl.modelViewMatrixVersion\n\n\t\t// Create and enable attribute pointers as necessary.\n\t\tlet minVertexBufferLength = Infinity\n\t\tfor (const attribute in vertexBuffers) {\n\t\t\tconst buffer = vertexBuffers[attribute]\n\t\t\tassert(buffer.hasBeenCompiled)\n\t\t\tconst location = this.attributes[attribute] || gl.getAttribLocation(this.program, attribute)\n\t\t\tgl.handleError()\n\t\t\tif (location == -1 || !buffer.buffer) {\n\t\t\t\t//console.warn(`Vertex buffer ${attribute} was not bound because the attribute is not active.`)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tthis.attributes[attribute] = location\n\t\t\tgl.bindBuffer(WGL.ARRAY_BUFFER, buffer.buffer)\n\t\t\tgl.handleError()\n\n\t\t\tgl.enableVertexAttribArray(location)\n\t\t\tgl.handleError()\n\n\t\t\tgl.vertexAttribPointer(location, buffer.spacing, WGL.FLOAT, false, 0, 0)\n\t\t\tgl.handleError()\n\n\t\t\tminVertexBufferLength = Math.min(minVertexBufferLength, buffer.count)\n\t\t}\n\n\t\t// Disable unused attribute pointers.\n\t\tfor (const attribute in this.attributes) {\n\t\t\tif (!(attribute in vertexBuffers)) {\n\t\t\t\tgl.disableVertexAttribArray(this.attributes[attribute])\n\t\t\t\tgl.handleError()\n\t\t\t}\n\t\t}\n\n\t\t// Draw the geometry.\n\t\tif (minVertexBufferLength) {\n\t\t\tcount = count || (indexBuffer ? indexBuffer.count : minVertexBufferLength)\n\t\t\tassert(DRAW_MODE_CHECKS[mode](count), 'count ' + count + ' doesn\\'t fulfill requirement '\n\t\t\t\t+ DRAW_MODE_CHECKS[mode].toString() + ' for mode ' + DRAW_MODES[mode])\n\n\t\t\tif (indexBuffer) {\n\t\t\t\tassert(indexBuffer.hasBeenCompiled)\n\t\t\t\tassert(minVertexBufferLength > indexBuffer.maxValue!)\n\t\t\t\tassert(count % indexBuffer.spacing == 0)\n\t\t\t\tassert(start % indexBuffer.spacing == 0)\n\t\t\t\tif (start + count > indexBuffer.count) {\n\t\t\t\t\tthrow new Error('Buffer not long enough for passed parameters start/length/buffer length' + ' ' + start + ' ' + count + ' ' + indexBuffer.count)\n\t\t\t\t}\n\t\t\t\tgl.bindBuffer(WGL.ELEMENT_ARRAY_BUFFER, indexBuffer.buffer!)\n\t\t\t\tgl.handleError()\n\t\t\t\t// start parameter has to be multiple of sizeof(WGL.UNSIGNED_SHORT)\n\t\t\t\tgl.drawElements(mode, count, WGL.UNSIGNED_SHORT, 2 * start)\n\t\t\t\tgl.handleError()\n\t\t\t} else {\n\t\t\t\tif (start + count > minVertexBufferLength) {\n\t\t\t\t\tthrow new Error('invalid')\n\t\t\t\t}\n\t\t\t\tgl.drawArrays(mode, start, count)\n\t\t\t\tgl.handleError()\n\t\t\t}\n\t\t\tgl.drawCallCount++\n\t\t}\n\n\t\treturn this\n\t}\n}","import chroma from 'chroma-js'\nimport {addOwnProperties, assert, DEG, int, M4, P3ZX, V, V3,} from 'ts3dutils'\n\nimport {Mesh} from './Mesh'\nimport {DRAW_MODES, Shader} from './Shader'\n\nexport type GL_COLOR = [number, number, number, number]\n/**\n * There's only one constant, use it for default values. Use chroma-js or similar for actual colors.\n */\nexport const GL_COLOR_BLACK: GL_COLOR = [0, 0, 0, 1]\n\nexport function currentGL(): LightGLContext {\n    return LightGLContext.gl\n}\n\nconst WGL = WebGLRenderingContext\n\nexport function isNumber(obj: any) {\n    const str = Object.prototype.toString.call(obj)\n    return str == '[object Number]' || str == '[object Boolean]'\n}\n\nexport type UniformType = V3 | M4 | number[] | boolean | number\n\nexport interface LightGLContext extends WebGLRenderingContext {}\nexport class LightGLContext {\n    modelViewMatrix: M4 = new M4()\n    projectionMatrix: M4 = new M4()\n    static readonly MODELVIEW: { __MATRIX_MODE_CONSTANT: any } = 0 as any\n    static readonly PROJECTION: { __MATRIX_MODE_CONSTANT: any } = 1 as any\n    MODELVIEW = LightGLContext.MODELVIEW\n    PROJECTION = LightGLContext.PROJECTION\n\n\n    static HALF_FLOAT_OES: int = 0x8D61\n    HALF_FLOAT_OES: int\n\n    private tempMatrix = new M4()\n    private resultMatrix = new M4()\n    private modelViewStack: M4[] = []\n    private projectionStack: M4[] = []\n    private currentMatrix: M4\n    private currentMatrixName: 'modelViewMatrix' | 'projectionMatrix'\n    private stack: M4[]\n\n    meshes: { [name: string]: Mesh }\n    shaders: { [name: string]: Shader }\n    public drawCallCount: int = 0\n    public projectionMatrixVersion: int = 0\n    public modelViewMatrixVersion: int = 0\n\n    protected constructor(gl: LightGLContext, private immediate = {\n        mesh: new Mesh()\n            .addVertexBuffer('coords', 'LGL_TexCoord')\n            .addVertexBuffer('colors', 'LGL_Color'),\n        mode: -1 as DRAW_MODES | -1,\n        coord: [0, 0] as [number, number],\n        color: [1, 1, 1, 1] as GL_COLOR,\n        pointSize: 1,\n        shader: new Shader(`\n            uniform float pointSize;\n            varying vec4 color;\n            varying vec2 coord;\n            void main() {\n                color = LGL_Color;\n                coord = LGL_TexCoord;\n                gl_Position = LGL_ModelViewProjectionMatrix * LGL_Vertex;\n                gl_PointSize = pointSize;\n            }\n        `, `\n            uniform sampler2D texture;\n            uniform float pointSize;\n            uniform bool useTexture;\n            varying vec4 color;\n            varying vec2 coord;\n            void main() {\n                gl_FragColor = color;\n                if (useTexture) gl_FragColor *= texture2D(texture, coord.xy);\n            }\n        `, gl),\n    }) {\n        this.matrixMode(LightGLContext.MODELVIEW)\n    }\n\n    /// Implement the OpenGL modelview and projection matrix stacks, along with some other useful GLU matrix functions.\n    matrixMode(mode: { __MATRIX_MODE_CONSTANT: any }): void {\n        switch (mode) {\n            case this.MODELVIEW:\n                this.currentMatrixName = 'modelViewMatrix'\n                //this.currentMatrix = this.modelViewMatrix\n                this.stack = this.modelViewStack\n                break\n            case this.PROJECTION:\n                this.currentMatrixName = 'projectionMatrix'\n                //this.currentMatrix = this.projectionMatrix\n                this.stack = this.projectionStack\n                break\n            default:\n                throw new Error('invalid matrix mode ' + mode)\n        }\n    }\n\n    loadIdentity(): void {\n        M4.identity(this[this.currentMatrixName])\n        this.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++\n    }\n\n    loadMatrix(m4: M4) {\n        M4.copy(m4, this[this.currentMatrixName])\n        this.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++\n    }\n\n    multMatrix(m4: M4) {\n        M4.multiply(this[this.currentMatrixName], m4, this.resultMatrix)\n        const temp = this.resultMatrix\n        this.resultMatrix = this[this.currentMatrixName]\n        this[this.currentMatrixName] = temp\n        this.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++\n    }\n\n    mirror(plane: { normal1: V3, w: number }) {\n        this.multMatrix(M4.mirror(plane))\n    }\n\n    perspective(fovDegrees: number, aspect: number, near: number, far: number, result?: M4) {\n        this.multMatrix(M4.perspectiveRad(fovDegrees * DEG, aspect, near, far, this.tempMatrix))\n    }\n\n    frustum(left: number, right: number, bottom: number, top: number, near: number, far: number) {\n        this.multMatrix(M4.frustum(left, right, bottom, top, near, far, this.tempMatrix))\n    }\n\n    ortho(left: number, right: number, bottom: number, top: number, near: number, far: number) {\n        this.multMatrix(M4.ortho(left, right, bottom, top, near, far, this.tempMatrix))\n    }\n\n    scale(x: number, y: number, z?: number): void\n    scale(scale: number): void\n    scale(v: V3): void\n    scale(...args: any[]) {\n        this.multMatrix((M4.scale as any)(...args, this.tempMatrix))\n    }\n\n    mirroredX() {\n        this.multMatrix(M4.mirror(P3ZX))\n    }\n\n    translate(x: number, y?: number, z?: number): void\n    translate(v: V3): void\n    translate(x: any, y?: any, z?: any) {\n        if (undefined !== y) {\n            this.multMatrix(M4.translate(x, y, z, this.tempMatrix))\n        } else {\n            this.multMatrix(M4.translate(x, this.tempMatrix))\n        }\n    }\n\n    rotate(angleDegrees: number, x: number, y: number, z: number) {\n        this.multMatrix(M4.rotate(angleDegrees * DEG, {x, y, z}, this.tempMatrix))\n    }\n\n    lookAt(eye: V3, center: V3, up: V3) {\n        this.multMatrix(M4.lookAt(eye, center, up, this.tempMatrix))\n    }\n\n    pushMatrix() {\n        this.stack.push(M4.copy(this[this.currentMatrixName]))\n    }\n\n    popMatrix() {\n        const pop = this.stack.pop()\n        assert(undefined !== pop)\n        this[this.currentMatrixName] = pop as M4\n        this.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++\n    }\n\n    /**\n     * World coordinates (WC) to screen/window coordinates matrix\n     */\n    wcToWindowMatrix() {\n        const viewport = this.getParameter(this.VIEWPORT)\n        const [x, y, w, h] = viewport\n        const viewportToScreenMatrix = new M4([\n            w / 2, 0, 0, x + w / 2,\n            h / 2, 0, 0, y + h / 2,\n            0, 0, 1, 0,\n            0, 0, 0, 1,\n        ])\n        return M4.multiplyMultiple(viewportToScreenMatrix, this.projectionMatrix, this.modelViewMatrix)\n    }\n\n    /////////// IMMEDIATE MODE\n    // ### Immediate mode\n    //\n    // Provide an implementation of OpenGL's deprecated immediate mode. This is\n    // deprecated for a reason: constantly re-specifying the geometry is a bad\n    // idea for performance. You should use a `GL.Mesh` instead, which specifies\n    // the geometry once and caches it on the graphics card. Still, nothing\n    // beats a quick `viewerGL.begin(WGL.POINTS); viewerGL.vertex(1, 2, 3); viewerGL.end();` for\n    // debugging. This intentionally doesn't implement fixed-function lighting\n    // because it's only meant for quick debugging tasks.\n\n\n    pointSize(pointSize: number): void {\n        this.immediate.shader.uniforms({pointSize: pointSize})\n    }\n\n    begin(mode: DRAW_MODES | -1) {\n        if (this.immediate.mode != -1) throw new Error('mismatched viewerGL.begin() and viewerGL.end() calls')\n        this.immediate.mode = mode\n        this.immediate.mesh.colors = []\n        this.immediate.mesh.coords = []\n        this.immediate.mesh.vertices = []\n    }\n\n    color(cssColor: string): void\n    color(r: number, g: number, b: number, a?: number): void\n    color(hexInt: int): void\n    color(glColor: GL_COLOR): void\n    color(...args: any[]) {\n        this.immediate.color =\n            (1 == args.length && Array.isArray(args[0]))\n                ? args[0]\n                : (1 == args.length && 'number' == typeof args[0])\n                ? hexIntToGLColor(args[0])\n                : (1 == args.length && 'string' == typeof args[0])\n                    ? chroma(args[0]).gl()\n                    : [args[0], args[1], args[2], args[3] || 0]\n    }\n\n    texCoord(s: number, t: number): void\n    texCoord(coords: [number, number]): void\n    texCoord(coords: { x: number, y: number }): void\n    texCoord(...args: any[]) {\n        this.immediate.coord = V.apply(undefined, args).toArray(2)\n    }\n\n    vertex(v: V3): void\n    vertex(x: number, y: number, z: number): void\n    vertex(...args: any[]) {\n        this.immediate.mesh.colors.push(this.immediate.color)\n        this.immediate.mesh.coords.push(this.immediate.coord)\n        this.immediate.mesh.vertices.push(V.apply(undefined, args))\n    }\n\n    end(): void {\n        if (this.immediate.mode == -1) throw new Error('mismatched viewerGL.begin() and viewerGL.end() calls')\n        this.immediate.mesh.compile()\n        this.immediate.shader.uniforms({\n            useTexture: !!LightGLContext.gl.getParameter(WGL.TEXTURE_BINDING_2D),\n        }).drawBuffers(this.immediate.mesh.vertexBuffers, undefined, this.immediate.mode)\n        this.immediate.mode = -1\n    }\n\n\n    ////////// MISCELLANEOUS METHODS\n    static gl: LightGLContext\n\n    makeCurrent() {\n        LightGLContext.gl = this\n    }\n\n    /**\n     * Starts an animation loop.\n     */\n    animate(callback: (this: LightGLContext, domHighResTimeStamp: number, timeSinceLast: number) => void): () => void {\n        const requestAnimationFrame: typeof window.requestAnimationFrame =\n            window.requestAnimationFrame ||\n            (window as any).mozRequestAnimationFrame ||\n            window.webkitRequestAnimationFrame ||\n            function (callback: FrameRequestCallback) {\n                setTimeout(() => callback(performance.now()), 1000 / 60)\n            }\n        let time = performance.now(), keepUpdating = true\n        const update = (domHighResTimeStamp: number) => {\n            const now = performance.now()\n            callback.call(this, now, now - time)\n            time = now\n            keepUpdating && requestAnimationFrame(update)\n        }\n        requestAnimationFrame(update)\n        return () => { keepUpdating = false }\n    }\n\n\n    /**\n     * Provide an easy way to get a fullscreen app running, including an\n     * automatic 3D perspective projection matrix by default. This should be\n     * called once.\n     *\n     * Just fullscreen, no automatic camera:\n     *\n     *     viewerGL.fullscreen({ camera: false })\n     *\n     * Adjusting field of view, near plane distance, and far plane distance:\n     *\n     *     viewerGL.fullscreen({ fov: 45, near: 0.1, far: 1000 })\n     *\n     * Adding padding from the edge of the window:\n     *\n     *     viewerGL.fullscreen({ paddingLeft: 250, paddingBottom: 60 })\n     */\n    fullscreen(options: {\n        paddingTop?: number,\n        paddingLeft?: number,\n        paddingRight?: number,\n        paddingBottom?: number,\n        camera?: boolean,\n        fov?: number,\n        near?: number,\n        far?: number\n    } = {}) {\n\n        const top = options.paddingTop || 0\n        const left = options.paddingLeft || 0\n        const right = options.paddingRight || 0\n        const bottom = options.paddingBottom || 0\n        if (!document.body) {\n            throw new Error('document.body doesn\\'t exist yet (call viewerGL.fullscreen() from ' +\n                'window.onload() or from inside the <body> tag)')\n        }\n        document.body.appendChild(this.canvas)\n        document.body.style.overflow = 'hidden'\n        this.canvas.style.position = 'absolute'\n        this.canvas.style.left = left + 'px'\n        this.canvas.style.top = top + 'px'\n        const gl = this\n\n        function windowOnResize() {\n            gl.canvas.width = window.innerWidth - left - right\n            gl.canvas.height = window.innerHeight - top - bottom\n            gl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n            if (options.camera) {\n                gl.matrixMode(LightGLContext.PROJECTION)\n                gl.loadIdentity()\n                gl.perspective(options.fov || 45, gl.canvas.width / gl.canvas.height,\n                    options.near || 0.1, options.far || 1000)\n                gl.matrixMode(LightGLContext.MODELVIEW)\n            }\n        }\n\n        window.addEventListener('resize', windowOnResize)\n        windowOnResize()\n        return this\n    }\n\n    viewportFill() {\n        this.viewport(0, 0, this.canvas.width, this.canvas.height)\n    }\n\n    handleError(): void {\n        // const errorCode = this.getError()\n        // if (0 !== errorCode) {\n        //     throw new Error('' + errorCode + WGL_ERROR[errorCode])\n        // }\n    }\n\n\n    /**\n     * `create()` creates a new WebGL context and augments it with more methods. The alpha channel is disabled\n     * by default because it usually causes unintended transparencies in the canvas.\n     */\n    static create(options: { canvas?: HTMLCanvasElement, alpha?: boolean } = {}): LightGLContext {\n        const canvas = options.canvas || document.createElement('canvas')\n        if (!options.canvas) {\n            canvas.width = 800\n            canvas.height = 600\n        }\n        if (!('alpha' in options)) options.alpha = false\n        let newGL: LightGLContext | undefined = undefined\n        try {\n            newGL = canvas.getContext('webgl', options) as LightGLContext\n            console.log('getting context')\n        } catch (e) {\n            console.log(e, newGL)\n        }\n        try {\n            newGL = newGL || canvas.getContext('experimental-webgl', options) as LightGLContext\n        } catch (e) {\n            console.log(e, newGL)\n        }\n        if (!newGL) throw new Error('WebGL not supported')\n\n        LightGLContext.gl = newGL\n        addOwnProperties(newGL, LightGLContext.prototype)\n        addOwnProperties(newGL, new LightGLContext(newGL))\n        //addEventListeners(newGL)\n        return newGL\n    }\n}\n\nenum WGL_ERROR {\n    NO_ERROR = WGL.NO_ERROR,\n    INVALID_ENUM = WGL.INVALID_ENUM,\n    INVALID_VALUE = WGL.INVALID_VALUE,\n    INVALID_OPERATION = WGL.INVALID_OPERATION,\n    INVALID_FRAMEBUFFER_OPERATION = WGL.INVALID_FRAMEBUFFER_OPERATION,\n    OUT_OF_MEMORY = WGL.OUT_OF_MEMORY,\n    CONTEXT_LOST_WEBGL = WGL.CONTEXT_LOST_WEBGL,\n}\n\nLightGLContext.prototype.MODELVIEW = LightGLContext.MODELVIEW\nLightGLContext.prototype.PROJECTION = LightGLContext.PROJECTION\nLightGLContext.prototype.HALF_FLOAT_OES = LightGLContext.HALF_FLOAT_OES\n\n\n/**\n *\n * Push two triangles:\n * c - d\n * | \\ |\n * a - b\n */\nexport function pushQuad(triangles: int[], flipped: boolean, a: int, b: int, c: int, d: int) {\n    if (flipped) {\n        triangles.push(\n            a, c, b,\n            b, c, d)\n    } else {\n        triangles.push(\n            a, b, c,\n            b, d, c)\n    }\n}\n\nfunction hexIntToGLColor(color: int): GL_COLOR {\n    return [(color >> 16) / 255.0, ((color >> 8) & 0xff) / 255.0, (color & 0xff) / 255.0, 1.0]\n}\n","import {assert, int, NLA_DEBUG, V3} from 'ts3dutils'\nimport {currentGL, LightGLContext} from './LightGLContext'\n\nconst WGL = WebGLRenderingContext\n\nexport class Buffer {\n\tbuffer: WebGLBuffer | undefined\n\tdata: any[]\n\n\t/** Number of elements in buffer. 2 V3s is still 2, not 6. */\n\tcount: int\n\n\t/** Space between elements in buffer. 3 for V3s. */\n\tspacing: int\n\n\thasBeenCompiled: boolean\n\n\tname?: string\n\n\tmaxValue?: number\n\n\t/**\n\t * Provides a simple method of uploading data to a GPU buffer. Example usage:\n\t *\n\t *     const vertices = new Buffer(WGL.ARRAY_BUFFER, Float32Array)\n\t *     vertices.data = [[0, 0, 0], [1, 0, 0], [0, 1, 0], [1, 1, 0]]\n\t *     vertices.compile()\n\t *\n\t *     const indices = new Buffer(WGL.ELEMENT_ARRAY_BUFFER, Uint16Array)\n\t *     indices.data = [[0, 1, 2], [2, 1, 3]]\n\t *     indices.compile()\n\t *\n\t * Specifies the target to which the buffer object is bound.\n\t * The symbolic constant must be GL_ARRAY_BUFFER or GL_ELEMENT_ARRAY_BUFFER.\n\t */\n\tconstructor(readonly target: int, readonly type: typeof Float32Array | typeof Uint16Array) {\n\t\tassert(target == WGL.ARRAY_BUFFER || target == WGL.ELEMENT_ARRAY_BUFFER, 'target == WGL.ARRAY_BUFFER || target == WGL.ELEMENT_ARRAY_BUFFER')\n\t\tassert(type == Float32Array || type == Uint16Array, 'type == Float32Array || type == Uint16Array')\n\t\tthis.buffer = undefined\n\t\tthis.type = type\n\t\tthis.data = []\n\t\tthis.count = 0\n\t\tthis.spacing = 0\n\t\tthis.hasBeenCompiled = false\n\t}\n\n\t/**\n\t * Upload the contents of `data` to the GPU in preparation for rendering. The data must be a list of lists\n\t * where each inner list has the same length. For example, each element of data for vertex normals would be a\n\t * list of length three. This will remember the data length and element length for later use by shaders.\n\t *\n\t * This could have used `[].concat.apply([], this.data)` to flatten the array but Google\n\t * Chrome has a maximum number of arguments so the concatenations are chunked to avoid that limit.\n\t *\n\t * @param type Either `WGL.STATIC_DRAW` or `WGL.DYNAMIC_DRAW`. Defaults to `WGL.STATIC_DRAW`\n\t */\n\tcompile(type: int = WGL.STATIC_DRAW, gl: LightGLContext = currentGL()): void {\n\t\tassert(WGL.STATIC_DRAW == type || WGL.DYNAMIC_DRAW == type, 'WGL.STATIC_DRAW == type || WGL.DYNAMIC_DRAW == type')\n\t\tgl.handleError()\n\t\tthis.buffer = this.buffer || gl.createBuffer()!\n\t\tgl.handleError()\n\t\tlet buffer: Float32Array | Uint16Array\n\t\tif (this.data.length == 0) {\n\t\t\tconsole.warn('empty buffer ' + this.name)\n\t\t\t//console.trace()\n\t\t}\n\t\tif (this.data.length == 0 || this.data[0] instanceof V3) {\n\t\t\tassert(!(this.data[0] instanceof V3) || this.type == Float32Array)\n\t\t\tV3.pack(this.data, buffer = new this.type(this.data.length * 3) as Float32Array) // asserts that all\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t // elements are V3s\n\t\t\tthis.spacing = 3\n\t\t\tthis.count = this.data.length\n\t\t\tthis.maxValue = 0\n\t\t} else {\n\t\t\t//assert(Array != this.data[0].constructor, this.name + this.data[0])\n\t\t\tif (Array.isArray(this.data[0])) {\n\t\t\t\tconst bufferLength = this.data.length * this.data[0].length\n\t\t\t\tbuffer = new this.type(bufferLength)\n\t\t\t\tlet i = this.data.length, destPtr = bufferLength\n\t\t\t\twhile (i--) {\n\t\t\t\t\tconst subArray = this.data[i]\n\t\t\t\t\tlet j = subArray.length\n\t\t\t\t\twhile (j--) {\n\t\t\t\t\t\tbuffer[--destPtr] = subArray[j]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tassert(0 == destPtr)\n\t\t\t} else {\n\t\t\t\tbuffer = new this.type(this.data)\n\t\t\t}\n\n\t\t\tconst spacing = this.data.length ? buffer.length / this.data.length : 0\n\t\t\tassert(spacing % 1 == 0, `buffer ${this.name} elements not of consistent size, average size is ` + spacing)\n\t\t\tif (NLA_DEBUG) {\n\t\t\t\tif (10000 <= buffer.length) {\n\t\t\t\t\tthis.maxValue = 0\n\t\t\t\t} else {\n\t\t\t\t\tthis.maxValue = Math.max.apply(undefined, buffer)\n\t\t\t\t}\n\t\t\t}\n\t\t\tassert(spacing !== 0)\n\t\t\tthis.spacing = spacing\n\t\t\tthis.count = this.data.length\n\t\t}\n\t\tgl.bindBuffer(this.target, this.buffer)\n\t\tgl.handleError()\n\t\tgl.bufferData(this.target, buffer, type)\n\t\tgl.handleError()\n\t\tthis.hasBeenCompiled = true\n\t}\n}","import {assert, int} from 'ts3dutils'\n\nimport {currentGL, LightGLContext} from './LightGLContext'\n\nexport interface TextureOptions {\n\twrap?: number // defaults to WGL.CLAMP_TO_EDGE, or set wrapS and wrapT individually.\n\twrapS?: number\n\twrapT?: number\n\tfilter?: number // defaults to WGL.LINEAR, or set minFilter and magFilter individually.\n\tminFilter?: number\n\tmagFilter?: number\n\tformat?: number // defaults to WGL.RGBA.\n\ttype?: number // defaults to WGL.UNSIGNED_BYTE.\n}\n\nexport class Texture {\n\theight: int\n\twidth: int\n\ttexture: WebGLTexture\n\t// e.g. viewerGL.UNSIGNED_BYTE, viewerGL.FLOAT\n\tformat: int\n\t// e.g. viewerGL.RGBA\n\ttype: int\n\n\t/**\n\t * Provides a simple wrapper around WebGL textures that supports render-to-texture.\n\t *\n\t * The arguments `width` and `height` give the size of the texture in texels.\n\t * WebGL texture dimensions must be powers of two unless `filter` is set to\n\t * either `WGL.NEAREST` or `WGL.LINEAR` and `wrap` is set to `WGL.CLAMP_TO_EDGE`\n\t * (which they are by default).\n\t *\n\t * Texture parameters can be passed in via the `options` argument.\n\t * Example usage:\n\t *\n\t *      let tex = new GL.Texture(256, 256, {\n\t\t *       magFilter: WGL.NEAREST,\n\t\t *       minFilter: WGL.LINEAR,\n\t\t *\n\t\t *       wrapS: WGL.REPEAT,\n\t\t *       wrapT: WGL.REPEAT,\n\t\t *\n\t\t *       format: WGL.RGB, // Defaults to WGL.RGBA\n\t\t *       type: WGL.FLOAT // Defaults to WGL.UNSIGNED_BYTE\n\t\t *     })\n\t *\n\t */\n\tconstructor(width: int, height: int, options: TextureOptions = {}, readonly gl = currentGL()) {\n\t\tthis.texture = gl.createTexture()!\n\t\tgl.handleError() // in case createTexture returns null & fails\n\t\tthis.width = width\n\t\tthis.height = height\n\t\tthis.format = options.format || gl.RGBA\n\t\tthis.type = options.type || gl.UNSIGNED_BYTE\n\t\tconst magFilter = options.filter || options.magFilter || gl.LINEAR\n\t\tconst minFilter = options.filter || options.minFilter || gl.LINEAR\n\t\tif (this.type === gl.FLOAT) {\n\t\t\tif (!gl.getExtension('OES_texture_float')) {\n\t\t\t\tthrow new Error('OES_texture_float is required but not supported')\n\t\t\t}\n\t\t\tif ((minFilter !== gl.NEAREST || magFilter !== gl.NEAREST) && !gl.getExtension('OES_texture_float_linear')) {\n\t\t\t\tthrow new Error('OES_texture_float_linear is required but not supported')\n\t\t\t}\n\t\t} else if (this.type === LightGLContext.HALF_FLOAT_OES) {\n\t\t\tif (!gl.getExtension('OES_texture_half_float')) {\n\t\t\t\tthrow new Error('OES_texture_half_float is required but not supported')\n\t\t\t}\n\t\t\tif ((minFilter !== gl.NEAREST || magFilter !== gl.NEAREST) && !gl.getExtension('OES_texture_half_float_linear')) {\n\t\t\t\tthrow new Error('OES_texture_half_float_linear is required but not supported')\n\t\t\t}\n\t\t}\n\t\tgl.bindTexture(gl.TEXTURE_2D, this.texture)\n\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, options.wrap || options.wrapS || gl.CLAMP_TO_EDGE)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, options.wrap || options.wrapT || gl.CLAMP_TO_EDGE)\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, this.format, width, height, 0, this.format, this.type, null)\n\t}\n\n\tbind(unit: int) {\n\t\tthis.gl.activeTexture(this.gl.TEXTURE0 + unit)\n\t\tthis.gl.bindTexture(this.gl.TEXTURE_2D, this.texture)\n\t}\n\n\tunbind(unit: int) {\n\t\tthis.gl.activeTexture(this.gl.TEXTURE0 + unit)\n\t\tthis.gl.bindTexture(this.gl.TEXTURE_2D, null)\n\t}\n\n\tprivate framebuffer: WebGLFramebuffer\n\tprivate renderbuffer: WebGLRenderbuffer & { width: number, height: number }\n\tstatic checkerBoardCanvas: HTMLCanvasElement\n\n\tcanDrawTo() {\n\t\tconst gl = this.gl\n\t\tthis.framebuffer = this.framebuffer || gl.createFramebuffer()\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer)\n\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0)\n\t\tconst result = gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null)\n\t\treturn result\n\t}\n\n\tdrawTo(callback: (gl: LightGLContext) => void): void {\n\t\tconst gl = this.gl\n\t\tthis.framebuffer = this.framebuffer || gl.createFramebuffer()\n\t\tthis.renderbuffer = this.renderbuffer || gl.createRenderbuffer() as any\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer)\n\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, this.renderbuffer)\n\t\tif (this.width != this.renderbuffer.width || this.height != this.renderbuffer.height) {\n\t\t\tthis.renderbuffer.width = this.width\n\t\t\tthis.renderbuffer.height = this.height\n\t\t\tgl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.width, this.height)\n\t\t}\n\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0)\n\t\tgl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this.renderbuffer)\n\t\tif (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {\n\t\t\tthrow new Error('Rendering to this texture is not supported (incomplete this.framebuffer)')\n\t\t}\n\t\tconst viewport = gl.getParameter(gl.VIEWPORT)\n\t\tgl.viewport(0, 0, this.width, this.height)\n\n\t\tcallback(gl)\n\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null)\n\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null)\n\t\tgl.viewport(viewport[0], viewport[1], viewport[2], viewport[3])\n\t}\n\n\tswapWith(other: Texture): void {\n\t\tassert(this.gl == other.gl)\n\t\tlet temp\n\t\ttemp = other.texture\n\t\tother.texture = this.texture\n\t\tthis.texture = temp\n\n\t\ttemp = other.width\n\t\tother.width = this.width\n\t\tthis.width = temp\n\n\t\ttemp = other.height\n\t\tother.height = this.height\n\t\tthis.height = temp\n\t}\n\n\t/**\n\t * Return a new texture created from `imgElement`, an `<img>` tag.\n\t */\n\tstatic fromImage(imgElement: HTMLImageElement | HTMLCanvasElement, options: TextureOptions, gl: LightGLContext = currentGL()): Texture {\n\t\toptions = options || {}\n\t\tconst texture = new Texture(imgElement.width, imgElement.height, options, gl)\n\t\ttry {\n\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, texture.format, texture.format, texture.type, imgElement)\n\t\t} catch (e) {\n\t\t\tif (location.protocol == 'file:') {\n\t\t\t\tthrow new Error('imgElement not loaded for security reasons (serve this page over \"http://\" instead)')\n\t\t\t} else {\n\t\t\t\tthrow new Error('imgElement not loaded for security reasons (imgElement must originate from the same ' +\n\t\t\t\t\t'domain as this page or use Cross-Origin Resource Sharing)')\n\t\t\t}\n\t\t}\n\t\tif (options.minFilter && options.minFilter != gl.NEAREST && options.minFilter != gl.LINEAR) {\n\t\t\tgl.generateMipmap(gl.TEXTURE_2D)\n\t\t}\n\t\treturn texture\n\t}\n\n\t/**\n\t * Returns a checkerboard texture that will switch to the correct texture when it loads.\n\t */\n\tstatic fromURL(url: string, options: TextureOptions = {}, gl = currentGL()): Texture {\n\t\tTexture.checkerBoardCanvas = Texture.checkerBoardCanvas || (function () {\n\t\t\tconst c = document.createElement('canvas').getContext('2d')\n\t\t\tif (!c) throw new Error('Could not create 2d canvas.')\n\t\t\tc.canvas.width = c.canvas.height = 128\n\t\t\tfor (let y = 0; y < c.canvas.height; y += 16) {\n\t\t\t\tfor (let x = 0; x < c.canvas.width; x += 16) {\n\t\t\t\t\t//noinspection JSBitwiseOperatorUsage\n\t\t\t\t\tc.fillStyle = (x ^ y) & 16 ? '#FFF' : '#DDD'\n\t\t\t\t\tc.fillRect(x, y, 16, 16)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn c.canvas\n\t\t})()\n\t\tconst texture = Texture.fromImage(Texture.checkerBoardCanvas, options)\n\t\tconst image = new Image()\n\t\timage.onload = () => Texture.fromImage(image, options, gl).swapWith(texture)\n\t\timage.src = url\n\t\treturn texture\n\t}\n}"],"names":["WGL"],"mappings":";;;;;;;;;;;AAAA,AAOA,MAAM,EAAC,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAC,GAAG,IAAI,CAAA;AACrC,MAAMA,KAAG,GAAG,qBAAqB,CAAA;;;;;;;AAQjC,UAAkB,SAAQ,aAAa;IAatC;QACC,KAAK,EAAE,CAAA;QAbR,oBAAe,GAAY,KAAK,CAAA;QAChC,kBAAa,GAA+B,EAAE,CAAA;QAC9C,iBAAY,GAA+B,EAAE,CAAA;QAY5C,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,YAAY,CAAC,CAAA;;;;KAI9C;IAED,UAAU;QACT,IAAI,WAAW,GAAG,CAAC,EAAE,aAAa,GAAG,EAAE,CAAC,CAAC,EAAE,WAAW,GAAG,CAAC,CAAA;QAC1D,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAA;QAChC,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAA;QAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YAC7C,MAAM,EAAE,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;YACzE,MAAM,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAA;YAC7D,MAAM,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAA;YAC5C,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;;;YAG7B,MAAM,YAAY,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;YAChD,WAAW,IAAI,YAAY,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAA;YAC5C,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,EAAE,CAAA;YAClC,WAAW,IAAI,UAAU,CAAA;YACzB,aAAa,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,YAAY,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;SACnI;;QAED,OAAO,EAAC,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,aAAa,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,WAAW,GAAG,CAAC,EAAC,CAAA;KACtG;;;;;;IAQD,eAAe,CAAmB,IAAO,EAAE,SAAiB;QAC3D,MAAM,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE,SAAS,GAAG,SAAS,GAAG,kBAAkB,CAAC,CAAA;;QAElF,IAAI,CAAC,eAAe,GAAG,KAAK,CAAA;QAC5B,MAAM,CAAC,QAAQ,IAAI,OAAO,IAAI,CAAC,CAAA;QAC/B,MAAM,CAAC,QAAQ,IAAI,OAAO,SAAS,CAAC,CAAA;QACpC,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,IAAI,MAAM,CAACA,KAAG,CAAC,YAAY,EAAE,YAAY,CAAC,CAAA;QACzF,MAAM,CAAC,IAAI,GAAG,IAAI,CACjB;QAAC,IAAY,CAAC,IAAI,CAAC,GAAG,EAAE,CAAA;QACzB,OAAO,IAAW,CAAA;KAClB;;;;;;IAOD,cAAc,CAAmB,IAAO;QACvC,IAAI,CAAC,eAAe,GAAG,KAAK,CAAA;QAC5B,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,GAAG,IAAI,MAAM,CAACA,KAAG,CAAC,oBAAoB,EAAE,WAAW,CAAC,CAAA;QAC1F,MAAM,CAAC,IAAI,GAAG,IAAI,CACjB;QAAC,IAAY,CAAC,IAAI,CAAC,GAAG,EAAE,CAAA;QACzB,OAAO,IAAW,CAAA;KAClB;IAED,MAAM,CAAiB,GAAG,MAAW;QACpC,MAAM,IAAI,GAAG,IAAI,IAAI,EAAS,CAC7B;QAAA,CAAC,IAAY,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,OAAY;YACnD,MAAM,UAAU,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAA;YAC3D,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,SAAS;gBAClE,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,IAAK,CAAA;gBACtD,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE;oBACnC,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,SAAS,CAAC,CAAA;iBAC3C;gBACD,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAA;aAC1C,CAAC,CAAA;YACF,MAAM,CAAC,mBAAmB,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,IAAI;gBAC5D,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE;oBAC7B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;iBACzB;gBACD,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAI,OAAO,CAAC,IAAI,CAAW,CAAC,GAAG,CAAC,KAAK,IAAI,KAAK,GAAG,UAAU,CAAC,CAAC,CAAA;aAC7E,CAAC,CAAA;SACF,CAAC,CAAA;QACF,OAAO,IAAW,CAAA;KAClB;;;;;;;IAQD,OAAO,CAAC,KAAqB,SAAS,EAAE;;QAEvC,AACA,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,SAAS;YAC/D,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAA;YAC5C,MAAM,CAAC,IAAI,GAAI,IAAY,CAAC,MAAM,CAAC,IAAK,CAAC,CAAA;YACzC,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAA;YAC7B,AAGC;SACD,CAAC,CAAA;QAEF,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,YAAY,EAAE;YACrC,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;YACtC,MAAM,CAAC,IAAI,GAAI,IAAY,CAAC,MAAM,CAAC,IAAK,CAAC,CAAA;YACzC,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAA;;;;;SAK7B;QACD,IAAI,CAAC,eAAe,GAAG,IAAI,CAAA;QAC3B,OAAO,IAAI,CAAA;KACX;IAED,OAAa,aAAa,CAAC,GAAS;;YACnC,OAAO,IAAI,OAAO,CAA2B,CAAC,OAAO,EAAE,MAAM;gBAC5D,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE;qBACrB,eAAe,CAAC,SAAS,EAAE,YAAY,CAAC,CAAA;gBAC1C,MAAM,UAAU,GAAG,IAAI,UAAU,EAAE,CAAA;gBACnC,UAAU,CAAC,OAAO,GAAG,MAAM,CAAA;gBAC3B,UAAU,CAAC,MAAM,GAAG,UAAU,aAAa;oBAC1C,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;oBAC1C,MAAM,gBAAgB,GAAG,EAAE,CAAA;oBAC3B,MAAM,aAAa,GAAG,QAAQ,CAAC,SAAS,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAA;oBAChE,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,aAAa,GAAG,CAAC,CAAA;oBACvC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,aAAa,GAAG,CAAC,CAAA;oBACxC,IAAI,CAAC,GAAG,aAAa,GAAG,CAAC,EAAE,SAAS,GAAG,gBAAgB,GAAG,CAAC,CAAA;oBAE3D;wBACC,MAAM,CAAC,GAAG,QAAQ,CAAC,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC,CAAA;wBAC9C,SAAS,IAAI,CAAC,CAAA;wBACd,MAAM,CAAC,GAAG,QAAQ,CAAC,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC,CAAA;wBAC9C,SAAS,IAAI,CAAC,CAAA;wBACd,MAAM,CAAC,GAAG,QAAQ,CAAC,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC,CAAA;wBAC9C,SAAS,IAAI,CAAC,CAAA;wBACd,OAAO,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;qBACtB;oBAED,OAAO,CAAC,EAAE;wBACT,CAAC,IAAI,CAAC,CAAA;wBACN,MAAM,MAAM,GAAG,MAAM,EAAE,CAAA;wBACvB,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAA;wBAC5B,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAA;wBAC5B,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAA;wBAC5B,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,EAAE,CAAA;wBAC/B,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,EAAE,CAAA;wBAC/B,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,EAAE,CAAA;wBAE/B,SAAS,IAAI,CAAC,CAAA;qBACd;oBACD,OAAO,CAAC,IAAI,CAAC,CAAA;iBACb,CAAA;gBACD,UAAU,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAA;aACjC,CAAC,CAAA;SACF;KAAA;IAED,WAAW;QACV,IAAI,CAAC,IAAI,CAAC,SAAS;YAAE,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAA;QAClE,MAAM,gBAAgB,GAAG,EAAE,EAAE,eAAe,GAAG,CAAC,CAAA;QAChD,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAA;QAChC,MAAM,aAAa,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,CAAA;QAC1C,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,gBAAgB,GAAG,CAAC,GAAG,aAAa,IAAI,CAAC,GAAG,CAAC,GAAG,eAAe,GAAG,CAAC,CAAC,CAAC,CAAA;QACpG,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAA;QACrC,QAAQ,CAAC,SAAS,CAAC,gBAAgB,EAAE,aAAa,EAAE,IAAI,CAAC,CAAA;QACzD,IAAI,SAAS,GAAG,gBAAgB,GAAG,CAAC,CAAA;QACpC,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,CAAA;QACxB,OAAO,CAAC,EAAE;YACT,CAAC,IAAI,CAAC,CAAA;YACN,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EACzE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;YACpC,MAAM,MAAM,GAAG,EAAE,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAExC;YAAA,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;gBAC3B,QAAQ,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAA;gBACzC,SAAS,IAAI,CAAC,CAAA;gBACd,QAAQ,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAA;gBACzC,SAAS,IAAI,CAAC,CAAA;gBACd,QAAQ,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAA;gBACzC,SAAS,IAAI,CAAC,CAAA;aACd,CAAC,CAAA;;YAEF,SAAS,IAAI,CAAC,CAAA;SACd;QACD,MAAM,CAAC,SAAS,IAAI,MAAM,CAAC,UAAU,EAAE,SAAS,GAAG,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,CAAA;QAC3E,OAAO,IAAI,IAAI,CAAC,CAAC,MAAM,CAAC,EAAE,EAAC,IAAI,EAAE,0BAA0B,EAAC,CAAC,CAAA;KAE7D;;;;;;IAOD,SAAS,CAAC,EAAM;QACf,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAA;QACvB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QACnD,IAAI,IAAI,CAAC,OAAO,EAAE;YACjB,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,YAAY,CAAC,CAAA;YAC7C,MAAM,QAAQ,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,QAAQ,EAAE,CAAC,UAAU,EAAE,CAAC,UAAU,EAAE,CAAA;YAChE,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAA;;SAExE;QACD,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,YAAY,EAAE;YACrC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CACxB;YAAC,IAAY,CAAC,IAAI,CAAC,GAAI,IAAY,CAAC,IAAI,CAAC,CAAA;SAC1C;QACD,IAAI,CAAC,OAAO,EAAE,CAAA;QACd,OAAO,IAAY,CAAA;KACnB;;;;;IAMD,+BAA+B;QAC9B,IAAI,CAAC,IAAI,CAAC,OAAO;YAAE,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,YAAY,CAAC,CAAA;;;QAIhE,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE,OAAO,GAAG,IAAI,CAAC,OAAQ,CAAA;QACnF,OAAO,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAA;QAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YAC7C,MAAM,EAAE,GAAG,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;YACrE,MAAM,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAA;YACtB,MAAM,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAA;YACtB,MAAM,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAA;YACtB,MAAM,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAA;YAClD,OAAO,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YACtC,OAAO,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YACtC,OAAO,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;SACtC;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACzC,OAAO,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAA;SAC9B;QACD,IAAI,CAAC,eAAe,GAAG,KAAK,CAAA;QAC5B,OAAO,IAAW,CAAA;KAClB;IASD,iCAAiC,CAAY,kBAA0B,OAAO;QAC7E,IAAI,CAAC,IAAI,CAAC,SAAS;YAAE,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAA;QAClE,MAAM,UAAU,GAAG,IAAI,GAAG,EAAE,CAAA;QAE5B,mBAAmB,EAAO,EAAE,EAAO;YAClC,MAAM,IAAI,GAAG,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,GAAG,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;YAC5C,OAAO,CAAC,IAAI,IAAI,EAAE,IAAI,IAAI,CAAA;SAC1B;;;;QAKD,MAAM,CAAC,GAAG,IAAI,CAAC,SAAS,CAAA;QACxB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YACrC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YAC7C,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YAC7C,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;SAC7C;QACD,MAAM,IAAI,GAAG,eAAe,CAAA;QAC5B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;YAAE,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,CAAA;;QAErD,UAAU,CAAC,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,EAAE,EAAE,GAAG,GAAG,MAAM,CAAC,CAAC,CAAA;QACnE,IAAI,CAAC,eAAe,GAAG,KAAK,CAAA;QAC5B,OAAO,IAAI,CAAA;KACX;IAKD,2CAA2C,CAAY,kBAA0B,OAAO;QACvF,IAAI,CAAC,IAAI,CAAC,SAAS;YAAE,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAA;QAClE,IAAI,CAAC,IAAI,CAAC,KAAK;YAAE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAA;QAC7C,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAA;QAC3B,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC;YAAE,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,CAAA;QAChE,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,CAAA;QACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YACxC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;gBAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;YACnE,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;gBAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;YACnE,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;gBAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;SACnE;QACD,IAAI,CAAC,eAAe,GAAG,KAAK,CAAA;QAC5B,OAAO,IAAI,CAAA;KACX;IAKD,kBAAkB,CAAY,SAAiB,CAAC,EAAE,kBAA0B,OAAO;QAClF,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YAClB,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAA;SAC3C;QACD,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,EAAE,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAA;QACnD,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC;YAAE,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,CAAA;QAEhE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC7C,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAA;YACzD,IAAI,CAAC,eAAe,CAAC,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAA;SACrC;QACD,IAAI,CAAC,eAAe,GAAG,KAAK,CAAA;QAC5B,OAAO,IAAI,CAAA;KACX;IAED,OAAO;QACN,OAAO,IAAI,IAAI,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;KAC1C;IAED,iBAAiB;QAChB,MAAM,MAAM,GAAG,EAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,SAAS,EAAE,EAAE,MAAM,EAAE,CAAC,EAAC,CAAA;QAC9D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAC9C,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC,CAAA;SACvF;QACD,OAAO,MAAM,CAAA;KACb;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA8BD,OAAO,KAAK,CAAC,UAQT,EAAE;QACL,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,IAAI,CAAC,CAAA;QACtD,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,MAAM,IAAI,CAAC,CAAA;QACtD,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,CAAC,CAAA;QAClC,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,CAAC,CAAA;QAClC,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,CAAC,CAAA;QAChC,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,CAAC,CAAA;QAClC,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE;aACrB,cAAc,CAAC,OAAO,CAAC;aACvB,cAAc,CAAC,WAAW,CAAC;aAC3B,eAAe,CAAC,SAAS,EAAE,YAAY,CAAC;aACxC,eAAe,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAA;QAE3C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,EAAE,EAAE;YAClC,MAAM,CAAC,GAAG,CAAC,GAAG,OAAO,CAAA;YACrB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,EAAE,EAAE;gBAClC,MAAM,CAAC,GAAG,CAAC,GAAG,OAAO,CAAA;gBACrB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,GAAG,KAAK,EAAE,MAAM,GAAG,CAAC,GAAG,MAAM,EAAE,CAAC,CAAC,CAAC,CAAA;gBACtE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;gBACxB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;gBACvB,IAAI,CAAC,GAAG,OAAO,IAAI,CAAC,GAAG,OAAO,EAAE;oBAC/B,MAAM,MAAM,GAAG,CAAC,GAAG,CAAC,IAAI,OAAO,GAAG,CAAC,CAAC,CAAA;oBACpC,IAAI,CAAC,SAAS,CAAC,IAAI,CAClB,MAAM,EAAE,MAAM,GAAG,OAAO,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,EACxC,MAAM,GAAG,OAAO,GAAG,CAAC,EAAE,MAAM,GAAG,OAAO,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC,CAAA;iBACxD;aACD;SACD;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE;YACjC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAA;YACzB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,GAAG,CAAC,IAAI,OAAO,GAAG,CAAC,EAAE,CAAC,OAAO,GAAG,CAAC,IAAI,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;SAC7E;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE;YACjC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;YACnD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;SACzD;QAED,IAAI,CAAC,OAAO,EAAE,CAAA;QACd,OAAO,IAAI,CAAA;KACX;;;;;;IAoBD,OAAO,IAAI;QACV,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE;aACrB,eAAe,CAAC,SAAS,EAAE,YAAY,CAAC;aACxC,cAAc,CAAC,WAAW,CAAC;aAC3B,cAAc,CAAC,OAAO,CAAC,CAAA;;;QAIzB,MAAM,cAAc,GAAG;YACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YAEV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YAEV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;SACV,CAAA;QACD,IAAI,CAAC,QAAQ,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAA;QAClE,IAAI,CAAC,OAAO,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,YAAY,EAAE,CAAA;QACvH,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;YAClC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,EAClC,cAAc,CAAC,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;SACxF;;;QAGD,IAAI,CAAC,KAAK,GAAG;YACZ,CAAC,EAAE,CAAC;YACJ,CAAC,EAAE,CAAC;YACJ,CAAC,EAAE,CAAC;YACJ,CAAC,EAAE,CAAC;YAEJ,CAAC,EAAE,CAAC;YACJ,CAAC,EAAE,CAAC;YACJ,CAAC,EAAE,CAAC;YACJ,CAAC,EAAE,CAAC;YAEJ,CAAC,EAAE,CAAC;YACJ,CAAC,EAAE,CAAC;YACJ,CAAC,EAAE,CAAC;YACJ,CAAC,EAAE,CAAC;SACJ,CAAC,GAAG,CAAC,CAAC,IAAI,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAA;QAErC,IAAI,CAAC,OAAO,EAAE,CAAA;QACd,OAAO,IAAI,CAAA;KACX;IAED,OAAO,WAAW;QACjB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;KACrB;IAED,OAAO,OAAO,CAAC,GAAQ,EAAE,KAAU;QAClC,MAAM,YAAY,GAAG,iBAAiB,CAAC,GAAG,EAAE,CAAC;YAC5C,MAAM,KAAK,GAAG,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAA;YACzC,OAAO,IAAI,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,CAAA;SACxC,CAAC,CAAA;QACF,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,EAAC,MAAM,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,EAAC,EAAE,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,CAAC,CAAA;KACjG;;;;;;;;;;IAWD,OAAO,MAAM,CAAC,eAAoB,CAAC;QAClC,MAAM,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;;QAExF,MAAM,QAAQ,GAAG;YAChB,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YAChB,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACf,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;YACjB,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;YAEhB,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;YAChB,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACf,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACjB,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAEhB,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAChB,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YACf,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACjB,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;SAAC,CAAA;;QAElB,MAAM,SAAS,GAAG;;YAEjB,CAAC,EAAE,EAAE,EAAE,CAAC;YACR,CAAC,EAAE,CAAC,EAAE,CAAC;YACP,CAAC,EAAE,CAAC,EAAE,CAAC;YACP,CAAC,EAAE,CAAC,EAAE,EAAE;YACR,CAAC,EAAE,EAAE,EAAE,EAAE;;YAGT,CAAC,EAAE,CAAC,EAAE,CAAC;YACP,CAAC,EAAE,EAAE,EAAE,CAAC;YACR,EAAE,EAAE,EAAE,EAAE,CAAC;YACT,EAAE,EAAE,CAAC,EAAE,CAAC;YACR,CAAC,EAAE,CAAC,EAAE,CAAC;;YAGP,CAAC,EAAE,CAAC,EAAE,CAAC;YACP,CAAC,EAAE,CAAC,EAAE,CAAC;YACP,CAAC,EAAE,CAAC,EAAE,CAAC;YACP,CAAC,EAAE,CAAC,EAAE,CAAC;YACP,CAAC,EAAE,CAAC,EAAE,CAAC;;YAGP,CAAC,EAAE,CAAC,EAAE,CAAC;YACP,CAAC,EAAE,CAAC,EAAE,EAAE;YACR,CAAC,EAAE,CAAC,EAAE,EAAE;YACR,CAAC,EAAE,CAAC,EAAE,CAAC;YACP,CAAC,EAAE,CAAC,EAAE,CAAC;SACP,CAAA;;;;;;;QAQD,8BAA8B,CAAK,EAAE,CAAK,EAAE,CAAK,EAAE,GAAQ,EAAE,QAAc,EAAE,SAAgB,EACpF,EAAO,EAAE,EAAO,EAAE,EAAO,EAAE,KAAY;YAC/C,IAAI,CAAC,IAAI,GAAG,EAAE;gBACb,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA;gBAC1B,IAAI,EAAE,GAAG,EAAE;oBAAE,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;gBAC/B,IAAI,EAAE,GAAG,EAAE;oBAAE,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;gBAC/B,IAAI,EAAE,GAAG,EAAE;oBAAE,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;aAC/B;iBAAM;;;gBAGN,MAAM,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;;gBAEpG,MAAM,IAAI,GAAG,QAAQ,CAAC,MAAM,EAAE,IAAI,GAAG,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,IAAI,GAAG,CAAC,CAAA;gBAC9D,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAA;gBACrC,oBAAoB,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAA;gBACnG,oBAAoB,CAAC,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAA;gBAC5F,oBAAoB,CAAC,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAA;gBAC5F,oBAAoB,CAAC,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAA;aAC5F;SACD;QAED,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE;aACrB,eAAe,CAAC,SAAS,EAAE,YAAY,CAAC;aACxC,cAAc,CAAC,WAAW,CAAC;aAC3B,cAAc,CAAC,OAAO,CAAC,CAAA;QACzB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAA;QAC/B,YAAY,GAAG,SAAS,IAAI,YAAY,GAAG,CAAC,GAAG,YAAY,CAAA;QAC3D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;YAC5B,MAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;YACtD,oBAAoB,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAA;SACnI;QAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAA;QAC5B,IAAI,CAAC,OAAO,EAAE,CAAA;QACd,OAAO,IAAI,CAAA;KACX;IAED,OAAO,IAAI,CAAC,IAAU;QACrB,MAAM,MAAM,GAAG,EAAE,CAAC,gBAAgB,CACjC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,EACtB,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,aAAa,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,CAAA;QAChF,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;;QAE1C,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAA;QAC3B,IAAI,CAAC,OAAO,EAAE,CAAA;QAEd,OAAO,IAAI,CAAA;KACX;IAKD,OAAO,cAAc,CAAC,QAAc,EAAE,MAAU,EAAE,KAAc,EAAE,OAAc;QAC/E,aAAa,CAAC,KAAK,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAA;QACxC,aAAa,CAAC,MAAM,CAAC,CAAA;QAErB,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE;aACrB,cAAc,CAAC,WAAW,CAAC;aAC3B,eAAe,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAA;QAC3C,OAAO,IAAI,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,YAAY,CAAC,CAAA;QACxD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;QAClE,MAAM,EAAE,GAAG,QAAQ,CAAC,MAAM,CAAA;QAC1B,IAAI,CAAC,MAAM,GAAG,iBAAiB,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,KAAuB,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAA;QAE/F,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAA;QAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC7C,QAAQ,CAAC,SAAS,EAAE,KAAK,EACxB,CAAC,EAAE,CAAC,GAAG,CAAC,EACR,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,QAAQ,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;SAC9C;QACD,IAAI,KAAK,EAAE;YACV,QAAQ,CAAC,SAAS,EAAE,KAAK,EAAE,CAAC,EAAE,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;SAC5F;QACD,IAAI,OAAO,EAAE;YACZ,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;SACtC;QACD,IAAI,CAAC,OAAO,EAAE,CAAA;QACd,OAAO,IAAI,CAAA;KACX;;;;;;IAOD,OAAO,QAAQ,CAAC,QAAc,EAAE,QAAkC,EAAE,SAAgB,EAAE,KAAU,EAAE,KAAK,GAAG,IAAI,EAAE,OAAc;QAC7H,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QACnD,OAAO,IAAI,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,YAAY,CAAC,CAAA;QACxD,MAAM,EAAE,GAAG,QAAQ,CAAC,MAAM,EAAE,MAAM,GAAG,EAAE,GAAG,KAAK,CAAA;QAE/C,MAAM,MAAM,GAAG,IAAI,EAAE,EAAE,CAAA;QACvB,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAA;QAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;;YAE/B,MAAM,IAAI,GAAG,SAAS,GAAG,KAAK,GAAG,CAAC,CAAA;YAClC,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,CAAC,CAAA;YAC3D,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAA;YAEzD,OAAO,IAAI,IAAI,CAAC,OAAQ,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAA;YACpE,IAAI,KAAK,IAAI,CAAC,KAAK,KAAK,GAAG,CAAC,EAAE;gBAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;oBAChC,QAAQ,CAAC,SAAS,EAAE,KAAK,EACxB,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAC1B,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,IAAI,MAAM,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC,CAAA;iBAC9D;aACD;SACD;QAED,IAAI,CAAC,OAAO,EAAE,CAAA;QACd,OAAO,IAAI,CAAA;KACX;IAED,OAAO,UAAU,CAAC,EAAgC,EAAE,EAAgC,EAC9E,IAAY,EAAE,IAAY,EAAE,IAAY,EAAE,IAAY,EAAE,IAAY,EAAE,IAAY;QACvF,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE;aACrB,eAAe,CAAC,SAAS,EAAE,YAAY,CAAC;aACxC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC7B,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE,EAAE,EAAE;YAClC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,GAAG,IAAI,CAAC,CAAA;YACrC,KAAK,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE,EAAE,EAAE;gBAClC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,GAAG,IAAI,CAAC,CAAA;gBACrC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;gBAC5B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;gBAC3B,IAAI,EAAE,GAAG,IAAI,IAAI,EAAE,GAAG,IAAI,EAAE;oBAC3B,MAAM,MAAM,GAAG,EAAE,GAAG,EAAE,IAAI,IAAI,GAAG,CAAC,CAAC,CAAA;oBACnC,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,KAAK,EAC7B,MAAM,EAAE,MAAM,GAAG,IAAI,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,IAAI,GAAG,CAAC,CAAC,CAAA;iBAC1D;aACD;SACD;QACD,IAAI,CAAC,OAAO,EAAE,CAAA;QACd,OAAO,IAAI,CAAA;KACX;IAED,OAAO,IAAI,CAAC,IAA8F;QACzG,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAA;QACvB,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;YACpC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;SAC5C;aAAM;YACN,MAAM,IAAI,KAAK,EAAE,CAAA;SACjB;QACD,IAAI,IAAI,CAAC,SAAS,EAAE;YACnB,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAC/B;YAAC,IAAY,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAA;SACzC;QACD,IAAI,IAAI,CAAC,OAAO,EAAE;YACjB,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,YAAY,CAAC,CAC5C;YAAC,IAAY,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAA;SACrC;QACD,IAAI,CAAC,OAAO,EAAE,CAAA;QACd,OAAO,IAAI,CAAA;KACX;;;AAnSM,sBAAiB,GAAG;IAC1B,EAAE,CAAC,CAAC;IACJ,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACf,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACf,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAEf,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACf,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACf,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACf,EAAE,CAAC,GAAG;CACN,CAAA;;ACpbF;AACA,AAMA,MAAMA,KAAG,GAAG,qBAAqB,CAAA;;;;AAKjC,AAAA,IAAY,UAQX;AARD,WAAY,UAAU;IACrB,kCAASA,KAAG,CAAC,MAAM,YAAA,CAAA;IACnB,iCAAQA,KAAG,CAAC,KAAK,WAAA,CAAA;IACjB,sCAAaA,KAAG,CAAC,UAAU,gBAAA,CAAA;IAC3B,qCAAYA,KAAG,CAAC,SAAS,eAAA,CAAA;IACzB,qCAAYA,KAAG,CAAC,SAAS,eAAA,CAAA;IACzB,0CAAiBA,KAAG,CAAC,cAAc,oBAAA,CAAA;IACnC,wCAAeA,KAAG,CAAC,YAAY,kBAAA,CAAA;CAC/B,EARW,UAAU,KAAV,UAAU,QAQrB;AAGD,AAAO,MAAM,gBAAgB,GAAG,CAAC,OAAO,EAAE,YAAY,EAAE,YAAY,EAAE,YAAY,EAAE,YAAY,EAAE,YAAY,EAAE,YAAY,EAAE,KAAK,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,cAAc,CAAC,CAAA;AAExL,MAAM,gBAAgB,GAA4C;IACjE,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI;IAC9B,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;IACnC,CAAC,UAAU,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;IACnC,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;IAClC,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;IACvC,CAAC,UAAU,CAAC,cAAc,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;IACvC,CAAC,UAAU,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC;CACrC,CAAA;AAED,iBAA2B,GAAQ;IAClC,OAAO,KAAK,IAAI,GAAG,CAAC,WAAW,IAAI,YAAY,IAAI,GAAG,CAAC,WAAW,IAAI,YAAY,IAAI,GAAG,CAAC,WAAW,CAAA;CACrG;AAcD,sBAAsB,GAAQ;IAC7B,OAAO,YAAY,IAAI,GAAG,CAAC,WAAW,IAAI,YAAY,IAAI,GAAG,CAAC,WAAW;QACxE,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,QAAQ,IAAI,OAAO,CAAC,CAAC,CAAA;CAC3D;AAED,oBAAoB,CAAM;IACzB,IAAI,CAAC,SAAS,EAAE,UAAU,EAAE,iBAAiB,EAAE,UAAU,EAAE,WAAW,EAAE,UAAU,EAAE,WAAW,CAAC;SAC7F,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,EAAE;QAC7B,OAAO,IAAI,CAAA;KACX;IACD,OAAO,CAAC,CAAC,YAAY,YAAY,IAAI,CAAC,YAAY,YAAY,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;QAChF,CAAc,CAAC,KAAK,CAAC,CAAC,IAAI,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAA;CAChD;;AAKD;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA2CC,YAAY,YAAoB,EAAE,cAAsB,EAAE,EAAE,GAAG,SAAS,EAAE;QArC1E,4BAAuB,GAAG,CAAC,CAAC,CAAA;QAC5B,2BAAsB,GAAG,CAAC,CAAC,CAAA;;QAuC1B,MAAM,MAAM,GAAG;;;;;;;;EAQf,CAAA;QACA,MAAM,YAAY,GAAG,MAAM,GAAG;;;;;EAK9B,CAAA;QACA,MAAM,cAAc,GAAG,0BAA0B,GAAG,MAAM,CAAA;QAE1D,MAAM,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAAA;;QAG9C,uBAAuB,IAAY,EAAE,MAAc;YAClD,MAAM,MAAM,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;YACpC,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;YAC/B,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,CAAA;YACxB,IAAI,CAAC,EAAE,CAAC,kBAAkB,CAAC,MAAM,EAAEA,KAAG,CAAC,cAAc,CAAC,EAAE;gBACvD,MAAM,IAAI,KAAK,CAAC,iBAAiB,GAAG,EAAE,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAA;aAChE;YACD,OAAO,MAAM,CAAA;SACb;QAED,IAAI,CAAC,EAAE,GAAG,EAAE,CAAA;QACZ,MAAM,OAAO,GAAG,EAAE,CAAC,aAAa,EAAE,CAAA;QAClC,IAAI,CAAC,OAAO,EAAE;YACb,EAAE,CAAC,WAAW,EAAE,CAAA;SAChB;QACD,IAAI,CAAC,OAAO,GAAG,OAAQ,CAAA;QACvB,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,aAAa,CAACA,KAAG,CAAC,aAAa,EAAE,YAAY,GAAG,YAAY,CAAC,CAAC,CAAA;QAC5F,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,aAAa,CAACA,KAAG,CAAC,eAAe,EAAE,cAAc,GAAG,cAAc,CAAC,CAAC,CAAA;QAClG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QAC5B,IAAI,CAAC,EAAE,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,EAAEA,KAAG,CAAC,WAAW,CAAC,EAAE;YAC3D,MAAM,IAAI,KAAK,CAAC,cAAc,GAAG,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAA;SACpE;QACD,IAAI,CAAC,UAAU,GAAG,EAAE,CAAA;QACpB,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAA;;;QAI1B,IAAI,CAAC,cAAc,GAAG,EAAE,CAAA;QACxB,WAAW,IAAI,WAAW,CAAC,OAAO,CAAC,IAAI;YACtC,IAAI,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE;gBAC9C,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,IAAI,CAAA;aAChC;SACD,CAAC,CAAA;QAEF,IAAI,CAAC,YAAY,GAAG,EAAE,CAAA;QACtB,KAAK,IAAI,CAAC,GAAG,EAAE,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,EAAEA,KAAG,CAAC,eAAe,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,GAAG;;;;YAIjF,MAAM,IAAI,GAAG,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAE,CAAA;YAClD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAA;SACnC;QACD,EAAE,CAAC,WAAW,EAAE,CAAA;KAChB;IAnGD,OAAO,MAAM,CAEZ,YAA2B,EAAE,cAA6B;QAC1D,OAAO,IAAI,MAAM,CAAC,YAAY,EAAE,cAAc,CAAQ,CAAA;KACtD;;;;;IAsGD,QAAQ,CAAC,QAAkF;QAC1F,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAA;QAClB,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QAC3B,EAAE,CAAC,WAAW,EAAE,CAAA;QAEhB,KAAK,MAAM,IAAI,IAAI,QAAQ,EAAE;YAC5B,MAAM,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;YACzF,CAAC,QAAQ,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,GAAG,gCAAgC,CAAC,CAAA;YAClE,IAAI,CAAC,QAAQ;gBAAE,SAAQ;YACvB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAA;YACtC,IAAI,KAAK,GAAQ,QAAQ,CAAC,IAAI,CAAQ,CAAA;YACtC,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAA;YACpC,IAAI,SAAS,EAAE;;gBAEd,IAAI,EAAE,CAAC,UAAU,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,YAAY,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE;oBACtF,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE;wBACnB,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAA;qBAC/B;yBAAM;wBACN,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,EAAE,2CAA2C,CAAC,CAAA;qBACnG;iBACD;gBACD,MAAM,CAAC,EAAE,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI;qBAC1B,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,QAAQ,KAAK,OAAO,KAAK,IAAI,YAAY,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC,CAAA;gBACnG,MAAM,CAAC,EAAE,CAAC,UAAU,IAAI,IAAI,CAAC,IAAI;qBAC/B,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,KAAK,YAAY,EAAE;wBACrC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,MAAM,IAAI,aAAa,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;gBAChF,MAAM,CAAC,EAAE,CAAC,UAAU,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,YAAY,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,CAAA;gBAChG,MAAM,CAAC,EAAE,CAAC,UAAU,IAAI,IAAI,CAAC,IAAI,IAAI,KAAK,YAAY,EAAE,EAAE,MAAM,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAA;gBACjF,MAAM,CAAC,EAAE,CAAC,UAAU,IAAI,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,IAAI,KAAK,YAAY,EAAE,CAAC,CAAA;aAC9E;YACD,IAAI,KAAK,YAAY,EAAE,EAAE;gBACxB,KAAK,GAAG,KAAK,CAAC,OAAO,EAAE,CAAA;aACvB;YACD,IAAI,EAAE,CAAC,UAAU,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE;gBACjD,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,YAAY,EAAE,CAAC,CAAA;aAC7C;iBAAM,IAAI,KAAK,CAAC,MAAM,EAAE;gBACxB,QAAQ,KAAK,CAAC,MAAM;oBACnB,KAAK,CAAC;wBACL,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAA;wBAC9B,MAAK;oBACN,KAAK,CAAC;wBACL,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAA;wBAC9B,MAAK;oBACN,KAAK,CAAC;wBACL,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAA;wBAC9B,MAAK;oBACN,KAAK,CAAC;wBACL,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAA;wBAC9B,MAAK;;;oBAGN,KAAK,CAAC;wBACL,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,YAAY,CAAC;4BACrD,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;4BAC5B,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;4BAC5B,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;yBAC5B,CAAC,CAAC,CAAA;wBACH,MAAK;oBACN,KAAK,EAAE;wBACN,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,YAAY,CAAC;4BACrD,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC;4BACvC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC;4BACvC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC;4BACxC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC;yBACxC,CAAC,CAAC,CAAA;wBACH,MAAK;oBACN;wBACC,MAAM,IAAI,KAAK,CAAC,mCAAmC,GAAG,IAAI,GAAG,cAAc,GAAG,KAAK,CAAC,MAAM,CAAC,CAAA;iBAC5F;aACD;iBAAM,IAAI,QAAQ,IAAI,OAAO,KAAK,EAAE;gBACpC,IAAI,EAAE,CAAC,UAAU,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,YAAY,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE;oBACtF,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAA;iBAC7B;qBAAM;oBACN,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAA;iBAC7B;aACD;iBAAM,IAAI,SAAS,IAAI,OAAO,KAAK,EAAE;gBACrC,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,CAAA;aAC9B;iBAAM,IAAI,KAAK,YAAY,EAAE,EAAE;gBAC/B,MAAM,CAAC,GAAG,KAAK,CAAC,CAAC,CAAA;gBACjB,IAAI,EAAE,CAAC,UAAU,IAAI,IAAI,CAAC,IAAI,EAAE;oBAC/B,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAK,EAAE;wBACpC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;wBACvB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;wBACvB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;wBACxB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;qBAAC,CAAC,CAAA;iBAC3B;qBAAM,IAAI,EAAE,CAAC,UAAU,IAAI,IAAI,CAAC,IAAI,EAAE;oBACtC,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAK,EAAE;wBACpC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;wBAChB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;wBAChB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;qBAAC,CAAC,CAAA;iBACpB;qBAAM,IAAI,EAAE,CAAC,UAAU,IAAI,IAAI,CAAC,IAAI,EAAE;oBACtC,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAK,EAAE,IAAI,YAAY,CAAC;wBACrD,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;wBACV,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;qBAAC,CAAC,CAAC,CAAA;iBACd;qBAAM;oBACN,MAAM,IAAI,KAAK,CAAC,sBAAsB,IAAI,CAAC,IAAI,EAAE,CAAC,CAAA;iBAClD;aACD;iBAAM;gBACN,MAAM,IAAI,KAAK,CAAC,4BAA4B,GAAG,IAAI,GAAG,qBAAqB,GAAG,KAAK,CAAC,CAAA;aACpF;YACD,EAAE,CAAC,WAAW,EAAE,CAAA;SAChB;QAED,OAAO,IAAI,CAAA;KACX;;;;;;;;;;;;IAaD,IAAI,CAAC,IAAU,EAAE,OAAmB,UAAU,CAAC,SAAS,EAAE,KAAW,EAAE,KAAW;QACjF,MAAM,CAAC,IAAI,CAAC,eAAe,EAAE,sBAAsB,CAAC,CAAA;QACpD,MAAM,CAAC,SAAS,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,CAAA;QACrC,MAAM,OAAO,GAAW,UAAU,CAAC,IAAI,CAAC,CAAA;;QAExC,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAA;KAC3F;;;;;;;;;IAUD,WAAW,CAAC,aAAkD,EAC3D,WAA+B,EAC/B,OAAmB,UAAU,CAAC,SAAS,EACvC,QAAa,CAAC,EAAE,KAAW;QAC7B,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAA;QAClB,EAAE,CAAC,WAAW,EAAE,CAAA;QAChB,MAAM,CAAC,SAAS,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,CAAA;QACrC,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,CAAA;QACrD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,GAAG,IAAI,UAAU,CAAC,MAAM,EAAE,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;;QAGjF,MAAM,EAAE,GAAG,IAAI,CAAC,cAAc,CAAA;QAC9B,MAAM,sBAAsB,GAAG,CAAC,EAAE,CAAC,4BAA4B,CAAC,IAAI,EAAE,CAAC,kBAAkB,CAAC;;eAEtF,EAAE,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAA;QACjC,MAAM,uBAAuB,GAAG,EAAE,CAAC,6BAA6B,CAAC;;eAE7D,EAAE,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAA;QAClC,MAAM,yBAAyB,GAAG,CAAC,EAAE,CAAC,+BAA+B,CAAC,IAAI,EAAE,CAAC,sCAAsC,CAAC;;;eAGhH,EAAE,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAAE,CAAC,eAAe,CAAC,CAAA;QAEjD,MAAM,GAAG,GAAkC,EAAE,CAAA;QAC7C,EAAE,CAAC,qBAAqB,CAAC;eACtB,IAAI,CAAC,sBAAsB,IAAI,EAAE,CAAC,sBAAsB;gBACvD,GAAG,CAAC,qBAAqB,CAAC,GAAG,EAAE,CAAC,eAAe,CAAC,CAAA;QACpD,EAAE,CAAC,4BAA4B,CAAC,KAAK,GAAG,CAAC,4BAA4B,CAAC,GAAG,sBAA4B,CAAC,CAAA;QACtG,EAAE,CAAC,sBAAsB,CAAC;eACvB,IAAI,CAAC,uBAAuB,IAAI,EAAE,CAAC,uBAAuB;gBACzD,GAAG,CAAC,sBAAsB,CAAC,GAAG,EAAE,CAAC,gBAAgB,CAAC,CAAA;QACtD,uBAAuB,KAAK,GAAG,CAAC,6BAA6B,CAAC,GAAG,uBAAuB,CAAC,CAAA;QACzF,yBAAyB,KAAK,GAAG,CAAC,+BAA+B,CAAC,GAAG,yBAAyB,CAAC,CAAA;QAC/F,yBAAyB,IAAI,EAAE,CAAC,sCAAsC,CAAC;gBACnE,GAAG,CAAC,sCAAsC,CAAC,GAAG,yBAAyB,CAAC,QAAQ,EAAE,CAAC,CAAA;QACvF,EAAE,CAAC,kBAAkB,CAAC;eACnB,IAAI,CAAC,sBAAsB,IAAI,EAAE,CAAC,sBAAsB;gBACvD,GAAG,CAAC,kBAAkB,CAAC,GAAI,sBAA6B,CAAC,UAAU,EAAE,CAAC,CAAA;QAC1E,IAAI,CAAC,QAAQ,CAAC,GAAU,CAAC,CAAA;QACzB,IAAI,CAAC,uBAAuB,GAAG,EAAE,CAAC,uBAAuB,CAAA;QACzD,IAAI,CAAC,sBAAsB,GAAG,EAAE,CAAC,sBAAsB,CAAA;;QAGvD,IAAI,qBAAqB,GAAG,QAAQ,CAAA;QACpC,KAAK,MAAM,SAAS,IAAI,aAAa,EAAE;YACtC,MAAM,MAAM,GAAG,aAAa,CAAC,SAAS,CAAC,CAAA;YACvC,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAA;YAC9B,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CAAA;YAC5F,EAAE,CAAC,WAAW,EAAE,CAAA;YAChB,IAAI,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;;gBAErC,SAAQ;aACR;YACD,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAA;YACrC,EAAE,CAAC,UAAU,CAACA,KAAG,CAAC,YAAY,EAAE,MAAM,CAAC,MAAM,CAAC,CAAA;YAC9C,EAAE,CAAC,WAAW,EAAE,CAAA;YAEhB,EAAE,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAA;YACpC,EAAE,CAAC,WAAW,EAAE,CAAA;YAEhB,EAAE,CAAC,mBAAmB,CAAC,QAAQ,EAAE,MAAM,CAAC,OAAO,EAAEA,KAAG,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;YACxE,EAAE,CAAC,WAAW,EAAE,CAAA;YAEhB,qBAAqB,GAAG,IAAI,CAAC,GAAG,CAAC,qBAAqB,EAAE,MAAM,CAAC,KAAK,CAAC,CAAA;SACrE;;QAGD,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,UAAU,EAAE;YACxC,IAAI,EAAE,SAAS,IAAI,aAAa,CAAC,EAAE;gBAClC,EAAE,CAAC,wBAAwB,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAA;gBACvD,EAAE,CAAC,WAAW,EAAE,CAAA;aAChB;SACD;;QAGD,IAAI,qBAAqB,EAAE;YAC1B,KAAK,GAAG,KAAK,KAAK,WAAW,GAAG,WAAW,CAAC,KAAK,GAAG,qBAAqB,CAAC,CAAA;YAC1E,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,QAAQ,GAAG,KAAK,GAAG,gCAAgC;kBACtF,gBAAgB,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,GAAG,YAAY,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAA;YAEvE,IAAI,WAAW,EAAE;gBAChB,MAAM,CAAC,WAAW,CAAC,eAAe,CAAC,CAAA;gBACnC,MAAM,CAAC,qBAAqB,GAAG,WAAW,CAAC,QAAS,CAAC,CAAA;gBACrD,MAAM,CAAC,KAAK,GAAG,WAAW,CAAC,OAAO,IAAI,CAAC,CAAC,CAAA;gBACxC,MAAM,CAAC,KAAK,GAAG,WAAW,CAAC,OAAO,IAAI,CAAC,CAAC,CAAA;gBACxC,IAAI,KAAK,GAAG,KAAK,GAAG,WAAW,CAAC,KAAK,EAAE;oBACtC,MAAM,IAAI,KAAK,CAAC,yEAAyE,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,WAAW,CAAC,KAAK,CAAC,CAAA;iBAChJ;gBACD,EAAE,CAAC,UAAU,CAACA,KAAG,CAAC,oBAAoB,EAAE,WAAW,CAAC,MAAO,CAAC,CAAA;gBAC5D,EAAE,CAAC,WAAW,EAAE,CAAA;;gBAEhB,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,EAAEA,KAAG,CAAC,cAAc,EAAE,CAAC,GAAG,KAAK,CAAC,CAAA;gBAC3D,EAAE,CAAC,WAAW,EAAE,CAAA;aAChB;iBAAM;gBACN,IAAI,KAAK,GAAG,KAAK,GAAG,qBAAqB,EAAE;oBAC1C,MAAM,IAAI,KAAK,CAAC,SAAS,CAAC,CAAA;iBAC1B;gBACD,EAAE,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAA;gBACjC,EAAE,CAAC,WAAW,EAAE,CAAA;aAChB;YACD,EAAE,CAAC,aAAa,EAAE,CAAA;SAClB;QAED,OAAO,IAAI,CAAA;KACX;CACD;;AC/ZD;;;AAGA,AAAO,MAAM,cAAc,GAAa,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;AAEpD;IACI,OAAO,cAAc,CAAC,EAAE,CAAA;CAC3B;AAED,MAAMA,KAAG,GAAG,qBAAqB,CAAA;AAEjC,kBAAyB,GAAQ;IAC7B,MAAM,GAAG,GAAG,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IAC/C,OAAO,GAAG,IAAI,iBAAiB,IAAI,GAAG,IAAI,kBAAkB,CAAA;CAC/D;AAKD;IA0BI,YAAsB,EAAkB,EAAU,YAAY;YAC1D,IAAI,EAAE,IAAI,IAAI,EAAE;iBACX,eAAe,CAAC,QAAQ,EAAE,cAAc,CAAC;iBACzC,eAAe,CAAC,QAAQ,EAAE,WAAW,CAAC;YAC3C,IAAI,EAAE,CAAC,CAAoB;YAC3B,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAqB;YACjC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAa;YAC/B,SAAS,EAAE,CAAC;YACZ,MAAM,EAAE,IAAI,MAAM,CAAC;;;;;;;;;;SAUlB,EAAE;;;;;;;;;;SAUF,EAAE,EAAE,CAAC;SACT;QA7BiD,cAAS,GAAT,SAAS,CA6B1D;QAtDD,oBAAe,GAAO,IAAI,EAAE,EAAE,CAAA;QAC9B,qBAAgB,GAAO,IAAI,EAAE,EAAE,CAAA;QAG/B,cAAS,GAAG,cAAc,CAAC,SAAS,CAAA;QACpC,eAAU,GAAG,cAAc,CAAC,UAAU,CAAA;QAM9B,eAAU,GAAG,IAAI,EAAE,EAAE,CAAA;QACrB,iBAAY,GAAG,IAAI,EAAE,EAAE,CAAA;QACvB,mBAAc,GAAS,EAAE,CAAA;QACzB,oBAAe,GAAS,EAAE,CAAA;QAO3B,kBAAa,GAAQ,CAAC,CAAA;QACtB,4BAAuB,GAAQ,CAAC,CAAA;QAChC,2BAAsB,GAAQ,CAAC,CAAA;QAgClC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,SAAS,CAAC,CAAA;KAC5C;;IAGD,UAAU,CAAC,IAAqC;QAC5C,QAAQ,IAAI;YACR,KAAK,IAAI,CAAC,SAAS;gBACf,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAA;;gBAE1C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,cAAc,CAAA;gBAChC,MAAK;YACT,KAAK,IAAI,CAAC,UAAU;gBAChB,IAAI,CAAC,iBAAiB,GAAG,kBAAkB,CAAA;;gBAE3C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,eAAe,CAAA;gBACjC,MAAK;YACT;gBACI,MAAM,IAAI,KAAK,CAAC,sBAAsB,GAAG,IAAI,CAAC,CAAA;SACrD;KACJ;IAED,YAAY;QACR,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAA;QACzC,IAAI,CAAC,iBAAiB,IAAI,kBAAkB,GAAG,IAAI,CAAC,uBAAuB,EAAE,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAA;KAChH;IAED,UAAU,CAAC,EAAM;QACb,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAA;QACzC,IAAI,CAAC,iBAAiB,IAAI,kBAAkB,GAAG,IAAI,CAAC,uBAAuB,EAAE,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAA;KAChH;IAED,UAAU,CAAC,EAAM;QACb,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,CAAA;QAChE,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAA;QAC9B,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAA;QAChD,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAA;QACnC,IAAI,CAAC,iBAAiB,IAAI,kBAAkB,GAAG,IAAI,CAAC,uBAAuB,EAAE,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAA;KAChH;IAED,MAAM,CAAC,KAAiC;QACpC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAA;KACpC;IAED,WAAW,CAAC,UAAkB,EAAE,MAAc,EAAE,IAAY,EAAE,GAAW,EAAE,MAAW;QAClF,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,cAAc,CAAC,UAAU,GAAG,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAA;KAC3F;IAED,OAAO,CAAC,IAAY,EAAE,KAAa,EAAE,MAAc,EAAE,GAAW,EAAE,IAAY,EAAE,GAAW;QACvF,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAA;KACpF;IAED,KAAK,CAAC,IAAY,EAAE,KAAa,EAAE,MAAc,EAAE,GAAW,EAAE,IAAY,EAAE,GAAW;QACrF,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAA;KAClF;IAKD,KAAK,CAAC,GAAG,IAAW;QAChB,IAAI,CAAC,UAAU,CAAE,EAAE,CAAC,KAAa,CAAC,GAAG,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAA;KAC/D;IAED,SAAS;QACL,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAA;KACnC;IAID,SAAS,CAAC,CAAM,EAAE,CAAO,EAAE,CAAO;QAC9B,IAAI,SAAS,KAAK,CAAC,EAAE;YACjB,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAA;SAC1D;aAAM;YACH,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAA;SACpD;KACJ;IAED,MAAM,CAAC,YAAoB,EAAE,CAAS,EAAE,CAAS,EAAE,CAAS;QACxD,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,MAAM,CAAC,YAAY,GAAG,GAAG,EAAE,EAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAC,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAA;KAC7E;IAED,MAAM,CAAC,GAAO,EAAE,MAAU,EAAE,EAAM;QAC9B,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAA;KAC/D;IAED,UAAU;QACN,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAA;KACzD;IAED,SAAS;QACL,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAA;QAC5B,MAAM,CAAC,SAAS,KAAK,GAAG,CAAC,CAAA;QACzB,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,GAAS,CAAA;QACxC,IAAI,CAAC,iBAAiB,IAAI,kBAAkB,GAAG,IAAI,CAAC,uBAAuB,EAAE,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAA;KAChH;;;;IAKD,gBAAgB;QACZ,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QACjD,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,QAAQ,CAAA;QAC7B,MAAM,sBAAsB,GAAG,IAAI,EAAE,CAAC;YAClC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC;YACtB,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC;YACtB,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;YACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;SACb,CAAC,CAAA;QACF,OAAO,EAAE,CAAC,gBAAgB,CAAC,sBAAsB,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,eAAe,CAAC,CAAA;KAClG;;;;;;;;;;;IAcD,SAAS,CAAC,SAAiB;QACvB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAC,SAAS,EAAE,SAAS,EAAC,CAAC,CAAA;KACzD;IAED,KAAK,CAAC,IAAqB;QACvB,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAA;QACtG,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,IAAI,CAAA;QAC1B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAA;QAC/B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAA;QAC/B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAA;KACpC;IAMD,KAAK,CAAC,GAAG,IAAW;QAChB,IAAI,CAAC,SAAS,CAAC,KAAK;YAChB,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;kBACrC,IAAI,CAAC,CAAC,CAAC;kBACP,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,IAAI,QAAQ,IAAI,OAAO,IAAI,CAAC,CAAC,CAAC;sBAC/C,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;sBACxB,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,IAAI,QAAQ,IAAI,OAAO,IAAI,CAAC,CAAC,CAAC;0BAC3C,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;0BACpB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAA;KAC1D;IAKD,QAAQ,CAAC,GAAG,IAAW;QACnB,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAA;KAC7D;IAID,MAAM,CAAC,GAAG,IAAW;QACjB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;QACrD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;QACrD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAA;KAC9D;IAED,GAAG;QACC,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,CAAC;YAAE,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAA;QACtG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,CAAA;QAC7B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC;YAC3B,UAAU,EAAE,CAAC,CAAC,cAAc,CAAC,EAAE,CAAC,YAAY,CAACA,KAAG,CAAC,kBAAkB,CAAC;SACvE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;QACjF,IAAI,CAAC,SAAS,CAAC,IAAI,GAAG,CAAC,CAAC,CAAA;KAC3B;IAMD,WAAW;QACP,cAAc,CAAC,EAAE,GAAG,IAAI,CAAA;KAC3B;;;;IAKD,OAAO,CAAC,QAA4F;QAChG,MAAM,qBAAqB,GACvB,MAAM,CAAC,qBAAqB;YAC3B,MAAc,CAAC,wBAAwB;YACxC,MAAM,CAAC,2BAA2B;YAClC,UAAU,QAA8B;gBACpC,UAAU,CAAC,MAAM,QAAQ,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,GAAG,EAAE,CAAC,CAAA;aAC3D,CAAA;QACL,IAAI,IAAI,GAAG,WAAW,CAAC,GAAG,EAAE,EAAE,YAAY,GAAG,IAAI,CAAA;QACjD,MAAM,MAAM,GAAG,CAAC,mBAA2B;YACvC,MAAM,GAAG,GAAG,WAAW,CAAC,GAAG,EAAE,CAAA;YAC7B,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,CAAA;YACpC,IAAI,GAAG,GAAG,CAAA;YACV,YAAY,IAAI,qBAAqB,CAAC,MAAM,CAAC,CAAA;SAChD,CAAA;QACD,qBAAqB,CAAC,MAAM,CAAC,CAAA;QAC7B,OAAO,QAAQ,YAAY,GAAG,KAAK,CAAA,EAAE,CAAA;KACxC;;;;;;;;;;;;;;;;;;IAoBD,UAAU,CAAC,UASP,EAAE;QAEF,MAAM,GAAG,GAAG,OAAO,CAAC,UAAU,IAAI,CAAC,CAAA;QACnC,MAAM,IAAI,GAAG,OAAO,CAAC,WAAW,IAAI,CAAC,CAAA;QACrC,MAAM,KAAK,GAAG,OAAO,CAAC,YAAY,IAAI,CAAC,CAAA;QACvC,MAAM,MAAM,GAAG,OAAO,CAAC,aAAa,IAAI,CAAC,CAAA;QACzC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,oEAAoE;gBAChF,gDAAgD,CAAC,CAAA;SACxD;QACD,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;QACtC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAA;QACvC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAA;QACvC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI,CAAA;QACpC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,CAAA;QAClC,MAAM,EAAE,GAAG,IAAI,CAAA;QAEf;YACI,EAAE,CAAC,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,UAAU,GAAG,IAAI,GAAG,KAAK,CAAA;YAClD,EAAE,CAAC,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,WAAW,GAAG,GAAG,GAAG,MAAM,CAAA;YACpD,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;YACpD,IAAI,OAAO,CAAC,MAAM,EAAE;gBAChB,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,UAAU,CAAC,CAAA;gBACxC,EAAE,CAAC,YAAY,EAAE,CAAA;gBACjB,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,GAAG,IAAI,EAAE,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,CAAC,MAAM,EAChE,OAAO,CAAC,IAAI,IAAI,GAAG,EAAE,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,CAAA;gBAC7C,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,SAAS,CAAC,CAAA;aAC1C;SACJ;QAED,MAAM,CAAC,gBAAgB,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAA;QACjD,cAAc,EAAE,CAAA;QAChB,OAAO,IAAI,CAAA;KACd;IAED,YAAY;QACR,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAA;KAC7D;IAED,WAAW;;;;;KAKV;;;;;IAOD,OAAO,MAAM,CAAC,UAA2D,EAAE;QACvE,MAAM,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAA;QACjE,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YACjB,MAAM,CAAC,KAAK,GAAG,GAAG,CAAA;YAClB,MAAM,CAAC,MAAM,GAAG,GAAG,CAAA;SACtB;QACD,IAAI,EAAE,OAAO,IAAI,OAAO,CAAC;YAAE,OAAO,CAAC,KAAK,GAAG,KAAK,CAAA;QAChD,IAAI,KAAK,GAA+B,SAAS,CAAA;QACjD,IAAI;YACA,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,OAAO,CAAmB,CAAA;YAC7D,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAA;SACjC;QAAC,OAAO,CAAC,EAAE;YACR,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAA;SACxB;QACD,IAAI;YACA,KAAK,GAAG,KAAK,IAAI,MAAM,CAAC,UAAU,CAAC,oBAAoB,EAAE,OAAO,CAAmB,CAAA;SACtF;QAAC,OAAO,CAAC,EAAE;YACR,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAA;SACxB;QACD,IAAI,CAAC,KAAK;YAAE,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAA;QAElD,cAAc,CAAC,EAAE,GAAG,KAAK,CAAA;QACzB,gBAAgB,CAAC,KAAK,EAAE,cAAc,CAAC,SAAS,CAAC,CAAA;QACjD,gBAAgB,CAAC,KAAK,EAAE,IAAI,cAAc,CAAC,KAAK,CAAC,CAAC,CAAA;;QAElD,OAAO,KAAK,CAAA;KACf;;AAxWe,wBAAS,GAAoC,CAAQ,CAAA;AACrD,yBAAU,GAAoC,CAAQ,CAAA;AAK/D,6BAAc,GAAQ,MAAM,CAAA;AAqWvC,IAAK,SAQJ;AARD,WAAK,SAAS;IACV,kCAAWA,KAAG,CAAC,QAAQ,cAAA,CAAA;IACvB,sCAAeA,KAAG,CAAC,YAAY,kBAAA,CAAA;IAC/B,uCAAgBA,KAAG,CAAC,aAAa,mBAAA,CAAA;IACjC,2CAAoBA,KAAG,CAAC,iBAAiB,uBAAA,CAAA;IACzC,uDAAgCA,KAAG,CAAC,6BAA6B,mCAAA,CAAA;IACjE,uCAAgBA,KAAG,CAAC,aAAa,mBAAA,CAAA;IACjC,4CAAqBA,KAAG,CAAC,kBAAkB,wBAAA,CAAA;CAC9C,EARI,SAAS,KAAT,SAAS,QAQb;AAED,cAAc,CAAC,SAAS,CAAC,SAAS,GAAG,cAAc,CAAC,SAAS,CAAA;AAC7D,cAAc,CAAC,SAAS,CAAC,UAAU,GAAG,cAAc,CAAC,UAAU,CAAA;AAC/D,cAAc,CAAC,SAAS,CAAC,cAAc,GAAG,cAAc,CAAC,cAAc,CAAA;;;;;;;;AAUvE,kBAAyB,SAAgB,EAAE,OAAgB,EAAE,CAAM,EAAE,CAAM,EAAE,CAAM,EAAE,CAAM;IACvF,IAAI,OAAO,EAAE;QACT,SAAS,CAAC,IAAI,CACV,CAAC,EAAE,CAAC,EAAE,CAAC,EACP,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;KACf;SAAM;QACH,SAAS,CAAC,IAAI,CACV,CAAC,EAAE,CAAC,EAAE,CAAC,EACP,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;KACf;CACJ;AAED,yBAAyB,KAAU;IAC/B,OAAO,CAAC,CAAC,KAAK,IAAI,EAAE,IAAI,KAAK,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,IAAI,IAAI,IAAI,KAAK,EAAE,CAAC,KAAK,GAAG,IAAI,IAAI,KAAK,EAAE,GAAG,CAAC,CAAA;CAC7F;;ACzaD,MAAM,GAAG,GAAG,qBAAqB,CAAA;AAEjC;;;;;;;;;;;;;;;IA8BC,YAAqB,MAAW,EAAW,IAA8C;QAApE,WAAM,GAAN,MAAM,CAAK;QAAW,SAAI,GAAJ,IAAI,CAA0C;QACxF,MAAM,CAAC,MAAM,IAAI,GAAG,CAAC,YAAY,IAAI,MAAM,IAAI,GAAG,CAAC,oBAAoB,EAAE,kEAAkE,CAAC,CAAA;QAC5I,MAAM,CAAC,IAAI,IAAI,YAAY,IAAI,IAAI,IAAI,WAAW,EAAE,6CAA6C,CAAC,CAAA;QAClG,IAAI,CAAC,MAAM,GAAG,SAAS,CAAA;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAA;QACd,IAAI,CAAC,KAAK,GAAG,CAAC,CAAA;QACd,IAAI,CAAC,OAAO,GAAG,CAAC,CAAA;QAChB,IAAI,CAAC,eAAe,GAAG,KAAK,CAAA;KAC5B;;;;;;;;;;;IAYD,OAAO,CAAC,OAAY,GAAG,CAAC,WAAW,EAAE,KAAqB,SAAS,EAAE;QACpE,MAAM,CAAC,GAAG,CAAC,WAAW,IAAI,IAAI,IAAI,GAAG,CAAC,YAAY,IAAI,IAAI,EAAE,qDAAqD,CAAC,CAAA;QAClH,EAAE,CAAC,WAAW,EAAE,CAAA;QAChB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC,YAAY,EAAG,CAAA;QAC/C,EAAE,CAAC,WAAW,EAAE,CAAA;QAChB,IAAI,MAAkC,CAAA;QACtC,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,EAAE;YAC1B,OAAO,CAAC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,CAAA;;SAEzC;QACD,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY,EAAE,EAAE;YACxD,MAAM,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,YAAY,CAAC,CAAA;YAClE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAiB,CAAC,CAAA;;YAEhF,IAAI,CAAC,OAAO,GAAG,CAAC,CAAA;YAChB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAA;YAC7B,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAA;SACjB;aAAM;;YAEN,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;gBAChC,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAA;gBAC3D,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;gBACpC,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,GAAG,YAAY,CAAA;gBAChD,OAAO,CAAC,EAAE,EAAE;oBACX,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;oBAC7B,IAAI,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAA;oBACvB,OAAO,CAAC,EAAE,EAAE;wBACX,MAAM,CAAC,EAAE,OAAO,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAA;qBAC/B;iBACD;gBACD,MAAM,CAAC,CAAC,IAAI,OAAO,CAAC,CAAA;aACpB;iBAAM;gBACN,MAAM,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;aACjC;YAED,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAA;YACvE,MAAM,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,UAAU,IAAI,CAAC,IAAI,oDAAoD,GAAG,OAAO,CAAC,CAAA;YAC3G,IAAI,SAAS,EAAE;gBACd,IAAI,KAAK,IAAI,MAAM,CAAC,MAAM,EAAE;oBAC3B,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAA;iBACjB;qBAAM;oBACN,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,EAAE,MAAM,CAAC,CAAA;iBACjD;aACD;YACD,MAAM,CAAC,OAAO,KAAK,CAAC,CAAC,CAAA;YACrB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;YACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAA;SAC7B;QACD,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;QACvC,EAAE,CAAC,WAAW,EAAE,CAAA;QAChB,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,CAAA;QACxC,EAAE,CAAC,WAAW,EAAE,CAAA;QAChB,IAAI,CAAC,eAAe,GAAG,IAAI,CAAA;KAC3B;CACD;;;;;;;;;;;;;;;;;;;;;;;;;;IC/DA,YAAY,KAAU,EAAE,MAAW,EAAE,UAA0B,EAAE,EAAW,KAAK,SAAS,EAAE;QAAhB,OAAE,GAAF,EAAE,CAAc;QAC3F,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC,aAAa,EAAG,CAAA;QAClC,EAAE,CAAC,WAAW,EAAE,CAAA;QAChB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;QAClB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,EAAE,CAAC,IAAI,CAAA;QACvC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,EAAE,CAAC,aAAa,CAAA;QAC5C,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,SAAS,IAAI,EAAE,CAAC,MAAM,CAAA;QAClE,MAAM,SAAS,GAAG,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,SAAS,IAAI,EAAE,CAAC,MAAM,CAAA;QAClE,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,KAAK,EAAE;YAC3B,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,mBAAmB,CAAC,EAAE;gBAC1C,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAA;aAClE;YACD,IAAI,CAAC,SAAS,KAAK,EAAE,CAAC,OAAO,IAAI,SAAS,KAAK,EAAE,CAAC,OAAO,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,0BAA0B,CAAC,EAAE;gBAC3G,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAA;aACzE;SACD;aAAM,IAAI,IAAI,CAAC,IAAI,KAAK,cAAc,CAAC,cAAc,EAAE;YACvD,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,wBAAwB,CAAC,EAAE;gBAC/C,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAA;aACvE;YACD,IAAI,CAAC,SAAS,KAAK,EAAE,CAAC,OAAO,IAAI,SAAS,KAAK,EAAE,CAAC,OAAO,KAAK,CAAC,EAAE,CAAC,YAAY,CAAC,+BAA+B,CAAC,EAAE;gBAChH,MAAM,IAAI,KAAK,CAAC,6DAA6D,CAAC,CAAA;aAC9E;SACD;QACD,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,CAAA;QAC3C,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAA;QACzC,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,kBAAkB,EAAE,SAAS,CAAC,CAAA;QACjE,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,kBAAkB,EAAE,SAAS,CAAC,CAAA;QACjE,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,cAAc,EAAE,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,aAAa,CAAC,CAAA;QACrG,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,cAAc,EAAE,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,aAAa,CAAC,CAAA;QACrG,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;KAC5F;IAED,IAAI,CAAC,IAAS;QACb,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAA;QAC9C,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,CAAA;KACrD;IAED,MAAM,CAAC,IAAS;QACf,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAA;QAC9C,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;KAC7C;IAMD,SAAS;QACR,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAA;QAClB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,EAAE,CAAC,iBAAiB,EAAE,CAAA;QAC7D,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAA;QACpD,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,WAAW,EAAE,EAAE,CAAC,iBAAiB,EAAE,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAA;QAC7F,MAAM,MAAM,GAAG,EAAE,CAAC,sBAAsB,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,oBAAoB,CAAA;QACnF,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC,WAAW,EAAE,IAAI,CAAC,CAAA;QACxC,OAAO,MAAM,CAAA;KACb;IAED,MAAM,CAAC,QAAsC;QAC5C,MAAM,EAAE,GAAG,IAAI,CAAC,EAAE,CAAA;QAClB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,EAAE,CAAC,iBAAiB,EAAE,CAAA;QAC7D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,IAAI,EAAE,CAAC,kBAAkB,EAAS,CAAA;QACvE,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,CAAA;QACpD,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,CAAA;QACvD,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;YACrF,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAA;YACpC,IAAI,CAAC,YAAY,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAA;YACtC,EAAE,CAAC,mBAAmB,CAAC,EAAE,CAAC,YAAY,EAAE,EAAE,CAAC,iBAAiB,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;SACtF;QACD,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC,WAAW,EAAE,EAAE,CAAC,iBAAiB,EAAE,EAAE,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAA;QAC7F,EAAE,CAAC,uBAAuB,CAAC,EAAE,CAAC,WAAW,EAAE,EAAE,CAAC,gBAAgB,EAAE,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,CAAC,CAAA;QACnG,IAAI,EAAE,CAAC,sBAAsB,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,oBAAoB,EAAE;YACzE,MAAM,IAAI,KAAK,CAAC,0EAA0E,CAAC,CAAA;SAC3F;QACD,MAAM,QAAQ,GAAG,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAA;QAC7C,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;QAE1C,QAAQ,CAAC,EAAE,CAAC,CAAA;QAEZ,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC,WAAW,EAAE,IAAI,CAAC,CAAA;QACxC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,CAAA;QAC1C,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;KAC/D;IAED,QAAQ,CAAC,KAAc;QACtB,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,KAAK,CAAC,EAAE,CAAC,CAAA;QAC3B,IAAI,IAAI,CAAA;QACR,IAAI,GAAG,KAAK,CAAC,OAAO,CAAA;QACpB,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAA;QAC5B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAA;QAEnB,IAAI,GAAG,KAAK,CAAC,KAAK,CAAA;QAClB,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAA;QACxB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAA;QAEjB,IAAI,GAAG,KAAK,CAAC,MAAM,CAAA;QACnB,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAA;QAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAA;KAClB;;;;IAKD,OAAO,SAAS,CAAC,UAAgD,EAAE,OAAuB,EAAE,KAAqB,SAAS,EAAE;QAC3H,OAAO,GAAG,OAAO,IAAI,EAAE,CAAA;QACvB,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE,CAAC,CAAA;QAC7E,IAAI;YACH,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,EAAE,UAAU,CAAC,CAAA;SACzF;QAAC,OAAO,CAAC,EAAE;YACX,IAAI,QAAQ,CAAC,QAAQ,IAAI,OAAO,EAAE;gBACjC,MAAM,IAAI,KAAK,CAAC,qFAAqF,CAAC,CAAA;aACtG;iBAAM;gBACN,MAAM,IAAI,KAAK,CAAC,sFAAsF;oBACrG,2DAA2D,CAAC,CAAA;aAC7D;SACD;QACD,IAAI,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,IAAI,EAAE,CAAC,OAAO,IAAI,OAAO,CAAC,SAAS,IAAI,EAAE,CAAC,MAAM,EAAE;YAC3F,EAAE,CAAC,cAAc,CAAC,EAAE,CAAC,UAAU,CAAC,CAAA;SAChC;QACD,OAAO,OAAO,CAAA;KACd;;;;IAKD,OAAO,OAAO,CAAC,GAAW,EAAE,UAA0B,EAAE,EAAE,EAAE,GAAG,SAAS,EAAE;QACzE,OAAO,CAAC,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,IAAI,CAAC;YAC3D,MAAM,CAAC,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;YAC3D,IAAI,CAAC,CAAC;gBAAE,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAA;YACtD,CAAC,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,GAAG,CAAA;YACtC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,IAAI,EAAE,EAAE;gBAC7C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,EAAE;;oBAE5C,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,MAAM,GAAG,MAAM,CAAA;oBAC5C,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAA;iBACxB;aACD;YACD,OAAO,CAAC,CAAC,MAAM,CAAA;SACf,GAAG,CAAA;QACJ,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAA;QACtE,MAAM,KAAK,GAAG,IAAI,KAAK,EAAE,CAAA;QACzB,KAAK,CAAC,MAAM,GAAG,MAAM,OAAO,CAAC,SAAS,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;QAC5E,KAAK,CAAC,GAAG,GAAG,GAAG,CAAA;QACf,OAAO,OAAO,CAAA;KACd;CACD;;;;"}