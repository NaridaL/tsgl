{"version":3,"file":"demo.js","sources":["../node_modules/javasetmap.ts/src/JavaMap.ts","../node_modules/ts3dutils/src/util.ts","../node_modules/ts3dutils/src/arrayUtils.ts","../node_modules/ts3dutils/src/V3.ts","../node_modules/ts3dutils/src/Vector.ts","../node_modules/ts3dutils/src/Matrix.ts","../node_modules/ts3dutils/src/NLA.ts","../node_modules/ts3dutils/src/Transformable.ts","../node_modules/ts3dutils/src/toSource.ts","../node_modules/ts3dutils/src/AABB.ts","../node_modules/ts3dutils/src/M4.ts","../node_modules/tslib/tslib.es6.js","../node_modules/chroma.ts/src/index.ts","../src/Buffer.ts","../src/Mesh.ts","../src/Shader.ts","../src/Texture.ts","../src/shaders/posCoordVS.glslx","../src/shaders/sdfRenderFS.glslx","../src/KhronosGroupWebGLDebug.ts","../src/TSGLContext.ts","../src/shaders/posNormalColorVS.glslx","../src/demo/camera.ts","../src/demo/immediateMode.ts","../src/demo/gpuLightMap.ts","../src/shaders/varyingColorFS.glslx","../src/demo/mag.ts","../src/demo/multiTexture.ts","../src/shaders/rayTracerFS.glslx","../src/shaders/rayTracerVS.glslx","../src/demo/rayTracing.ts","../src/demo/renderText.ts","../src/demo/renderToTexture.ts","../src/demo/shadowMap.ts","../src/demo/setupDemo.ts"],"sourcesContent":["import {Equalable, int} from './Equalable'\n\n/**\n * Java style map.\n */\nexport class JavaMap<K extends Equalable & {hashCodes?(): int[], like?(x: any): boolean }, V> implements Map<K, V> {\n    [Symbol.toStringTag]: 'Map' = 'Map'\n\n    toString() {\n        return '{' + Array.from(this.entries2()).map(({key, value}) => key + ':' + value).join(', ') + '}'\n    }\n\n    forEach(callbackfn: (value: V, index: K, map: Map<K, V>) => void, thisArg?: any): void {\n        for (const bucket of this._map.values()) {\n            for (const {key, value} of bucket) {\n                callbackfn.call(thisArg, value, key, this)\n            }\n        }\n    }\n\n    * keys(): IterableIterator<K> {\n        for (const bucket of this._map.values()) {\n            for (const {key} of bucket) {\n                yield key\n            }\n        }\n    }\n\n    * values(): IterableIterator<V> {\n        for (const bucket of this._map.values()) {\n            for (const {value} of bucket) {\n                yield value\n            }\n        }\n    }\n\n    protected _map: Map<int, { key: K, value: V }[]>\n    protected _size: int\n\n    constructor() {\n        this._map = new Map()\n        this._size = 0\n    }\n\n    [Symbol.iterator]() {\n        return this.entries()\n    }\n\n    set(key: K, value: V): this {\n        this.set2(key, value)\n        return this\n    }\n\n    /**\n     * Like {@link #set} except it returns true if key was new and false if the value was only updated.\n     *\n     */\n    set2(key: K, val: V): boolean {\n        const hashCode = key.hashCode(), bucket = this._map.get(hashCode)\n        //assert(hashCode === (hashCode | 0))\n        if (bucket) {\n            const pairIndex = bucket.findIndex(pair => pair.key.equals(key))\n            if (-1 == pairIndex) {\n                bucket.push({key: key, value: val})\n            } else {\n                bucket[pairIndex].value = val\n                return false\n            }\n        } else {\n            this._map.set(hashCode, [{key: key, value: val}])\n        }\n        this._size++\n        return true\n    }\n\n    has(key: K): boolean {\n        const hashCode = key.hashCode(), bucket = this._map.get(hashCode)\n        //assert(hashCode === (hashCode | 0))\n        return undefined !== bucket && bucket.some(pair => pair.key.equals(key))\n    }\n\n    get(key: K): V | undefined {\n        const\n                hashCode = key.hashCode(),\n                bucket = this._map.get(hashCode),\n                pair = bucket && bucket.find(pair => pair.key.equals(key))\n        return pair && pair.value\n    }\n\n    getLike(key: K) {\n        for (const hashCode of key.hashCodes!()) {\n            const bucket = this._map.get(hashCode)\n            const canonVal = bucket && bucket.find(x => x.key.like!(key))\n            if (canonVal) return canonVal\n        }\n    }\n\n    setLike(key: K, val: V) {\n        return !this.getLike(key) && this.set(key, val)\n    }\n\n    'delete'(key: K) {\n        const hashCode = key.hashCode(), bucket = this._map.get(hashCode)\n        if (bucket) {\n            const index = bucket.findIndex(x => x.key.equals(key))\n            if (-1 != index) {\n                if (1 == bucket.length) {\n                    this._map.delete(hashCode)\n                } else {\n                    bucket.splice(index, 1)\n                }\n                this._size--\n                return true\n            }\n        }\n        return false\n    }\n\n    deleteLike(key: K) {\n        for (const hashCode of key.hashCodes!()) {\n            const bucket = this._map.get(hashCode)\n            if (bucket) {\n                const index = bucket.findIndex(x => x.key.like!(key))\n                if (-1 != index) {\n                    const deleted = bucket[index]\n                    if (1 == bucket.length) {\n                        this._map.delete(hashCode)\n                    } else {\n                        bucket.splice(index, 1)\n                    }\n                    this._size--\n                    return deleted\n                }\n            }\n        }\n    }\n\n    * entries2(): IterableIterator<{ key: K, value: V }> {\n        for (const bucket of this._map.values()) {\n            yield* bucket\n        }\n    }\n\n    * entries(): IterableIterator<[K, V]> {\n        for (const bucket of this._map.values()) {\n            for (const {key, value} of bucket) {\n                yield [key, value]\n            }\n        }\n    }\n\n    clear() {\n        this._map.clear()\n        this._size = 0\n    }\n\n    get size() {\n        return this._size\n    }\n}\n","export const PI = Math.PI\nexport const TAU = 2 * PI\nexport type int = number\nexport type colorstr = string // e.g. '#abcdef\nexport type raddd = number\nexport type FloatArray = Float32Array | Float64Array | number[]\n\n/** Use rollup-plugin-replace or similar to avoid error in browser. */\n// @ts-ignore\nexport const NLA_DEBUG = process.env.NODE_ENV != 'production'\nexport const NLA_PRECISION = 1 / (1 << 26)\nconsole.log('NLA_PRECISION', NLA_PRECISION)\nconsole.log('NLA_DEBUG', NLA_DEBUG)\n\nlet oldConsole: any = undefined\nexport function disableConsole() {\n\toldConsole = console.log\n\tconsole.log = function () {}\n}\nexport function enableConsole() {\n\tif (oldConsole) {\n\t\tconsole.log = oldConsole\n\t}\n}\nexport function hasConstructor<T>(instance: any, cons: { new (...args: any[]): T }): instance is T {\n\treturn instance.constructor == cons\n}\n\nexport function assertInst<T>(what: Function & { prototype: T }, ...objs: T[]) {\n\tif (NLA_DEBUG) {\n\t\tfor (let i = 0; i < objs.length; i++) {\n\t\t\tif (!(objs[i] instanceof what)) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'assertInst objs[' +\n\t\t\t\t\t\ti +\n\t\t\t\t\t\t'] is not a ' +\n\t\t\t\t\t\twhat.prototype.name +\n\t\t\t\t\t\t'. ' +\n\t\t\t\t\t\t(objs[i] as any)?.constructor?.name +\n\t\t\t\t\t\tobjs[i],\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\nexport function assertNumbers(...numbers: number[]) {\n\tif (NLA_DEBUG) {\n\t\tfor (let i = 0; i < numbers.length; i++) {\n\t\t\tif ('number' !== typeof numbers[i]) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`assertNumbers arguments[${i}] is not a number. ${typeof numbers[i]} == typeof ${numbers[i]}`,\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\nexport function assertInts(...numbers: number[]) {\n\tif (NLA_DEBUG) {\n\t\tfor (let i = 0; i < numbers.length; i++) {\n\t\t\tif ('number' !== typeof numbers[i] || numbers[i] % 1 !== 0) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`assertNumbers arguments[${i}] is not an int. ${typeof numbers[i]} == typeof ${numbers[i]}`,\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\nexport function assert(value: any, ...messages: (any | (() => string))[]): value is true {\n\tif (NLA_DEBUG && !value) {\n\t\tthrow new Error(\n\t\t\t'assert failed: ' +\n\t\t\t\tmessages.map((message) => ('function' === typeof message ? message() : message || '')).join('\\n'),\n\t\t)\n\t}\n\treturn true\n}\nexport function assertNever(value?: never): never {\n\tthrow new Error()\n}\nexport function assertf(f: () => any, ...messages: (any | (() => any))[]) {\n\tif (NLA_DEBUG && !f()) {\n\t\tthrow new Error(\n\t\t\t'assertf failed: ' +\n\t\t\t\tf.toString() +\n\t\t\t\tmessages.map((message) => ('function' === typeof message ? message() : message || '')).join('\\n'),\n\t\t)\n\t}\n}\n\nexport function lerp(a: number, b: number, t: number) {\n\treturn a * (1 - t) + b * t\n}\nexport function lerpInv(a: number, b: number, t: number) {\n\treturn (t - a) / (b - a)\n}\nconst originalNumberToString = Number.prototype.toString\nNumber.prototype.toString = function (radix) {\n\tif (PI == this) {\n\t\treturn 'PI'\n\t}\n\treturn originalNumberToString.call(this, radix)\n}\n\nexport const eq0 = (x: number, EPS: number = NLA_PRECISION): boolean => Math.abs(x) <= EPS\nexport const eq = (x: number, y: number, EPS: number = NLA_PRECISION): boolean => Math.abs(x - y) <= EPS\nexport const lt = (x: number, y: number, EPS: number = NLA_PRECISION): boolean => x - y < -EPS\nexport const gt = (x: number, y: number, EPS: number = NLA_PRECISION): boolean => y - x < -EPS\nexport const le = (x: number, y: number, EPS: number = NLA_PRECISION): boolean => x - y <= EPS\nexport const ge = (x: number, y: number, EPS: number = NLA_PRECISION): boolean => y - x <= EPS\n\nexport const eqAngle = (x: number, y: number): boolean => zeroAngle(x - y)\nexport const zeroAngle = (x: number): boolean =>\n\t((x % (2 * Math.PI)) + 2 * Math.PI + NLA_PRECISION) % (2 * Math.PI) < 2 * NLA_PRECISION\nexport const snap = (x: number, to: number): number => (Math.abs(x - to) <= NLA_PRECISION ? to : x)\nexport const snap2 = (x: number, ...to: number[]): number =>\n\tto.reduce((x, to) => (Math.abs(x - to) <= NLA_PRECISION ? to : x), x)\nexport const snapEPS = (x: number, EPS: number, ...to: number[]): number =>\n\tto.reduce((x, to) => (Math.abs(x - to) <= EPS ? to : x), x)\nexport const snap0 = (x: number, EPS = NLA_PRECISION): number => (Math.abs(x) <= EPS ? 0 : x)\nexport const canonAngle = (x: number): number => ((x % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI)\n\n/** @deprecated */ export const eq02 = eq0\n/** @deprecated */ export const eq2 = eq\n\n/**\n * Decimal adjustment of a number.\n *\n * @param f  The type of adjustment.\n * @param value The number.\n * @param exp The exponent (the 10 logarithm of the adjustment base).\n * @returns The adjusted value.\n */\nfunction decimalAdjust(f: (x: number) => number, value: number, exp: number): number {\n\t// If the exp is undefined or zero...\n\tif (typeof exp === 'undefined' || +exp === 0) {\n\t\treturn f(value)\n\t}\n\tvalue = +value\n\texp = +exp\n\t// If the value is not a number or the exp is not an integer...\n\tif (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {\n\t\treturn NaN\n\t}\n\t// Shift\n\tlet vs = value.toString().split('e')\n\tvalue = f(+(vs[0] + 'e' + (vs[1] ? +vs[1] - exp : -exp)))\n\t// Shift back\n\tvs = value.toString().split('e')\n\treturn +(vs[0] + 'e' + (vs[1] ? +vs[1] + exp : exp))\n}\n\nexport const round10: (value: number, exp: number) => number = decimalAdjust.bind(undefined, Math.round)\nexport const floor10: (value: number, exp: number) => number = decimalAdjust.bind(undefined, Math.floor)\nexport const ceil10: (value: number, exp: number) => number = decimalAdjust.bind(undefined, Math.ceil)\n\nexport const GOLDEN_RATIO = (1 + Math.sqrt(5)) / 2\n\nexport function mod(a: number, b: number) {\n\treturn ((a % b) + b) % b\n}\nexport function clamp(val: number, min: number, max: number) {\n\tassertNumbers(val, min, max)\n\treturn Math.max(min, Math.min(max, val))\n}\n\nexport function between(val: number, min: number, max: number) {\n\tassertNumbers(val, min, max)\n\treturn min <= val && val <= max\n}\nexport function fuzzyBetween(val: number, min: number, max: number) {\n\treturn le(min, val) && le(val, max)\n}\n\nexport function mapPush<T, U>(map: Map<T, U[]>, key: T, val: U) {\n\tconst array = map.get(key)\n\tif (array) {\n\t\tarray.push(val)\n\t} else {\n\t\tmap.set(key, [val])\n\t}\n}\n\nexport function fuzzyUniques(vals: number[]): number[] {\n\tconst round = (val: number) => Math.floor(val * (1 << 26)) / (1 << 26)\n\tconst map = new Map()\n\tfor (let i = 0; i < vals.length; i++) {\n\t\tconst val = vals[i],\n\t\t\troundVal = round(val)\n\t\tlet key\n\t\tif (\n\t\t\t!map.has(roundVal) &&\n\t\t\t!((key = map.get(roundVal - 1 / (1 << 26))) && eq(key, val)) &&\n\t\t\t!((key = map.get(roundVal + 1 / (1 << 26))) && eq(key, val))\n\t\t) {\n\t\t\tmap.set(roundVal, val)\n\t\t}\n\t}\n\treturn Array.from(map.values())\n}\n\nexport function fuzzyUniquesF<T>(vals: T[], f: (o: T) => number): T[] {\n\tconst round = (val: number) => Math.floor(val * (1 << 26)) / (1 << 26)\n\tconst map = new Map()\n\tfor (let i = 0; i < vals.length; i++) {\n\t\tconst val = vals[i],\n\t\t\troundVal = round(f(val))\n\t\tlet key\n\t\tif (\n\t\t\t!map.has(roundVal) &&\n\t\t\t!((key = map.get(roundVal - 1 / (1 << 26))) && eq(key, f(val))) &&\n\t\t\t!((key = map.get(roundVal + 1 / (1 << 26))) && eq(key, f(val)))\n\t\t) {\n\t\t\tmap.set(roundVal, val)\n\t\t}\n\t}\n\treturn Array.from(map.values())\n}\n\nexport function addOwnProperties(target: any, props: any, ...exclude: string[]) {\n\tObject.getOwnPropertyNames(props).forEach((key) => {\n\t\t//console.log(props, key)\n\t\tif (!exclude.includes(key)) {\n\t\t\tif (target.hasOwnProperty(key)) {\n\t\t\t\tconsole.warn('target ', target, ' already has property ', key, target[key])\n\t\t\t}\n\t\t\tObject.defineProperty(target, key, Object.getOwnPropertyDescriptor(props, key)!)\n\t\t}\n\t})\n}\n\nexport let defaultRoundFunction = (x: number) => x // Math.round10(x, -4)\n\nexport function forceFinite(val: string): number {\n\tconst valNum = parseFloat(val.replace(',', '.').replace(/^[^0-9,\\.\\-]/, ''))\n\treturn Number.isFinite(valNum) ? valNum : 0\n}\n\nexport const MINUS = (a: number, b: number) => a - b\n\nexport function floatHashCode(f: number) {\n\treturn ~~(f * (1 << 28))\n}\n\n/**\n * combinations(2) will generate\n * [0,0] [0,1] [1,1] [0,2] [1,2] [2,2]\n */\nexport function* combinations(n: int): IterableIterator<{ i: number; j: number }> {\n\tfor (let i = 0; i < n; i++) {\n\t\tfor (let j = i; j < n; j++) {\n\t\t\tyield { i: i, j: j }\n\t\t}\n\t}\n}\n\n/* The arithmetic-geometric mean of two non-negative numbers */\nexport function arithmeticGeometricMean(x: number, y: number): number {\n\tassertf(() => lt(0, x))\n\tassertf(() => lt(0, y))\n\tlet a = x,\n\t\tg = y\n\tlet i = 30\n\twhile (i-- && a != g) {\n\t\t;[a, g] = [(a + g) / 2, Math.sqrt(a * g)]\n\t}\n\tassert(i != -1)\n\n\treturn a\n}\n\n/**\n * One degree in radians. Use like Math.sin(30 * DEG).\n */\nexport const DEG = 0.017453292519943295\nexport function rad2deg(rad: number): number {\n\t//  discuss at: http://phpjs.org/functions/deg2rad/\n\t// original by: Enrique Gonzalez\n\t// improved by: Thomas Grainger (http://graingert.co.uk)\n\t//   example 1: deg2rad(45)\n\t//   returns 1: 0.7853981633974483\n\n\treturn rad / DEG\n}\n\n/**\n * numberToStr(2/3) == '0.6p'\n * numberToStr(7/12) == '0.583p'\n * numberToStr(2/7) == '0.285714pppppp'\n * numberToStr(NLA_PRECISION) == '0+'\n * numberToStr(-NLA_PRECISION) == '0-'\n * numberToStr(2-NLA_PRECISION) == '2-'\n * numberToStr(0) == '0='\n *\n */\nexport function numberToStr(value: number, length: int) {\n\tlet minAbsDiff = Infinity,\n\t\tclosestValue: number | undefined = undefined,\n\t\tclosestValueStr: string | undefined = undefined\n\tfunction test(testValue: number, testValueStr: string) {\n\t\tconst absDiff = Math.abs(testValue - value)\n\t\tconsole.log(testValue, testValueStr, absDiff)\n\t\tif (absDiff < minAbsDiff) {\n\t\t\tminAbsDiff = absDiff\n\t\t\tclosestValue = testValue\n\t\t\tclosestValueStr = testValueStr\n\t\t}\n\t\treturn 0 == absDiff\n\t}\n\n\tfunction overline(str: string) {\n\t\treturn str\n\t\t\t.split('')\n\t\t\t.map((c) => c + '\\u0304')\n\t\t\t.join('')\n\t}\n\n\tif (test(parseFloat(value.toFixed(length)), value.toFixed(length))) return closestValueStr + '='\n\n\tconst valueStr = '' + value\n\tconst toDecimal = valueStr.substr(0, valueStr.indexOf('.') + 1)\n\tconst decimals = valueStr.substr(valueStr.indexOf('.') + 1)\n\n\tfor (let startPos = 0; startPos < length; startPos++) {\n\t\tfor (let endPos = startPos + 1; endPos <= length; endPos++) {\n\t\t\tconst prefixDecimals = decimals.substr(0, startPos)\n\t\t\tconst period = decimals.substr(startPos, endPos)\n\t\t\tconst testValue = parseFloat(\n\t\t\t\ttoDecimal + prefixDecimals + period.repeat(Math.ceil((17 - startPos) / period.length)),\n\t\t\t)\n\t\t\tif (test(testValue, toDecimal + prefixDecimals + overline(period))) return closestValueStr + '='\n\t\t}\n\t}\n\n\treturn closestValueStr + (closestValue! < value ? '-' : '+')\n}\n\nexport function time(f: () => void) {\n\tconst start = performance.now()\n\tf()\n\treturn performance.now() - start\n}\n\nexport type Tuple2<T> = [T, T]\nexport type Tuple3<T> = [T, T, T]\nexport type Tuple4<T> = [T, T, T, T]\nexport type Tuple5<T> = [T, T, T, T, T]\nexport type Tuple6<T> = [T, T, T, T, T, T]\nexport type Tuple7<T> = [T, T, T, T, T, T, T]\nexport type Tuple8<T> = [T, T, T, T, T, T, T, T]\n//console.log(numberToStr(29 / 99, 4))\n//console.log(numberToStr(77 / 99, 4))\n\n// interface Object {\n//    cw(f: (x: any) => any): any\n// }\n//Object.prototype.cw = function (f) {\n//    return f(this)\n//}\n//Object.construct = function <T>(cons: {new(...args: any[]): T}, args: any[]) {\n//    return f(this)\n//}\ndeclare global {\n\tinterface Object {\n\t\tsce: string\n\t\tstr: string\n\t\ttoSource(): string\n\t}\n\tinterface ObjectConstructor {\n\t\tconstruct<T>(cons: { new (...args: any[]): T }, args: any[]): T\n\t\tmap<T, S, K extends string>(\n\t\t\to: { [k in K]: T },\n\t\t\tf: (this: undefined, v: T, key: string, o: { [k in K]: T }) => S,\n\t\t): { [k in K]: S }\n\t\tmap<T, S, K extends string, C>(\n\t\t\to: { [k in K]: T },\n\t\t\tf: (this: C, v: T, key: string, o: { [k in K]: T }) => S,\n\t\t\tcontext: C,\n\t\t): { [k in K]: S }\n\t}\n\t// tslint:disable-next-line:class-name\n\tinterface __NLAReadonlyArray<T> {\n\t\t/**\n\t\t * this[this.length - 1]\n\t\t */\n\t\treadonly last: T\n\t}\n\tinterface Array<T> extends __NLAReadonlyArray<T> {\n\t\t/**\n\t\t * this[this.length - 1]\n\t\t */\n\t\tlast: T\n\n\t\tmap<U>(this: [T], callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): [U]\n\t\tmap<U>(this: Tuple2<T>, callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): Tuple2<U>\n\t\tmap<U>(this: Tuple3<T>, callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): Tuple3<U>\n\t\tmap<U>(this: Tuple4<T>, callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): Tuple4<U>\n\t\tmap<U>(this: Tuple5<T>, callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): Tuple5<U>\n\t\tmap<U>(this: Tuple6<T>, callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): Tuple6<U>\n\t\tmap<U>(this: Tuple7<T>, callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): Tuple7<U>\n\t\tmap<U>(this: Tuple8<T>, callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): Tuple8<U>\n\t}\n\tinterface ReadonlyArray<T> extends __NLAReadonlyArray<T> {}\n\n\tinterface String {\n\t\tcapitalizeFirstLetter(): string\n\t\tequals(x: any): boolean\n\t}\n}\nObject.map = function <T, S, K extends string>(\n\to: { [k in K]: T },\n\tf: (v: T, key: string, o: { [k in K]: T }) => S,\n\tcontext: any = undefined,\n): { [k in K]: S } {\n\tconst result = {} as { [k in K]: S }\n\tfor (const key in o) {\n\t\tresult[key] = f.call(context, o[key], key, o)\n\t}\n\treturn result\n}\nexport function arrayHashCode(arr: any[]): int {\n\tlet result = 0\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tresult = (result * 31 + hashCode(arr[i])) | 0\n\t}\n\treturn result | 0\n}\nexport function hashCode(o: any) {\n\tif ('number' === typeof o || undefined === o) {\n\t\treturn o | 0\n\t} else if (Array.isArray(o)) {\n\t\treturn arrayHashCode(o)\n\t} else {\n\t\treturn null === o ? 0 : o.hashCode()\n\t}\n}\n\nString.prototype.capitalizeFirstLetter = function () {\n\treturn this.charAt(0).toUpperCase() + this.slice(1)\n}\nString.prototype.equals = function (x: any) {\n\treturn this == x\n}\n\nexport function SCE(o: any) {\n\tswitch (typeof o) {\n\t\tcase 'undefined':\n\t\t\treturn 'undefined'\n\t\tcase 'function':\n\t\t\treturn o.toString()\n\t\tcase 'number':\n\t\t\treturn '' + o\n\t\tcase 'string':\n\t\t\treturn JSON.stringify(o)\n\t\tcase 'object':\n\t\t\tif (null == o) {\n\t\t\t\treturn 'null'\n\t\t\t} else {\n\t\t\t\treturn o.sce\n\t\t\t}\n\t\tdefault:\n\t\t\tthrow new Error()\n\t}\n}\nexport function STR(o: any) {\n\treturn o.str\n}\nObject.defineProperty(Object.prototype, 'sce', {\n\tget: function () {\n\t\treturn this.toSource()\n\t},\n})\nObject.defineProperty(Object.prototype, 'str', {\n\tget: function () {\n\t\treturn this.toString()\n\t},\n})\n\n//const NLA = {}\n//for (let key in ARRAY_UTILITIES) {\n//    const nlaName = 'array' + key.capitalizeFirstLetter()\n//    assert(!NLA[nlaName])\n//    NLA[nlaName] = (arr, ...rest) => ARRAY_UTILITIES[key].apply(arr, rest)\n//}\n\n/**\n * solves x² + px + q = 0\n */\nexport function pqFormula(p: number, q: number): number[] {\n\t// 4 times the discriminant:in\n\tconst discriminantX4 = (p * p) / 4 - q\n\tif (discriminantX4 < -NLA_PRECISION) {\n\t\treturn []\n\t} else if (discriminantX4 <= NLA_PRECISION) {\n\t\treturn [-p / 2]\n\t} else {\n\t\tconst root = Math.sqrt(discriminantX4)\n\t\treturn [-p / 2 - root, -p / 2 + root]\n\t}\n}\n\n/**\n * from pomax' library\n * solves ax³ + bx² + cx + d = 0\n * This function from pomax' utils\n * @returns 0-3 roots\n */\nexport function solveCubicReal2(a: number, b: number, c: number, d: number): number[] {\n\tif (eq0(a)) {\n\t\tif (eq0(b)) {\n\t\t\treturn [-d / c]\n\t\t} else {\n\t\t\treturn pqFormula(c / b, d / b)\n\t\t}\n\t}\n\tconst divisor = a\n\ta = b / divisor\n\tb = c / divisor\n\tc = d / divisor\n\tconst p = (3 * b - a * a) / 3,\n\t\tpDiv3 = p / 3,\n\t\tpDiv3Pow3 = pDiv3 * pDiv3 * pDiv3,\n\t\tq = (2 * a * a * a - 9 * a * b + 27 * c) / 27,\n\t\tqDiv2 = q / 2,\n\t\tdiscriminant = qDiv2 * qDiv2 + pDiv3Pow3\n\t// 18abcd - 4b³d + b²c² - 4ac³ - 27a²d²\n\tif (discriminant < -NLA_PRECISION / 8) {\n\t\tconst r = Math.sqrt(-pDiv3Pow3),\n\t\t\tt = -q / (2 * r),\n\t\t\tcosphi = t < -1 ? -1 : t > 1 ? 1 : t, // clamp t to [-1;1]\n\t\t\tphi = Math.acos(cosphi),\n\t\t\tt1 = 2 * Math.cbrt(r)\n\t\tconst x1 = t1 * Math.cos(phi / 3) - a / 3\n\t\tconst x2 = t1 * Math.cos((phi + 2 * Math.PI) / 3) - a / 3\n\t\tconst x3 = t1 * Math.cos((phi + 4 * Math.PI) / 3) - a / 3\n\t\treturn [x1, x2, x3]\n\t} else if (discriminant <= NLA_PRECISION / 8) {\n\t\tif (0 == qDiv2) {\n\t\t\t// TODO: compare with likeO?\n\t\t\treturn [-a / 3]\n\t\t}\n\t\tconst u1 = qDiv2 < 0 ? Math.cbrt(-qDiv2) : -Math.cbrt(qDiv2)\n\t\tconst x1 = 2 * u1 - a / 3\n\t\tconst x2 = -u1 - a / 3\n\t\treturn [x1, x2]\n\t} else {\n\t\tconst sd = Math.sqrt(discriminant)\n\t\tconst u1 = Math.cbrt(-qDiv2 + sd)\n\t\tconst v1 = Math.cbrt(qDiv2 + sd)\n\t\treturn [u1 - v1 - a / 3]\n\t}\n}\nexport function checkDerivate(\n\tf: (x: number) => number,\n\tdf: (x: number) => number,\n\ta: number,\n\tb: number,\n\tmaxFaults: int = 0,\n) {\n\tconst eps = 1e-4\n\tlet faults = 0\n\tfor (let t = a; t < b; t += (b - a) / 100) {\n\t\tconst dfdt = df(t)\n\t\tconst df2 = (f(t + eps) - f(t)) / eps\n\t\tassert((faults += +!eq2(df2, dfdt, 0.1)) <= maxFaults, `df2 == ${df2} != ${df(t)} = df(t)`)\n\t}\n}\n\nexport function bisect(f: (x: number) => number, a: number, b: number, steps: int) {\n\tassert(a < b)\n\tlet fA = f(a),\n\t\tfB = f(b)\n\tassert(fA * fB < 0)\n\twhile (steps--) {\n\t\tconst c = (b + a) / 2\n\t\tconst fC = f(c)\n\t\tif (Math.sign(fA) == Math.sign(fC)) {\n\t\t\ta = c\n\t\t\tfA = fC\n\t\t} else {\n\t\t\tb = c\n\t\t\tfB = fC\n\t\t}\n\t}\n\tassert(a <= (b + a) / 2)\n\tassert(b >= (b + a) / 2)\n\treturn lerp(a, b, 0.5)\n}\n\nexport function callsce(name: string, ...params: any[]) {\n\treturn name + '(' + params.map(SCE).join(',') + ')'\n}\n\nexport function removeJSComments(str: string) {\n\tconst SPLITTER = /\\/\\/[^\\r\\n]+(?:\\r\\n|\\n\\r|\\r|\\n|$)|\\/\\*(?:[^*]|\\*[^/])+\\*\\/|\"(?:[^\"\\\\]|\\\\.)+\"|'(?:[^'\\\\]|\\\\.)+'|(?:`|})(?:[^`\\$\\\\]|\\$[^{]|\\\\.)+(?:`|\\${)|(?:\\/(?:(?:(?!\\\\*\\/).)|\\\\\\\\|\\\\\\/|[^\\\\]\\[(?:\\\\\\\\|\\\\\\]|[^]])+\\])+\\/)|[^`\"']/g\n\treturn str.replace(SPLITTER, (x) => (x.startsWith('//') || x.startsWith('/*') ? '' : x))\n}\n","import { int, assertInts, assertNumbers, lerp, assert, MINUS } from './util'\n\nexport function arraySwap(arr: any[], i: int, j: int) {\n\tconst temp = arr[i]\n\tarr[i] = arr[j]\n\tarr[j] = temp\n}\nexport type ArrayLikeWriteAble<T> = {\n\treadonly length: int\n\t[index: number]: T\n}\nexport function arrayCopy<T, A extends ArrayLikeWriteAble<T>>(\n\tsrc: ArrayLike<T>,\n\tsstart: int,\n\tdst: A,\n\tdstart: int,\n\tlength: int,\n): A {\n\tassertInts(sstart, dstart, length)\n\tdstart += length\n\tlength += sstart\n\twhile (length-- > sstart) {\n\t\tdst[--dstart] = src[length]\n\t}\n\treturn dst\n}\n/**\n * Copies a number of items from one array to another, with a definable step size between items in the source and\n * destination array.\n *\n * @param src The source array.\n * @param sstart The location of the first item in the source array.\n * @param sstep The offset between items in the source array.\n * @param dst The destination array.\n * @param dstart The location of the first item in the destination array.\n * @param dstep The offset between items in the destination array.\n * @param count The number of items to copy.\n */\nexport function arrayCopyStep<T>(\n\tsrc: ArrayLike<T>,\n\tsstart: int,\n\tsstep: int,\n\tdst: ArrayLikeWriteAble<T>,\n\tdstart: int,\n\tdstep: int,\n\tcount: int,\n): void {\n\tlet srcIndex = sstart + count * sstep\n\tlet dIndex = dstart + count * dstep\n\twhile (srcIndex > sstart) {\n\t\tdst[(dIndex -= dstep)] = src[(srcIndex -= sstep)]\n\t}\n}\n\n/**\n * Copies a number of contiguous, evenly-spaced blocks from one array to another.\n *\n * @param src The source array.\n * @param sstart The start of the first block in the source array.\n * @param sstep The offset from the start of one block to the start of the next block in the source array.\n * @param dst The destination array.\n * @param dstart The start of the first block in the destination array.\n * @param dstep The offset from the start of one block to the start of the next block in the destination array.\n * @param blockSize The length of one block.\n * @param blockCount The number of blocks to copy.\n */\nexport function arrayCopyBlocks<T>(\n\tsrc: ArrayLike<T>,\n\tsstart: int,\n\tsstep: int,\n\tdst: ArrayLikeWriteAble<T>,\n\tdstart: int,\n\tdstep: int,\n\tblockSize: int,\n\tblockCount: int,\n): void {\n\tfor (let i = 0; i < blockCount; i++) {\n\t\tarrayCopy(src, sstart + sstep * i, dst, dstart + dstep * i, blockSize)\n\t}\n}\nexport function arrayRange(startInclusive: int, endExclusive: int, step: int = 1) {\n\tassertNumbers(startInclusive, step)\n\t//console.log(Math.ceil((endExclusive - startInclusive) / step))\n\tconst arrLength = Math.ceil((endExclusive - startInclusive) / step)\n\tconst result = new Array(arrLength) // '- startInclusive' so that chunk in the last row will also be selected, even\n\t// if the row is not complete\n\tfor (let i = startInclusive, index = 0; index < arrLength; i += step, index++) {\n\t\tresult[index] = i\n\t}\n\treturn result\n}\n\n/**\n * Returns a number of evenly-spaced values between t0 and t1 (inclusive).\n * @param t0 First value.\n * @param t1 Last value.\n * @param count Total number of values.\n */\nexport function arraySamples(t0: number, t1: number, count: int = 64) {\n\treturn arrayFromFunction(count, (i) => lerp(t0, t1, i / (count - 1)))\n}\n\nexport function arrayFromFunction<T>(length: 1, f: (i: int, total: int) => T): [T]\nexport function arrayFromFunction<T>(length: 2, f: (i: int, total: int) => T): [T, T]\nexport function arrayFromFunction<T>(length: 3, f: (i: int, total: int) => T): [T, T, T]\nexport function arrayFromFunction<T>(length: 4, f: (i: int, total: int) => T): [T, T, T, T]\nexport function arrayFromFunction<T>(length: 5, f: (i: int, total: int) => T): [T, T, T, T, T]\nexport function arrayFromFunction<T>(length: int, f: (i: int, total: int) => T): T[]\nexport function arrayFromFunction<T>(length: int, f: (i: int, total: int) => T): T[] {\n\tassertNumbers(length)\n\tassert('function' == typeof f)\n\tconst a = new Array(length)\n\tlet elIndex = length\n\twhile (elIndex--) {\n\t\ta[elIndex] = f(elIndex, length)\n\t}\n\treturn a\n}\n\n/**\n * Return the element in the array for which f(el) is highest. There is no `withMin`, call withMax(x => -f(x))\n * instead.\n * @param f\n */\nexport function withMax<T>(arr: T[], f: (t: T, i: int, arr: T[]) => number): T | undefined {\n\tlet i = arr.length,\n\t\tresult = undefined,\n\t\tmaxVal = -Infinity\n\twhile (i--) {\n\t\tconst el = arr[i],\n\t\t\tval = f(el, i, arr)\n\t\tif (val > maxVal) {\n\t\t\tmaxVal = val\n\t\t\tresult = el\n\t\t}\n\t}\n\treturn result\n}\n\n/**\n * Returns the sum of the absolute values of the components of arr vector.\n * E.g. V(1, -2, 3) === abs(1) + abs(-2) + abs(3) === 1 + 2 + 3 === 6\n */\nexport function absSum(arr: number[]) {\n\tlet i = arr.length\n\tlet result = 0\n\twhile (i--) {\n\t\tresult += Math.abs(arr[i])\n\t}\n\treturn result\n}\n\nexport function emod<T>(arr: T[], i: int): T {\n\treturn arr[i % arr.length]\n}\nexport function sliceStep<T>(arr: T[], start: int, end: int, step: int, chunkSize = 1): T[] {\n\tassertNumbers(start, step)\n\tstart < 0 && (start = arr.length + start)\n\tend <= 0 && (end = arr.length + end)\n\tconst resultLength = Math.ceil((end - start) / step)\n\tconst result = new Array(resultLength) // '- start' so that chunk in the last row\n\t// will also be selected, even if the row is\n\t// not complete\n\tlet index = 0\n\tfor (let i = start; i < end; i += step) {\n\t\tfor (let j = i; j < Math.min(i + chunkSize, end); j++) {\n\t\t\tresult[index++] = arr[j]\n\t\t}\n\t}\n\tassert(resultLength == index)\n\treturn result\n}\nexport function splicePure<T>(arr: T[], start = 0, deleteCount = 0, ...items: T[]): T[] {\n\tconst arrayLength = arr.length\n\tconst _deleteCount = deleteCount < 0 ? 0 : deleteCount\n\tlet _start\n\tif (start < 0) {\n\t\tif (Math.abs(start) > arrayLength) {\n\t\t\t_start = 0\n\t\t} else {\n\t\t\t_start = arrayLength + start\n\t\t}\n\t} else if (start > arrayLength) {\n\t\t_start = arrayLength\n\t} else {\n\t\t_start = start\n\t}\n\tconst newLength = arr.length - _deleteCount + items.length\n\tconst result = new Array(newLength)\n\tlet dst = newLength\n\tlet src = arr.length\n\twhile (src-- > _start + _deleteCount) {\n\t\tresult[--dst] = arr[src]\n\t}\n\tsrc = items.length\n\twhile (src--) {\n\t\tresult[--dst] = items[src]\n\t}\n\tsrc = _start\n\twhile (src--) {\n\t\tresult[--dst] = items[src]\n\t}\n\treturn result\n}\nexport function arrayEquals(arr: any[], obj: any[]): boolean {\n\tif (arr === obj) return true\n\tif (Object.getPrototypeOf(obj) !== Array.prototype) return false\n\tif (arr.length !== obj.length) return false\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (!equals(arr[i], obj[i])) return false\n\t}\n\treturn true\n}\nexport function equals(a: any, b: any) {\n\treturn 'object' === typeof a ? a.equals(b) : a === b\n}\n\n/**\n * arr.map(f).filter((x) => x)\n */\nexport function mapFilter<T, S>(arr: T[], f: (item: T, index: int, arr: T[]) => S): S[] {\n\tconst length = arr.length\n\tconst result = []\n\tfor (let i = 0; i < length; i++) {\n\t\tif (i in arr) {\n\t\t\tconst val = f(arr[i], i, arr)\n\t\t\tif (val) {\n\t\t\t\tresult.push(val)\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}\nexport function clear<T>(arr: T[], ...newItems: T[]): T[] {\n\treturn arr.splice(0, arr.length, ...newItems)\n}\n/**\n *\n * @returns function concat.apply([], arr)\n */\nexport function concatenated<T>(arr: T[]) {\n\treturn Array.prototype.concat.apply([], arr)\n}\nexport function min<T>(arr: number[]): number {\n\tlet i = arr.length,\n\t\tmax = Infinity\n\twhile (i--) {\n\t\tconst val = arr[i]\n\t\tif (max > val) max = val\n\t}\n\treturn max\n}\nexport function max(arr: number[]): number {\n\t// faster and no limit on array size, see https://jsperf.com/math-max-apply-vs-loop/2\n\tlet i = arr.length,\n\t\tmax = -Infinity\n\twhile (i--) {\n\t\tconst val = arr[i]\n\t\tif (max < val) max = val\n\t}\n\treturn max\n}\nexport function indexWithMax<T>(arr: T[], f: (e: T, i: int, arr: T[]) => number) {\n\tif (arr.length == 0) {\n\t\treturn -1\n\t}\n\tlet i = arr.length,\n\t\tresult = -1,\n\t\tmaxVal = -Infinity\n\twhile (i--) {\n\t\tconst val = f(arr[i], i, arr)\n\t\tif (val > maxVal) {\n\t\t\tmaxVal = val\n\t\t\tresult = i\n\t\t}\n\t}\n\treturn result\n}\n\nexport function sum(arr: number[]) {\n\tlet i = arr.length\n\tlet result = 0\n\twhile (i--) {\n\t\tresult += arr[i]\n\t}\n\treturn result\n}\n\nexport function sumInPlaceTree(arr: number[]) {\n\tif (0 == arr.length) return 0\n\tlet l = arr.length\n\twhile (l != 1) {\n\t\tconst lHalfFloor = Math.floor(l / 2)\n\t\tconst lHalfCeil = Math.ceil(l / 2)\n\t\tfor (let i = 0; i < lHalfFloor; i++) {\n\t\t\tarr[i] += arr[i + lHalfCeil]\n\t\t}\n\t\tl = lHalfCeil\n\t}\n\treturn arr[0]\n}\n\nexport function unique<T>(arr: T[]): T[] {\n\tconst uniqueSet = new Set<T>(arr)\n\treturn Array.from(uniqueSet)\n}\n\nexport function remove<T>(arr: T[], o: T): boolean {\n\tconst index = arr.indexOf(o)\n\tif (index != -1) {\n\t\tarr.splice(index, 1)\n\t\treturn true\n\t}\n\treturn false\n}\n\nexport function removeIndex<T>(arr: T[], i: int): T {\n\tconst result = arr[i]\n\tarr.splice(i, 1)\n\treturn result\n}\nexport function bagRemoveIndex<T>(arr: T[], i: int): T {\n\tconst result = arr[i]\n\tif (i == arr.length - 1) {\n\t\tarr.pop()\n\t} else {\n\t\tarr[i] = arr.pop()!\n\t}\n\treturn result\n}\n\nexport function removeMatch<T>(arr: T[], matcher: (el: T) => boolean) {\n\tconst index = arr.findIndex(matcher)\n\tif (-1 != index) {\n\t\treturn removeIndex(arr, index)\n\t}\n}\n\nexport function removeAll<T>(arr: T[], o: T[]): void {\n\tlet i = o.length\n\twhile (i--) {\n\t\tremove(arr, o[i])\n\t}\n}\n\nexport function toggle<T>(arr: T[], o: T) {\n\tconst index = arr.indexOf(o)\n\tif (index != -1) {\n\t\tarr.splice(index, 1)\n\t\treturn false\n\t} else {\n\t\tarr.push(o)\n\t\treturn true\n\t}\n}\nexport function bagToggle<T>(arr: T[], o: T) {\n\tconst index = arr.indexOf(o)\n\tif (index != -1) {\n\t\tbagRemoveIndex(arr, index)\n\t\treturn false\n\t} else {\n\t\tarr.push(o)\n\t\treturn true\n\t}\n}\n\nexport function binaryIndexOf<T>(arr: T[], searchElement: T, cmp = (a: any, b: any) => a - b): int {\n\tlet minIndex = 0\n\tlet maxIndex = arr.length - 1\n\tlet currentIndex\n\tlet currentElement\n\n\twhile (minIndex <= maxIndex) {\n\t\tcurrentIndex = ((minIndex + maxIndex) / 2) | 0\n\t\tcurrentElement = arr[currentIndex]\n\n\t\tif (cmp(currentElement, searchElement) < 0) {\n\t\t\tminIndex = currentIndex + 1\n\t\t} else if (cmp(currentElement, searchElement) > 0) {\n\t\t\tmaxIndex = currentIndex - 1\n\t\t} else {\n\t\t\treturn currentIndex\n\t\t}\n\t}\n\n\treturn -minIndex - 1\n}\n\nexport function binaryInsert<T>(arr: T[], el: any, cmp: (a: T, b: T) => number = MINUS as any) {\n\tlet minIndex = 0\n\tlet maxIndex = arr.length\n\tlet currentIndex\n\tlet currentElement\n\n\twhile (minIndex < maxIndex) {\n\t\tcurrentIndex = ~~((minIndex + maxIndex) / 2)\n\t\tcurrentElement = arr[currentIndex]\n\n\t\tif (cmp(currentElement, el) < 0) {\n\t\t\tminIndex = currentIndex + 1\n\t\t} else {\n\t\t\tmaxIndex = currentIndex\n\t\t}\n\t}\n\n\tarr.splice(minIndex, 0, el)\n}\n\nexport function firstUnsorted<T>(arr: T[], cmp: (a: T, b: T) => number) {\n\tfor (let i = 1; i < arr.length; i++) {\n\t\tif (cmp(arr[i - 1], arr[i]) > 0) return i\n\t}\n\treturn -1\n}\nexport function getLast<T>(arr: ArrayLike<T>): T {\n\treturn arr[arr.length - 1]\n}\nexport function setLast<T>(arr: T[], val: T): T {\n\treturn (arr[arr.length - 1] = val)\n}\n\nexport function removeIndexes<T>(arr: T[], indexes: int[]): T[] {\n\tindexes.sort((a, b) => a - b)\n\tif (0 === indexes.length) return arr\n\tif (1 === indexes.length) {\n\t\tarr.splice(indexes[0], 1)\n\t\treturn arr\n\t}\n\tlet dstPos = indexes[0]\n\tlet nextSkip = indexes[0]\n\tlet indexesPos = 0\n\tfor (let srcPos = indexes[0]; srcPos < arr.length; srcPos++) {\n\t\tif (srcPos !== nextSkip) {\n\t\t\tarr[dstPos++] = arr[srcPos]\n\t\t} else {\n\t\t\tindexesPos++\n\t\t\tif (indexesPos < indexes.length) {\n\t\t\t\tnextSkip = indexes[indexesPos]\n\t\t\t} else {\n\t\t\t\tarr.splice(dstPos, srcPos + 1 - dstPos)\n\t\t\t\treturn arr\n\t\t\t}\n\t\t}\n\t}\n\tthrow new Error('illegal state')\n}\n","import { Equalable, JavaMap as CustomMap } from 'javasetmap.ts'\nimport { assertVectors } from './NLA'\nimport {\n\tassert,\n\tassertf,\n\tassertInst,\n\tassertNumbers,\n\tdefaultRoundFunction,\n\teq,\n\teq0,\n\teq2,\n\tFloatArray,\n\tint,\n\tNLA_PRECISION,\n\traddd,\n} from './util'\n\n/**\n * Immutable 3d-vector/point.\n */\nexport class V3 implements Equalable {\n\tstatic readonly O: V3 = new V3(0, 0, 0)\n\tstatic readonly X: V3 = new V3(1, 0, 0)\n\tstatic readonly Y: V3 = new V3(0, 1, 0)\n\tstatic readonly Z: V3 = new V3(0, 0, 1)\n\tstatic readonly XY: V3 = new V3(1, 1, 0)\n\tstatic readonly XYZ: V3 = new V3(1, 1, 1)\n\tstatic readonly INF: V3 = new V3(Infinity, Infinity, Infinity)\n\tstatic readonly UNITS: V3[] = [V3.X, V3.Y, V3.Z]\n\tstatic readonly NAMEMAP = new CustomMap<V3, string>()\n\t\t.set(V3.O, 'V3.O')\n\t\t.set(V3.X, 'V3.X')\n\t\t.set(V3.Y, 'V3.Y')\n\t\t.set(V3.Z, 'V3.Z')\n\t\t.set(V3.XYZ, 'V3.XYZ')\n\t\t.set(V3.INF, 'V3.INF')\n\n\tconstructor(readonly x: number, readonly y: number, readonly z: number) {\n\t\tassertNumbers(x, y, z)\n\t}\n\n\tstatic random(): V3 {\n\t\treturn new V3(Math.random(), Math.random(), Math.random())\n\t}\n\n\tstatic parallel(a: V3, b: V3) {\n\t\treturn a.dot(b) - a.length() * b.length()\n\t}\n\n\t/**\n\t * See http://math.stackexchange.com/questions/44689/how-to-find-a-random-axis-or-unit-vector-in-3d\n\t * @returns A random point on the unit sphere with uniform distribution across the surface.\n\t */\n\tstatic randomUnit(): V3 {\n\t\tconst zRotation = Math.random() * 2 * Math.PI\n\t\tconst z = Math.random() * 2 - 1\n\t\tconst zRadius = Math.sqrt(1 - z ** 2)\n\t\treturn new V3(zRadius * Math.cos(zRotation), zRadius * Math.sin(zRotation), z)\n\t}\n\n\t//noinspection JSUnusedLocalSymbols\n\t/**\n\t * Documentation stub. You want {@see V3#sphere}\n\t */\n\tstatic fromAngles(theta: number, phi: number): V3 {\n\t\tthrow new Error()\n\t}\n\n\tstatic fromFunction(f: (dim: number) => number) {\n\t\treturn new V3(f(0), f(1), f(2))\n\t}\n\n\tstatic min(a: V3, b: V3): V3 {\n\t\treturn new V3(Math.min(a.x, b.x), Math.min(a.y, b.y), Math.min(a.z, b.z))\n\t}\n\n\tstatic max(a: V3, b: V3): V3 {\n\t\treturn new V3(Math.max(a.x, b.x), Math.max(a.y, b.y), Math.max(a.z, b.z))\n\t}\n\n\tstatic lerp(a: V3, b: V3, t: number): V3 {\n\t\treturn new V3(a.x * (1 - t) + b.x * t, a.y * (1 - t) + b.y * t, a.z * (1 - t) + b.z * t)\n\t}\n\n\tstatic fromArray(a: number[]): V3 {\n\t\treturn new V3(a[0], a[1], a[2])\n\t}\n\n\tstatic angleBetween(a: V3, b: V3): number {\n\t\treturn a.angleTo(b)\n\t}\n\n\tstatic zip(f: (...args: number[]) => number, ...args: V3[]): V3 {\n\t\tassert(f instanceof Function)\n\t\treturn new V3(\n\t\t\tf.apply(\n\t\t\t\tundefined,\n\t\t\t\targs.map((x) => x.x),\n\t\t\t),\n\t\t\tf.apply(\n\t\t\t\tundefined,\n\t\t\t\targs.map((x) => x.y),\n\t\t\t),\n\t\t\tf.apply(\n\t\t\t\tundefined,\n\t\t\t\targs.map((x) => x.z),\n\t\t\t),\n\t\t)\n\t}\n\n\tstatic normalOnPoints(a: V3, b: V3, c: V3): V3 {\n\t\tassertVectors(a, b, c)\n\t\treturn a.to(b).cross(a.to(c))\n\t}\n\n\tstatic add(...vs: V3[]): V3 {\n\t\tassertVectors(...vs)\n\t\tlet x = 0,\n\t\t\ty = 0,\n\t\t\tz = 0\n\t\tlet i = vs.length\n\t\twhile (i--) {\n\t\t\tx += vs[i].x\n\t\t\ty += vs[i].y\n\t\t\tz += vs[i].z\n\t\t}\n\t\treturn new V3(x, y, z)\n\t}\n\n\tstatic sub(...vs: V3[]): V3 {\n\t\tassertVectors(...vs)\n\t\tlet x = vs[0].x,\n\t\t\ty = vs[0].y,\n\t\t\tz = vs[0].z\n\t\tlet i = vs.length\n\t\twhile (i--) {\n\t\t\tx -= vs[i].x\n\t\t\ty -= vs[i].y\n\t\t\tz -= vs[i].z\n\t\t}\n\t\treturn new V3(x, y, z)\n\t}\n\n\t/**\n\t * Pack an array of V3s into an array of numbers (Float32Array by default).\n\t *\n\t * @param v3arr source array\n\t * @param dest destination array. If provided, must be large enough to fit v3count items.\n\t * @param srcStart starting index in source array\n\t * @param destStart starting index in destination array\n\t * @param v3count Number of V3s to copy.\n\t * @returns Packed array.\n\t */\n\tstatic pack<T extends FloatArray = Float32Array>(\n\t\tv3arr: ReadonlyArray<V3>,\n\t\tdest?: T,\n\t\tsrcStart: number = 0,\n\t\tdestStart: number = 0,\n\t\tv3count: number = v3arr.length - srcStart,\n\t): T {\n\t\t//assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')\n\t\tconst result = dest || (new Float32Array(3 * v3count) as any) // TODO\n\t\tassert(\n\t\t\tresult.length - destStart >= v3count * 3,\n\t\t\t'dest.length - destStart >= v3count * 3',\n\t\t\tresult.length,\n\t\t\tdestStart,\n\t\t\tv3count * 3,\n\t\t)\n\n\t\tlet i = v3count,\n\t\t\tsrcIndex = srcStart,\n\t\t\tdestIndex = destStart\n\t\twhile (i--) {\n\t\t\tconst v = v3arr[srcIndex++]\n\t\t\tresult[destIndex++] = v.x\n\t\t\tresult[destIndex++] = v.y\n\t\t\tresult[destIndex++] = v.z\n\t\t}\n\t\treturn result\n\t}\n\n\tstatic unpack(\n\t\tpackedArray: ArrayLike<number>,\n\t\tdest?: V3[],\n\t\tsrcStart: number = 0,\n\t\tdestStart: number = 0,\n\t\tv3count: number = (packedArray.length - srcStart) / 3,\n\t) {\n\t\t//assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')\n\t\tdest = dest || new Array(v3count)\n\t\tassert(dest.length - destStart >= v3count, 'dest.length - destStart >= v3count')\n\n\t\tlet i = v3count,\n\t\t\tsrcIndex = srcStart,\n\t\t\tdestIndex = destStart\n\t\twhile (i--) {\n\t\t\tdest[destIndex++] = new V3(packedArray[srcIndex++], packedArray[srcIndex++], packedArray[srcIndex++])\n\t\t}\n\t\treturn dest\n\t}\n\n\tstatic packXY<T extends FloatArray = Float32Array>(\n\t\tv3arr: V3[],\n\t\tdest?: T,\n\t\tsrcStart: number = 0,\n\t\tdestStart: number = 0,\n\t\tv3count: number = v3arr.length - srcStart,\n\t): T {\n\t\t//assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')\n\t\tconst result = dest || (new Float32Array(2 * v3count) as any)\n\t\tassert(result.length - destStart >= v3count, 'dest.length - destStart >= v3count')\n\n\t\tlet i = v3count,\n\t\t\tsrcIndex = srcStart,\n\t\t\tdestIndex = destStart\n\t\twhile (i--) {\n\t\t\tconst v = v3arr[srcIndex++]\n\t\t\tresult[destIndex++] = v.x\n\t\t\tresult[destIndex++] = v.y\n\t\t}\n\t\treturn result\n\t}\n\n\tstatic unpackXY(\n\t\tsrc: FloatArray,\n\t\tdest?: V3[],\n\t\tsrcStart: int = 0,\n\t\tdestStart: int = 0,\n\t\tv3count: int = Math.min(src.length / 2, (dest && dest.length) || Infinity) - destStart,\n\t): V3[] {\n\t\t//assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')\n\t\tdest = dest || new Array(v3count)\n\t\tassert(dest.length - destStart >= v3count, 'dest.length - destStart >= v3count')\n\t\tassert(src.length - srcStart >= v3count * 2, 'dest.length - destStart >= v3count')\n\n\t\tlet i = v3count,\n\t\t\tsrcIndex = srcStart,\n\t\t\tdestIndex = destStart\n\t\twhile (i--) {\n\t\t\tdest[destIndex++] = new V3(src[srcIndex++], src[srcIndex++], 0)\n\t\t}\n\t\treturn dest\n\t}\n\n\tstatic perturbed(v: V3, delta?: number): V3 {\n\t\treturn v.perturbed(delta)\n\t}\n\n\tstatic polar(radius: number, phi: raddd, z: number = 0): V3 {\n\t\treturn new V3(radius * Math.cos(phi), radius * Math.sin(phi), z)\n\t}\n\n\t/**\n\t *\n\t * @param longitude angle in XY plane\n\t * @param latitude \"height\"/z dir angle\n\t */\n\tstatic sphere(longitude: raddd, latitude: raddd, length = 1): V3 {\n\t\treturn new V3(\n\t\t\tlength * Math.cos(latitude) * Math.cos(longitude),\n\t\t\tlength * Math.cos(latitude) * Math.sin(longitude),\n\t\t\tlength * Math.sin(latitude),\n\t\t)\n\t}\n\n\tstatic inverseLerp(a: V3, b: V3, x: V3) {\n\t\tconst ab = a.to(b)\n\t\treturn a.to(x).dot(ab) / ab.squared()\n\t}\n\n\tget [0]() {\n\t\treturn this.x\n\t}\n\tget [1]() {\n\t\treturn this.y\n\t}\n\tget [2]() {\n\t\treturn this.z\n\t}\n\n\tget u() {\n\t\treturn this.x\n\t}\n\tget v() {\n\t\treturn this.y\n\t}\n\n\tperturbed(delta: number = NLA_PRECISION * 0.8): V3 {\n\t\treturn this.map((x) => x + (Math.random() - 0.5) * delta)\n\t}\n\n\t*[Symbol.iterator]() {\n\t\tyield this.x\n\t\tyield this.y\n\t\tyield this.z\n\t}\n\n\te(index: int): number {\n\t\tassert(index >= 0 && index < 3)\n\t\treturn 0 == index ? this.x : 1 == index ? this.y : this.z\n\t}\n\n\tnegated(): V3 {\n\t\treturn new V3(-this.x, -this.y, -this.z)\n\t}\n\n\tabs(): V3 {\n\t\treturn new V3(Math.abs(this.x), Math.abs(this.y), Math.abs(this.z))\n\t}\n\n\tplus(a: V3): V3 {\n\t\tassertVectors(a)\n\t\treturn new V3(this.x + a.x, this.y + a.y, this.z + a.z)\n\t}\n\n\t/**\n\t * Hadarmard product (or Schur product)\n\t * Element-wise multiplication of two vectors.\n\t * @see https://en.wikipedia.org/wiki/Hadamard_product_(matrices)\n\t *\n\t */\n\tschur(a: V3): V3 {\n\t\treturn new V3(this.x * a.x, this.y * a.y, this.z * a.z)\n\t}\n\n\t/**\n\t * Element-wise division.\n\t */\n\tdivv(a: V3): V3 {\n\t\treturn new V3(this.x / a.x, this.y / a.y, this.z / a.z)\n\t}\n\n\t/**\n\t * See also {@link to} which is a.minus(this)\n\t */\n\tminus(a: V3): V3 {\n\t\tassertVectors(a)\n\t\treturn new V3(this.x - a.x, this.y - a.y, this.z - a.z)\n\t}\n\n\tto(a: V3): V3 {\n\t\tassertVectors(a)\n\t\treturn a.minus(this)\n\t}\n\n\ttimes(factor: number): V3 {\n\t\tassertNumbers(factor)\n\t\treturn new V3(this.x * factor, this.y * factor, this.z * factor)\n\t}\n\n\tdiv(a: number): V3 {\n\t\tassertNumbers(a)\n\t\treturn new V3(this.x / a, this.y / a, this.z / a)\n\t}\n\n\t/**\n\t * Dot product.\n\t * @see https://en.wikipedia.org/wiki/Dot_product\n\t */\n\tdot(a: V3): number {\n\t\tassertInst(V3, a)\n\t\treturn this.x * a.x + this.y * a.y + this.z * a.z\n\t}\n\n\t/**\n\t * Linearly interpolate\n\t */\n\tlerp(b: V3, t: number): V3 {\n\t\tassertVectors(b)\n\t\tassertNumbers(t)\n\t\treturn V3.lerp(this, b, t)\n\t}\n\n\tsquared(): number {\n\t\treturn this.dot(this)\n\t}\n\n\tdistanceTo(a: V3): number {\n\t\tassertVectors(a)\n\t\t//return this.minus(a).length()\n\t\treturn Math.hypot(this.x - a.x, this.y - a.y, this.z - a.z)\n\t}\n\n\tdistanceToSquared(a: V3): number {\n\t\tassertVectors(a)\n\t\treturn this.minus(a).squared()\n\t}\n\n\t///**\n\t// * See also {@see #setTo} for the individual\n\t// *\n\t// * @param v\n\t// */\n\t//assign(v) {\n\t//\tassertVectors(v)\n\t//\tthis.x = v.x\n\t//\tthis.y = v.y\n\t//\tthis.z = v.z\n\t//}\n\t//\n\t///**\n\t// * See also {@see #assign} for the V3 version\n\t// *\n\t// * @param x\n\t// * @param y\n\t// * @param z\n\t// */\n\t//setTo(x, y, z = 0) {\n\t//\tthis.x = x\n\t//\tthis.y = y\n\t//\tthis.z = z\n\t//}\n\n\ttoSource(): string {\n\t\treturn V3.NAMEMAP.get(this) || this.toString()\n\t}\n\n\tnonParallelVector(): V3 {\n\t\tconst abs = this.abs()\n\t\tif (abs.x <= abs.y && abs.x <= abs.z) {\n\t\t\treturn V3.X\n\t\t} else if (abs.y <= abs.x && abs.y <= abs.z) {\n\t\t\treturn V3.Y\n\t\t} else {\n\t\t\treturn V3.Z\n\t\t}\n\t}\n\n\tslerp(b: V3, t: number): V3 {\n\t\tassertVectors(b)\n\t\tassertNumbers(t)\n\t\tconst sin = Math.sin\n\t\tconst omega = this.angleTo(b)\n\t\treturn this.times(sin((1 - t) * omega) / sin(omega)).plus(b.times(sin(t * omega) / sin(omega)))\n\t}\n\n\tmin(b: V3): V3 {\n\t\treturn new V3(Math.min(this.x, b.x), Math.min(this.y, b.y), Math.min(this.z, b.z))\n\t}\n\n\tmax(b: V3): V3 {\n\t\treturn new V3(Math.max(this.x, b.x), Math.max(this.y, b.y), Math.max(this.z, b.z))\n\t}\n\n\tequals(v: any): boolean {\n\t\treturn this == v || (this.x == v.x && this.y == v.y && this.z == v.z)\n\t}\n\n\t/**\n\t *\n\t * The cross product is defined as:\n\t * a x b = |a| * |b| * sin(phi) * n\n\t * where |.| is the euclidean norm, phi is the angle between the vectors\n\t * and n is a unit vector perpendicular to both a and b.\n\t *\n\t * The cross product is zero for parallel vectors.\n\t * @see https://en.wikipedia.org/wiki/Cross_product\n\t */\n\tcross(v: V3): V3 {\n\t\treturn new V3(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x)\n\t}\n\n\tminElement(): number {\n\t\treturn Math.min(this.x, this.y, this.z)\n\t}\n\n\tmaxElement(): number {\n\t\treturn Math.max(this.x, this.y, this.z)\n\t}\n\n\ttoArray(n: int = 3): number[] {\n\t\treturn [this.x, this.y, this.z].slice(0, n)\n\t}\n\n\t/**\n\t * Get a perpendicular vector.\n\t * For vectors in the XY-Plane, returns vector rotated 90° CCW.\n\t */\n\tgetPerpendicular(): V3 {\n\t\tif (eq0(this.x) && eq0(this.y)) {\n\t\t\tif (eq0(this.z)) {\n\t\t\t\tthrow new Error('zero vector')\n\t\t\t}\n\t\t\t// v is Vector(0, 0, v.z)\n\t\t\treturn V3.Y\n\t\t}\n\t\treturn new V3(-this.y, this.x, 0)\n\t}\n\n\t//noinspection JSMethodCanBeStatic\n\tdim(): int {\n\t\treturn 3\n\t}\n\n\tels(): number[] {\n\t\treturn [this.x, this.y, this.z]\n\t}\n\n\tangleXY(): number {\n\t\treturn Math.atan2(this.y, this.x)\n\t}\n\n\tlengthXY(): number {\n\t\treturn Math.hypot(this.x, this.y)\n\t\t//return Math.sqrt(this.x * this.x + this.y * this.y)\n\t}\n\n\tsquaredXY(): number {\n\t\treturn this.x * this.x + this.y * this.y\n\t}\n\n\txy(): V3 {\n\t\treturn new V3(this.x, this.y, 0)\n\t}\n\n\t/**\n\t * Transform this vector element-wise by way of function f. Returns V3(f(x), f(y), f(z))\n\t * @param f function to apply to elements (number -> number)\n\t */\n\tmap(f: (el: number, dim: 'x' | 'y' | 'z') => number): V3 {\n\t\treturn new V3(f(this.x, 'x'), f(this.y, 'y'), f(this.z, 'z'))\n\t}\n\n\ttoString(roundFunction?: (x: number) => any): string {\n\t\troundFunction = roundFunction || defaultRoundFunction\n\t\treturn V3.NAMEMAP.get(this) || 'V(' + [this.x, this.y, this.z].map(roundFunction).join(', ') + ')' //+ this.id\n\t}\n\n\tangleTo(b: V3): number {\n\t\tassert(1 == arguments.length)\n\t\tassertVectors(b)\n\t\tassert(!this.likeO())\n\t\tassert(!b.likeO())\n\t\treturn Math.acos(Math.min(1, this.dot(b) / this.length() / b.length()))\n\t}\n\n\t/**\n\t *\n\t * phi = angle between A and B\n\t * alpha = angle between n and normal1\n\t *\n\t * A . B = ||A|| * ||B|| * cos(phi)\n\t * A x B = ||A|| * ||B|| * sin(phi) * n (n = unit vector perpendicular)\n\t * (A x B) . normal1 = ||A|| * ||B|| * sin(phi) * cos(alpha)\n\t */\n\tangleRelativeNormal(vector: V3, normal1: V3): number {\n\t\tassert(2 == arguments.length)\n\t\tassertVectors(vector, normal1)\n\t\tassertf(() => normal1.hasLength(1))\n\t\t//assert(vector.isPerpendicularTo(normal1), 'vector.isPerpendicularTo(normal1)' + vector.sce + normal1.sce)\n\t\t//assert(this.isPerpendicularTo(normal1), 'this.isPerpendicularTo(normal1)' + this.dot(vector)) //\n\t\t// -0.000053600770598683675\n\t\treturn Math.atan2(this.cross(vector).dot(normal1), this.dot(vector))\n\t}\n\n\t/**\n\t * Returns true iff this is parallel to vector, i.e. this * s == vector, where s is a positive or negative number,\n\t * using eq. Throw a DebugError\n\t * - if vector is not a Vector or\n\t * - if this has a length of 0 or\n\t * - if vector has a length of 0\n\t */\n\tisParallelTo(vector: V3): boolean {\n\t\tassertVectors(vector)\n\t\tassert(!this.likeO())\n\t\tassert(!vector.likeO())\n\t\t// a . b takes on values of +|a|*|b| (vectors same direction) to -|a|*|b| (opposite direction)\n\t\t// in both cases the vectors are parallel, so check if abs(a . b) == |a|*|b|\n\t\tconst dot = this.dot(vector)\n\t\treturn eq(this.squared() * vector.squared(), dot * dot)\n\t}\n\n\tisPerpendicularTo(vector: V3): boolean {\n\t\tassertVectors(vector)\n\t\tassert(!this.likeO(), '!this.likeO()')\n\t\tassert(!vector.likeO(), '!vector.likeO()')\n\t\treturn eq0(this.dot(vector))\n\t}\n\n\tisReverseDirTo(other: V3): boolean {\n\t\tassertVectors(other)\n\t\tassert(!this.likeO())\n\t\tassert(!other.likeO())\n\t\t// a . b takes on values of +|a|*|b| (vectors same direction) to -|a|*|b| (opposite direction)\n\t\t// in both cases the vectors are parallel, so check if abs(a . b) == |a|*|b|\n\t\tconst dot = this.dot(other)\n\t\treturn eq(Math.sqrt(this.squared() * other.squared()), dot)\n\t}\n\n\t/**\n\t * Returns the length of this Vector, i.e. the euclidean norm.\n\t *\n\t * Note that the partial derivatives of the euclidean norm at point x are equal to the\n\t * components of the unit vector x.\n\t */\n\tlength(): number {\n\t\treturn Math.hypot(this.x, this.y, this.z)\n\t\t//return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)\n\t}\n\n\t/**\n\t * Definition: V3.likeO == V3.like(V3.O)\n\t */\n\tlikeO(): boolean {\n\t\treturn this.like(V3.O)\n\t}\n\n\t/**\n\t * eq(this.x, obj.x) && eq(this.y, obj.y) && eq(this.z, obj.z)\n\t * @param obj\n\t */\n\tlike(obj: any): boolean {\n\t\tif (obj === this) return true\n\t\tif (!(obj instanceof V3)) return false\n\t\treturn eq(this.x, obj.x) && eq(this.y, obj.y) && eq(this.z, obj.z)\n\t}\n\n\t/**\n\t * equivalent to this.like(v) || this.negated().like(v)\n\t */\n\tlikeOrReversed(v: V3): boolean {\n\t\treturn eq(Math.abs(this.dot(v)), Math.sqrt(this.squared() * v.squared()))\n\t}\n\n\t/**\n\t * Returns a new unit Vector (.length() === 1) with the same direction as this vector. Throws a\n\t * DebugError if this has a length of 0.\n\t */\n\tunit(): V3 {\n\t\tassert(!this.likeO(), 'cannot normalize zero vector')\n\t\treturn this.div(this.length())\n\t}\n\n\t/**\n\t * Documentation stub. You want {@link unit}\n\t */\n\tnormalized(): V3 {\n\t\tthrow new Error('documentation stub. use .unit()')\n\t}\n\n\t/**\n\t * Returns a new V3 equal to this scaled so that its length is equal to newLength.\n\t *\n\t * Passing a negative newLength will flip the vector.\n\t */\n\ttoLength(newLength: number): V3 {\n\t\tassertNumbers(newLength)\n\t\treturn this.times(newLength / this.length())\n\t}\n\n\t/**\n\t * Returns a new Vector which is the projection of this vector onto the passed vector.\n\t * Examples\n\t *\n\t * \tV(3, 4).projectedOn(V(1, 0)) // returns V(3, 0)\n\t * \tV(3, 4).projectedOn(V(2, 0)) // returns V(3, 0)\n\t * \tV(3, 4).projectedOn(V(-1, 0)) // returns V(-3, 0)\n\t * \tV(3, 4).projectedOn(V(0, 1)) // returns V(0, 4)\n\t * \tV(3, 4).projectedOn(V(1, 1)) // returns\n\t */\n\tprojectedOn(b: V3): V3 {\n\t\tassertVectors(b)\n\t\t// https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2\n\t\treturn b.times(this.dot(b) / b.dot(b))\n\t}\n\n\trejectedFrom(b: V3): V3 {\n\t\tassertVectors(b)\n\t\t// https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2\n\t\treturn this.minus(b.times(this.dot(b) / b.dot(b)))\n\t}\n\n\trejectedFrom1(b1: V3): V3 {\n\t\tassertVectors(b1)\n\t\tassert(b1.hasLength(1))\n\t\t// https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2\n\t\treturn this.minus(b1.times(this.dot(b1)))\n\t}\n\n\t/**\n\t * Returns the length of this vector rejected from the unit vector b.\n\t *\n\t *       /|\n\t * this / |    ^\n\t *     /__|    | b\n\t *      r\n\t *  Returns length of r (r === this.rejectedFrom(b))\n\t */\n\trejectedLength(b: V3): number {\n\t\tassertVectors(b)\n\t\treturn Math.sqrt(this.dot(this) - this.dot(b) ** 2 / b.dot(b))\n\t}\n\n\t/**\n\t * Returns the length of this vector rejected from the unit vector b1.\n\t *\n\t *       /|\n\t * this / |    ^\n\t *     /__|    | b1\n\t *      r\n\t *  Returns length of r (r === this.rejectedFrom(b1))\n\t */\n\trejected1Length(b1: V3): number {\n\t\tassertVectors(b1)\n\t\tassert(b1.hasLength(1))\n\t\treturn Math.sqrt(this.dot(this) - this.dot(b1) ** 2)\n\t}\n\n\t/**\n\t * Returns true iff the length() of this vector is equal to 'length', using eq\n\t * @example\n\t * V(3, 4).hasLength(5) === true\n\t * @example\n\t * V(1, 1).hasLength(1) === false\n\t */\n\thasLength(length: number): boolean {\n\t\tassertNumbers(length)\n\t\treturn eq(length, this.length())\n\t}\n\n\t/**\n\t * Returns the sum of the absolute values of the components of this vector.\n\t * E.g. V(1, -2, 3) === abs(1) + abs(-2) + abs(3) === 1 + 2 + 3 === 6\n\t */\n\tabsSum(): number {\n\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z)\n\t}\n\n\t/**\n\t * returns min(|x|, |y|, |z|)\n\t */\n\tminAbsElement(): number {\n\t\treturn Math.min(Math.abs(this.x), Math.abs(this.y), Math.min(this.z))\n\t}\n\n\t/**\n\t * returns max(|x|, |y|, |z|)\n\t */\n\tmaxAbsElement(): number {\n\t\treturn Math.max(Math.abs(this.x), Math.abs(this.y), Math.abs(this.z))\n\t}\n\n\tmaxAbsDim(): 0 | 1 | 2 {\n\t\tconst xAbs = Math.abs(this.x),\n\t\t\tyAbs = Math.abs(this.y),\n\t\t\tzAbs = Math.abs(this.z)\n\t\treturn xAbs >= yAbs ? (xAbs >= zAbs ? 0 : 2) : yAbs >= zAbs ? 1 : 2\n\t}\n\n\tminAbsDim(): 0 | 1 | 2 {\n\t\tconst xAbs = Math.abs(this.x),\n\t\t\tyAbs = Math.abs(this.y),\n\t\t\tzAbs = Math.abs(this.z)\n\t\treturn xAbs < yAbs ? (xAbs < zAbs ? 0 : 2) : yAbs < zAbs ? 1 : 2\n\t}\n\n\twithElement(dim: 'x' | 'y' | 'z', el: number) {\n\t\tassert(['x', 'y', 'z'].includes(dim), '' + dim)\n\t\tassertNumbers(el)\n\t\tif ('x' == dim) {\n\t\t\treturn new V3(el, this.y, this.z)\n\t\t}\n\t\tif ('y' == dim) {\n\t\t\treturn new V3(this.x, el, this.z)\n\t\t}\n\t\treturn new V3(this.x, this.y, el)\n\t}\n\n\thashCode(): int {\n\t\tfunction floatHashCode(f: number) {\n\t\t\treturn ~~(f * (1 << 28))\n\t\t}\n\n\t\treturn ~~((floatHashCode(this.x) * 31 + floatHashCode(this.y)) * 31 + floatHashCode(this.z))\n\t}\n\n\t/**\n\t * as sadjkh akjhs djkahsd kjahs k skjhdakjh dkjash dkjahs kjdhas kj dhkjahsd kjahs dkjahs dkjhas kjdkajs\n\t * hdkljhfkjahdslfghal dasd\n\t *\n\t * * asdjklas dasds\n\t */\n\thashCodes() {\n\t\t//function floatHashCode(f) {\n\t\t//\treturn ~~(f * (1 << 28))\n\t\t//}\n\n\t\t// compare hashCode.floatHashCode\n\t\t// the following ops are equivalent to\n\t\t// floatHashCode((el - NLA_PRECISION) % (2 * NLA_PRECISION))\n\t\t// this results in the hashCode for the (out of 8 possible) cube with the lowest hashCode\n\t\t// the other 7 can be calculated by adding constants\n\t\tconst xHC = ~~(this.x * (1 << 28) - 0.5),\n\t\t\tyHC = ~~(this.y * (1 << 28) - 0.5),\n\t\t\tzHC = ~~(this.z * (1 << 28) - 0.5),\n\t\t\thc = ~~((xHC * 31 + yHC) * 31 + zHC)\n\t\treturn [\n\t\t\t~~hc,\n\t\t\t~~(hc + 961),\n\t\t\t~~(hc + 31),\n\t\t\t~~(hc + 31 + 961),\n\t\t\t~~(hc + 1),\n\t\t\t~~(hc + 1 + 961),\n\t\t\t~~(hc + 1 + 31),\n\t\t\t~~(hc + 1 + 31 + 961),\n\t\t]\n\t}\n\n\t//static areDisjoint(it: Iterable<V3>): boolean {\n\t//\tconst vSet = new CustomSet\n\t//\tfor (const v of it) {\n\t//\t\tif (!v.equals(vSet.canonicalizeLike(v))) {\n\t//\t\t\t// like value already in set\n\t//\t\t\treturn false\n\t//\t\t}\n\t//\t}\n\t//\treturn true\n\t//}\n\n\tcompareTo(other: V3): number {\n\t\tif (this.x != other.x) {\n\t\t\treturn this.x - other.x\n\t\t} else if (this.y != other.y) {\n\t\t\treturn this.y - other.y\n\t\t} else {\n\t\t\treturn this.z - other.z\n\t\t}\n\t}\n\n\tcompareTo2(other: V3, eps: number = NLA_PRECISION): number {\n\t\tif (!eq2(this.x, other.x, eps)) {\n\t\t\treturn this.x - other.x\n\t\t} else if (!eq2(this.y, other.y, eps)) {\n\t\t\treturn this.y - other.y\n\t\t} else if (!eq2(this.z, other.z, eps)) {\n\t\t\treturn this.z - other.z\n\t\t} else {\n\t\t\treturn 0\n\t\t}\n\t}\n\n\ttoAngles(): { theta: raddd; phi: raddd } {\n\t\treturn {\n\t\t\ttheta: Math.atan2(this.y, this.x),\n\t\t\tphi: Math.asin(this.z / this.length()),\n\t\t}\n\t}\n}\n\n/**\n * Utility method for creating V3s\n *\n * Example usage:\n *\n *     V(1, 2, 3)\n *     V([1, 2, 3])\n *     V({ x: 1, y: 2, z: 3 })\n *     V(1, 2) * assumes z=0\n *     V([1, 2]) // assumes z=0\n *\n */\nexport function V(x: number, y: number, z?: number): V3\nexport function V(arr: [number, number, number] | [number, number]): V3\nexport function V(obj: { x: number; y: number; z?: number }): V3\nexport function V(a: any, b?: any, c?: any): V3 {\n\tif (arguments.length == 3) {\n\t\treturn new V3(parseFloat(a), parseFloat(b), parseFloat(c))\n\t} else if (arguments.length == 2) {\n\t\treturn new V3(parseFloat(a), parseFloat(b), 0)\n\t} else if (arguments.length == 1) {\n\t\tif (typeof a == 'object') {\n\t\t\tif (a instanceof V3) {\n\t\t\t\t// immutable, so\n\t\t\t\treturn a\n\t\t\t} else if (a instanceof Array || a instanceof Float32Array || a instanceof Float64Array) {\n\t\t\t\tif (2 == a.length) {\n\t\t\t\t\treturn new V3(parseFloat(a[0]), parseFloat(a[1]), 0)\n\t\t\t\t} else if (3 == a.length) {\n\t\t\t\t\treturn new V3(parseFloat(a[0]), parseFloat(a[1]), parseFloat(a[2]))\n\t\t\t\t}\n\t\t\t} else if ('x' in a && 'y' in a) {\n\t\t\t\treturn new V3(parseFloat(a.x), parseFloat(a.y), 'z' in a ? parseFloat(a.z) : 0)\n\t\t\t}\n\t\t}\n\t}\n\tthrow new Error('invalid arguments' + arguments)\n}\n","import { ArrayLikeWriteAble } from './arrayUtils'\nimport { Matrix } from './Matrix'\nimport { assert, assertInst, assertNumbers, callsce, clamp, eq, eq0, FloatArray, int } from './util'\nimport { V3 } from './V3'\n\nexport class Vector {\n\tconstructor(readonly v: Float64Array) {\n\t\tassertInst(Float64Array, v)\n\t}\n\n\tstatic fromFunction(dims: int, f: (dim: int) => number): Vector {\n\t\tassertNumbers(dims)\n\t\tconst e = new Float64Array(dims)\n\t\tlet i = dims\n\t\twhile (i--) {\n\t\t\te[i] = f(i)\n\t\t}\n\t\treturn new Vector(e)\n\t}\n\n\tstatic random(dims: int): Vector {\n\t\treturn Vector.fromFunction(dims, (i) => Math.random())\n\t}\n\n\tstatic from(f64a: Float64Array): Vector\n\tstatic from(...args: number[]): Vector\n\tstatic from(...args: any[]): Vector {\n\t\tassert(\n\t\t\targs[0] instanceof Float64Array || args.every((a) => 'number' == typeof a),\n\t\t\t'args[0] instanceof Float64Array || args.every(a => \"number\" == typeof a)',\n\t\t)\n\t\treturn new Vector(args[0] instanceof Float64Array ? args[0] : Float64Array.from(args))\n\t}\n\n\tstatic Zero(dims: int): Vector {\n\t\tassertNumbers(dims)\n\t\tlet i = 0\n\t\tconst n = new Float64Array(dims)\n\t\twhile (i--) {\n\t\t\tn[i] = 0\n\t\t}\n\t\treturn new Vector(n)\n\t}\n\n\tstatic Unit(dims: int, dir: int): Vector {\n\t\tassertNumbers(dims, dir)\n\t\tlet i = 0\n\t\tconst n = new Float64Array(dims)\n\t\twhile (i--) {\n\t\t\tn[i] = +(i == dir) // +true === 1, +false === 0\n\t\t}\n\t\treturn new Vector(n)\n\t}\n\n\t/**\n\t * Pack an array of Vectors into an array of numbers (Float32Array by default).\n\t *\n\t * @param vectors source array\n\t * @param dest destination array. If provided, must be large enough to fit v3count items.\n\t * @param srcStart starting index in source array\n\t * @param destStart starting index in destination array\n\t * @param vectorCount Number of V3s to copy.\n\t * @returns Packed array.\n\t */\n\tstatic pack<T extends FloatArray = Float32Array>(\n\t\tvectors: ReadonlyArray<Vector>,\n\t\tdest?: T,\n\t\tsrcStart: number = 0,\n\t\tdestStart: number = 0,\n\t\tvectorCount: number = vectors.length - srcStart,\n\t): T {\n\t\t//assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')\n\t\tconst dim = vectors[0].dim()\n\t\tconst result = dest || (new Float32Array(dim * vectorCount) as any) // TODO\n\t\tassert(\n\t\t\tresult.length - destStart >= vectorCount * dim,\n\t\t\t'dest.length - destStart >= v3count * 3',\n\t\t\tresult.length,\n\t\t\tdestStart,\n\t\t\tvectorCount * 3,\n\t\t)\n\n\t\tlet i = vectorCount,\n\t\t\tsrcIndex = srcStart,\n\t\t\tdestIndex = destStart\n\t\twhile (i--) {\n\t\t\tconst v = vectors[srcIndex++]\n\t\t\tfor (let d = 0; d < dim; d++) {\n\t\t\t\tresult[destIndex++] = v.v[d]\n\t\t\t}\n\t\t}\n\t\treturn result\n\t}\n\n\tstatic lerp(a: Vector, b: Vector, t: number) {\n\t\tassert(a.dim() == b.dim())\n\t\tconst n = new Float64Array(a.v.length)\n\t\tlet i = a.v.length\n\t\twhile (i--) {\n\t\t\tn[i] = a.v[i] * (1 - t) + b.v[i] * t\n\t\t}\n\t\treturn new Vector(n)\n\t}\n\n\tstatic add(...vs: Vector[]): Vector {\n\t\tconst dim = vs[0].v.length\n\t\tconst result = new Float64Array(dim)\n\t\tlet i = vs.length\n\t\twhile (i--) {\n\t\t\tlet d = dim\n\t\t\twhile (d--) {\n\t\t\t\tresult[d] += vs[i].v[d]\n\t\t\t}\n\t\t}\n\t\treturn new Vector(result)\n\t}\n\n\t/**\n\t * Create a new 4D Vector from a V3 and a weight.\n\t * @param v3\n\t * @param weight\n\t */\n\tstatic fromV3AndWeight(v3: V3, weight: number) {\n\t\treturn new Vector(new Float64Array([v3.x * weight, v3.y * weight, v3.z * weight, weight]))\n\t}\n\n\tget x() {\n\t\treturn this.v[0]\n\t}\n\tget y() {\n\t\treturn this.v[1]\n\t}\n\tget z() {\n\t\treturn this.v[2]\n\t}\n\tget w() {\n\t\treturn this.v[3]\n\t}\n\n\t[Symbol.iterator]() {\n\t\treturn this.v[Symbol.iterator]()\n\t}\n\n\tdim(): int {\n\t\treturn this.v.length\n\t}\n\n\te(index: int): number {\n\t\tif (0 > index || index >= this.v.length) {\n\t\t\tthrow new Error('array index out of bounds')\n\t\t}\n\t\treturn this.v[index]\n\t}\n\n\tplus(vector: Vector): Vector {\n\t\tconst u = this.v,\n\t\t\tv = vector.v\n\t\tconst n = new Float64Array(u.length)\n\t\tlet i = u.length\n\t\twhile (i--) {\n\t\t\tn[i] = u[i] + v[i]\n\t\t}\n\t\treturn new Vector(n)\n\t}\n\n\tminus(vector: Vector): Vector {\n\t\tconst u = this.v,\n\t\t\tv = vector.v\n\t\tconst n = new Float64Array(u.length)\n\t\tlet i = u.length\n\t\twhile (i--) {\n\t\t\tn[i] = u[i] - v[i]\n\t\t}\n\t\treturn new Vector(n)\n\t}\n\n\ttimes(factor: number): Vector {\n\t\tconst u = this.v\n\t\tconst n = new Float64Array(u.length)\n\t\tlet i = u.length\n\t\twhile (i--) {\n\t\t\tn[i] = u[i] * factor\n\t\t}\n\t\treturn new Vector(n)\n\t}\n\n\tdiv(val: number): Vector {\n\t\tconst u = this.v\n\t\tconst n = new Float64Array(u.length)\n\t\tlet i = u.length\n\t\twhile (i--) {\n\t\t\tn[i] = u[i] / val\n\t\t}\n\t\treturn new Vector(n)\n\t}\n\n\tdot(vector: Vector): number {\n\t\tassert(this.dim == vector.dim, 'passed vector must have the same dim')\n\t\tlet result = 0\n\t\tconst u = this.v,\n\t\t\tv = vector.v\n\t\tlet i = u.length\n\t\twhile (i--) {\n\t\t\tresult += u[i] * v[i]\n\t\t}\n\t\treturn result\n\t}\n\n\tcross(vector: Vector): Vector {\n\t\tassertInst(Vector, vector)\n\t\tconst n = new Float64Array(3)\n\t\tn[0] = this.v[1] * vector.v[2] - this.v[2] * vector.v[1]\n\t\tn[1] = this.v[2] * vector.v[0] - this.v[0] * vector.v[2]\n\t\tn[2] = this.v[0] * vector.v[1] - this.v[1] * vector.v[0]\n\n\t\treturn new Vector(n)\n\t}\n\n\tschur(vector: Vector): Vector {\n\t\tassertInst(Vector, vector)\n\t\tconst u = this.v,\n\t\t\tv = vector.v\n\t\tconst n = new Float64Array(u.length)\n\t\tlet i = u.length\n\t\twhile (i--) {\n\t\t\tn[i] = u[i] * v[i]\n\t\t}\n\t\treturn new Vector(n)\n\t}\n\n\tequals(obj: any): boolean {\n\t\tif (obj === this) return true\n\t\tif (obj.constructor !== Vector) return false\n\t\tif (this.v.length != obj.v.length) return false\n\t\tlet i = this.v.length\n\t\twhile (i--) {\n\t\t\tif (this.v[i] !== obj.v[i]) return false\n\t\t}\n\t\treturn true\n\t}\n\n\tlike(obj: any): boolean {\n\t\tif (obj === this) return true\n\t\tif (obj.constructor !== Vector) return false\n\t\tif (this.v.length != obj.v.length) return false\n\t\tlet i = this.v.length\n\t\twhile (i--) {\n\t\t\tif (!eq(this.v[i], obj.v[i])) return false\n\t\t}\n\t\treturn true\n\t}\n\n\tmap(f: (el: number, dim: number) => number): Vector {\n\t\treturn new Vector(this.v.map(f))\n\t}\n\n\ttoString(roundFunction?: (x: number) => any): string {\n\t\troundFunction = roundFunction || ((v) => +v.toFixed(6))\n\t\treturn 'Vector(' + this.v.map(roundFunction).join(', ') + ')'\n\t}\n\n\ttoSource() {\n\t\treturn callsce('VV', ...this.v)\n\t}\n\n\tangleTo(vector: Vector): number {\n\t\tassertInst(Vector, vector)\n\t\tassert(!this.isZero(), '!this.likeO()')\n\t\tassert(!vector.isZero(), '!vector.likeO()')\n\t\treturn Math.acos(clamp(this.dot(vector) / this.length() / vector.length(), -1, 1))\n\t}\n\n\t/**\n\t * Returns true iff this is parallel to vector, using eq\n\t * Throw a DebugError\n\t * - if vector is not a Vector or\n\t * - if this has a length of 0 or\n\t * - if vector has a length of 0\n\t */\n\tisParallelTo(vector: Vector): boolean {\n\t\tassertInst(Vector, vector)\n\t\tassert(!this.isZero(), '!this.likeO()')\n\t\tassert(!vector.isZero(), '!vector.likeO()')\n\t\t// a . b takes on values of +|a|*|b| (vectors same direction) to -|a|*|b| (opposite direction)\n\t\t// in both cases the vectors are paralle, so check if abs(a . b) == |a|*|b|\n\t\treturn eq(Math.sqrt(this.lengthSquared() * vector.lengthSquared()), Math.abs(this.dot(vector)))\n\t}\n\n\tisPerpendicularTo(vector: Vector): boolean {\n\t\tassertInst(Vector, vector)\n\t\tassert(!this.isZero(), '!this.likeO()')\n\t\tassert(!vector.isZero(), '!vector.likeO()')\n\t\treturn eq0(this.dot(vector))\n\t}\n\n\t/**\n\t * Returns true iff the length of this vector is 0, as returned by NLA.isZero.\n\t * Definition: Vector.prototype.isZero = () => NLA.isZero(this.length())\n\t */\n\tisZero(): boolean {\n\t\treturn eq0(this.length())\n\t}\n\n\t/*/ Returns the length of this Vector, i.e. the euclidian norm.*/\n\tlength(): number {\n\t\treturn Math.hypot.apply(undefined, this.v)\n\t\t//return Math.sqrt(this.lengthSquared())\n\t}\n\n\tlengthSquared(): number {\n\t\tlet result = 0\n\t\tconst u = this.v\n\t\tlet i = u.length\n\t\twhile (i--) {\n\t\t\tresult += u[i] * u[i]\n\t\t}\n\t\treturn result\n\t}\n\n\t/**\n\t * Returns a new unit Vector (.length() === 1) with the same direction as this vector. Throws a\n\t */\n\tunit(): Vector {\n\t\tconst length = this.length()\n\t\tif (eq0(length)) {\n\t\t\tthrow new Error('cannot normalize zero vector')\n\t\t}\n\t\treturn this.div(this.length())\n\t}\n\n\t/**\n\t * Documentation stub. You want {@link unit}\n\t */\n\tnormalized(): V3 {\n\t\tthrow new Error('documentation stub. use .unit()')\n\t}\n\n\tasRowMatrix(): Matrix {\n\t\treturn new Matrix(this.v.length, 1, this.v)\n\t}\n\n\tasColMatrix(): Matrix {\n\t\treturn new Matrix(1, this.v.length, this.v)\n\t}\n\n\t/**\n\t * Returns a new Vector which is the projection of this vector onto the passed vector.\n\t * @example\n\t * VV(3, 4).projectedOn(VV(1, 0)) // returns VV(3, 0)\n\t * @example\n\t * VV(3, 4).projectedOn(VV(2, 0)) // returns VV(3, 0)\n\t * @example\n\t * VV(3, 4).projectedOn(VV(-1, 0)) // returns VV(-3, 0)\n\t * @example\n\t * VV(3, 4).projectedOn(VV(0, 1)) // returns VV(0, 4)\n\t * @example\n\t * VV(3, 4).projectedOn(VV(1, 1)) // returns\n\t */\n\tprojectedOn(b: Vector): Vector {\n\t\tassertInst(Vector, b)\n\t\t// https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2\n\t\treturn b.times(this.dot(b) / b.dot(b))\n\t}\n\n\trejectedOn(b: Vector): Vector {\n\t\tassertInst(Vector, b)\n\t\t// https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2\n\t\treturn this.minus(b.times(this.dot(b) / b.dot(b)))\n\t}\n\n\tto(a: Vector): Vector {\n\t\treturn a.minus(this)\n\t}\n\n\t/**\n\t * Returns true iff the length() of this vector is equal to 'length', using equals\n\t * E.g. NLA.V(3, 4).hasLength(5) === true\n\t * NLA.V(1, 1).hasLength(1) === false\n\t */\n\thasLength(length: number): boolean {\n\t\tassertNumbers(length)\n\t\treturn eq(length, this.length())\n\t}\n\n\tV3(): V3 {\n\t\t//assert(this.dim() == 3)\n\t\treturn new V3(this.v[0], this.v[1], this.v[2])\n\t}\n\n\t/**\n\t * Project into 3 dimensions.\n\t */\n\tp3(): V3 {\n\t\tassert(this.v.length == 4)\n\t\tconst w = this.v[3]\n\t\treturn new V3(this.v[0] / w, this.v[1] / w, this.v[2] / w)\n\t}\n\n\ttransposed() {\n\t\treturn new Matrix(this.v.length, 1, this.v)\n\t}\n}\n\nexport function VV(...values: number[]) {\n\treturn new Vector(new Float64Array(values))\n}\n\nexport function vArrGet(vArr: ArrayLike<number>, dim: int, i: int) {\n\tassert(vArr.length % dim == 0)\n\treturn new Vector(Float64Array.prototype.slice.call(vArr, i * dim, (i + 1) * dim))\n}\n\nexport function vArrSet(vArr: ArrayLikeWriteAble<number>, i: int, vector: Vector) {\n\tconst dim = vector.dim()\n\tassert(vArr.length % dim == 0)\n\tlet d = dim\n\twhile (d--) {\n\t\tvArr[i * dim + d] = vector.v[d]\n\t}\n}\n","import { Equalable } from 'javasetmap.ts'\n\nimport { arrayCopy, arrayCopyBlocks, arrayCopyStep, arrayFromFunction, arraySwap, max } from './arrayUtils'\nimport { assertVectors } from './NLA'\nimport {\n\tassert,\n\tassertf,\n\tassertInst,\n\tassertInts,\n\tassertNumbers,\n\teq,\n\teq0,\n\tFloatArray,\n\tfloatHashCode,\n\tint,\n\tNLA_PRECISION,\n} from './util'\nimport { Vector } from './Vector'\n\nexport class Matrix implements Equalable {\n\tconstructor(public width: int, public height: int, public readonly m: Float64Array) {\n\t\tassertInts(width, height)\n\t\tassertf(() => 0 < width)\n\t\tassertf(() => 0 < height)\n\t\tassert(width * height == m.length, 'width * height == m.length', width, height, m.length)\n\t}\n\n\tstatic random(width: int, height: int): Matrix {\n\t\treturn Matrix.fromFunction(width, height, () => Math.random())\n\t}\n\n\tstatic fromFunction(width: int, height: int, f: (row: int, col: int, elIndex: int) => number): Matrix {\n\t\tconst m = new Float64Array(height * width)\n\t\tlet elIndex = height * width\n\t\twhile (elIndex--) {\n\t\t\tm[elIndex] = f(Math.floor(elIndex / width), elIndex % width, elIndex)\n\t\t}\n\t\treturn new Matrix(width, height, m)\n\t}\n\n\tstatic identityN(dim: int): Matrix {\n\t\tassertInts(dim)\n\t\tconst m = new Float64Array(dim * dim)\n\t\t// Float64Arrays are init to 0\n\t\tlet elIndex = dim * (dim + 1)\n\t\twhile (elIndex) {\n\t\t\telIndex -= dim + 1\n\t\t\tm[elIndex] = 1\n\t\t}\n\t\treturn new Matrix(dim, dim, m)\n\t}\n\n\t/**\n\t * Create new dim x dim matrix equal to an identity matrix with rows/colums i and k swapped. Note that i and k\n\t * are 0-indexed.\n\t */\n\tstatic permutation(dim: int, i: int, k: int): Matrix {\n\t\tassertInts(dim, i, k)\n\t\tassertf(() => 0 <= i && i < dim)\n\t\tassertf(() => 0 <= k && k < dim)\n\t\tconst m = new Float64Array(dim * dim)\n\t\t// Float64Array are init to 0\n\t\tlet elIndex = dim * (dim + 1)\n\t\twhile (elIndex) {\n\t\t\telIndex -= dim + 1\n\t\t\tm[elIndex] = 1\n\t\t}\n\t\tm[i * dim + i] = 0\n\t\tm[k * dim + k] = 0\n\t\tm[i * dim + k] = 1\n\t\tm[k * dim + i] = 1\n\t\treturn new Matrix(dim, dim, m)\n\t}\n\n\tstatic fromRowArrays(...rowArrays: ArrayLike<number>[]): Matrix {\n\t\tif (0 == rowArrays.length) {\n\t\t\tthrow new Error('cannot have 0 vector')\n\t\t}\n\t\tconst height = rowArrays.length\n\t\tconst width = rowArrays[0].length\n\t\tconst m = new Float64Array(height * width)\n\t\tarrayCopy(rowArrays[0], 0, m, 0, width)\n\t\tfor (let rowIndex = 1; rowIndex < height; rowIndex++) {\n\t\t\tif (rowArrays[rowIndex].length != width) {\n\t\t\t\tthrow new Error('all row arrays must be the same length')\n\t\t\t}\n\t\t\tarrayCopy(rowArrays[rowIndex], 0, m, rowIndex * width, width)\n\t\t}\n\t\treturn this.new(width, height, m)\n\t}\n\n\tstatic fromColVectors(colVectors: Vector[]): Matrix {\n\t\treturn Matrix.fromColArrays(...colVectors.map((v) => v.v))\n\t}\n\n\tstatic forWidthHeight(width: int, height: int): Matrix {\n\t\treturn new Matrix(width, height, new Float64Array(width * height))\n\t}\n\n\tstatic fromColArrays(...colArrays: ArrayLike<number>[]): Matrix {\n\t\tif (0 == colArrays.length) {\n\t\t\tthrow new Error('cannot have 0 vector')\n\t\t}\n\t\tconst width = colArrays.length\n\t\tconst height = colArrays[0].length\n\t\tconst m = new Float64Array(height * width)\n\t\tarrayCopyStep(colArrays[0], 0, 1, m, 0, width, height)\n\t\tfor (let colIndex = 1; colIndex < width; colIndex++) {\n\t\t\tif (colArrays[colIndex].length != height) {\n\t\t\t\tthrow new Error('all col arrays must be the same length')\n\t\t\t}\n\t\t\tarrayCopyStep(colArrays[colIndex], 0, 1, m, colIndex, width, height)\n\t\t}\n\t\treturn this.new(width, height, m)\n\t}\n\n\tstatic product(...m4s: Matrix[]): Matrix\n\tstatic product(ms: Matrix[], result?: Matrix): Matrix\n\tstatic product(...args: any[]): Matrix {\n\t\tconst [ms, result]: [Matrix[], Matrix | undefined] = Array.isArray(args[0])\n\t\t\t? [args[0], args[1]]\n\t\t\t: [args, undefined]\n\t\tif (0 == ms.length) throw new Error(\"Can't guess matrix size.\")\n\t\tif (1 == ms.length) return Matrix.copy(ms[0], result)\n\t\treturn Matrix.copy(\n\t\t\tms.reduce((a, b) => a.times(b)),\n\t\t\tresult,\n\t\t)\n\t}\n\n\t/**\n\t * Numerically calculate all the partial derivatives of f at x0.\n\t *\n\t * @param f\n\t * @param x0\n\t * @param fx0 f(x0), pass it if you have it already\n\t * @param EPSILON\n\t */\n\tstatic jacobi(\n\t\tf: (x: FloatArray) => ArrayLike<number>,\n\t\tx0: FloatArray,\n\t\tfx0: ArrayLike<number> = f(x0),\n\t\tEPSILON: number = 1e-6,\n\t): Matrix {\n\t\tconst jacobi = Matrix.forWidthHeight(x0.length, fx0.length)\n\t\tfor (let colIndex = 0; colIndex < x0.length; colIndex++) {\n\t\t\tx0[colIndex] += EPSILON\n\t\t\tconst fx = f(x0)\n\t\t\tfor (let rowIndex = 0; rowIndex < fx0.length; rowIndex++) {\n\t\t\t\tconst value = (fx[rowIndex] - fx0[rowIndex]) / EPSILON\n\t\t\t\tjacobi.setEl(rowIndex, colIndex, value)\n\t\t\t}\n\t\t\tx0[colIndex] -= EPSILON\n\t\t}\n\t\treturn jacobi\n\t}\n\n\tstatic copy<T extends Matrix>(src: T, result: T = src.new()): T {\n\t\tassertInst(Matrix, src, result)\n\t\tassert(src.width == result.width)\n\t\tassert(src.height == result.height)\n\t\tassert(result != src, 'result != src')\n\t\tconst s = src.m,\n\t\t\td = result.m\n\t\tlet i = s.length\n\t\twhile (i--) {\n\t\t\td[i] = s[i]\n\t\t}\n\t\treturn result\n\t}\n\n\tprotected static new(width: int, height: int, m: Float64Array) {\n\t\treturn new Matrix(width, height, m)\n\t}\n\n\tcopy(): this {\n\t\treturn Matrix.copy<this>(this)\n\t}\n\n\te(rowIndex: number, colIndex: number): number {\n\t\tassertInts(rowIndex, colIndex)\n\t\tassert(0 <= rowIndex && rowIndex < this.height, 'rowIndex out of bounds ' + rowIndex)\n\t\tassert(0 <= colIndex && colIndex < this.width, 'colIndex out of bounds ' + colIndex)\n\t\treturn this.m[rowIndex * this.width + colIndex]\n\t}\n\n\tsetEl(rowIndex: number, colIndex: number, val: number): void {\n\t\tassertInts(rowIndex, colIndex)\n\t\tassert(0 <= rowIndex && rowIndex < this.height, 'rowIndex out of bounds ' + rowIndex)\n\t\tassert(0 <= colIndex && colIndex < this.width, 'colIndex out of bounds ' + colIndex)\n\t\tassertNumbers(val)\n\t\tthis.m[rowIndex * this.width + colIndex] = val\n\t}\n\n\tplus(m: this): this {\n\t\tassert(this.width == m.width)\n\t\tassert(this.height == m.height)\n\t\tconst r = this.new()\n\t\tlet i = this.m.length\n\t\twhile (i--) r.m[i] = this.m[i] + m.m[i]\n\t\treturn r\n\t}\n\n\tminus(m: Matrix): Matrix {\n\t\tassert(this.width == m.width)\n\t\tassert(this.height == m.height)\n\t\tconst r = this.new()\n\t\tlet i = this.m.length\n\t\twhile (i--) r.m[i] = this.m[i] - m.m[i]\n\t\treturn r\n\t}\n\n\tmulScalar(scalar: number): this {\n\t\tassertNumbers(scalar)\n\t\tconst r = this.new()\n\t\tlet i = this.m.length\n\t\twhile (i--) r.m[i] = this.m[i] * scalar\n\t\treturn r\n\t}\n\n\tdivScalar(scalar: number): this {\n\t\tassertNumbers(scalar)\n\t\tconst r = this.new()\n\t\tlet i = this.m.length\n\t\twhile (i--) r.m[i] = this.m[i] / scalar\n\t\treturn r\n\t}\n\n\tnew(): this {\n\t\treturn new Matrix(this.width, this.height, new Float64Array(this.width * this.height)) as this\n\t}\n\n\ttoString(f?: (el: number) => string, colNames?: ReadonlyArray<string>, rowNames?: ReadonlyArray<string>): string {\n\t\tf = f || ((v) => v.toFixed(6))\n\t\tassert(typeof f(0) == 'string', '' + typeof f(0))\n\t\tassert(!colNames || colNames.length == this.width)\n\t\tassert(!rowNames || rowNames.length == this.height)\n\t\tconst rounded: string[] = Array.from(this.m).map(f)\n\t\tconst rows = arrayFromFunction(this.height, (rowIndex) =>\n\t\t\trounded.slice(rowIndex * this.width, (rowIndex + 1) * this.width),\n\t\t) // select matrix row\n\t\tif (colNames) {\n\t\t\trows.unshift(Array.from(colNames))\n\t\t}\n\t\tif (rowNames) {\n\t\t\trows.forEach((row, rowIndex) => row.unshift(rowNames[rowIndex - (colNames ? 1 : 0)] || ''))\n\t\t}\n\t\tconst colWidths = arrayFromFunction(this.width, (colIndex) => max(rows.map((row) => row[colIndex].length)))\n\t\treturn rows\n\t\t\t.map((row, rowIndex) =>\n\t\t\t\trow\n\t\t\t\t\t.map((x, colIndex) => {\n\t\t\t\t\t\t// pad numbers with spaces to col width\n\t\t\t\t\t\tconst padder =\n\t\t\t\t\t\t\t(rowIndex == 0 && colNames) || (colIndex == 0 && rowNames)\n\t\t\t\t\t\t\t\t? String.prototype.padEnd\n\t\t\t\t\t\t\t\t: String.prototype.padStart\n\t\t\t\t\t\treturn padder.call(x, colWidths[colIndex])\n\t\t\t\t\t})\n\t\t\t\t\t.join('  '),\n\t\t\t)\n\t\t\t.map((x) => x + '\\n')\n\t\t\t.join('') // join rows\n\t}\n\n\trow(rowIndex: int): Vector {\n\t\tassertInts(rowIndex)\n\t\tassert(0 <= rowIndex && rowIndex < this.height, 'rowIndex out of bounds ' + rowIndex)\n\t\tconst v = new Float64Array(this.width)\n\t\tarrayCopy(this.m, rowIndex * this.width, v, 0, this.width)\n\t\treturn new Vector(v)\n\t}\n\n\tcol(colIndex: int): Vector {\n\t\tassertInts(colIndex)\n\t\tassert(0 <= colIndex && colIndex < this.width, 'colIndex out of bounds ' + colIndex)\n\t\tconst v = new Float64Array(this.height)\n\t\tarrayCopyStep(this.m, colIndex, this.width, v, 0, 1, this.height)\n\t\treturn new Vector(v)\n\t}\n\n\tdim(): { width: int; height: int } {\n\t\treturn { width: this.width, height: this.height }\n\t}\n\n\tdimString(): string {\n\t\treturn this.width + 'x' + this.height\n\t}\n\n\tequals(obj: any): boolean {\n\t\tif (obj.constructor != this.constructor) return false\n\t\tif (this.width != obj.width || this.height != obj.height) return false\n\t\tlet elIndex = this.m.length\n\t\twhile (elIndex--) {\n\t\t\tif (this.m[elIndex] != obj.m[elIndex]) return false\n\t\t}\n\t\treturn true\n\t}\n\n\tequalsMatrix(matrix: Matrix, precision: number = NLA_PRECISION): boolean {\n\t\tassertInst(Matrix, matrix)\n\t\tif (this.width != matrix.width || this.height != matrix.height) return false\n\t\tlet elIndex = this.m.length\n\t\twhile (elIndex--) {\n\t\t\tif (Math.abs(this.m[elIndex] - matrix.m[elIndex]) >= precision) return false\n\t\t}\n\t\treturn true\n\t}\n\n\thashCode(): int {\n\t\tlet result = 0\n\t\tlet elIndex = this.m.length\n\t\twhile (elIndex--) {\n\t\t\tresult = result * 31 + floatHashCode(this.m[elIndex])\n\t\t}\n\t\treturn result\n\t}\n\n\t// todo rename\n\tisZero(): boolean {\n\t\tlet elIndex = this.m.length\n\t\twhile (elIndex--) {\n\t\t\tif (!eq0(this.m[elIndex])) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n\tisOrthogonal(): boolean {\n\t\treturn this.isSquare() && this.transposed().times(this).equalsMatrix(Matrix.identityN(this.width))\n\t}\n\n\t/**\n\t * Returns L, U, P such that L * U == P * this\n\t */\n\tluDecomposition(): { L: Matrix; U: Matrix; P: Matrix } {\n\t\tassertf(() => this.isSquare(), this.dim().toSource())\n\t\tconst dim = this.width\n\t\tconst uRowArrays = this.asRowArrays(Float64Array)\n\t\tconst lRowArrays = arrayFromFunction(dim, (row) => new Float64Array(dim))\n\t\tconst pRowArrays = Matrix.identityN(dim).asRowArrays(Float64Array)\n\t\tlet currentRowIndex = 0\n\t\tfor (let colIndex = 0; colIndex < dim; colIndex++) {\n\t\t\t// find largest value in colIndex\n\t\t\tlet maxAbsValue = 0,\n\t\t\t\tpivotRowIndex = -1,\n\t\t\t\tnumberOfNonZeroRows = 0\n\t\t\tfor (let rowIndex = currentRowIndex; rowIndex < dim; rowIndex++) {\n\t\t\t\tconst el = uRowArrays[rowIndex][colIndex]\n\t\t\t\tnumberOfNonZeroRows += +(0 != el)\n\t\t\t\tif (Math.abs(el) > maxAbsValue) {\n\t\t\t\t\tmaxAbsValue = Math.abs(el)\n\t\t\t\t\tpivotRowIndex = rowIndex\n\t\t\t\t}\n\t\t\t}\n\t\t\t// TODO: check with isZero\n\t\t\tif (0 == maxAbsValue) {\n\t\t\t\t// column contains only zeros\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tassert(-1 !== pivotRowIndex)\n\t\t\t// swap rows\n\t\t\tarraySwap(uRowArrays, currentRowIndex, pivotRowIndex)\n\t\t\tarraySwap(lRowArrays, currentRowIndex, pivotRowIndex)\n\t\t\tarraySwap(pRowArrays, currentRowIndex, pivotRowIndex)\n\t\t\tlRowArrays[colIndex][colIndex] = 1\n\n\t\t\tif (1 < numberOfNonZeroRows) {\n\t\t\t\t// subtract pivot (now current) row from all below it\n\t\t\t\tfor (let rowIndex = currentRowIndex + 1; rowIndex < dim; rowIndex++) {\n\t\t\t\t\tconst l = uRowArrays[rowIndex][colIndex] / uRowArrays[currentRowIndex][colIndex]\n\t\t\t\t\tlRowArrays[rowIndex][colIndex] = l\n\t\t\t\t\t// subtract pivot row * l from row 'rowIndex'\n\t\t\t\t\tfor (let colIndex2 = colIndex; colIndex2 < dim; colIndex2++) {\n\t\t\t\t\t\tuRowArrays[rowIndex][colIndex2] -= l * uRowArrays[currentRowIndex][colIndex2]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcurrentRowIndex++ // this doesn't increase if pivot was zero\n\t\t}\n\t\treturn {\n\t\t\tL: Matrix.fromRowArrays(...lRowArrays),\n\t\t\tU: Matrix.fromRowArrays(...uRowArrays),\n\t\t\tP: Matrix.fromRowArrays(...pRowArrays),\n\t\t}\n\t}\n\n\tgauss(): { L: Matrix; U: Matrix; P: Matrix } {\n\t\tconst width = this.width,\n\t\t\theight = this.height\n\t\tconst uRowArrays = this.asRowArrays(Float64Array)\n\t\tconst lRowArrays = arrayFromFunction(height, (row) => new Float64Array(width))\n\t\tconst pRowArrays = Matrix.identityN(height).asRowArrays(Float64Array)\n\t\tlet currentRowIndex = 0\n\t\tfor (let colIndex = 0; colIndex < width; colIndex++) {\n\t\t\t// console.log('currentRowIndex', currentRowIndex)\t// find largest value in colIndex\n\t\t\tlet maxAbsValue = 0,\n\t\t\t\tpivotRowIndex = -1,\n\t\t\t\tnumberOfNonZeroRows = 0\n\t\t\tfor (let rowIndex = currentRowIndex; rowIndex < height; rowIndex++) {\n\t\t\t\tconst el = uRowArrays[rowIndex][colIndex]\n\t\t\t\tnumberOfNonZeroRows += +(0 != el)\n\t\t\t\tif (Math.abs(el) > maxAbsValue) {\n\t\t\t\t\tmaxAbsValue = Math.abs(el)\n\t\t\t\t\tpivotRowIndex = rowIndex\n\t\t\t\t}\n\t\t\t}\n\t\t\t// TODO: check with isZero\n\t\t\tif (0 == maxAbsValue) {\n\t\t\t\t// column contains only zeros\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tassert(-1 !== pivotRowIndex)\n\t\t\t// swap rows\n\t\t\tarraySwap(uRowArrays, currentRowIndex, pivotRowIndex)\n\t\t\tarraySwap(lRowArrays, currentRowIndex, pivotRowIndex)\n\t\t\tarraySwap(pRowArrays, currentRowIndex, pivotRowIndex)\n\t\t\tlRowArrays[currentRowIndex][colIndex] = 1\n\n\t\t\tif (1 < numberOfNonZeroRows) {\n\t\t\t\t// subtract pivot (now current) row from all below it\n\t\t\t\tfor (let rowIndex = currentRowIndex + 1; rowIndex < height; rowIndex++) {\n\t\t\t\t\tconst l = uRowArrays[rowIndex][colIndex] / uRowArrays[currentRowIndex][colIndex]\n\t\t\t\t\tlRowArrays[rowIndex][colIndex] = l\n\t\t\t\t\t// subtract pivot row * l from row 'rowIndex'\n\t\t\t\t\tfor (let colIndex2 = colIndex; colIndex2 < width; colIndex2++) {\n\t\t\t\t\t\tuRowArrays[rowIndex][colIndex2] -= l * uRowArrays[currentRowIndex][colIndex2]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcurrentRowIndex++ // this doesn't increase if pivot was zero\n\t\t}\n\t\treturn {\n\t\t\tL: Matrix.fromRowArrays(...lRowArrays),\n\t\t\tU: Matrix.fromRowArrays(...uRowArrays),\n\t\t\tP: Matrix.fromRowArrays(...pRowArrays),\n\t\t}\n\t}\n\n\tqrDecompositionGivensRotation(): { Q: Matrix; R: Matrix } {\n\t\t// function sigma(c: number, s: number) {\n\t\t// \tif (0 == c) {\n\t\t// \t\treturn 1\n\t\t// \t}\n\t\t// \tif (Math.abs(s) < Math.abs(c)) {\n\t\t// \t\treturn 0.5 * Math.sign(c) * s\n\t\t// \t}\n\t\t// \treturn (2 * Math.sign(s)) / c\n\t\t// }\n\t\tconst R = this.copy()\n\n\t\tfunction matrixForCS(dim: int, i: int, k: int, c: number, s: number) {\n\t\t\tconst m = Matrix.identityN(dim)\n\t\t\tm.setEl(i, i, c)\n\t\t\tm.setEl(k, k, c)\n\t\t\tm.setEl(i, k, s)\n\t\t\tm.setEl(k, i, -s)\n\t\t\treturn m\n\t\t}\n\n\t\tlet qTransposed = Matrix.identityN(this.height)\n\t\tfor (let colIndex = 0; colIndex < this.width; colIndex++) {\n\t\t\t// find largest value in colIndex\n\t\t\tfor (let rowIndex = colIndex + 1; rowIndex < this.height; rowIndex++) {\n\t\t\t\t//console.log('row ', rowIndex, 'col ', colIndex)\n\t\t\t\tconst xi = R.e(colIndex, colIndex)\n\t\t\t\tconst xk = R.e(rowIndex, colIndex)\n\t\t\t\tif (xk == 0) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tconst r = Math.hypot(xi, xk)\n\t\t\t\tconst c = xi / r\n\t\t\t\tconst s = xk / r\n\n\t\t\t\t// apply transformation on every column:\n\t\t\t\tfor (let col2 = colIndex; col2 < this.width; col2++) {\n\t\t\t\t\tconst x1 = R.e(colIndex, col2) * c + R.e(rowIndex, col2) * s\n\t\t\t\t\tconst x2 = R.e(rowIndex, col2) * c - R.e(colIndex, col2) * s\n\t\t\t\t\tR.setEl(colIndex, col2, x1)\n\t\t\t\t\tR.setEl(rowIndex, col2, x2)\n\t\t\t\t}\n\t\t\t\t//console.log('r ', r, 'c ', c, 's ', s, 'sigma', sigma(c, s))\n\t\t\t\t//console.log(this.toString(),'cs\\n', matrixForCS(this.height, colIndex, rowIndex, c, s).toString())\n\t\t\t\tqTransposed = matrixForCS(this.height, colIndex, rowIndex, c, s).times(qTransposed)\n\t\t\t}\n\t\t}\n\t\t//console.log(qTransposed.transposed().toString(), this.toString(),\n\t\t// qTransposed.transposed().times(this).toString())\n\t\treturn { Q: qTransposed.transposed(), R }\n\t}\n\n\tisPermutation(): boolean {\n\t\tif (!this.isSquare()) return false\n\t\tif (this.m.some((value) => !eq0(value) && !eq(1, value))) return false\n\n\t\tconst rows = this.asRowArrays(Array)\n\t\tif (rows.some((row) => (row as number[]).filter((value) => eq(1, value)).length != 1)) return false\n\n\t\tconst cols = this.asColArrays(Array)\n\t\tif (cols.some((col) => (col as number[]).filter((value) => eq(1, value)).length != 1)) return false\n\n\t\treturn true\n\t}\n\n\tisDiagonal(precision?: number): boolean {\n\t\tlet i = this.m.length\n\t\twhile (i--) {\n\t\t\tif (0 !== i % (this.width + 1) && !eq0(this.m[i])) return false\n\t\t}\n\t\treturn true\n\t}\n\n\tisIdentity(precision?: number): boolean {\n\t\treturn this.isLowerUnitriangular(precision) && this.isUpperTriangular(precision)\n\t}\n\n\tisUpperTriangular(precision: number = NLA_PRECISION) {\n\t\tif (!this.isSquare()) return false\n\t\tfor (let rowIndex = 1; rowIndex < this.height; rowIndex++) {\n\t\t\tfor (let colIndex = 0; colIndex < rowIndex; colIndex++) {\n\t\t\t\tif (!eq0(this.m[rowIndex * this.width + colIndex], precision)) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n\tisSymmetric(precision = NLA_PRECISION) {\n\t\tif (!this.isSquare()) return false\n\t\tfor (let rowIndex = 0; rowIndex < this.height - 1; rowIndex++) {\n\t\t\tfor (let colIndex = rowIndex + 1; colIndex < this.width; colIndex++) {\n\t\t\t\tconst a = this.m[rowIndex * this.width + colIndex]\n\t\t\t\tconst b = this.m[colIndex * this.width + rowIndex]\n\t\t\t\tif (!eq(a, b, precision)) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n\t/**\n\t * Returns x, so that this * x = b\n\t * More efficient than calculating the inverse for few (~ <= this.height) values\n\t */\n\tsolveLinearSystem(b: Vector): Vector {\n\t\tassertInst(Vector, b)\n\t\tconst { L, U, P } = this.luDecomposition()\n\t\tconst y = L.solveForwards(P.timesVector(b))\n\t\tconst x = U.solveBackwards(y)\n\t\treturn x\n\t}\n\n\tisLowerUnitriangular(precision: number = NLA_PRECISION): boolean {\n\t\tif (!this.isSquare()) return false\n\t\tfor (let rowIndex = 0; rowIndex < this.height - 1; rowIndex++) {\n\t\t\tfor (let colIndex = rowIndex; colIndex < this.width; colIndex++) {\n\t\t\t\tconst el = this.m[rowIndex * this.width + colIndex]\n\t\t\t\tif (rowIndex == colIndex ? !eq(1, el, precision) : !eq0(el, precision)) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n\tisLowerTriangular(precision: number = NLA_PRECISION): boolean {\n\t\tif (!this.isSquare()) return false\n\t\tfor (let rowIndex = 0; rowIndex < this.height - 1; rowIndex++) {\n\t\t\tfor (let colIndex = rowIndex + 1; colIndex < this.width; colIndex++) {\n\t\t\t\tif (!eq0(this.m[rowIndex * this.width + colIndex], precision)) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n\tsolveBackwards(x: Vector): Vector {\n\t\tassertVectors(x)\n\t\tassert(this.height == x.dim(), 'this.height == x.dim()')\n\t\tassert(this.isUpperTriangular(), 'this.isUpperTriangular()\\n' + this.str)\n\t\tconst v = new Float64Array(this.width)\n\t\tlet rowIndex = this.height\n\t\twhile (rowIndex--) {\n\t\t\tlet temp = x.v[rowIndex]\n\t\t\tfor (let colIndex = rowIndex + 1; colIndex < this.width; colIndex++) {\n\t\t\t\ttemp -= v[colIndex] * this.e(rowIndex, colIndex)\n\t\t\t}\n\t\t\tv[rowIndex] = temp / this.e(rowIndex, rowIndex)\n\t\t}\n\t\treturn new Vector(v)\n\t}\n\n\tsolveBackwardsMatrix(matrix: Matrix): Matrix {\n\t\tconst colVectors = new Array(matrix.width)\n\t\tlet i = matrix.width\n\t\twhile (i--) {\n\t\t\tcolVectors[i] = this.solveBackwards(matrix.col(i))\n\t\t}\n\t\treturn Matrix.fromColVectors(colVectors)\n\t}\n\n\tsolveForwardsMatrix(matrix: Matrix): Matrix {\n\t\tconst colVectors = new Array(matrix.width)\n\t\tlet i = matrix.width\n\t\twhile (i--) {\n\t\t\tcolVectors[i] = this.solveForwards(matrix.col(i))\n\t\t}\n\t\treturn Matrix.fromColVectors(colVectors)\n\t}\n\n\tsolveForwards(x: Vector): Vector {\n\t\tassertVectors(x)\n\t\tassert(this.height == x.dim(), 'this.height == x.dim()')\n\t\tassertf(() => this.isLowerTriangular(), this.toString())\n\t\tconst v = new Float64Array(this.width)\n\t\tfor (let rowIndex = 0; rowIndex < this.height; rowIndex++) {\n\t\t\tlet temp = x.v[rowIndex]\n\t\t\tfor (let colIndex = 0; colIndex < rowIndex; colIndex++) {\n\t\t\t\ttemp -= v[colIndex] * this.e(rowIndex, colIndex)\n\t\t\t}\n\t\t\tv[rowIndex] = temp / this.e(rowIndex, rowIndex)\n\t\t}\n\t\treturn new Vector(v)\n\t}\n\n\t/**\n\t * Calculates rank of matrix.\n\t * Number of linearly independant row/column vectors.\n\t * Is equal to the unmber of dimensions the image of the affine transformation represented this matrix has.\n\t */\n\trank(): int {\n\t\tconst U = this.gauss().U\n\t\tlet rowIndex = this.height\n\t\twhile (rowIndex-- && U.row(rowIndex).isZero()) {}\n\t\treturn rowIndex + 1\n\t}\n\n\trowsIndependent(): boolean {\n\t\treturn this.height == this.rank()\n\t}\n\n\tcolsIndependent(): boolean {\n\t\treturn this.width == this.rank()\n\t}\n\n\tasRowArrays<T extends FloatArray>(arrayConstructor: new (length: int) => T = Float64Array as any): T[] {\n\t\treturn arrayFromFunction(this.height, (rowIndex) => this.rowArray(rowIndex, arrayConstructor))\n\t}\n\n\tasColArrays<T extends FloatArray>(arrayConstructor: new (length: int) => T = Float64Array as any): T[] {\n\t\treturn arrayFromFunction(this.width, (colIndex) => this.colArray(colIndex, arrayConstructor))\n\t}\n\n\trowArray<T extends FloatArray>(rowIndex: int, arrayConstructor: new (length: int) => T = Float64Array as any): T {\n\t\tconst result = new arrayConstructor(this.width)\n\t\treturn arrayCopy(this.m, rowIndex * this.width, result, 0, this.width)\n\t\treturn result\n\t}\n\n\tcolArray<T extends FloatArray>(colIndex: int, arrayConstructor: new (length: int) => T = Float64Array as any): T {\n\t\tconst result = new arrayConstructor(this.width)\n\t\tarrayCopyStep(this.m, colIndex, this.height, result, 0, 1, this.height)\n\t\treturn result\n\t}\n\n\tsubMatrix(firstColIndex: int, subWidth: int, firstRowIndex: int, subHeight: int): Matrix {\n\t\tassert(0 < firstColIndex && 0 < subWidth && 0 < firstRowIndex && 0 < subHeight)\n\t\tassert(firstColIndex + subWidth <= this.width && firstRowIndex + subHeight <= this.height)\n\t\tconst m = new Float64Array(subWidth * subHeight)\n\t\tarrayCopyBlocks(this.m, firstColIndex, this.width, m, 0, subWidth, subHeight, subWidth)\n\t\treturn new Matrix(subWidth, subHeight, m)\n\t}\n\n\tmap(fn: (el: number, elIndex: number, array: Float64Array) => number): Matrix {\n\t\treturn new Matrix(this.width, this.height, this.m.map(fn))\n\t}\n\n\tdimEquals(matrix: Matrix): boolean {\n\t\tassertInst(Matrix, matrix)\n\t\treturn this.width == matrix.width && this.height == matrix.height\n\t}\n\n\tinversed(): Matrix {\n\t\tif (this.isSquare()) {\n\t\t\tif (2 == this.width) return this.inversed2()\n\t\t\tif (3 == this.width) return this.inversed3()\n\t\t\tif (4 == this.width) return this.inversed4()\n\t\t}\n\t\tconst { L, U, P } = this.luDecomposition()\n\t\tconst y = L.solveForwardsMatrix(P)\n\t\tconst inverse = U.solveBackwardsMatrix(y)\n\t\treturn inverse\n\t}\n\n\tinversed2(): Matrix {\n\t\tassertf(() => 2 == this.width && 2 == this.height)\n\t\tconst result = Matrix.forWidthHeight(2, 2),\n\t\t\tm = this.m,\n\t\t\tr = result.m\n\n\t\tconst det = m[0] * m[3] - m[1] * r[2]\n\n\t\tr[0] = m[3] / det\n\t\tr[1] = -m[2] / det\n\n\t\tr[2] = -m[1] / det\n\t\tr[3] = m[0] / det\n\n\t\treturn result\n\t}\n\n\tinversed3(result = Matrix.forWidthHeight(3, 3)): Matrix {\n\t\tassertInst(Matrix, result)\n\t\tassertf(() => 3 == this.width && 3 == this.height)\n\t\tassertf(() => 3 == result.width && 3 == result.height)\n\t\tassert(() => this != result)\n\t\tconst m = this.m,\n\t\t\tr = result.m\n\n\t\tr[0] = m[4] * m[8] - m[5] * m[7]\n\t\tr[1] = -m[1] * m[8] + m[2] * m[7]\n\t\tr[2] = m[1] * m[5] - m[2] * m[4]\n\n\t\tr[3] = -m[3] * m[8] + m[5] * m[6]\n\t\tr[4] = m[0] * m[8] - m[2] * m[6]\n\t\tr[5] = -m[0] * m[5] + m[2] * m[3]\n\n\t\tr[6] = m[3] * m[7] - m[4] * m[6]\n\t\tr[7] = -m[0] * m[7] + m[1] * m[6]\n\t\tr[8] = m[0] * m[4] - m[1] * m[3]\n\n\t\tconst det = m[0] * r[0] + m[1] * r[3] + m[2] * r[6]\n\t\tlet i = 9\n\t\twhile (i--) {\n\t\t\tr[i] /= det\n\t\t}\n\n\t\treturn result\n\t}\n\n\t// prettier-ignore\n\tinversed4(result: Matrix = Matrix.forWidthHeight(4, 4)): Matrix {\n\t\tassertInst(Matrix, result)\n\t\tassertf(() => 4 == this.width && 4 == this.height)\n\t\tassertf(() => 4 == result.width && 4 == result.height)\n\t\tassert(() => this != result)\n\t\tconst m = this.m,\n\t\t\tr = result.m\n\n\t\t// first compute transposed cofactor matrix:\n\t\t// cofactor of an element is the determinant of the 3x3 matrix gained by removing the column and row belonging\n\t\t// to the element\n\t\tr[0] = m[5] * m[10] * m[15] - m[5] * m[14] * m[11] - m[6] * m[9] * m[15]\n\t\t\t+ m[6] * m[13] * m[11] + m[7] * m[9] * m[14] - m[7] * m[13] * m[10]\n\t\tr[1] = -m[1] * m[10] * m[15] + m[1] * m[14] * m[11] + m[2] * m[9] * m[15]\n\t\t\t- m[2] * m[13] * m[11] - m[3] * m[9] * m[14] + m[3] * m[13] * m[10]\n\t\tr[2] = m[1] * m[6] * m[15] - m[1] * m[14] * m[7] - m[2] * m[5] * m[15]\n\t\t\t+ m[2] * m[13] * m[7] + m[3] * m[5] * m[14] - m[3] * m[13] * m[6]\n\t\tr[3] = -m[1] * m[6] * m[11] + m[1] * m[10] * m[7] + m[2] * m[5] * m[11]\n\t\t\t- m[2] * m[9] * m[7] - m[3] * m[5] * m[10] + m[3] * m[9] * m[6]\n\n\n\t\tr[4] = -m[4] * m[10] * m[15] + m[4] * m[14] * m[11] + m[6] * m[8] * m[15]\n\t\t\t- m[6] * m[12] * m[11] - m[7] * m[8] * m[14] + m[7] * m[12] * m[10]\n\t\tr[5] = m[0] * m[10] * m[15] - m[0] * m[14] * m[11] - m[2] * m[8] * m[15]\n\t\t\t+ m[2] * m[12] * m[11] + m[3] * m[8] * m[14] - m[3] * m[12] * m[10]\n\t\tr[6] = -m[0] * m[6] * m[15] + m[0] * m[14] * m[7] + m[2] * m[4] * m[15]\n\t\t\t- m[2] * m[12] * m[7] - m[3] * m[4] * m[14] + m[3] * m[12] * m[6]\n\t\tr[7] = m[0] * m[6] * m[11] - m[0] * m[10] * m[7] - m[2] * m[4] * m[11]\n\t\t\t+ m[2] * m[8] * m[7] + m[3] * m[4] * m[10] - m[3] * m[8] * m[6]\n\n\n\t\tr[8] = m[4] * m[9] * m[15] - m[4] * m[13] * m[11] - m[5] * m[8] * m[15]\n\t\t\t+ m[5] * m[12] * m[11] + m[7] * m[8] * m[13] - m[7] * m[12] * m[9]\n\t\tr[9] = -m[0] * m[9] * m[15] + m[0] * m[13] * m[11] + m[1] * m[8] * m[15]\n\t\t\t- m[1] * m[12] * m[11] - m[3] * m[8] * m[13] + m[3] * m[12] * m[9]\n\t\tr[10] = m[0] * m[5] * m[15] - m[0] * m[13] * m[7] - m[1] * m[4] * m[15]\n\t\t\t+ m[1] * m[12] * m[7] + m[3] * m[4] * m[13] - m[3] * m[12] * m[5]\n\t\tr[11] = -m[0] * m[5] * m[11] + m[0] * m[9] * m[7] + m[1] * m[4] * m[11]\n\t\t\t- m[1] * m[8] * m[7] - m[3] * m[4] * m[9] + m[3] * m[8] * m[5]\n\n\n\t\tr[12] = -m[4] * m[9] * m[14] + m[4] * m[13] * m[10] + m[5] * m[8] * m[14]\n\t\t\t- m[5] * m[12] * m[10] - m[6] * m[8] * m[13] + m[6] * m[12] * m[9]\n\t\tr[13] = m[0] * m[9] * m[14] - m[0] * m[13] * m[10] - m[1] * m[8] * m[14]\n\t\t\t+ m[1] * m[12] * m[10] + m[2] * m[8] * m[13] - m[2] * m[12] * m[9]\n\t\tr[14] = -m[0] * m[5] * m[14] + m[0] * m[13] * m[6] + m[1] * m[4] * m[14]\n\t\t\t- m[1] * m[12] * m[6] - m[2] * m[4] * m[13] + m[2] * m[12] * m[5]\n\t\tr[15] = m[0] * m[5] * m[10] - m[0] * m[9] * m[6] - m[1] * m[4] * m[10]\n\t\t\t+ m[1] * m[8] * m[6] + m[2] * m[4] * m[9] - m[2] * m[8] * m[5]\n\n\t\t// calculate determinant using laplace expansion (cf https://en.wikipedia.org/wiki/Laplace_expansion),\n\t\t// as we already have the cofactors. We multiply a column by a row as the cofactor matrix is transposed.\n\t\tconst det = m[0] * r[0] + m[1] * r[4] + m[2] * r[8] + m[3] * r[12]\n\t\t// assert(!isZero(det), 'det may not be zero, i.e. the matrix is not invertible')\n\t\tlet i = 16\n\t\twhile (i--) {\n\t\t\tr[i] /= det\n\t\t}\n\t\treturn result\n\t}\n\n\tcanMultiply(matrix: Matrix): boolean {\n\t\tassertInst(Matrix, matrix)\n\t\treturn this.width == matrix.height\n\t}\n\n\ttimes(matrix: Matrix): Matrix {\n\t\tassertInst(Matrix, matrix)\n\t\tassert(this.canMultiply(matrix), `Cannot multiply this {this.dimString()} by matrix {matrix.dimString()}`)\n\t\tconst nWidth = matrix.width,\n\t\t\tnHeight = this.height,\n\t\t\tn = this.width\n\t\tconst nM = new Float64Array(nWidth * nHeight)\n\t\tlet nRowIndex = nHeight\n\t\twhile (nRowIndex--) {\n\t\t\tlet nColIndex = nWidth\n\t\t\twhile (nColIndex--) {\n\t\t\t\tlet result = 0\n\t\t\t\tlet i = n\n\t\t\t\twhile (i--) {\n\t\t\t\t\tresult += this.m[nRowIndex * n + i] * matrix.m[i * nWidth + nColIndex]\n\t\t\t\t}\n\t\t\t\tnM[nRowIndex * nWidth + nColIndex] = result\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(nWidth, nHeight, nM)\n\t}\n\n\ttimesVector(v: Vector): Vector {\n\t\tassertVectors(v)\n\t\tassert(this.width == v.dim())\n\t\tconst nHeight = this.height,\n\t\t\tn = this.width\n\t\tconst nM = new Float64Array(nHeight)\n\t\tlet nRowIndex = nHeight\n\t\twhile (nRowIndex--) {\n\t\t\tlet result = 0\n\t\t\tlet i = n\n\t\t\twhile (i--) {\n\t\t\t\tresult += this.m[nRowIndex * n + i] * v.v[i]\n\t\t\t}\n\t\t\tnM[nRowIndex] = result\n\t\t}\n\t\treturn new Vector(nM)\n\t}\n\n\ttransposed(): Matrix {\n\t\tconst tWidth = this.height,\n\t\t\ttHeight = this.width\n\t\tconst tM = new Float64Array(tWidth * tHeight)\n\t\tlet tRowIndex = tHeight\n\t\twhile (tRowIndex--) {\n\t\t\tlet tColIndex = tWidth\n\t\t\twhile (tColIndex--) {\n\t\t\t\ttM[tRowIndex * tWidth + tColIndex] = this.m[tColIndex * tHeight + tRowIndex]\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(tWidth, tHeight, tM)\n\t}\n\n\t/**\n\t * In-place transpose.\n\t */\n\ttranspose(): void {\n\t\tconst h = this.height,\n\t\t\tw = this.width,\n\t\t\ttM = this.m\n\t\tlet tRowIndex = h\n\t\twhile (tRowIndex--) {\n\t\t\tlet tColIndex = Math.min(tRowIndex, w)\n\t\t\twhile (tColIndex--) {\n\t\t\t\tconst temp = tM[tRowIndex * w + tColIndex]\n\t\t\t\ttM[tRowIndex * w + tColIndex] = tM[tColIndex * h + tRowIndex]\n\t\t\t\ttM[tColIndex * h + tRowIndex] = temp\n\t\t\t}\n\t\t}\n\t\tthis.width = h\n\t\tthis.height = w\n\t}\n\n\tisSquare(): boolean {\n\t\treturn this.height == this.width\n\t}\n\n\tdiagonal(): Vector {\n\t\tif (!this.isSquare()) {\n\t\t\tthrow new Error('!!')\n\t\t}\n\t\tconst v = new Float64Array(this.width)\n\t\tlet elIndex = this.width * (this.width + 1)\n\t\tlet vIndex = this.width\n\t\twhile (vIndex--) {\n\t\t\telIndex -= this.width + 1\n\t\t\tv[vIndex] = this.m[elIndex]\n\t\t}\n\t\treturn new Vector(v)\n\t}\n\n\tmaxEl(): number {\n\t\treturn Math.max.apply(undefined, this.m)\n\t}\n\n\tminEl(): number {\n\t\treturn Math.min.apply(undefined, this.m)\n\t}\n\n\tmaxAbsColSum(): number {\n\t\tlet result = 0\n\t\tlet colIndex = this.width\n\t\twhile (colIndex--) {\n\t\t\tlet absSum = 0\n\t\t\tlet rowIndex = this.height\n\t\t\twhile (rowIndex--) {\n\t\t\t\tabsSum += Math.abs(this.m[rowIndex * this.width + colIndex])\n\t\t\t}\n\t\t\tresult = Math.max(result, absSum)\n\t\t}\n\t\treturn result\n\t}\n\n\tmaxAbsRowSum(): number {\n\t\tlet result = 0\n\t\tlet rowIndex = this.height\n\t\twhile (rowIndex--) {\n\t\t\tlet absSum = 0\n\t\t\tlet colIndex = this.width\n\t\t\twhile (colIndex--) {\n\t\t\t\tabsSum += Math.abs(this.m[rowIndex * this.width + colIndex])\n\t\t\t}\n\t\t\tresult = Math.max(result, absSum)\n\t\t}\n\t\treturn result\n\t}\n\n\tgetTriangularDeterminant(): number {\n\t\tassert(this.isUpperTriangular() || this.isLowerTriangular(), 'not a triangular matrix')\n\n\t\tlet product = 1\n\t\tlet elIndex = this.width * (this.width + 1)\n\t\twhile (elIndex) {\n\t\t\telIndex -= this.width + 1\n\t\t\tproduct *= this.m[elIndex]\n\t\t}\n\t\treturn product\n\t}\n\n\t/**\n\t * Calculates the determinant by first calculating the LU decomposition. If you already have that, use\n\t * U.getTriangularDeterminant()\n\t */\n\tgetDeterminant(): number {\n\t\t// PA = LU\n\t\t// det(A) * det(B) = det(A * B)\n\t\t// det(P) == 1 (permutation matrix)\n\t\t// det(L) == 1 (main diagonal is 1s\n\t\t// =>  det(A) == det(U)\n\t\treturn this.luDecomposition().U.getTriangularDeterminant()\n\t}\n\n\thasFullRank(): boolean {\n\t\treturn Math.min(this.width, this.height) == this.rank()\n\t}\n\n\tpermutationAsIndexMap(): int[] {\n\t\tassertf(() => this.isPermutation())\n\t\tconst result = new Array(this.height)\n\t\tlet i = this.height\n\t\twhile (i--) {\n\t\t\tconst searchIndexStart = i * this.width\n\t\t\tlet searchIndex = searchIndexStart\n\t\t\twhile (this.m[searchIndex] < 0.5) searchIndex++\n\t\t\tresult[i] = searchIndex - searchIndexStart\n\t\t}\n\t\treturn result\n\t}\n\n\tgetDependentRowIndexes(gauss: { L: Matrix; U: Matrix; P: Matrix } = this.gauss()): int[] {\n\t\tconst { L, U, P } = gauss\n\t\t// rows which end up as zero vectors in U are not linearly independent\n\t\tconst dependents = new Array(this.height)\n\t\tlet uRowIndex = this.height\n\t\twhile (uRowIndex--) {\n\t\t\tconst uRow = U.row(uRowIndex)\n\t\t\tif (uRow.length() < NLA_PRECISION) {\n\t\t\t\tdependents[uRowIndex] = true\n\t\t\t} else {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// figure out from which other rows the rows which end up as zero vectors are created by\n\t\tlet lRowIndex = this.height\n\t\twhile (lRowIndex--) {\n\t\t\tif (dependents[lRowIndex]) {\n\t\t\t\tlet lColIndex = Math.min(lRowIndex, this.width)\n\t\t\t\twhile (lColIndex--) {\n\t\t\t\t\tif (0 !== L.e(lRowIndex, lColIndex)) {\n\t\t\t\t\t\tdependents[lColIndex] = true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconsole.log(\n\t\t\t'm\\n',\n\t\t\tthis.toString((x) => '' + x),\n\t\t)\n\t\tconsole.log(\n\t\t\t'L\\n',\n\t\t\tL.toString((x) => '' + x),\n\t\t)\n\t\tconsole.log(\n\t\t\t'U\\n',\n\t\t\tU.toString((x) => '' + x),\n\t\t)\n\t\tconsole.log(\n\t\t\t'P\\n',\n\t\t\tP.toString((x) => '' + x),\n\t\t)\n\t\t// gauss algorithm permutes the order of the rows, so map our results back to the original indices\n\t\tconst indexMap = P.permutationAsIndexMap()\n\t\tconst dependentRowIndexes = dependents.map((b, index) => b && indexMap[index]).filter((x) => x != undefined)\n\t\treturn dependentRowIndexes\n\t}\n\n\tlerp(b: Matrix, t: number, result = this.new()): this {\n\t\tassertInst(Matrix, b, result)\n\t\tassertNumbers(t)\n\t\tassert(this.width == b.width && this.height == b.height)\n\t\tconst s = 1 - t\n\t\tlet i = this.m.length\n\t\twhile (i--) {\n\t\t\tresult.m[i] = s * this.m[i] + t * b.m[i]\n\t\t}\n\t\treturn result\n\t}\n}\n","import { arrayFromFunction, sumInPlaceTree } from './arrayUtils'\nimport { Matrix } from './Matrix'\nimport { assert, eq, eq0, int, NLA_DEBUG, NLA_PRECISION, snap } from './util'\nimport { V, V3 } from './V3'\nimport { Vector } from './Vector'\n\nexport const gaussLegendre24Xs: ReadonlyArray<number> = [\n\t-0.0640568928626056260850430826247450385909,\n\t0.0640568928626056260850430826247450385909,\n\t-0.1911188674736163091586398207570696318404,\n\t0.1911188674736163091586398207570696318404,\n\t-0.3150426796961633743867932913198102407864,\n\t0.3150426796961633743867932913198102407864,\n\t-0.4337935076260451384870842319133497124524,\n\t0.4337935076260451384870842319133497124524,\n\t-0.5454214713888395356583756172183723700107,\n\t0.5454214713888395356583756172183723700107,\n\t-0.6480936519369755692524957869107476266696,\n\t0.6480936519369755692524957869107476266696,\n\t-0.7401241915785543642438281030999784255232,\n\t0.7401241915785543642438281030999784255232,\n\t-0.8200019859739029219539498726697452080761,\n\t0.8200019859739029219539498726697452080761,\n\t-0.8864155270044010342131543419821967550873,\n\t0.8864155270044010342131543419821967550873,\n\t-0.9382745520027327585236490017087214496548,\n\t0.9382745520027327585236490017087214496548,\n\t-0.9747285559713094981983919930081690617411,\n\t0.9747285559713094981983919930081690617411,\n\t-0.9951872199970213601799974097007368118745,\n\t0.9951872199970213601799974097007368118745,\n]\nexport const gaussLegendre24Weights: ReadonlyArray<number> = [\n\t0.1279381953467521569740561652246953718517,\n\t0.1279381953467521569740561652246953718517,\n\t0.1258374563468282961213753825111836887264,\n\t0.1258374563468282961213753825111836887264,\n\t0.121670472927803391204463153476262425607,\n\t0.121670472927803391204463153476262425607,\n\t0.1155056680537256013533444839067835598622,\n\t0.1155056680537256013533444839067835598622,\n\t0.1074442701159656347825773424466062227946,\n\t0.1074442701159656347825773424466062227946,\n\t0.0976186521041138882698806644642471544279,\n\t0.0976186521041138882698806644642471544279,\n\t0.086190161531953275917185202983742667185,\n\t0.086190161531953275917185202983742667185,\n\t0.0733464814110803057340336152531165181193,\n\t0.0733464814110803057340336152531165181193,\n\t0.0592985849154367807463677585001085845412,\n\t0.0592985849154367807463677585001085845412,\n\t0.0442774388174198061686027482113382288593,\n\t0.0442774388174198061686027482113382288593,\n\t0.0285313886289336631813078159518782864491,\n\t0.0285313886289336631813078159518782864491,\n\t0.0123412297999871995468056670700372915759,\n\t0.0123412297999871995468056670700372915759,\n]\nexport function assertVectors(...vectors: (Vector | V3)[]) {\n\tif (NLA_DEBUG) {\n\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\tif (!(arguments[i] instanceof V3 || arguments[i] instanceof Vector)) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'assertVectors arguments[' +\n\t\t\t\t\t\ti +\n\t\t\t\t\t\t'] is not a vector. ' +\n\t\t\t\t\t\ttypeof arguments[i] +\n\t\t\t\t\t\t' == typeof ' +\n\t\t\t\t\t\targuments[i],\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\nexport function gaussLegendreQuadrature24(f: (x: number) => number, startT: number, endT: number): number {\n\t//let result = 0\n\t//for (let i = 0; i < gaussLegendre24Xs.length; i++) {\n\t//\t// gauss-legendre goes from -1 to 1, so we need to scale\n\t//\tlet t = startT + (gaussLegendre24Xs[i] + 1) / 2 * (endT - startT)\n\t//\tresult += gaussLegendre24Weights[i] * f(t)\n\t//}\n\t//const result = NLA\n\t//\t\t.arrayFromFunction(24, i => startT + (gaussLegendre24Xs[i] + 1) / 2 * (endT - startT))\n\t//\t\t.map((t, i) => gaussLegendre24Weights[i] * f(t))\n\t//\t\t.sumInPlaceTree()\n\t//99.54182500782605\n\t//99.54182500782602\n\t// again, [-1,1], so div by 2\n\t//return result // 2 * (endT - startT)\n\n\treturn (glq24_11((t) => f(startT + ((t + 1) / 2) * (endT - startT))) / 2) * (endT - startT)\n}\n\n/**\n * Calculate the integral of f in the interval [-1;1].\n * @param f\n */\nexport function glq24_11(f: (x: number) => number): number {\n\treturn sumInPlaceTree(arrayFromFunction(24, (i) => gaussLegendre24Weights[i] * f(gaussLegendre24Xs[i])))\n}\nexport function glqInSteps(f: (x: number) => number, startT: number, endT: number, steps: int) {\n\tconst dt = (endT - startT) / steps\n\treturn (\n\t\t(sumInPlaceTree(arrayFromFunction(steps, (i) => glq24_11((t) => f(startT + dt * i + ((t + 1) / 2) * dt)))) /\n\t\t\t2) *\n\t\tdt\n\t)\n}\n\nexport function midpointRuleQuadrature(\n\tf: (x: number) => number,\n\tstartT: number,\n\tendT: number,\n\tsteps: int = 32,\n): number {\n\tconst dt = (endT - startT) / steps\n\treturn sumInPlaceTree(arrayFromFunction(steps, (i) => startT + dt / 2 + dt * i).map(f)) * dt\n}\n\n/**\n * incomplete elliptic integral of the first kind\n * EllipticF(phi, k2) = INT[0; phi] 1 / sqrt(1 - k2 * sin²(phi)) dphi\n */\nexport function EllipticF(phi: number, k2: number): number {\n\treturn gaussLegendreQuadrature24((phi) => Math.pow(1 - k2 * Math.sin(phi) ** 2, -0.5), 0, phi)\n}\n\n/**\n * incomplete elliptic integral of the second kind\n * EllipticE(phi, k2) = INT[0; phi] sqrt(1 - k2 * sin²(phi)) dphi\n */\nexport function EllipticE(phi: number, k2: number): number {\n\treturn gaussLegendreQuadrature24((phi) => Math.pow(1 - k2 * Math.sin(phi) ** 2, 0.5), 0, phi)\n}\n\nexport function getIntervals(ts: number[], min: number, max: number): [number, number][] {\n\tts.sort((a, b) => a - b)\n\tif (!eq(ts[0], min)) {\n\t\tts.splice(0, 0, min)\n\t}\n\tif (!eq(ts.last, max)) {\n\t\tts.push(max)\n\t}\n\treturn arrayFromFunction(ts.length - 1, (i) => [ts[i], ts[i + 1]] as [number, number])\n}\n\nexport function isCCW(vertices: V3[], normal: V3) {\n\tconst dsa = doubleSignedArea(vertices, normal)\n\tassert(0 != dsa)\n\treturn dsa < 0\n}\nexport function doubleSignedArea(vertices: V3[], normal: V3) {\n\tassert(!normal.likeO(), '!normal.likeO()')\n\tconst absMaxDim = normal.maxAbsDim()\n\t// order is important, coord0 and coord1 must be set so that coord0, coord1 and maxDim span a right-hand coordinate\n\t// system var [coord0, coord1] = [['y', 'z'], ['z', 'x'], ['x', 'y']][maxAbsDim]\n\tconst doubleSignedArea = vertices\n\t\t.map((v0, i, vertices) => {\n\t\t\tconst v1 = vertices[(i + 1) % vertices.length]\n\t\t\t//return (v1[coord0] - v0[coord0]) * (v1[coord1] + v0[coord1])\n\t\t\tswitch (absMaxDim) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn (v1.y - v0.y) * (v1.z + v0.z)\n\t\t\t\tcase 1:\n\t\t\t\t\treturn (v1.z - v0.z) * (v1.x + v0.x)\n\t\t\t\tcase 2:\n\t\t\t\t\treturn (v1.x - v0.x) * (v1.y + v0.y)\n\t\t\t}\n\t\t})\n\t\t.reduce((a, b) => a + b)\n\treturn snap(doubleSignedArea * Math.sign(normal.e(absMaxDim)), 0)\n}\n\nexport function newtonIterate(\n\tf: (x: number[]) => number[],\n\tx: number[],\n\tsteps: int = 4,\n\tEPSILON?: number,\n\tstepize = 1,\n) {\n\tEPSILON = EPSILON || 1e-8\n\n\tfor (let i = 0; i < steps; i++) {\n\t\tconst fx = f(x)\n\t\tconst dfdx = Matrix.jacobi(f, x, fx, EPSILON)\n\t\tassert(!dfdx.isZero())\n\t\tconst dx = dfdx.solveLinearSystem(new Vector(new Float64Array(fx))).v\n\t\tassert(!isNaN(dx[0]))\n\t\t//console.log('fx / dfdx', fx / dfdx)\n\t\tfor (let j = 0; j < x.length; j++) x[j] -= dx[j] * stepize\n\t}\n\treturn x\n}\n\nexport function newtonIterate1d(\n\tf: (x: number) => number,\n\txStart: number,\n\tsteps: number | undefined,\n\tdf: (x: number) => number,\n): number\nexport function newtonIterate1d(f: (x: number) => number, xStart: number, steps: number, EPSILON?: number): number\nexport function newtonIterate1d(\n\tf: (x: number) => number,\n\txStart: number,\n\tsteps: number = 8,\n\tepsOrDf: number | ((x: number) => number) = 1e-8,\n): number {\n\tif ('number' === typeof epsOrDf) {\n\t\tlet x = xStart\n\n\t\tfor (let i = 0; i < steps; i++) {\n\t\t\tconst fx = f(x)\n\t\t\tconst dfdx = (f(x + epsOrDf) - fx) / epsOrDf\n\t\t\t//console.log('fx / dfdx', fx / dfdx)\n\t\t\tx = x - fx / dfdx\n\t\t}\n\t\treturn x\n\t} else {\n\t\treturn newtonIterateWithDerivative(f, xStart, steps, epsOrDf)\n\t}\n}\nexport function newtonIterateWithDerivative(\n\tf: (x: number) => number,\n\txStart: number,\n\tsteps: number = 4,\n\tdf: (x: number) => number,\n) {\n\tlet x = xStart\n\tfor (let i = 0; i < steps; i++) {\n\t\tconst fx = f(x)\n\t\tconst dfdx = df(x)\n\t\tif (isNaN(fx) || isNaN(dfdx)) {\n\t\t\tconsole.log()\n\t\t\t//console.log('fx / dfdx', fx / dfdx)\n\t\t}\n\t\tx = x - fx / dfdx\n\t\tif (isNaN(fx)) {\n\t\t\tconsole.log()\n\t\t\t//console.log('fx / dfdx', fx / dfdx)\n\t\t}\n\t}\n\treturn x\n}\nexport function newtonIterateWithDerivative2(\n\tfAndDf: (x: number) => [number, number],\n\txStart: number,\n\tsteps: number = 8,\n\txMin = -Infinity,\n\txMax = Infinity,\n) {\n\tassert(steps % 1 == 0)\n\tlet x = xStart\n\tfor (let i = 0; i < steps; i++) {\n\t\tconst [fx, dfdx] = fAndDf(x)\n\t\tif (isNaN(fx) || isNaN(dfdx)) {\n\t\t\tconsole.log()\n\t\t\t//console.log('fx / dfdx', fx / dfdx)\n\t\t}\n\t\tx = x - fx / dfdx\n\t\tif (0 == dfdx || x < xMin || xMax < x) {\n\t\t\treturn undefined\n\t\t}\n\t}\n\treturn x\n}\nexport function newtonIterateSmart(\n\tf: (x: number) => number,\n\txStart: number,\n\tsteps: number = 4,\n\tdf: (x: number) => number,\n\tmindf = 1e-6,\n) {\n\tlet x = xStart\n\tfor (let i = 0; i < steps; i++) {\n\t\tconst fx = f(x)\n\t\tconst dfdx = df(x)\n\t\tif (Math.abs(dfdx) < mindf && Math.abs(fx) < mindf) {\n\t\t\treturn newtonIterate1d(df, x, steps, df)\n\t\t}\n\t\tif (isNaN(fx) || isNaN(dfdx)) {\n\t\t\tconsole.log()\n\t\t\t//console.log('fx / dfdx', fx / dfdx)\n\t\t}\n\t\tx = x - fx / dfdx\n\t\tif (isNaN(fx)) {\n\t\t\tconsole.log()\n\t\t\t//console.log('fx / dfdx', fx / dfdx)\n\t\t}\n\t}\n\treturn x\n}\nexport function newtonIterate2d(\n\tf1: (s: number, t: number) => number,\n\tf2: (s: number, t: number) => number,\n\tsStart: number,\n\ttStart: number,\n\tsteps?: number,\n): V3 | undefined {\n\tconst EPSILON = 1e-6\n\tsteps = steps || 4\n\tlet s = sStart,\n\t\tt = tStart,\n\t\tf1ts,\n\t\tf2ts\n\tdo {\n\t\t/*\n         | a b |-1                   |  d -b |\n         | c d |   = 1 / (ad - bc) * | -c  a |\n         */\n\t\tf1ts = f1(s, t)\n\t\tf2ts = f2(s, t)\n\t\t/*\n         let df1s = (f1(s + EPSILON, t) - f1ts) / EPSILON, df1t = (f1(s, t + EPSILON) - f1ts) / EPSILON,\n         df2s = (f2(s + EPSILON, t) - f2ts) / EPSILON, df2t = (f2(s, t + EPSILON) - f2ts) / EPSILON\n         let det = df1s * df2t - df1t * df2s\n         s = s - ( df2t * f1ts - df1t * f2ts) / det\n         t = t - (-df2s * f1ts + df1s * f2ts) / det\n         */\n\t\t// TODO: is this even more accurate?\n\t\tconst df1s = f1(s + EPSILON, t) - f1ts,\n\t\t\tdf1t = f1(s, t + EPSILON) - f1ts,\n\t\t\tdf2s = f2(s + EPSILON, t) - f2ts,\n\t\t\tdf2t = f2(s, t + EPSILON) - f2ts\n\t\tconst det = (df1s * df2t - df1t * df2s) / EPSILON\n\t\tconst ds = (df2t * f1ts - df1t * f2ts) / det\n\t\tconst dt = (-df2s * f1ts + df1s * f2ts) / det\n\t\ts -= ds\n\t\tt -= dt\n\t} while (--steps && f1ts ** 2 + f2ts ** 2 > NLA_PRECISION)\n\tif (f1ts ** 2 + f2ts ** 2 > NLA_PRECISION) {\n\t\tconsole.log(f1ts ** 2 + f2ts ** 2)\n\t\treturn undefined\n\t}\n\treturn new V3(s, t, 0)\n}\nexport function newtonIterate2dWithDerivatives(\n\tf: (s: number, t: number) => number,\n\tg: (s: number, t: number) => number,\n\tsStart: number,\n\ttStart: number,\n\tsteps: int,\n\tdfds: (s: number, t: number) => number,\n\tdfdt: (s: number, t: number) => number,\n\tdgds: (s: number, t: number) => number,\n\tdgdt: (s: number, t: number) => number,\n): V3 | undefined {\n\tsteps = steps || 4\n\tlet s = sStart,\n\t\tt = tStart\n\tlet f1ts, f2ts\n\tdo {\n\t\t/*\n         | a b |-1                   |  d -b |\n         | c d |   = 1 / (ad - bc) * | -c  a |\n         */\n\t\tf1ts = f(s, t)\n\t\tf2ts = g(s, t)\n\t\tconst df1s = dfds(s, t),\n\t\t\tdf1t = dfdt(s, t),\n\t\t\tdf2s = dgds(s, t),\n\t\t\tdf2t = dgdt(s, t)\n\t\t// TODO: is this even more accurate?\n\t\tconst det = df1s * df2t - df1t * df2s\n\t\tconst ds = (df2t * f1ts - df1t * f2ts) / det\n\t\tconst dt = (-df2s * f1ts + df1s * f2ts) / det\n\t\ts -= ds\n\t\tt -= dt\n\t} while (--steps && f1ts * f1ts + f2ts * f2ts > NLA_PRECISION / 32)\n\tif (!steps) {\n\t\t//console.log(f1ts * f1ts + f2ts * f2ts)\n\t\treturn undefined\n\t}\n\treturn V(s, t, 0)\n}\n\nexport function getRoots(\n\tf: (x: number) => number,\n\ta: number,\n\tb: number,\n\tstepSize: number,\n\tdf: (x: number) => number,\n): number[] {\n\tconst results: number[] = []\n\tfor (let startT = a; startT <= b; startT += stepSize) {\n\t\tconst dt = stepSize * Math.abs(df(startT))\n\t\tif (Math.abs(f(startT)) <= dt) {\n\t\t\t//const t = newtonIterate1d(f, startT, 16)\n\t\t\tlet t = newtonIterateWithDerivative(f, startT, 16, df)\n\t\t\tif (!eq0(f(t)) || eq0(df(t))) {\n\t\t\t\tt = newtonIterate1d(df, startT, 16)\n\t\t\t\t// const a = startT - dt,\n\t\t\t\t// \tb = startT + dt\n\t\t\t\t//if (f(a) * f(b) < 0) {\n\t\t\t\t//    t = bisect(f, a, b, 16)\n\t\t\t\t//} else if (df(a) * df(b) < 0) {\n\t\t\t\t//    t = bisect(df, a, b, 16)\n\t\t\t\t//}\n\t\t\t}\n\t\t\tif (eq0(f(t)) && !results.some((r) => eq(r, t))) {\n\t\t\t\tresults.push(t)\n\t\t\t}\n\t\t}\n\t}\n\treturn results\n}\n","import { M4 } from './M4'\nimport { callsce, raddd } from './util'\nimport { V3 } from './V3'\n\nexport const P3YZ = { normal1: V3.X, w: 0 }\nexport const P3ZX = { normal1: V3.Y, w: 0 }\nexport const P3XY = { normal1: V3.Z, w: 0 }\n\nexport abstract class Transformable {\n\tmirror(plane: { normal1: V3; w: number }): this {\n\t\treturn this.transform(M4.mirror(plane))\n\t}\n\n\tmirroredX(): this {\n\t\treturn this.mirror(P3YZ)\n\t}\n\n\tmirrorY(): this {\n\t\treturn this.mirror(P3ZX)\n\t}\n\n\tmirrorZ(): this {\n\t\treturn this.mirror(P3XY)\n\t}\n\n\tproject(plane: { normal1: V3; w: number }): this {\n\t\treturn this.transform(M4.project(plane))\n\t}\n\n\tprojectXY(): this {\n\t\treturn this.transform(M4.project(P3XY))\n\t}\n\n\tprojectYZ(): this {\n\t\treturn this.transform(M4.project(P3YZ))\n\t}\n\n\tprojectZX(): this {\n\t\treturn this.transform(M4.project(P3ZX))\n\t}\n\n\ttranslate(x: number, y?: number, z?: number): this\n\ttranslate(v: V3): this\n\ttranslate(...args: any[]): this {\n\t\treturn this.transform(M4.translate.apply(undefined, args), callsce.call(undefined, '.translate', ...args))\n\t}\n\n\tscale(x: number, y?: number, z?: number): this\n\tscale(f: V3): this\n\tscale(...args: any[]): this {\n\t\treturn this.transform(M4.scale.apply(undefined, args), callsce.call(undefined, '.scale', ...args))\n\t}\n\n\trotateX(radians: raddd): this {\n\t\treturn this.transform(M4.rotateX(radians), `.rotateX(${radians})`)\n\t}\n\n\trotateY(radians: raddd): this {\n\t\treturn this.transform(M4.rotateY(radians), `.rotateY(${radians})`)\n\t}\n\n\trotateZ(radians: raddd): this {\n\t\treturn this.transform(M4.rotateZ(radians), `.rotateZ(${radians})`)\n\t}\n\n\trotate(rotationCenter: V3, rotationAxis: V3, radians: raddd): this {\n\t\treturn this.transform(\n\t\t\tM4.rotateLine(rotationCenter, rotationAxis, radians),\n\t\t\tcallsce('.rotate', rotationCenter, rotationAxis, radians),\n\t\t)\n\t}\n\n\trotateAB(from: V3, to: V3): this {\n\t\treturn this.transform(M4.rotateAB(from, to), callsce('.rotateAB', from, to))\n\t}\n\n\teulerZXZ(alpha: raddd, beta: raddd, gamma: raddd): this {\n\t\tthrow new Error()\n\t\t//return this.transform(M4.eulerZXZ(alpha, beta, gamma))\n\t}\n\n\tshearX(y: number, z: number): this {\n\t\t// prettier-ignore\n\t\treturn this.transform(new M4([\n\t\t\t1, y, z, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1]))\n\t}\n\n\tfoo(): this {\n\t\treturn this.transform(M4.FOO)\n\t}\n\n\tbar(): this {\n\t\treturn this.transform(M4.BAR)\n\t}\n\n\tabstract transform(m4: M4, desc?: string): this\n\n\tvisit<R>(visitor: { [name: string]: (this: Transformable) => R }): R\n\tvisit<R, A>(visitor: { [name: string]: (this: Transformable, a: A) => R }, a: A): R\n\tvisit<R, A, B>(visitor: { [name: string]: (this: Transformable, a: A, b: B) => R }, a: A, b: B): R\n\tvisit<R, A, B, C>(visitor: { [name: string]: (this: Transformable, a: A, b: B, c: C) => R }, a: A, b: B, c: C): R\n\tvisit<R, A, B, C, D>(\n\t\tvisitor: { [name: string]: (this: Transformable, a: A, b: B, c: C, d: D) => R },\n\t\ta: A,\n\t\tb: B,\n\t\tc: C,\n\t\td: D,\n\t): R\n\tvisit(visitor: { [name: string]: (this: Transformable, ...args: any[]) => any }, ...args: any[]) {\n\t\tlet proto = Object.getPrototypeOf(this)\n\t\t// walk up the prototype chain until we find a defined function in o\n\t\twhile (!visitor.hasOwnProperty(proto.constructor.name) && proto !== Transformable.prototype) {\n\t\t\tproto = Object.getPrototypeOf(proto)\n\t\t}\n\t\tif (visitor.hasOwnProperty(proto.constructor.name)) {\n\t\t\treturn visitor[proto.constructor.name].apply(this, args)\n\t\t} else {\n\t\t\tthrow new Error('No implementation for ' + this.constructor.name)\n\t\t}\n\t}\n}\n","declare global {\n\tinterface Object {\n\t\ttoSource(): string\n\t}\n}\nconst KEYWORD_REGEXP = new RegExp(\n\t'^(' +\n\t\t'abstract|boolean|break|byte|case|catch|char|class|const|continue|debugger|' +\n\t\t'default|delete|do|double|else|enum|export|extends|false|final|finally|' +\n\t\t'float|for|function|goto|if|implements|import|in|instanceof|int|interface|' +\n\t\t'long|native|new|null|package|private|protected|public|return|short|static|' +\n\t\t'super|switch|synchronized|this|throw|throws|transient|true|try|typeof|' +\n\t\t'undefined|var|void|volatile|while|with' +\n\t\t')$',\n)\nfunction stringIsLegalKey(key: string) {\n\treturn /^[a-z_$][0-9a-z_$]*$/gi.test(key) && !KEYWORD_REGEXP.test(key)\n}\n\nconst seen: {}[] = []\nexport function toSource(o: {}, indent = 0) {\n\tif (undefined === o) return 'undefined'\n\tif (null === o) return 'null'\n\treturn o.toSource()\n}\nfunction addToSourceMethodToPrototype<T>(clazz: new (...args: {}[]) => T, method: (this: T) => string) {\n\tif (!clazz.prototype.toSource) {\n\t\tObject.defineProperty(clazz.prototype, 'toSource', {\n\t\t\tvalue: method,\n\t\t\twritable: true,\n\t\t\tconfigurable: true,\n\t\t\tenumerable: false,\n\t\t})\n\t}\n}\n\naddToSourceMethodToPrototype(Boolean, Boolean.prototype.toString)\naddToSourceMethodToPrototype(Function, Function.prototype.toString)\naddToSourceMethodToPrototype(Number, Number.prototype.toString)\naddToSourceMethodToPrototype(RegExp, RegExp.prototype.toString)\naddToSourceMethodToPrototype(Date, function () {\n\treturn 'new Date(' + this.getTime() + ')'\n})\naddToSourceMethodToPrototype(String, function () {\n\treturn JSON.stringify(this)\n})\naddToSourceMethodToPrototype(Array, function (this: any[]) {\n\tif (seen.includes(this)) {\n\t\treturn 'CIRCULAR_REFERENCE'\n\t}\n\tseen.push(this)\n\tlet result = '['\n\tfor (let i = 0; i < this.length; i++) {\n\t\tresult += '\\n\\t' + toSource(this[i]).replace(/\\r\\n|\\n|\\r/g, '$&\\t')\n\t\tif (i !== this.length - 1) {\n\t\t\tresult += ','\n\t\t}\n\t}\n\tresult += 0 === this.length ? ']' : '\\n]'\n\tseen.pop()\n\treturn result\n})\naddToSourceMethodToPrototype(Object, function () {\n\tif (seen.includes(this)) {\n\t\treturn 'CIRCULAR_REFERENCE'\n\t}\n\tseen.push(this)\n\tlet result = '{'\n\tconst keys = Object.keys(this).sort()\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst k = keys[i]\n\t\tresult +=\n\t\t\t'\\n\\t' +\n\t\t\t(stringIsLegalKey(k) ? k : JSON.stringify(k)) +\n\t\t\t': ' +\n\t\t\ttoSource((this as any)[k]).replace(/\\r\\n|\\n|\\r/g, '$&\\t')\n\t\tif (i !== keys.length - 1) {\n\t\t\tresult += ','\n\t\t}\n\t}\n\tresult += 0 === keys.length ? '}' : '\\n}'\n\tseen.pop()\n\treturn result\n})\n","import {\n\tassert,\n\tassertInst,\n\tassertNumbers,\n\tassertVectors,\n\tcallsce,\n\tclamp,\n\tlt,\n\tM4,\n\tNLA_PRECISION,\n\tTransformable,\n\tV3,\n} from '.'\n\nexport class AABB extends Transformable {\n\tconstructor(public min: V3 = V3.INF, public max: V3 = V3.INF.negated()) {\n\t\tsuper()\n\t\tassertVectors(min, max)\n\t}\n\n\tstatic forXYZ(x: number, y: number, z: number): AABB {\n\t\treturn new AABB(V3.O, new V3(x, y, z))\n\t}\n\n\tstatic forAABBs(aabbs: Iterable<AABB>): AABB {\n\t\tconst result = new AABB()\n\t\tfor (const aabb of aabbs) {\n\t\t\tresult.addAABB(aabb)\n\t\t}\n\t\treturn result\n\t}\n\n\taddPoint(p: V3): this {\n\t\tassertVectors(p)\n\t\tthis.min = this.min.min(p)\n\t\tthis.max = this.max.max(p)\n\t\treturn this\n\t}\n\n\taddPoints(ps: V3[]): this {\n\t\tps.forEach((p) => this.addPoint(p))\n\t\treturn this\n\t}\n\n\taddAABB(aabb: AABB): this {\n\t\tassertInst(AABB, aabb)\n\t\tthis.addPoint(aabb.min)\n\t\tthis.addPoint(aabb.max)\n\t\treturn this\n\t}\n\n\t/**\n\t * Returns the largest AABB contained in this which doesn't overlap with aabb\n\t * @param aabb\n\t */\n\twithoutAABB(aabb: AABB): AABB {\n\t\tassertInst(AABB, aabb)\n\t\tlet min, max\n\t\tconst volume = this.volume(),\n\t\t\tsize = this.size()\n\t\tlet remainingVolume = -Infinity\n\t\tfor (let i = 0; i < 3; i++) {\n\t\t\tconst dim = ['x', 'y', 'z'][i] as 'x' | 'y' | 'z'\n\t\t\tconst cond = aabb.min[dim] - this.min[dim] > this.max[dim] - aabb.max[dim]\n\t\t\tconst dimMin = cond ? this.min[dim] : Math.max(this.min[dim], aabb.max[dim])\n\t\t\tconst dimMax = !cond ? this.max[dim] : Math.min(this.max[dim], aabb.min[dim])\n\t\t\tconst newRemainingVolume = ((dimMax - dimMin) * volume) / size[dim]\n\t\t\tif (newRemainingVolume > remainingVolume) {\n\t\t\t\tremainingVolume = newRemainingVolume\n\t\t\t\tmin = this.min.withElement(dim, dimMin)\n\t\t\t\tmax = this.max.withElement(dim, dimMax)\n\t\t\t}\n\t\t}\n\t\treturn new AABB(min, max)\n\t}\n\n\tgetIntersectionAABB(aabb: AABB): AABB {\n\t\tassertInst(AABB, aabb)\n\t\treturn new AABB(this.min.max(aabb.min), this.max.min(aabb.max))\n\t}\n\n\ttouchesAABB(aabb: AABB): boolean {\n\t\tassertInst(AABB, aabb)\n\t\treturn !(\n\t\t\tthis.min.x > aabb.max.x ||\n\t\t\tthis.max.x < aabb.min.x ||\n\t\t\tthis.min.y > aabb.max.y ||\n\t\t\tthis.max.y < aabb.min.y ||\n\t\t\tthis.min.z > aabb.max.z ||\n\t\t\tthis.max.z < aabb.min.z\n\t\t)\n\t}\n\n\ttouchesAABBfuzzy(aabb: AABB, precisision = NLA_PRECISION): boolean {\n\t\tassertInst(AABB, aabb)\n\t\treturn !(\n\t\t\tlt(aabb.max.x, this.min.x, precisision) ||\n\t\t\tlt(this.max.x, aabb.min.x, precisision) ||\n\t\t\tlt(aabb.max.y, this.min.y, precisision) ||\n\t\t\tlt(this.max.y, aabb.min.y, precisision) ||\n\t\t\tlt(aabb.max.z, this.min.z, precisision) ||\n\t\t\tlt(this.max.z, aabb.min.z, precisision)\n\t\t)\n\t}\n\n\tintersectsAABB(aabb: AABB): boolean {\n\t\tassertInst(AABB, aabb)\n\t\treturn !(\n\t\t\tthis.min.x >= aabb.max.x ||\n\t\t\tthis.max.x <= aabb.min.x ||\n\t\t\tthis.min.y >= aabb.max.y ||\n\t\t\tthis.max.y <= aabb.min.y ||\n\t\t\tthis.min.z >= aabb.max.z ||\n\t\t\tthis.max.z <= aabb.min.z\n\t\t)\n\t}\n\n\tintersectsAABB2d(aabb: AABB): boolean {\n\t\tassertInst(AABB, aabb)\n\t\treturn !(\n\t\t\tthis.min.x >= aabb.max.x ||\n\t\t\tthis.max.x <= aabb.min.x ||\n\t\t\tthis.min.y >= aabb.max.y ||\n\t\t\tthis.max.y <= aabb.min.y\n\t\t)\n\t}\n\n\tcontainsPoint(p: V3): boolean {\n\t\tassertVectors(p)\n\t\treturn (\n\t\t\tthis.min.x <= p.x &&\n\t\t\tthis.min.y <= p.y &&\n\t\t\tthis.min.z <= p.z &&\n\t\t\tthis.max.x >= p.x &&\n\t\t\tthis.max.y >= p.y &&\n\t\t\tthis.max.z >= p.z\n\t\t)\n\t}\n\n\tcontainsSphere(center: V3, radius: number) {\n\t\tassertVectors(center)\n\t\tassertNumbers(radius)\n\t\treturn this.distanceToPoint(center) > radius\n\t}\n\n\tintersectsSphere(center: V3, radius: number) {\n\t\tassertVectors(center)\n\t\tassertNumbers(radius)\n\t\treturn this.distanceToPoint(center) <= radius\n\t}\n\n\tdistanceToPoint(p: V3) {\n\t\tassertVectors(p)\n\t\tconst x = p.x,\n\t\t\ty = p.y,\n\t\t\tz = p.z\n\t\tconst min = this.min,\n\t\t\tmax = this.max\n\t\tif (this.containsPoint(p)) {\n\t\t\treturn Math.max(min.x - x, x - max.x, min.y - y, y - max.y, min.z - z, z - max.z)\n\t\t}\n\t\treturn p.distanceTo(new V3(clamp(x, min.x, max.x), clamp(y, min.y, max.y), clamp(z, min.z, max.z)))\n\t}\n\n\tcontainsAABB(aabb: AABB) {\n\t\tassertInst(AABB, aabb)\n\t\treturn this.containsPoint(aabb.min) && this.containsPoint(aabb.max)\n\t}\n\n\tlikeAABB(aabb: AABB): boolean {\n\t\tassertInst(AABB, aabb)\n\t\treturn this.min.like(aabb.min) && this.max.like(aabb.max)\n\t}\n\n\tintersectsLine(line: { anchor: V3; dir1: V3; tMin: number; tMax: number }): boolean {\n\t\tassertVectors(line.anchor, line.dir1)\n\t\tconst dir = line.dir1.map((el) => el || Number.MIN_VALUE)\n\t\tconst minTs = this.min.minus(line.anchor).divv(dir)\n\t\tconst maxTs = this.max.minus(line.anchor).divv(dir)\n\t\tconst tMin = minTs.min(maxTs).maxElement(),\n\t\t\ttMax = minTs.max(maxTs).minElement()\n\t\treturn tMin <= tMax && !(tMax < line.tMin || line.tMax < tMin)\n\t}\n\n\thasVolume(): boolean {\n\t\treturn this.min.x <= this.max.x && this.min.y <= this.max.y && this.min.z <= this.max.z\n\t}\n\n\tvolume(): number {\n\t\tif (!this.hasVolume()) {\n\t\t\treturn -1\n\t\t}\n\t\tconst v = this.max.minus(this.min)\n\t\treturn v.x * v.y * v.z\n\t}\n\n\tsize(): V3 {\n\t\treturn this.max.minus(this.min)\n\t}\n\n\tgetCenter(): V3 {\n\t\treturn this.min.plus(this.max).div(2)\n\t}\n\n\ttransform(m4: M4): this {\n\t\tassertInst(M4, m4)\n\t\tassert(m4.isAxisAligned())\n\t\tconst aabb = new AABB()\n\t\taabb.addPoint(m4.transformPoint(this.min))\n\t\taabb.addPoint(m4.transformPoint(this.max))\n\t\treturn aabb as this\n\t}\n\n\tofTransformed(m4: M4): AABB {\n\t\tassertInst(M4, m4)\n\t\tconst aabb = new AABB()\n\t\taabb.addPoints(m4.transformedPoints(this.corners()))\n\t\treturn aabb\n\t}\n\n\tcorners(): V3[] {\n\t\tconst min = this.min,\n\t\t\tmax = this.max\n\t\treturn [\n\t\t\tmin,\n\t\t\tnew V3(min.x, min.y, max.z),\n\t\t\tnew V3(min.x, max.y, min.z),\n\t\t\tnew V3(min.x, max.y, max.z),\n\n\t\t\tnew V3(max.x, min.y, min.z),\n\t\t\tnew V3(max.x, min.y, max.z),\n\t\t\tnew V3(max.x, max.y, min.z),\n\t\t\tmax,\n\t\t]\n\t}\n\n\ttoString(): string {\n\t\treturn callsce('new AABB', this.min, this.max)\n\t}\n\n\ttoSource(): string {\n\t\treturn this.toString()\n\t}\n\n\t/**\n\t * Return the matrix which transforms the AABB from V3.O to V3.XYZ to this AABB.\n\t */\n\tgetM4(): M4 {\n\t\treturn M4.translate(this.min).times(M4.scale(this.size()))\n\t}\n}\n","import { JavaMap } from 'javasetmap.ts'\n\nimport {\n\taddOwnProperties,\n\tarrayFromFunction,\n\tassert,\n\tassertf,\n\tassertInst,\n\tassertInts,\n\tassertNumbers,\n\tassertVectors,\n\tcallsce,\n\tDEG,\n\teq,\n\teq0,\n\tint,\n\tMatrix,\n\tmax,\n\tNLA_PRECISION,\n\traddd,\n\tsliceStep,\n\tsolveCubicReal2,\n\tTransformable,\n\tV3,\n\tVV,\n} from '.'\n\nconst { PI, abs } = Math\n\n// tslint:enable:member-ordering\nexport class M4 extends Matrix {\n\t/**\n\t * A simple (consists of integers), regular, non-orthogonal matrix, useful mainly for testing.\n\t * M4.BAR = M4.FOO.inverse()\n\t */\n\t// prettier-ignore\n\tstatic readonly FOO = new M4(\n\t\t0,   1,   1,    2,\n\t\t0.3, 0.4, 0.8, 13,\n\t\t2.1, 3.4, 5.5,  8.9,\n\t\t0,   0,   0,    1,\n\t)\n\tstatic readonly BAR = M4.FOO.inversed()\n\tstatic readonly IDENTITY = M4.identity()\n\t// prettier-ignore\n\tstatic readonly O = new M4(\n\t\t0, 0, 0, 0,\n\t\t0, 0, 0, 0,\n\t\t0, 0, 0, 0,\n\t\t0, 0, 0, 0,\n\t)\n\tstatic readonly YZX = M4.forSys(V3.Y, V3.Z, V3.X)\n\tstatic readonly ZXY = M4.forSys(V3.Z, V3.X, V3.Y)\n\t// prettier-ignore\n\tstatic IDENTITY3 = new M4(\n\t\t1, 0, 0, 0,\n\t\t0, 1, 0, 0,\n\t\t0, 0, 1, 0,\n\t\t0, 0, 0, 0,\n\t)\n\tstatic readonly temp0 = new M4()\n\tstatic readonly temp1 = new M4()\n\tstatic readonly temp2 = new M4()\n\n\tstatic readonly NAMEMAP = new JavaMap<M4, string>()\n\t\t.set(M4.IDENTITY3, 'M4.IDENTITY3')\n\t\t.set(M4.FOO, 'M4.FOO')\n\t\t.set(M4.O, 'M4.O')\n\t\t.set(M4.BAR, 'M4.BAR')\n\t\t.set(M4.IDENTITY, 'M4.IDENTITY')\n\t\t.set(M4.ZXY, 'M4.ZXY')\n\t\t.set(M4.YZX, 'M4.YZX')\n\treadonly m: Float64Array\n\n\t/**\n\t * Takes 16 arguments in row-major order, which can be passed individually, as a list, or even as\n\t * four lists, one for each row. If the arguments are omitted then the identity matrix is constructed instead.\n\t *\n\t *  0  1  2  3\n\t *  4  5  6  7\n\t *  8  9 10 11\n\t * 12 13 14 15\n\t */\n\tconstructor(...var_args: (number | number[])[]) {\n\t\tlet m\n\t\tif (0 == arguments.length) {\n\t\t\tm = new Float64Array(16)\n\t\t} else {\n\t\t\tconst flattened = Array.prototype.concat.apply([], arguments)\n\t\t\tassert(flattened.length == 16, 'flattened.length == 16 ' + flattened.length)\n\t\t\tm = new Float64Array(flattened)\n\t\t}\n\t\tsuper(4, 4, m)\n\t}\n\n\t/**\n\t * Returns the matrix that when multiplied with `matrix` results in the\n\t * identity matrix. You can optionally pass an existing matrix in `result`\n\t * to avoid allocating a new matrix. This implementation is from the Mesa\n\t * OpenGL function `__gluInvertMatrixd()` found in `project.c`.\n\t */\n\tstatic inverse(matrix: M4, result: M4 = new M4()): M4 {\n\t\treturn matrix.inversed4(result) as M4\n\t}\n\n\t/**\n\t * Create new dim x dim matrix equal to an identity matrix with rows/colums i and k swapped. Note that i and k\n\t * are 0-indexed.\n\t */\n\tstatic permutation4(i: int, k: int, result = new M4()): Matrix {\n\t\tassertInts(i, k)\n\t\tassertf(() => 0 <= i && i < 4)\n\t\tassertf(() => 0 <= k && k < 4)\n\t\tconst m = result.m\n\t\tM4.identity(result)\n\t\tm[i * 4 + i] = 0\n\t\tm[k * 4 + k] = 0\n\t\tm[i * 4 + k] = 1\n\t\tm[k * 4 + i] = 1\n\t\treturn result\n\t}\n\n\t/**\n\t * Returns `matrix`, exchanging columns for rows. You can optionally pass an\n\t * existing matrix in `result` to avoid allocating a new matrix.\n\t */\n\tstatic transpose(matrix: M4, result: M4 = new M4()): M4 {\n\t\tassertInst(M4, matrix)\n\t\tassertInst(M4, result)\n\t\tassert(matrix != result, 'matrix != result')\n\t\tconst m = matrix.m,\n\t\t\tr = result.m\n\t\tr[0] = m[0]\n\t\tr[1] = m[4]\n\t\tr[2] = m[8]\n\t\tr[3] = m[12]\n\t\tr[4] = m[1]\n\t\tr[5] = m[5]\n\t\tr[6] = m[9]\n\t\tr[7] = m[13]\n\t\tr[8] = m[2]\n\t\tr[9] = m[6]\n\t\tr[10] = m[10]\n\t\tr[11] = m[14]\n\t\tr[12] = m[3]\n\t\tr[13] = m[7]\n\t\tr[14] = m[11]\n\t\tr[15] = m[15]\n\t\treturn result\n\t}\n\n\t/**\n\t * Returns the concatenation of the transforms for `left` and `right`.\n\t */\n\tstatic multiply(left: M4, right: M4, result: M4 = new M4()): M4 {\n\t\tassertInst(M4, left, right)\n\t\tassertInst(M4, result)\n\t\tassert(left != result, 'left != result')\n\t\tassert(right != result, 'right != result')\n\t\tconst a = left.m,\n\t\t\tb = right.m,\n\t\t\tr = result.m\n\n\t\tr[0] = a[0] * b[0] + a[1] * b[4] + (a[2] * b[8] + a[3] * b[12])\n\t\tr[1] = a[0] * b[1] + a[1] * b[5] + (a[2] * b[9] + a[3] * b[13])\n\t\tr[2] = a[0] * b[2] + a[1] * b[6] + (a[2] * b[10] + a[3] * b[14])\n\t\tr[3] = a[0] * b[3] + a[1] * b[7] + (a[2] * b[11] + a[3] * b[15])\n\n\t\tr[4] = a[4] * b[0] + a[5] * b[4] + (a[6] * b[8] + a[7] * b[12])\n\t\tr[5] = a[4] * b[1] + a[5] * b[5] + (a[6] * b[9] + a[7] * b[13])\n\t\tr[6] = a[4] * b[2] + a[5] * b[6] + (a[6] * b[10] + a[7] * b[14])\n\t\tr[7] = a[4] * b[3] + a[5] * b[7] + (a[6] * b[11] + a[7] * b[15])\n\n\t\tr[8] = a[8] * b[0] + a[9] * b[4] + (a[10] * b[8] + a[11] * b[12])\n\t\tr[9] = a[8] * b[1] + a[9] * b[5] + (a[10] * b[9] + a[11] * b[13])\n\t\tr[10] = a[8] * b[2] + a[9] * b[6] + (a[10] * b[10] + a[11] * b[14])\n\t\tr[11] = a[8] * b[3] + a[9] * b[7] + (a[10] * b[11] + a[11] * b[15])\n\n\t\tr[12] = a[12] * b[0] + a[13] * b[4] + (a[14] * b[8] + a[15] * b[12])\n\t\tr[13] = a[12] * b[1] + a[13] * b[5] + (a[14] * b[9] + a[15] * b[13])\n\t\tr[14] = a[12] * b[2] + a[13] * b[6] + (a[14] * b[10] + a[15] * b[14])\n\t\tr[15] = a[12] * b[3] + a[13] * b[7] + (a[14] * b[11] + a[15] * b[15])\n\n\t\treturn result\n\t}\n\n\tstatic product(...m4s: M4[]): M4\n\tstatic product(m4s: M4[], result?: M4): M4\n\tstatic product(...args: any[]): M4 {\n\t\tconst [m4s, result]: [M4[], M4] = Array.isArray(args[0]) ? [args[0], args[1]] : [args, new M4()]\n\t\tif (0 == m4s.length) return M4.identity(result)\n\t\tif (1 == m4s.length) return M4.copy(m4s[0], result)\n\t\tif (2 == m4s.length) return M4.multiply(m4s[0], m4s[1], result)\n\t\tlet a = M4.temp0,\n\t\t\tb = M4.temp1\n\t\tM4.multiply(m4s[0], m4s[1], a)\n\t\tfor (let i = 2; i < m4s.length - 1; i++) {\n\t\t\tM4.multiply(a, m4s[i], b)\n\t\t\t;[a, b] = [b, a]\n\t\t}\n\t\treturn M4.multiply(a, m4s.last, result)\n\t}\n\n\tstatic forSys(e0: V3, e1: V3, e2: V3 = e0.cross(e1), origin: V3 = V3.O): M4 {\n\t\tassertVectors(e0, e1, e2, origin)\n\t\t// prettier-ignore\n\t\treturn new M4(\n\t\t\te0.x, e1.x, e2.x, origin.x,\n\t\t\te0.y, e1.y, e2.y, origin.y,\n\t\t\te0.z, e1.z, e2.z, origin.z,\n\t\t\t0, 0, 0, 1,\n\t\t)\n\t}\n\n\tstatic forRows(n0: V3, n1: V3, n2: V3, n3: V3 = V3.O): M4 {\n\t\tassertVectors(n0, n1, n2, n3)\n\t\t// prettier-ignore\n\t\treturn new M4(\n\t\t\tn0.x, n0.y, n0.z, 0,\n\t\t\tn1.x, n1.y, n1.z, 0,\n\t\t\tn2.x, n2.y, n2.z, 0,\n\t\t\tn3.x, n3.y, n3.z, 1)\n\t}\n\n\t/**\n\t * Returns an identity matrix. You can optionally pass an existing matrix in `result` to avoid allocating a new\n\t * matrix. This emulates the OpenGL function `glLoadIdentity()`\n\t *\n\t * Unless initializing a matrix to be modified, use M4.IDENTITY\n\t */\n\tstatic identity(result: M4 = new M4()): M4 {\n\t\tassertInst(M4, result)\n\t\tconst m = result.m\n\t\tm[0] = m[5] = m[10] = m[15] = 1\n\t\tm[1] = m[2] = m[3] = m[4] = m[6] = m[7] = m[8] = m[9] = m[11] = m[12] = m[13] = m[14] = 0\n\n\t\treturn result\n\t}\n\n\t/**\n\t * Creates a new M4 initialized by a user defined callback function\n\t *\n\t * @param f signature: (elRow, elCol, elIndex) =>\n\t *     el, where elIndex is the row-major index, i.e. eLindex == elRow * 4 + elCol\n\t * @param result\n\t */\n\tstatic fromFunction4(f: (elRow: number, elCol: number, elIndex: number) => number, result: M4 = new M4()): M4 {\n\t\tassert(typeof f == 'function')\n\t\tassertInst(M4, result)\n\t\tconst m = result.m\n\t\tlet i = 16\n\t\twhile (i--) {\n\t\t\tm[i] = f(Math.floor(i / 4), i % 4, i)\n\t\t}\n\t\treturn result\n\t}\n\n\t/**\n\t * Returns a perspective transform matrix, which makes far away objects appear smaller than nearby objects. The\n\t * `aspect` argument should be the width divided by the height of your viewport and `fov` is the top-to-bottom angle\n\t * of the field of view in degrees. You can optionally pass an existing matrix in `result` to avoid allocating a new\n\t * matrix. This emulates the OpenGL function `gluPerspective()`.\n\t * {@see perspectiveRad}\n\t * perspectiveRad\n\t * @param fovDegrees in degrees\n\t * @param aspect aspect ratio = width/height of viewport\n\t */\n\tstatic perspective(fovDegrees: number, aspect: number, near: number, far: number, result: M4 = new M4()): M4 {\n\t\treturn M4.perspectiveRad(fovDegrees * DEG, aspect, near, far, result)\n\t}\n\n\tstatic perspectiveRad(fov: raddd, aspect: number, near: number, far: number, result: M4 = new M4()): M4 {\n\t\tassertInst(M4, result)\n\t\tassertNumbers(fov, aspect, near, far)\n\t\tconst y = Math.tan(fov / 2) * near\n\t\tconst x = y * aspect\n\t\treturn M4.frustum(-x, x, -y, y, near, far, result)\n\t}\n\n\tstatic perspectivePlane(vanishingPlane: { normal1: V3; w: number }, result: M4 = new M4()) {\n\t\tassertInst(M4, result)\n\t\tconst m = result.m\n\t\tm[0] = 1\n\t\tm[1] = 0\n\t\tm[2] = 0\n\t\tm[3] = 0\n\n\t\tm[4] = 0\n\t\tm[5] = 1\n\t\tm[6] = 0\n\t\tm[7] = 0\n\n\t\tm[8] = 0\n\t\tm[9] = 0\n\t\tm[10] = 1\n\t\tm[11] = 0\n\n\t\tm[12] = vanishingPlane.normal1.x\n\t\tm[13] = vanishingPlane.normal1.y\n\t\tm[14] = vanishingPlane.normal1.z\n\t\tm[15] = -vanishingPlane.w\n\n\t\treturn result\n\t}\n\n\t// the OpenGL function `glFrustum()`.\n\tstatic frustum(\n\t\tleft: number,\n\t\tright: number,\n\t\tbottom: number,\n\t\ttop: number,\n\t\tnear: number,\n\t\tfar: number,\n\t\tresult: M4 = new M4(),\n\t): M4 {\n\t\tassertNumbers(left, right, bottom, top, near, far)\n\t\tassert(0 < near, '0 < near')\n\t\tassert(near < far, 'near < far')\n\t\tassertInst(M4, result)\n\t\tconst m = result.m\n\n\t\tm[0] = (2 * near) / (right - left)\n\t\tm[1] = 0\n\t\tm[2] = (right + left) / (right - left)\n\t\tm[3] = 0\n\n\t\tm[4] = 0\n\t\tm[5] = (2 * near) / (top - bottom)\n\t\tm[6] = (top + bottom) / (top - bottom)\n\t\tm[7] = 0\n\n\t\tm[8] = 0\n\t\tm[9] = 0\n\t\tm[10] = -(far + near) / (far - near)\n\t\tm[11] = (-2 * far * near) / (far - near)\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = -1\n\t\tm[15] = 0\n\n\t\treturn result\n\t}\n\n\t/**\n\t * Returns a new M4 representing the a projection through/towards a point onto a plane.\n\t */\n\tstatic projectPlanePoint(p: V3, plane: { normal1: V3; w: number }, result: M4 = new M4()): M4 {\n\t\tassertVectors(p, plane.normal1)\n\t\tassertInst(M4, result)\n\t\tconst m = result.m\n\t\tconst n = plane.normal1,\n\t\t\tw = plane.w\n\t\tconst np = n.dot(p)\n\n\t\tm[0] = p.x * n.x + w - np\n\t\tm[1] = p.x * n.y\n\t\tm[2] = p.x * n.z\n\t\tm[3] = -w * p.x\n\n\t\tm[4] = p.y * n.x\n\t\tm[5] = p.y * n.y + w - np\n\t\tm[6] = p.y * n.z\n\t\tm[7] = -w * p.y\n\n\t\tm[8] = p.z * n.x\n\t\tm[9] = p.z * n.y\n\t\tm[10] = p.z * n.z + w - np\n\t\tm[11] = -w * p.z\n\n\t\tm[12] = n.x\n\t\tm[13] = n.y\n\t\tm[14] = n.z\n\t\tm[15] = -np\n\n\t\treturn result\n\t}\n\n\t/**\n\t * Orthographic/orthogonal projection. Transforms the cuboid with the dimensions X: [left right] Y: [bottom, top]\n\t * Z: [near far] to the cuboid X: [-1, 1] Y [-1, 1] Z [-1, 1]\n\t */\n\tstatic ortho(\n\t\tleft: number,\n\t\tright: number,\n\t\tbottom: number,\n\t\ttop: number,\n\t\tnear: number,\n\t\tfar: number,\n\t\tresult: M4 = new M4(),\n\t): M4 {\n\t\tassertNumbers(left, right, bottom, top, near, far)\n\t\tassertInst(M4, result)\n\t\tconst m = result.m\n\n\t\tm[0] = 2 / (right - left)\n\t\tm[1] = 0\n\t\tm[2] = 0\n\t\tm[3] = -(right + left) / (right - left)\n\n\t\tm[4] = 0\n\t\tm[5] = 2 / (top - bottom)\n\t\tm[6] = 0\n\t\tm[7] = -(top + bottom) / (top - bottom)\n\n\t\tm[8] = 0\n\t\tm[9] = 0\n\t\tm[10] = -2 / (far - near)\n\t\tm[11] = -(far + near) / (far - near)\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\n\t\treturn result\n\t}\n\n\t/**\n\t * This emulates the OpenGL function `glScale()`. You can optionally pass an existing matrix in `result` to avoid\n\t * allocating a new matrix.\n\t */\n\tstatic scale(x: number, y: number, z?: number, result?: M4): M4\n\n\tstatic scale(scale: number, result?: M4): M4\n\n\tstatic scale(v: V3, result?: M4): M4\n\n\tstatic scale(...args: any[]): M4 {\n\t\tlet x: number, y: number, z: number, result: M4\n\t\tif (args[0] instanceof V3) {\n\t\t\tassert(args.length <= 2)\n\t\t\t;({ x, y, z } = args[0])\n\t\t\tresult = args[1]\n\t\t} else if ('number' != typeof args[1]) {\n\t\t\tx = y = z = args[0]\n\t\t\tresult = args[1]\n\t\t} else {\n\t\t\tassert(args.length <= 4)\n\t\t\tx = args[0]\n\t\t\ty = args[1]\n\t\t\tz = undefined != args[2] ? args[2] : 1\n\t\t\tresult = args[3]\n\t\t}\n\t\tundefined == result && (result = new M4())\n\t\tassertInst(M4, result)\n\t\tassertNumbers(x, y, z)\n\n\t\tconst m = result.m\n\t\tm[0] = x\n\t\tm[1] = 0\n\t\tm[2] = 0\n\t\tm[3] = 0\n\n\t\tm[4] = 0\n\t\tm[5] = y\n\t\tm[6] = 0\n\t\tm[7] = 0\n\n\t\tm[8] = 0\n\t\tm[9] = 0\n\t\tm[10] = z\n\t\tm[11] = 0\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\n\t\treturn result\n\t}\n\n\t/**\n\t * This emulates the OpenGL function `glTranslate()`. You can optionally pass\n\t * an existing matrix in `result` to avoid allocating a new matrix.\n\t */\n\tstatic translate(x: number, y?: number, z?: number, result?: M4): M4\n\n\tstatic translate(v: V3, result?: M4): M4\n\n\tstatic translate(...args: any[]): M4 {\n\t\tlet x, y, z, result\n\t\tif (args[0] instanceof V3) {\n\t\t\tassert(args.length <= 2)\n\t\t\t;({ x, y, z } = args[0])\n\t\t\tresult = args[1]\n\t\t} else {\n\t\t\tassert(args.length <= 4)\n\t\t\tx = args[0]\n\t\t\ty = undefined != args[1] ? args[1] : 0\n\t\t\tz = undefined != args[2] ? args[2] : 0\n\t\t\tresult = args[3]\n\t\t}\n\t\tundefined == result && (result = new M4())\n\t\tassertInst(M4, result)\n\t\tassertNumbers(x, y, z)\n\n\t\tconst m = result.m\n\n\t\tm[0] = 1\n\t\tm[1] = 0\n\t\tm[2] = 0\n\t\tm[3] = x\n\n\t\tm[4] = 0\n\t\tm[5] = 1\n\t\tm[6] = 0\n\t\tm[7] = y\n\n\t\tm[8] = 0\n\t\tm[9] = 0\n\t\tm[10] = 1\n\t\tm[11] = z\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\n\t\treturn result\n\t}\n\n\t/**\n\t * Returns a matrix that rotates by `a` degrees around the vector (x, y, z). You can optionally pass an existing\n\t * matrix in `result` to avoid allocating a new matrix. This emulates the OpenGL function `glRotate()`.\n\t */\n\t//static rotation(radians: raddd, x: number, y: number, z: number, result?: M4): M4\n\tstatic rotate(radians: raddd, v: { x: number; y: number; z: number }, result?: M4): M4 {\n\t\tundefined == result && (result = new M4())\n\t\tassertInst(M4, result)\n\t\tlet { x, y, z } = v\n\t\tassert(!new V3(x, y, z).likeO(), '!V(x, y, z).likeO()')\n\t\tconst m = result.m\n\n\t\tconst d = Math.sqrt(x * x + y * y + z * z)\n\t\tx /= d\n\t\ty /= d\n\t\tz /= d\n\t\tconst cos = Math.cos(radians),\n\t\t\tsin = Math.sin(radians),\n\t\t\tt = 1 - cos\n\n\t\tm[0] = x * x * t + cos\n\t\tm[1] = x * y * t - z * sin\n\t\tm[2] = x * z * t + y * sin\n\t\tm[3] = 0\n\n\t\tm[4] = y * x * t + z * sin\n\t\tm[5] = y * y * t + cos\n\t\tm[6] = y * z * t - x * sin\n\t\tm[7] = 0\n\n\t\tm[8] = z * x * t - y * sin\n\t\tm[9] = z * y * t + x * sin\n\t\tm[10] = z * z * t + cos\n\t\tm[11] = 0\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\n\t\treturn result\n\t}\n\n\t/**\n\t * Returns a matrix that puts the camera at the eye point `ex, ey, ez` looking\n\t * toward the center point `cx, cy, cz` with an up direction of `ux, uy, uz`.\n\t * You can optionally pass an existing matrix in `result` to avoid allocating\n\t * a new matrix. This emulates the OpenGL function `gluLookAt()`.\n\t */\n\tstatic lookAt(eye: V3, focus: V3, up: V3, result: M4 = new M4()): M4 {\n\t\tassertVectors(eye, focus, up)\n\t\tassertInst(M4, result)\n\n\t\tconst m = result.m\n\n\t\tconst f = eye.minus(focus).unit()\n\t\tconst s = up.cross(f).unit()\n\t\tconst t = f.cross(s).unit()\n\n\t\tm[0] = s.x\n\t\tm[1] = s.y\n\t\tm[2] = s.z\n\t\tm[3] = -s.dot(eye)\n\n\t\tm[4] = t.x\n\t\tm[5] = t.y\n\t\tm[6] = t.z\n\t\tm[7] = -t.dot(eye)\n\n\t\tm[8] = f.x\n\t\tm[9] = f.y\n\t\tm[10] = f.z\n\t\tm[11] = -f.dot(eye)\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\n\t\treturn result\n\t}\n\n\t/**\n\t * Create a rotation matrix for rotating around the X axis\n\t */\n\tstatic rotateX(radians: raddd): M4 {\n\t\tassertNumbers(radians)\n\t\tconst sin = Math.sin(radians),\n\t\t\tcos = Math.cos(radians)\n\t\tconst els = [1, 0, 0, 0, 0, cos, -sin, 0, 0, sin, cos, 0, 0, 0, 0, 1]\n\t\treturn new M4(els)\n\t}\n\n\t/**\n\t * Create a rotation matrix for rotating around the Y axis\n\t */\n\tstatic rotateY(radians: raddd): M4 {\n\t\tconst sin = Math.sin(radians),\n\t\t\tcos = Math.cos(radians)\n\t\tconst els = [cos, 0, sin, 0, 0, 1, 0, 0, -sin, 0, cos, 0, 0, 0, 0, 1]\n\t\treturn new M4(els)\n\t}\n\n\t/**\n\t * Create a rotation matrix for rotating around the Z axis\n\t */\n\tstatic rotateZ(radians: raddd): M4 {\n\t\tconst sin = Math.sin(radians),\n\t\t\tcos = Math.cos(radians)\n\t\tconst els = [cos, -sin, 0, 0, sin, cos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\n\t\treturn new M4(els)\n\t}\n\n\t/**\n\t * New rotation matrix such that result.transformVector(a).isParallelTo(b) through smallest rotation.\n\t * Performs no scaling.\n\t */\n\tstatic rotateAB(a: V3, b: V3, result: M4 = new M4()): M4 {\n\t\t// see http://inside.mines.edu/fs_home/gmurray/ArbitraryAxisRotation/\n\t\tassertVectors(a, b)\n\t\tassertInst(M4, result)\n\t\tconst rotationAxis = a.cross(b),\n\t\t\trotationAxisLength = rotationAxis.length()\n\t\tif (eq0(rotationAxisLength)) {\n\t\t\treturn M4.identity(result)\n\t\t}\n\t\tconst radians = Math.atan2(rotationAxisLength, a.dot(b))\n\t\treturn M4.rotateLine(V3.O, rotationAxis, radians, result)\n\t}\n\n\t/**\n\t * Matrix for rotation about arbitrary line defined by an anchor point and direction.\n\t * rotationAxis does not need to be unit\n\t */\n\tstatic rotateLine(rotationAnchor: V3, rotationAxis: V3, radians: raddd, result: M4 = new M4()): M4 {\n\t\t// see http://inside.mines.edu/fs_home/gmurray/ArbitraryAxisRotation/\n\t\tassertVectors(rotationAnchor, rotationAxis)\n\t\tassertNumbers(radians)\n\t\tassertInst(M4, result)\n\t\trotationAxis = rotationAxis.unit()\n\n\t\tconst ax = rotationAnchor.x,\n\t\t\tay = rotationAnchor.y,\n\t\t\taz = rotationAnchor.z,\n\t\t\tdx = rotationAxis.x,\n\t\t\tdy = rotationAxis.y,\n\t\t\tdz = rotationAxis.z\n\t\tconst m = result.m,\n\t\t\tcos = Math.cos(radians),\n\t\t\tsin = Math.sin(radians)\n\n\t\tm[0] = dx * dx + (dy * dy + dz * dz) * cos\n\t\tm[1] = dx * dy * (1 - cos) - dz * sin\n\t\tm[2] = dx * dz * (1 - cos) + dy * sin\n\t\tm[3] = (ax * (dy * dy + dz * dz) - dx * (ay * dy + az * dz)) * (1 - cos) + (ay * dz - az * dy) * sin\n\n\t\tm[4] = dx * dy * (1 - cos) + dz * sin\n\t\tm[5] = dy * dy + (dx * dx + dz * dz) * cos\n\t\tm[6] = dy * dz * (1 - cos) - dx * sin\n\t\tm[7] = (ay * (dx * dx + dz * dz) - dy * (ax * dx + az * dz)) * (1 - cos) + (az * dx - ax * dz) * sin\n\n\t\tm[8] = dx * dz * (1 - cos) - dy * sin\n\t\tm[9] = dy * dz * (1 - cos) + dx * sin\n\t\tm[10] = dz * dz + (dx * dx + dy * dy) * cos\n\t\tm[11] = (az * (dx * dx + dy * dy) - dz * (ax * dx + ay * dy)) * (1 - cos) + (ax * dy - ay * dx) * sin\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\n\t\treturn result\n\t}\n\n\t/**\n\t * Create an affine matrix for mirroring into an arbitrary plane:\n\t */\n\tstatic mirror(plane: { normal1: V3; w: number }, result: M4 = new M4()): M4 {\n\t\tassertVectors(plane.normal1)\n\t\tassertInst(M4, result)\n\t\tconst [nx, ny, nz] = plane.normal1\n\t\tconst w = plane.w\n\t\tconst m = result.m\n\n\t\tm[0] = 1.0 - 2.0 * nx * nx\n\t\tm[1] = -2.0 * ny * nx\n\t\tm[2] = -2.0 * nz * nx\n\t\tm[3] = 2.0 * nx * w\n\n\t\tm[4] = -2.0 * nx * ny\n\t\tm[5] = 1.0 - 2.0 * ny * ny\n\t\tm[6] = -2.0 * nz * ny\n\t\tm[7] = 2.0 * ny * w\n\n\t\tm[8] = -2.0 * nx * nz\n\t\tm[9] = -2.0 * ny * nz\n\t\tm[10] = 1.0 - 2.0 * nz * nz\n\t\tm[11] = 2.0 * nz * w\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\t\treturn result\n\t}\n\n\t/**\n\t *\n\t * @param plane\n\t * @param dir Projection direction. Optional, if not specified plane normal1 will be used.\n\t * @param result {@see M4}\n\t */\n\tstatic project(plane: { normal1: V3; w: number }, dir: V3 = plane.normal1, result: M4 = new M4()): M4 {\n\t\t// TODO: doc\n\n\t\t// plane.normal1 DOT (p + lambda * dir) = w (1)\n\t\t// extract lambda:\n\t\t// plane.normal1 DOT p + lambda * plane.normal1 DOT dir = w\n\t\t// lambda = (w - plane.normal1 DOT p) / plane.normal1 DOT dir\n\t\t// result = p + lambda * dir\n\t\t// result = p + dir * (w - plane.normal1 DOT p) / plane.normal1 DOT dir\n\t\t// result =  w * dir / (plane.normal1 DOT dir) + p - plane.normal1 DOT p * dir / (plane.normal1 DOT dir) *\n\n\t\t//  a + d * (w - n . a) / (nd)\n\t\t//  a + dw - d * na\n\t\tassertVectors(dir, plane.normal1)\n\t\tassertInst(M4, result)\n\t\tconst w = plane.w\n\t\tconst m = result.m\n\t\tconst nd = plane.normal1.dot(dir)\n\t\tconst { x: nx, y: ny, z: nz } = plane.normal1\n\t\tconst { x: dx, y: dy, z: dz } = dir.div(nd)\n\t\t/*\n\t\t rejectedFrom: return this.minus(b.times(this.dot(b) / b.dot(b)))\n\t\t return M4.forSys(\n\t\t V3.X.rejectedFrom(plane.normal1),\n\t\t V3.Y.rejectedFrom(plane.normal1),\n\t\t V3.Z.rejectedFrom(plane.normal1),\n\t\t plane.anchor,\n\t\t result\n\t\t )\n\t\t */\n\n\t\tm[0] = 1.0 - nx * dx\n\t\tm[1] = -ny * dx\n\t\tm[2] = -nz * dx\n\t\tm[3] = dx * w\n\n\t\tm[4] = -nx * dy\n\t\tm[5] = 1.0 - ny * dy\n\t\tm[6] = -nz * dy\n\t\tm[7] = dy * w\n\n\t\tm[8] = -nx * dz\n\t\tm[9] = -ny * dz\n\t\tm[10] = 1.0 - nz * dz\n\t\tm[11] = dz * w\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\n\t\treturn result\n\t}\n\n\tstatic lineProjection(line: { anchor: V3; dir1: V3 }, result: M4 = new M4()): M4 {\n\t\tassertVectors(line.anchor, line.dir1)\n\t\tassertInst(M4, result)\n\t\tconst ax = line.anchor.x,\n\t\t\tay = line.anchor.y,\n\t\t\taz = line.anchor.z\n\t\tconst dx = line.dir1.x,\n\t\t\tdy = line.dir1.y,\n\t\t\tdz = line.dir1.z\n\t\tconst m = result.m\n\n\t\t/*\n\t\t projectedOn: return b.times(this.dot(b) / b.dot(b))\n\t\t */\n\n\t\tm[0] = dx * dx\n\t\tm[1] = dx * dy\n\t\tm[2] = dx * dz\n\t\tm[3] = ax\n\n\t\tm[4] = dy * dx\n\t\tm[5] = dy * dy\n\t\tm[6] = dy * dz\n\t\tm[7] = ay\n\n\t\tm[8] = dz * dx\n\t\tm[9] = dz * dy\n\t\tm[10] = dz * dz\n\t\tm[11] = az\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\t\treturn result\n\t}\n\n\tstatic pointInversion(p: V3, result: M4 = new M4()): M4 {\n\t\tassertVectors(p)\n\t\tassertInst(M4, result)\n\t\tconst m = result.m\n\n\t\tm[0] = -1\n\t\tm[1] = 0\n\t\tm[2] = 0\n\t\tm[3] = 2 * p.x\n\n\t\tm[4] = 0\n\t\tm[5] = -1\n\t\tm[6] = 0\n\t\tm[7] = 2 * p.y\n\n\t\tm[8] = 0\n\t\tm[9] = 0\n\t\tm[10] = -1\n\t\tm[11] = 2 * p.z\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\t\treturn result\n\t}\n\n\tprotected static new(width: int, height: int, m: Float64Array) {\n\t\tassert(4 == width && 4 == height)\n\t\treturn new M4(...m)\n\t}\n\n\tget X(): V3 {\n\t\treturn this.transformVector(V3.X)\n\t}\n\n\tget Y(): V3 {\n\t\treturn this.transformVector(V3.Y)\n\t}\n\n\tget Z(): V3 {\n\t\treturn this.transformVector(V3.Z)\n\t}\n\n\tget O(): V3 {\n\t\treturn this.getTranslation()\n\t}\n\n\tisMirror(precision = NLA_PRECISION) {\n\t\tconst m = this.m\n\t\tconst nx = Math.sqrt((1 - m[0]) / 2)\n\t\tconst ny = Math.sqrt((1 - m[5]) / 2)\n\t\tconst nz = Math.sqrt((1 - m[10]) / 2)\n\n\t\treturn (\n\t\t\teq(m[1], -2.0 * ny * nx, precision) &&\n\t\t\teq(m[2], -2.0 * nz * nx, precision) &&\n\t\t\teq(m[4], -2.0 * nx * ny, precision) &&\n\t\t\teq(m[6], -2.0 * nz * ny, precision) &&\n\t\t\teq(m[8], -2.0 * nx * nz, precision) &&\n\t\t\teq(m[9], -2.0 * ny * nz, precision) &&\n\t\t\teq(m[12], 0, precision) &&\n\t\t\teq(m[13], 0, precision) &&\n\t\t\teq(m[14], 0, precision) &&\n\t\t\teq(m[15], 1, precision) &&\n\t\t\teq(m[3] * ny, m[7] * nx, precision) &&\n\t\t\teq(m[7] * nz, m[11] * ny, precision) &&\n\t\t\teq(m[11] * nx, m[3] * nz, precision)\n\t\t)\n\t}\n\n\t// ### GL.Matrix.frustum(left, right, bottom, top, near, far[, result])\n\t//\n\t// Sets up a viewing frustum, which is shaped like a truncated pyramid with the\n\t// camera where the point of the pyramid would be. You can optionally pass an\n\t// existing matrix in `result` to avoid allocating a new matrix. This emulates\n\n\t/**\n\t * Returns a new M4 which is equal to the inverse of this.\n\t */\n\tinversed(result?: M4): M4 {\n\t\treturn M4.inverse(this, result)\n\t}\n\n\t/**\n\t * Matrix trace is defined as the sum of the elements of the main diagonal.\n\t */\n\ttrace(): number {\n\t\treturn this.m[0] + this.m[5] + this.m[10] + this.m[15]\n\t}\n\n\tas3x3(result?: M4): M4 {\n\t\tresult = M4.copy<M4>(this, result)\n\t\tconst m = result.m\n\n\t\tm[3] = m[7] = m[11] = m[12] = m[13] = m[14] = 0\n\t\tm[15] = 1\n\t\treturn result\n\t}\n\n\ttransform(m4: M4): this {\n\t\treturn m4.times(this) as this\n\t}\n\n\trealEigenValues3(): number[] {\n\t\tconst m = this.m\n\t\tassert(0 == m[12] && 0 == m[13] && 0 == m[14])\n\t\t// determinant of (this - λI):\n\t\t// | a-λ  b   c  |\n\t\t// |  d  e-λ  f  | = -λ^3 + λ^2 (a+e+i) + λ (-a e-a i+b d+c g-e i+f h) + a(ei - fh) - b(di - fg) + c(dh - eg)\n\t\t// |  g   h  i-λ |\n\n\t\tconst [a, b, c, , d, e, f, , g, h, i] = m\n\t\t// det(this - λI) = -λ^3 +λ^2 (a+e+i) + λ (-a e-a i-b d+c g-e i+f h)+ (a e i-a f h-b d i+b f g+c d h-c e g)\n\t\tconst s = -1\n\t\tconst t = a + e + i // equivalent to trace of matrix\n\t\tconst u = -a * e - a * i + b * d + c * g - e * i + f * h // equivalent to 1/2 (trace(this²) - trace²(A))\n\t\tconst w = a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g) // equivalent to matrix determinant\n\n\t\tconsole.log(s, t, u, w)\n\t\treturn solveCubicReal2(s, t, u, w)\n\t}\n\n\trealEigenVectors3(): V3[] {\n\t\tconst eigenValues = this.realEigenValues3()\n\t\tconst this3x3 = this.times(M4.IDENTITY3)\n\t\tconsole.log(this.toString())\n\t\tconsole.log(this3x3.toString())\n\t\tlet mats = eigenValues.map((ev) => M4.IDENTITY3.scale(-ev).plus(this3x3))\n\t\tconsole.log(mats.map((m) => m.determinant3()))\n\t\tconsole.log(mats.map((m) => '' + m.toString((v) => '' + v)).join('\\n\\n'))\n\t\tconsole.log(mats.map((m) => '' + m.gauss().U.toString((v) => '' + v)).join('\\n\\n'))\n\t\tconsole.log(\n\t\t\t'mats.map(m=>m.rank())',\n\t\t\tmats.map((m) => m.rank()),\n\t\t)\n\t\tif (1 == eigenValues.length) {\n\t\t\tconsole.log(mats[0].toString())\n\t\t\tassertf(() => 0 == mats[0].rank())\n\t\t\t// col vectors\n\t\t\treturn arrayFromFunction(3, (col) => new V3(this.m[col], this.m[4 + col], this.m[8 + col]))\n\t\t}\n\t\tif (2 == eigenValues.length) {\n\t\t\t// one matrix should have rank 1, the other rank 2\n\t\t\tif (1 == mats[0].rank()) {\n\t\t\t\tmats = [mats[1], mats[0]]\n\t\t\t}\n\t\t\tassertf(() => 2 == mats[0].rank())\n\t\t\tassertf(() => 1 == mats[1].rank())\n\n\t\t\t// mat[0] has rank 2, mat[1] has rank 1\n\t\t\tconst gauss0 = mats[0].gauss().U\n\t\t\tconst eigenVector0 = gauss0.row(0).cross(gauss0.row(1)).V3().unit()\n\n\t\t\tconst planeNormal = mats[1].gauss().U.row(0).V3()\n\t\t\tconst eigenVector1 = planeNormal.getPerpendicular().unit()\n\t\t\tconst eigenVector2 = eigenVector0.cross(eigenVector1).rejectedFrom(planeNormal)\n\n\t\t\treturn [eigenVector0, eigenVector1, eigenVector2]\n\t\t}\n\t\tif (3 == eigenValues.length) {\n\t\t\tmats.forEach((mat, i) => assert(2 == mat.rank(), i + ': ' + mat.rank()))\n\t\t\t// the (A - lambda I) matrices map to a plane. This means, that there is an entire line in R³ which maps to\n\t\t\t// the point V3.O\n\t\t\treturn mats.map((mat) => {\n\t\t\t\tconst gauss = mat.gauss().U\n\t\t\t\treturn gauss.row(0).cross(gauss.row(1)).V3().unit()\n\t\t\t})\n\t\t}\n\t\tthrow new Error('there cannot be more than 3 eigen values')\n\t}\n\n\t/**\n\t * U * SIGMA * VSTAR = this\n\t * U and VSTAR are orthogonal matrices\n\t * SIGMA is a diagonal matrix\n\t */\n\tsvd3(): { U: M4; SIGMA: M4; VSTAR: M4 } {\n\t\tfunction matrixForCS(i: int, k: int, c: number, s: number) {\n\t\t\tconst m = M4.identity()\n\t\t\tm.setEl(i, i, c)\n\t\t\tm.setEl(k, k, c)\n\t\t\tm.setEl(i, k, s)\n\t\t\tm.setEl(k, i, -s)\n\t\t\treturn m\n\t\t}\n\n\t\tconst A = this.as3x3()\n\t\tlet S = A.transposed().times(A),\n\t\t\tV = M4.identity()\n\t\tconsole.log(S.str)\n\t\tfor (let it = 0; it < 16; it++) {\n\t\t\tconsole.log('blahg\\n', V.times(S).times(V.transposed()).str)\n\t\t\tassert(\n\t\t\t\tV.times(S).times(V.transposed()).likeM4(A.transposed().times(A)),\n\t\t\t\tV.times(S).times(V.transposed()).str,\n\t\t\t\tA.transposed().times(A).str,\n\t\t\t)\n\t\t\tlet maxOffDiagonal = 0,\n\t\t\t\tmaxOffDiagonalIndex = 1,\n\t\t\t\tj = 10\n\t\t\twhile (j--) {\n\t\t\t\tconst val = Math.abs(S.m[j])\n\t\t\t\tif (j % 4 != Math.floor(j / 4) && val > maxOffDiagonal) {\n\t\t\t\t\tmaxOffDiagonal = val\n\t\t\t\t\tmaxOffDiagonalIndex = j\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst i = Math.floor(maxOffDiagonalIndex / 4),\n\t\t\t\tk = maxOffDiagonalIndex % 4\n\t\t\tconst a_ii = S.m[5 * i],\n\t\t\t\ta_kk = S.m[5 * k],\n\t\t\t\ta_ik = S.m[maxOffDiagonalIndex]\n\t\t\tconst phi = a_ii === a_kk ? PI / 4 : Math.atan((2 * a_ik) / (a_ii - a_kk)) / 2\n\t\t\tconsole.log(maxOffDiagonalIndex, i, k, 'phi', phi)\n\t\t\tconst cos = Math.cos(phi),\n\t\t\t\tsin = Math.sin(phi)\n\t\t\tconst givensRotation = matrixForCS(i, k, cos, -sin)\n\t\t\tassert(givensRotation.transposed().times(givensRotation).likeIdentity())\n\t\t\tconsole.log(givensRotation.str)\n\t\t\tV = V.times(givensRotation)\n\t\t\tS = M4.product(givensRotation.transposed(), S, givensRotation)\n\t\t\tconsole.log(S.str)\n\t\t}\n\n\t\tconst sigma = S.map((el, elIndex) => (elIndex % 5 == 0 ? Math.sqrt(el) : 0))\n\t\treturn {\n\t\t\tU: M4.product(\n\t\t\t\tA,\n\t\t\t\tV,\n\t\t\t\tsigma.map((el, elIndex) => (elIndex % 5 == 0 ? 1 / el : 0)),\n\t\t\t),\n\t\t\tSIGMA: sigma,\n\t\t\tVSTAR: V.transposed(),\n\t\t}\n\t}\n\n\tmap(fn: (el: number, elIndex: number, array: Float64Array) => number): M4 {\n\t\treturn M4.fromFunction4((x, y, i) => fn(this.m[i], i, this.m))\n\t}\n\n\tlikeM4(m4: M4): boolean {\n\t\tassertInst(M4, m4)\n\t\treturn this.m.every((el, index) => eq(el, m4.m[index]))\n\t}\n\n\t/**\n\t * Returns a new M4 equal to the transpose of this.\n\t */\n\ttransposed(result?: M4): M4 {\n\t\treturn M4.transpose(this, result)\n\t}\n\n\t/**\n\t * Returns a new M4 which equal to (this * matrix) (in that order)\n\t */\n\ttimes(matrix: M4): M4 {\n\t\treturn M4.multiply(this, matrix)\n\t}\n\n\t/**\n\t * In a perspective projection, parallel lines meet in a vanishing point.\n\t *\n\t * Returns undefined if there is no vanishing point, either because this is not a perspective transform,\n\t * or because the passed dir is perpendicular to the projections direction.\n\t *\n\t * @param dir\n\t */\n\tvanishingPoint(dir: V3) {\n\t\tassertVectors(dir)\n\t\tconst m = this.m\n\t\tconst vx = dir.x,\n\t\t\tvy = dir.y,\n\t\t\tvz = dir.z\n\t\tconst w = vx * m[12] + vy * m[13] + vz * m[14]\n\t\tif (eq0(w)) return undefined\n\t\tconst x = vx * m[0] + vy * m[1] + vz * m[2]\n\t\tconst y = vx * m[4] + vy * m[5] + vz * m[6]\n\t\tconst z = vx * m[8] + vy * m[9] + vz * m[10]\n\t\treturn new V3(x / w, y / w, z / w)\n\t}\n\n\t/**\n\t * Transforms the vector as a point with a w coordinate of 1. This means translations will have an effect, for\n\t * example.\n\t */\n\ttransformPoint(v: V3): V3 {\n\t\tassertVectors(v)\n\t\tconst m = this.m\n\t\tconst vx = v.x,\n\t\t\tvy = v.y,\n\t\t\tvz = v.z\n\t\tconst x = vx * m[0] + vy * m[1] + vz * m[2] + m[3]\n\t\tconst y = vx * m[4] + vy * m[5] + vz * m[6] + m[7]\n\t\tconst z = vx * m[8] + vy * m[9] + vz * m[10] + m[11]\n\t\tconst w = vx * m[12] + vy * m[13] + vz * m[14] + m[15]\n\t\t// scale such that fourth element becomes 1:\n\t\treturn new V3(x / w, y / w, z / w)\n\t}\n\n\t/**\n\t * Transforms the vector as a vector with a w coordinate of 0. This means translations will have no effect, for\n\t * example. Will throw an exception if the calculated w component != 0. This occurs for example when attempting\n\t * to transform a vector with a perspective matrix.\n\t */\n\ttransformVector(v: V3, checkW = true): V3 {\n\t\tassertVectors(v)\n\t\tconst m = this.m\n\t\tconst w = v.x * m[12] + v.y * m[13] + v.z * m[14]\n\t\tcheckW && assert(eq0(w), () => 'w === 0 needs to be true for this to make sense (w =' + w + this.str)\n\t\treturn new V3(\n\t\t\tm[0] * v.x + m[1] * v.y + m[2] * v.z,\n\t\t\tm[4] * v.x + m[5] * v.y + m[6] * v.z,\n\t\t\tm[8] * v.x + m[9] * v.y + m[10] * v.z,\n\t\t)\n\t}\n\n\ttransformVector2(v: V3, anchor: V3): V3 {\n\t\t// v and anchor define a line(t) = anchor + t v\n\t\t// we can view the calculation of the transformed vector as the derivative of the transformed line at t = 0\n\t\t// d/dt (this * line(t)) (0)\n\t\tassertVectors(v, anchor)\n\t\tconst transformedAnchor = this.timesVector(VV(anchor.x, anchor.y, anchor.z, 1))\n\t\tconst transformedVector = this.timesVector(VV(v.x, v.y, v.z, 0))\n\t\treturn transformedVector\n\t\t\t.times(transformedAnchor.w)\n\t\t\t.minus(transformedAnchor.times(transformedVector.w))\n\t\t\t.div(transformedAnchor.w ** 2)\n\t\t\t.V3()\n\t}\n\n\ttransformedPoints(vs: ReadonlyArray<V3>): V3[] {\n\t\treturn vs.map((v) => this.transformPoint(v))\n\t}\n\n\ttransformedVectors(vs: ReadonlyArray<V3>): V3[] {\n\t\treturn vs.map((v) => this.transformVector(v))\n\t}\n\n\tnew() {\n\t\treturn new M4() as this\n\t}\n\n\tisRegular(): boolean {\n\t\treturn !eq0(this.determinant())\n\t}\n\n\tisAxisAligned(): boolean {\n\t\tconst m = this.m\n\t\treturn (\n\t\t\t1 >= +!eq0(m[0]) + +!eq0(m[1]) + +!eq0(m[2]) &&\n\t\t\t1 >= +!eq0(m[4]) + +!eq0(m[5]) + +!eq0(m[6]) &&\n\t\t\t1 >= +!eq0(m[8]) + +!eq0(m[9]) + +!eq0(m[10])\n\t\t)\n\t}\n\n\t/**\n\t * A matrix M is orthogonal iff M * M^T = I\n\t * I being the identity matrix.\n\t *\n\t * @returns If this matrix is orthogonal or very close to it. Comparison of the identity matrix and\n\t * this * this^T is done with {@link #likeM4}\n\t */\n\tisOrthogonal(): boolean {\n\t\t// return this.transposed().times(this).likeM4(M4.IDENTITY)\n\t\tM4.transpose(this, M4.temp0)\n\t\tM4.multiply(this, M4.temp0, M4.temp1)\n\t\treturn M4.IDENTITY.likeM4(M4.temp1)\n\t}\n\n\t/**\n\t * A matrix M is symmetric iff M == M^T\n\t * I being the identity matrix.\n\t *\n\t * @returns If this matrix is symmetric or very close to it. Comparison of the identity matrix and\n\t * this * this^T is done with {@link #likeM4}\n\t */\n\tisSymmetric(): boolean {\n\t\tM4.transpose(this, M4.temp0)\n\t\treturn this.likeM4(M4.temp0)\n\t}\n\n\t/**\n\t * A matrix M is skew symmetric iff M = -M^T\n\t */\n\tisSkewSymmetric(precision?: number): boolean {\n\t\treturn (\n\t\t\teq0(this.m[0], precision) &&\n\t\t\teq0(this.m[5], precision) &&\n\t\t\teq0(this.m[10], precision) &&\n\t\t\teq0(this.m[15], precision) &&\n\t\t\teq(this.m[1], this.m[4], precision) &&\n\t\t\teq(this.m[2], this.m[8], precision) &&\n\t\t\teq(this.m[3], this.m[12], precision) &&\n\t\t\teq(this.m[6], this.m[9], precision) &&\n\t\t\teq(this.m[7], this.m[13], precision) &&\n\t\t\teq(this.m[11], this.m[14], precision)\n\t\t)\n\t}\n\n\t/**\n\t * A matrix M is normal1 iff M * M^-T == M^T * M TODO: ^-T?\n\t * I being the identity matrix.\n\t *\n\t * @returns If this matrix is symmetric or very close to it. Comparison of the identity matrix and\n\t * this * this^T is done with {@link #likeM4}\n\t */\n\tisNormal(): boolean {\n\t\tM4.transpose(this, M4.temp0) // temp0 = this^-T\n\t\tM4.multiply(this, M4.temp0, M4.temp1) // temp1 = this * this^-T\n\t\tM4.multiply(M4.temp0, this, M4.temp2) // temp2 = this^-T * this\n\t\treturn M4.temp1.likeM4(M4.temp2)\n\t}\n\n\t/**\n\t * Determinant of matrix.\n\t *\n\t * Notes:\n\t *      For matrices A and B\n\t *      det(A * B) = det(A) * det(B)\n\t *      det(A^-1) = 1 / det(A)\n\t */\n\tdeterminant(): number {\n\t\t/*\n\t\t | a b c d |\n\t\t | e f g h |\n\t\t | i j k l |\n\t\t | m n o p |\n\t\t */\n\t\tconst $ = this.m,\n\t\t\ta = $[0],\n\t\t\tb = $[1],\n\t\t\tc = $[2],\n\t\t\td = $[3],\n\t\t\te = $[4],\n\t\t\tf = $[5],\n\t\t\tg = $[6],\n\t\t\th = $[7],\n\t\t\ti = $[8],\n\t\t\tj = $[9],\n\t\t\tk = $[10],\n\t\t\tl = $[11],\n\t\t\tm = $[12],\n\t\t\tn = $[13],\n\t\t\to = $[14],\n\t\t\tp = $[15],\n\t\t\tklop = k * p - l * o,\n\t\t\tjlnp = j * p - l * n,\n\t\t\tjkno = j * o - k * n,\n\t\t\tilmp = i * p - l * m,\n\t\t\tikmo = i * o - k * m,\n\t\t\tijmn = i * n - j * m\n\t\treturn (\n\t\t\ta * (f * klop - g * jlnp + h * jkno) -\n\t\t\tb * (e * klop - g * ilmp + h * ikmo) +\n\t\t\tc * (e * jlnp - f * ilmp + h * ijmn) -\n\t\t\td * (e * jkno - f * ikmo + g * ijmn)\n\t\t)\n\t}\n\n\tdeterminant3(): number {\n\t\tconst [a, b, c, , d, e, f, , g, h, i] = this.m\n\t\tconst det = a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g)\n\t\treturn det\n\t}\n\n\t/**\n\t * determine whether this matrix is a mirroring transformation\n\t */\n\tisMirroring(): boolean {\n\t\t/*\n\t\t var u = V(this.m[0], this.m[4], this.m[8])\n\t\t var v = V(this.m[1], this.m[5], this.m[9])\n\t\t var w = V(this.m[2], this.m[6], this.m[10])\n\n\t\t // for a true orthogonal, non-mirrored base, u.cross(v) == w\n\t\t // If they have an opposite direction then we are mirroring\n\t\t var mirrorvalue = u.cross(v).dot(w)\n\t\t var ismirror = (mirrorvalue < 0)\n\t\t return ismirror\n\t\t */\n\n\t\treturn this.determinant() < 0 // TODO: also valid for 4x4?\n\t}\n\n\t/**\n\t * Get the translation part of this matrix, i.e. the result of this.transformPoint(V3.O)\n\t */\n\tgetTranslation(): V3 {\n\t\tconst m = this.m,\n\t\t\tw = m[15]\n\t\treturn new V3(m[3] / w, m[7] / w, m[11] / w)\n\t}\n\n\t/**\n\t * Returns this matrix scaled so that the determinant is 1.\n\t * det(c * A) = (c ** n) * det(A) for n x n matrices,\n\t * so we need to divide by the 4th root of the determinant\n\t */\n\tnormalized(): M4 {\n\t\tconst detAbs = abs(this.determinant())\n\t\treturn 1 == detAbs ? this : this.divScalar(detAbs ** 0.25)\n\t}\n\n\t/**\n\t * Returns this matrix scaled so that the determinant is 1.\n\t * det(c * A) = (c ** n) * det(A) for n x n matrices,\n\t * so we need to divide by the 4th root of the determinant\n\t */\n\tnormalized2(): M4 {\n\t\tconst div = this.m[15]\n\t\treturn 1 == div ? this : this.divScalar(div ** 0.25)\n\t}\n\n\t/**\n\t * Returns if the matrix has the following form (within NLA_PRECISION):\n\t * a b c 0\n\t * c d e 0\n\t * f g h 0\n\t * 0 0 0 1\n\t */\n\tlike3x3(): boolean {\n\t\tconst m = this.m\n\t\treturn eq(1, m[15]) && eq0(m[12]) && eq0(m[13]) && eq0(m[14]) && eq0(m[3]) && eq0(m[7]) && eq0(m[11])\n\t}\n\n\tisNoProj(): boolean {\n\t\tconst m = this.m\n\t\treturn 0 == m[12] && 0 == m[13] && 0 == m[14] && 1 == m[15]\n\t}\n\n\tlikeIdentity(): boolean {\n\t\treturn this.m.every((val, i) => (((i / 4) | 0) == i % 4 ? eq(1, val) : eq0(val)))\n\t}\n\n\tisIdentity(): boolean {\n\t\treturn this.m.every((val, i) => (((i / 4) | 0) == i % 4 ? 1 == val : 0 == val))\n\t}\n\n\ttoString(f: (number: number) => string = (v) => v.toFixed(6).replace(/([0.])(?=0*$)/g, ' ')): string {\n\t\tassert(typeof f(0) == 'string', '' + typeof f(0))\n\t\t// slice this.m to convert it to an Array (from TypeArray)\n\t\tconst rounded = Array.prototype.slice.call(this.m).map(f) as string[]\n\t\tconst colWidths = [0, 1, 2, 3].map((colIndex) => max(sliceStep(rounded, colIndex, 0, 4).map((x) => x.length)))\n\t\treturn [0, 1, 2, 3]\n\t\t\t.map((rowIndex) =>\n\t\t\t\trounded\n\t\t\t\t\t.slice(rowIndex * 4, rowIndex * 4 + 4) // select matrix row\n\t\t\t\t\t.map((x, colIndex) => ' '.repeat(colWidths[colIndex] - x.length) + x) // pad numbers with\n\t\t\t\t\t// spaces to col width\n\t\t\t\t\t.join(' '),\n\t\t\t)\n\t\t\t.join('\\n') // join rows\n\t}\n\n\t/**\n\t * Wether this matrix is a translation matrix, i.e. of the form\n\t * ```\n\t * \t1, 0, 0, x,\n\t * \t0, 1, 0, y,\n\t * \t0, 0, 1, z,\n\t * \t0, 0, 0, 1\n\t * ```\n\t */\n\tisTranslation(): boolean {\n\t\t// 2: any value, otherwise same value\n\t\t// prettier-ignore\n\t\tconst mask = [\n\t\t\t1, 0, 0, 2,\n\t\t\t0, 1, 0, 2,\n\t\t\t0, 0, 1, 2,\n\t\t\t0, 0, 0, 1]\n\t\treturn mask.every((expected, index) => expected == 2 || expected == this.m[index])\n\t}\n\n\t/**\n\t * Wether this matrix is a translation matrix, i.e. of the form\n\t * ```\n\t * \ts, 0, 0, 0,\n\t * \t0, t, 0, 0,\n\t * \t0, 0, v, 0,\n\t * \t0, 0, 0, 1\n\t * ```\n\t */\n\tisScaling(): boolean {\n\t\t// prettier-ignore\n\t\tconst mask = [\n\t\t\t2, 0, 0, 0,\n\t\t\t0, 2, 0, 0,\n\t\t\t0, 0, 2, 0,\n\t\t\t0, 0, 0, 1]\n\t\treturn mask.every((expected, index) => expected == 2 || expected == this.m[index])\n\t}\n\n\tisZRotation(): boolean {\n\t\t// prettier-ignore\n\t\tconst mask = [\n\t\t\t2, 2, 0, 0,\n\t\t\t2, 2, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1]\n\t\treturn (\n\t\t\tmask.every((expected, index) => expected == 2 || expected == this.m[index]) &&\n\t\t\teq(1, this.m[0] ** 2 + this.m[1] ** 2) &&\n\t\t\tthis.m[0] == this.m[5] &&\n\t\t\tthis.m[1] == -this.m[4]\n\t\t)\n\t}\n\n\ttoSource(): string {\n\t\tconst name = M4.NAMEMAP.get(this)\n\t\tif (name) {\n\t\t\treturn name\n\t\t} else if (this.isTranslation()) {\n\t\t\treturn callsce('M4.translate', this.O)\n\t\t} else if (this.isScaling()) {\n\t\t\treturn callsce('M4.scale', this.m[0], this.m[5], this.m[10])\n\t\t} else if (this.isNoProj()) {\n\t\t\treturn !this.O.equals(V3.O)\n\t\t\t\t? callsce('M4.forSys', this.X, this.Y, this.Z, this.O)\n\t\t\t\t: callsce('M4.forSys', this.X, this.Y, this.Z)\n\t\t} else if (this.isMirror(0)) {\n\t\t\tconst m = this.m\n\t\t\tconst nx = Math.sqrt((1 - m[0]) / 2)\n\t\t\tconst ny = Math.sqrt((1 - m[5]) / 2)\n\t\t\tconst nz = Math.sqrt((1 - m[10]) / 2)\n\t\t\tconst w = m[3] / 2.0 / nx\n\t\t\treturn callsce('M4.mirror', { normal1: new V3(nx, ny, nz), w })\n\t\t} else {\n\t\t\tconst m = this.m\n\t\t\t// prettier-ignore\n\t\t\treturn 'new M4(' +\n\t\t\t\t'\\n\\t' + m[0] + ',\\t' + m[1] + ',\\t' + m[2] + ',\\t' + m[3] + ',' +\n\t\t\t\t'\\n\\t' + m[4] + ',\\t' + m[5] + ',\\t' + m[6] + ',\\t' + m[7] + ',' +\n\t\t\t\t'\\n\\t' + m[8] + ',\\t' + m[9] + ',\\t' + m[10] + ',\\t' + m[11] + ',' +\n\t\t\t\t'\\n\\t' + m[12] + ',\\t' + m[13] + ',\\t' + m[14] + ',\\t' + m[15] + ')'\n\t\t}\n\t}\n\n\txyAreaFactor(): number {\n\t\treturn this.transformVector(V3.X).cross(this.transformVector(V3.Y)).length()\n\t}\n}\n\nM4.prototype.height = 4\nM4.prototype.width = 4\n\nexport interface M4 extends Transformable {}\naddOwnProperties(M4.prototype, Transformable.prototype, 'constructor')\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * @license\n *\n * js - JavaScript library for color conversions\n *\n * Copyright (c) 2011-2017, Gregor Aisch\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice, this\n *    list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. The name Gregor Aisch may not be used to endorse or promote products\n *    derived from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n// tslint:disable:no-unnecessary-qualifier\n\nconst { abs, atan2, cos, floor, log, min, max, round, sign, sin, sqrt, cbrt, PI, hypot } = Math\n\nfunction lerp(a: number, b: number, f: number) {\n\treturn a + (b - a) * f\n}\nfunction lerpInv(a: number, b: number, f: number) {\n\treturn (f - a) / (b - a)\n}\nfunction clamp(x: number, min = 0, max = 1) {\n\treturn x < min ? min : x > max ? max : x\n}\n\nfunction newtonIterate1d(f: (x: number) => number, xStart: number, max_steps: number, eps: number = 1e-8): number {\n\tlet x = xStart,\n\t\tfx\n\twhile (max_steps-- && abs((fx = f(x))) > eps) {\n\t\tconst dfdx = (f(x + eps) - fx) / eps\n\t\tconsole.log(\"fx / dfdx\", fx / dfdx, \"fx\", fx, \"x\", x)\n\t\tx = x - fx / dfdx\n\t}\n\treturn x\n}\nfunction bisect(f: (x: number) => number, a: number, b: number, steps: number) {\n\t//assert(a < b)\n\tlet fA = f(a)\n\t// let fB = f(b)\n\t//assert(fA * fB < 0)\n\twhile (steps--) {\n\t\tconst c = (a + b) / 2\n\t\tconst fC = f(c)\n\t\t// console.log(\"fC\", fC, \"c\", c)\n\t\tif (sign(fA) == sign(fC)) {\n\t\t\ta = c\n\t\t\tfA = fC\n\t\t} else {\n\t\t\tb = c\n\t\t\t// fB = fC\n\t\t}\n\t}\n\t//assert(a <= (b + a) / 2)\n\t//assert(b >= (b + a) / 2)\n\treturn (a + b) / 2\n}\n\nconst TWOPI = 2 * PI\n\nconst DEG2RAD = PI / 180\n\nconst RAD2DEG = 180 / PI\n/**\n * @param alpha1 default=1\n * @example chroma.color(99, 99, 44, 0.7)\n */\nexport function color(red255: number, green255: number, blue255: number, alpha1?: number): Color\n/**\n * @example chroma.color('mediumorchid') // a css string\n * @example chroma.color([56, 203, 30]) // a RGB triple\n * @example chroma.color(0x4b0082) // a hex num\n * @example chroma.color([30, 0.8, 0.3], 'hsl') // explicit format\n */\nexport function color(x: Chromable, format?: ColorFormat): Color\n/**\n * This overload allows VS Code to suggest color names when you type `color('`.\n */\nexport function color(colorname: keyof typeof w3cx11, format?: \"name\"): Color\n/** @example chroma.color(30, 0.8, 0.3, 'hsl') */\nexport function color(channel0: number, channel1: number, channel2: number, format: ColorFormat): Color\n/** @example chroma.color(0.3, 0.8, 0.3, 1, 'gl') */\nexport function color(\n\tchannel0: number,\n\tchannel1: number,\n\tchannel2: number,\n\tchannel3: number,\n\tformat: ColorFormat,\n): Color\nexport function color(...args: any[]) {\n\tif (args[0] instanceof Color) {\n\t\treturn args[0]\n\t}\n\tif (args.length > 1 && \"string\" == typeof args[args.length - 1]) {\n\t\treturn guess(args.slice(0, args.length - 1), args[args.length - 1])\n\t} else if (Array.isArray(args[0])) {\n\t\treturn guess(args[0])\n\t} else {\n\t\treturn guess(args)\n\t}\n}\n/**\n * A Chromable is any value which can be converted to a color. For ease of use, most functions accept these instead of\n * only Color values.\n */\nexport type Chromable = number | string | Color | number[]\n\nexport class Color {\n\t/** @internal */\n\tconstructor(\n\t\tprivate readonly r: number,\n\t\tprivate readonly g: number,\n\t\tprivate readonly b: number,\n\t\tprivate readonly a = 1,\n\t) {}\n\n\t// public shade() {\n\t// \tconst shades: [string, string, number][] = [\n\t// \t\t[\"ff0000\", \"red\"],\n\t// \t\t[\"ffa500\", \"orange\"],\n\t// \t\t[\"ffff00\", \"yellow\"],\n\t// \t\t[\"008000\", \"green\"],\n\t// \t\t[\"0000ff\", \"blue\"],\n\t// \t\t[\"ee82ee\", \"violet\"],\n\t// \t\t[\"a52a2a\", \"brown\"],\n\t// \t\t[\"000000\", \"black\"],\n\t// \t\t[\"808080\", \"grey\"],\n\t// \t\t[\"ffffff\", \"white\"],\n\t// \t] as any\n\t// \tfunction angleDiff(a: number, b: number) {\n\t// \t\tconst d = (a - b) % 360\n\t// \t\tif (d > 180) return d - 360\n\t// \t\tif (d < -180) return d + 360\n\t// \t\treturn d\n\t// \t}\n\t// \tshades.forEach(arr => arr.push(color(arr[0]).hsl()[0]))\n\t// \tconst [h, s, l] = this.hsl()\n\t// \tif (l > 0.9) return \"white\"\n\t// \tif (l > 0.8 && s < 0.2) return \"white\"\n\t// \tif (s < 0.1) return \"grey\"\n\t// \tif (s < 0.4 && h > 0 && h < 48) return \"brown\"\n\n\t// \tconst distanceInXYZ: { [hue: number]: number } = { 0: 0 }\n\t// \tfor (let i = 60; i <= 360; i += 60) {\n\t// \t\tdistanceInXYZ[i] =\n\t// \t\t\tdistanceInXYZ[i - 60] + distance(hsl(i - 60, 1, 0.5), hsl(i, 1, 0.5), \"xyz\")\n\t// \t}\n\t// \t// console.log(distanceInXYZ)\n\n\t// \tconst shadeEnds: { [hue: number]: number } = {\n\t// \t\t0: 9,\n\t// \t\t38: 48,\n\t// \t\t60: 65,\n\t// \t\t120: 165,\n\t// \t\t240: 245,\n\t// \t\t300: 338,\n\t// \t\t360: 369,\n\t// \t}\n\n\t// \tconst getColorDistanceAlongXYZHue = (hueDegrees: number) => {\n\t// \t\tconst base = hueDegrees - (hueDegrees % 60)\n\t// \t\treturn (\n\t// \t\t\tdistanceInXYZ[base] + distance(hsl(base, 1, 0.5), hsl(hueDegrees, 1, 0.5), \"xyz\")\n\t// \t\t)\n\t// \t}\n\t// \tconst colorXYZD = getColorDistanceAlongXYZHue(this.hsl()[0])\n\t// \tconst md = distanceInXYZ[360]\n\t// \tconst shadeHue =\n\t// \t\t(Object.keys(shadeEnds) as any[]).find(shadeHue => shadeEnds[shadeHue | 0] >= this.hsl()[0])! % 360\n\t// \treturn shades.find(([_hex, _name, _hue]) => (_hue | 0) === shadeHue)![1]\n\t// \t// process.exit()\n\t// \treturn withMax(shades, ([_hex, _name, _hue]) => {\n\t// \t\treturn -abs(angleDiff(this.hsl()[0], _hue))\n\t// \t})[1]\n\t// \treturn withMax(shades, ([_hex, _name, _hue]) => {\n\t// \t\tconst [thisL, thisA, thisB] = this.lab()\n\t// \t\tconst [L, A, B] = color(_hex).lab()\n\t// \t\treturn -hypot(thisL - L, thisA - A, thisB - B)\n\t// \t})[1]\n\t// }\n\n\t/**\n\t * @see [[mix]]\n\t */\n\tpublic mix(col2: Chromable, f: number, m: InterpolationMode = \"rgb\") {\n\t\treturn mix(this, col2, f, m)\n\t}\n\tpublic rgb(doRound = true, clamp_ = true): RGB {\n\t\tconst f = (t: number) => {\n\t\t\tif (doRound) t = round(t)\n\t\t\tif (clamp_) t = clamp(t, 0, 255)\n\t\t\treturn t\n\t\t}\n\t\tconst { r, g, b } = this\n\t\treturn [f(r), f(g), f(b)]\n\t}\n\tpublic rgba(doRound = true, clamp_ = true): RGBA {\n\t\tconst f = (t: number) => {\n\t\t\tif (doRound) t = round(t)\n\t\t\tif (clamp_) t = clamp(t, 0, 255)\n\t\t\treturn t\n\t\t}\n\t\tconst { r, g, b, a } = this\n\t\treturn [f(r), f(g), f(b), a]\n\t}\n\n\t/**\n\t * Return a hex-string representation of this color.\n\t *\n\t * @param mode\n\t * @see #num for a hex-number representation.\n\t * @example chroma.color('yellow').alpha(0.7).hex()\n\t * @example chroma.color('yellow').alpha(0.7).hex('rgba')\n\t * @example chroma.color('yellow').alpha(0.7).hex('argb')\n\t */\n\tpublic hex(mode: \"rgb\" | \"rgba\" | \"argb\" = \"rgb\") {\n\t\tconst { r, g, b, a } = this\n\t\treturn rgb2hex(r, g, b, a, mode)\n\t}\n\n\t/**\n\t * Returns the [HSL] representation of this color. hue will always be in [0;360). Values are never NaN.\n\t *\n\t * @example chroma.color('purple').hsl()\n\t */\n\tpublic hsl(): HSL {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2hsl(r, g, b)\n\t}\n\n\t/**\n\t * Returns the [HSL] representation of this color. hue will always be in [0;360). Values are never NaN.\n\t *\n\t * @example chroma.color('purple').hsv()\n\t */\n\tpublic hsv() {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2hsv(r, g, b)\n\t}\n\n\t/**\n\t * Returns the [HSL] representation of this color. hue will always be in [0;360). Values are never NaN.\n\t *\n\t * @example chroma.color('purple').hcg()\n\t */\n\tpublic hcg() {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2hcg(r, g, b)\n\t}\n\n\t/**\n\t * Returns a CSS `rgb(...)` or `hsl(...)` string representation that can be used as CSS-color definition. The alpha\n\t * value is not output if it 1.\n\t * @example chroma.color('teal').css() // == \"rgb(0,128,128)\"\n\t * @example chroma.color('teal').alpha(0.5).css() // == \"rgba(0,128,128,0.5)\"\n\t * @example chroma.color('teal').css('hsl') // == \"hsl(180,100%,25.1%)\"\n\t */\n\tpublic css(mode: \"rgb\" | \"hsl\" = \"rgb\") {\n\t\tif (\"rgb\" == mode) {\n\t\t\tconst { r, g, b, a } = this\n\t\t\treturn rgb2css(r, g, b, a)\n\t\t} else if (\"hsl\" == mode) {\n\t\t\treturn hsl2css(this.hsl(), this.alpha())\n\t\t} else {\n\t\t\tthrow new Error()\n\t\t}\n\t}\n\n\tpublic name(closest: true): string\n\t/**\n\t * Get the name of a color. By default, this method will try to match the color exactly (comparing rounded RGB\n\t * values). Pass `true` to return the name of the color which is closest to `this` in CIELAB color space. CIELAB is\n\t * used as it is perceptually uniform.\n\t * @param closest Whether this should find the closest color name. default=false\n\t * @return If `closest == false`, the name of this color or `undefined` if there is no match. Otherwise, will always\n\t * return a color name.\n\t * @example chroma.color('#ff0000').name() // == \"red\"\n\t * @example chroma.color('#ff0001').name() // == undefined\n\t * @example chroma.color('#ff0001').name(true) // == \"red\"\n\t */\n\tpublic name(closest?: boolean): string | undefined\n\tpublic name(closest: boolean = false): string | undefined {\n\t\tconst thisNum = this.num()\n\t\tconst name = Object.keys(w3cx11).find((name) => (w3cx11 as any)[name] == thisNum)\n\t\tif (!name && closest) {\n\t\t\tconst [thisLStar, thisAStar, thisBStar] = this.lab()\n\t\t\treturn withMax(Object.keys(w3cx11) as (keyof typeof w3cx11)[], (name) => {\n\t\t\t\tconst [lStar, aStar, bStar] = num(w3cx11[name]).lab()\n\t\t\t\treturn -hypot(thisLStar - lStar, thisAStar - aStar, thisBStar - bStar)\n\t\t\t})\n\t\t}\n\t\treturn name\n\t}\n\n\t/**\n\t * Get the [CMYK](#CMYK) representation of this color.\n\t *\n\t * @example chroma.color('red').cmyk()\n\t */\n\tpublic cmyk() {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2cmyk(r, g, b)\n\t}\n\n\t/**\n\t * Returns the [GL] representation of this color.\n\t * @example chroma.color('33cc00').gl()\n\t */\n\tpublic gl(): GL {\n\t\tconst { r, g, b, a } = this\n\t\treturn [r / 255, g / 255, b / 255, a]\n\t}\n\n\t/**\n\t * Get luminance of the color. This is equal to the Y channel of the XYZ color space.\n\t * @example chroma.color('black').luminance() // == 0\n\t * @example chroma.color('white').luminance() // == 1\n\t * @example chroma.color('red').luminance() // == ~0.21\n\t * @see https://en.wikipedia.org/wiki/Relative_luminance\n\t */\n\tpublic luminance(): number\n\t/**\n\t * Return a new [Color] with `lum1` by linearly interpolating `this` with white (when increasing the luminance) or\n\t * black (otherwise) in the [XYZ] color space.\n\t * @see https://en.wikipedia.org/wiki/Relative_luminance\n\t * @example // Approximately doubling the luminance of red\n\t * @example chroma.color('red').luminance(0.4) // == #ff8686 // \"Vivid Tangerine\"\n\t * @param lum1 The desired luminance.\n\t */\n\tpublic luminance(lum1: number): this\n\tpublic luminance(lum1?: number) {\n\t\tconst { r, g, b, a } = this\n\t\tconst [, Y] = rgb2xyz(r, g, b)\n\t\tif (undefined === lum1) {\n\t\t\treturn Y\n\t\t}\n\t\tconst inverseLerp = (a: number, b: number, val: number) => (val - a) / (b - a)\n\t\tif (lum1 > Y) {\n\t\t\t// lerp to white\n\t\t\treturn mix(this, white, inverseLerp(Y, 1, lum1), \"xyz\").alpha(a)\n\t\t} else {\n\t\t\t// lerp to black\n\t\t\treturn mix(black, this, inverseLerp(0, Y, lum1), \"xyz\").alpha(a)\n\t\t}\n\t}\n\n\t/**\n\t * Get color temperature of this color in Kelvin. This only makes sense for colors close to those output by\n\t * kelvin\n\t *\n\t * @example [c = chroma.color('#ff3300'), c.temperature()]\n\t * @example [c = chroma.color('#ffe3cd'), c.temperature()]\n\t * @example [c = chroma.color('#b3ccff'), c.temperature()]\n\t */\n\tpublic temperature() {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2kelvin(r, g, b)\n\t}\n\n\t/**\n\t * Returns a new [Color] with a channel changed.\n\t * @example chroma.color('skyblue').set('hsl.h', 0) // change hue to 0 deg (=red)\n\t * @example chroma.color('hotpink').set('lch.c', 30) // set chromaticity to 30\n\t * @example chroma.color('orangered').set('lab.l', x => x / 2) // half Lab lightness\n\t * @example chroma.color('darkseagreen').set('lch.c', x => x * 2) // double Lch saturation\n\t */\n\tpublic set(modeAndChannel: string, value: number | ((channel: number) => number)) {\n\t\tconst [mode, channel] = modeAndChannel.split(\".\") as [ColorMode, string]\n\t\tconst src = this[mode]()\n\t\tconst i = mode.indexOf(channel)\n\t\tif (-1 == i) throw new Error(\"invalid channel\")\n\t\tsrc[i] = \"number\" == typeof value ? value : value(src[i])\n\t\treturn color(src, mode).alpha(this.a)\n\t}\n\n\t/**\n\t * Returns whether this color is outside the RGB color cube and will be clipped/clamped when calling .rgb()\n\t *\n\t * @example [c = chroma.lch( 20, 40, 50), c.clipped()]\n\t * @example [c = chroma.lch( 40, 40, 50), c.clipped()]\n\t * @example [c = chroma.lch( 60, 40, 50), c.clipped()]\n\t * @example [c = chroma.lch( 80, 40, 50), c.clipped()]\n\t * @example [c = chroma.lch(100, 40, 50), c.clipped()]\n\t */\n\tpublic clipped() {\n\t\tconst { r, g, b } = this\n\t\treturn !(0 <= r && r <= 255 && 0 <= g && g <= 255 && 0 <= b && b <= 255)\n\t}\n\n\t/**\n\t * Returns black or white, whichever has the highest contrast to `this`.\n\t * In the readme you should see the result of this.\n\t *\n\t * @example chroma.color('red')\n\t * @example chroma.color('yellow')\n\t */\n\tpublic textColor() {\n\t\treturn this.luminance() > 0.5 ? black : white\n\t}\n\n\t/**\n\t * Get alpha value of color.\n\t * @example chroma.rgb(0, 0, 255, 0.5).alpha() // == 0.5\n\t */\n\tpublic alpha(): number\n\t/**\n\t * Return new [Color] with given alpha value.\n\t * @example chroma.color('green').alpha(0.3)\n\t * @example chroma.color('green').alpha(0.3).hex('rgba') // == \"#00ff004d\"\n\t * @param alpha1 The desired alpha value.\n\t */\n\tpublic alpha(alpha1: number): Color\n\tpublic alpha(alpha1?: number): number | Color {\n\t\tif (undefined === alpha1) {\n\t\t\treturn this.a\n\t\t}\n\t\tconst { r, g, b } = this\n\t\treturn rgb(r, g, b, alpha1)\n\t}\n\n\tpublic darker(amount = 1) {\n\t\tconst [l, a, b] = this.lab()\n\t\treturn lab(l - LAB_Kn * amount, a, b, this.alpha())\n\t}\n\n\t/**\n\t *\n\t * @param amount\n\t * @example chroma.color('hotpink')\n\t * @example chroma.color('hotpink').brighter()\n\t * @example chroma.color('hotpink').brighter(2)\n\t * @example chroma.color('hotpink').brighter(3)\n\t */\n\tpublic brighter(amount = 1) {\n\t\treturn this.darker(-amount)\n\t}\n\n\t/**\n\t * Returns a new [Color] with increased saturation.\n\t * @param amount How much.\n\t * @example chroma.color('slategray')\n\t * @example chroma.color('slategray').saturate()\n\t * @example chroma.color('slategray').saturate(2)\n\t * @example chroma.color('slategray').saturate(3)\n\t */\n\tpublic saturate(amount = 1) {\n\t\tconst [l, c, h] = this.lch()\n\t\treturn lch(l, max(0, c + amount * LAB_Kn), h, this.alpha())\n\t}\n\n\t/**\n\t * Equivalent to `saturate(-amount)`.\n\t * @see #saturate\n\t */\n\tpublic desaturate(amount = 1) {\n\t\treturn this.saturate(-amount)\n\t}\n\n\tpublic premultiplied() {\n\t\tconst { r, g, b, a } = this\n\t\treturn rgb(r * a, g * a, b * a, a)\n\t}\n\n\t/**\n\t * Returns the [HSI] representation of this color. hue will always be in [0; 360). Values are never NaN.\n\t *\n\t * @example chroma.color('purple').hsi()\n\t */\n\tpublic hsi() {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2hsi(r, g, b)\n\t}\n\n\t/**\n\t * Returns the [LAB] representation of this color.\n\t *\n\t * @example chroma.color('purple').lab()\n\t */\n\tpublic lab() {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2lab(r, g, b)\n\t}\n\n\t/**\n\t * Return a hex-num of this color.\n\t *\n\t * @param mode\n\t * @see #num for a hex-number representation.\n\t * @example chroma.color('yellow').alpha(0.7).hex()\n\t * @example chroma.color('yellow').alpha(0.7).hex('rgba')\n\t * @example chroma.color('yellow').alpha(0.7).hex('argb')\n\t */\n\tpublic num(mode: \"rgb\" | \"rgba\" | \"argb\" = \"rgb\") {\n\t\tconst { r, g, b, a } = this\n\t\treturn rgb2num(r, g, b, a, mode)\n\t}\n\n\t/**\n\t * Returns the [LCH] representation of this color. hue will always be in [0; 360). Values are never NaN.\n\t *\n\t * @example chroma.color('purple').lch()\n\t */\n\tpublic lch() {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2lch(r, g, b)\n\t}\n\n\t/**\n\t * Returns the [XYZ] representation of this color. hue will always be in [0; 360). Values are never NaN.\n\t *\n\t * @example chroma.color('purple').xyz()\n\t */\n\tpublic xyz() {\n\t\tconst { r, g, b } = this\n\t\treturn rgb2xyz(r, g, b)\n\t}\n\n\t/**\n\t * Whether this [Color](#Color) is identical (strict equality of r, g, b, a) to `color`.\n\t */\n\tpublic equals(color: Color) {\n\t\tconst { r, g, b, a } = this\n\t\tconst { r: r2, g: g2, b: b2, a: a2 } = color\n\t\treturn r == r2 && g == g2 && b == b2 && a == a2\n\t}\n\n\tpublic hashCode() {\n\t\treturn this.num(\"rgba\")\n\t}\n\n\t/**\n\t * @example chroma.color('red').toSource() // == \"rgb(255, 0, 0)\"\n\t * @example chroma.rgb(-2, 100.02, 200, 0.5).toSource() // == \"rgb(-2, 100.02, 200, 0.5)\"\n\t */\n\tpublic toSource() {\n\t\tconst { r, g, b, a } = this\n\t\treturn \"chroma.rgb(\" + r + \", \" + g + \", \" + b + (a === 1 ? \")\" : \", \" + a + \")\")\n\t}\n}\nexport interface Color {\n\ttoString(): string\n\t//darker(amount: number): Color\n\t//brighter(amount: number): Color\n\tkelvin(): number\n}\nColor.prototype.toString = Color.prototype.css\nColor.prototype.kelvin = Color.prototype.temperature\n/**\n * @example chroma.black\n */\nexport const black = new Color(0, 0, 0, 1)\n\n/**\n * @example chroma.black\n */\nexport const white = new Color(255, 255, 255, 1)\n\nexport const brewer = {\n\tOrRd: [0xfff7ec, 0xfee8c8, 0xfdd49e, 0xfdbb84, 0xfc8d59, 0xef6548, 0xd7301f, 0xb30000, 0x7f0000],\n\tPuBu: [0xfff7fb, 0xece7f2, 0xd0d1e6, 0xa6bddb, 0x74a9cf, 0x3690c0, 0x0570b0, 0x045a8d, 0x023858],\n\tBuPu: [0xf7fcfd, 0xe0ecf4, 0xbfd3e6, 0x9ebcda, 0x8c96c6, 0x8c6bb1, 0x88419d, 0x810f7c, 0x4d004b],\n\tOranges: [0xfff5eb, 0xfee6ce, 0xfdd0a2, 0xfdae6b, 0xfd8d3c, 0xf16913, 0xd94801, 0xa63603, 0x7f2704],\n\tBuGn: [0xf7fcfd, 0xe5f5f9, 0xccece6, 0x99d8c9, 0x66c2a4, 0x41ae76, 0x238b45, 0x006d2c, 0x00441b],\n\tYlOrBr: [0xffffe5, 0xfff7bc, 0xfee391, 0xfec44f, 0xfe9929, 0xec7014, 0xcc4c02, 0x993404, 0x662506],\n\tYlGn: [0xffffe5, 0xf7fcb9, 0xd9f0a3, 0xaddd8e, 0x78c679, 0x41ab5d, 0x238443, 0x006837, 0x004529],\n\tReds: [0xfff5f0, 0xfee0d2, 0xfcbba1, 0xfc9272, 0xfb6a4a, 0xef3b2c, 0xcb181d, 0xa50f15, 0x67000d],\n\tRdPu: [0xfff7f3, 0xfde0dd, 0xfcc5c0, 0xfa9fb5, 0xf768a1, 0xdd3497, 0xae017e, 0x7a0177, 0x49006a],\n\tGreens: [0xf7fcf5, 0xe5f5e0, 0xc7e9c0, 0xa1d99b, 0x74c476, 0x41ab5d, 0x238b45, 0x006d2c, 0x00441b],\n\tYlGnBu: [0xffffd9, 0xedf8b1, 0xc7e9b4, 0x7fcdbb, 0x41b6c4, 0x1d91c0, 0x225ea8, 0x253494, 0x081d58],\n\tPurples: [0xfcfbfd, 0xefedf5, 0xdadaeb, 0xbcbddc, 0x9e9ac8, 0x807dba, 0x6a51a3, 0x54278f, 0x3f007d],\n\tGnBu: [0xf7fcf0, 0xe0f3db, 0xccebc5, 0xa8ddb5, 0x7bccc4, 0x4eb3d3, 0x2b8cbe, 0x0868ac, 0x084081],\n\tGreys: [0xffffff, 0xf0f0f0, 0xd9d9d9, 0xbdbdbd, 0x969696, 0x737373, 0x525252, 0x252525, 0x000000],\n\tYlOrRd: [0xffffcc, 0xffeda0, 0xfed976, 0xfeb24c, 0xfd8d3c, 0xfc4e2a, 0xe31a1c, 0xbd0026, 0x800026],\n\tPuRd: [0xf7f4f9, 0xe7e1ef, 0xd4b9da, 0xc994c7, 0xdf65b0, 0xe7298a, 0xce1256, 0x980043, 0x67001f],\n\tBlues: [0xf7fbff, 0xdeebf7, 0xc6dbef, 0x9ecae1, 0x6baed6, 0x4292c6, 0x2171b5, 0x08519c, 0x08306b],\n\tPuBuGn: [0xfff7fb, 0xece2f0, 0xd0d1e6, 0xa6bddb, 0x67a9cf, 0x3690c0, 0x02818a, 0x016c59, 0x014636],\n\tViridis: [0x440154, 0x482777, 0x3f4a8a, 0x31678e, 0x26838f, 0x1f9d8a, 0x6cce5a, 0xb6de2b, 0xfee825],\n\tSpectral: [\n\t\t0x9e0142,\n\t\t0xd53e4f,\n\t\t0xf46d43,\n\t\t0xfdae61,\n\t\t0xfee08b,\n\t\t0xffffbf,\n\t\t0xe6f598,\n\t\t0xabdda4,\n\t\t0x66c2a5,\n\t\t0x3288bd,\n\t\t0x5e4fa2,\n\t],\n\tRdYlGn: [\n\t\t0xa50026,\n\t\t0xd73027,\n\t\t0xf46d43,\n\t\t0xfdae61,\n\t\t0xfee08b,\n\t\t0xffffbf,\n\t\t0xd9ef8b,\n\t\t0xa6d96a,\n\t\t0x66bd63,\n\t\t0x1a9850,\n\t\t0x006837,\n\t],\n\tRdBu: [\n\t\t0x67001f,\n\t\t0xb2182b,\n\t\t0xd6604d,\n\t\t0xf4a582,\n\t\t0xfddbc7,\n\t\t0xf7f7f7,\n\t\t0xd1e5f0,\n\t\t0x92c5de,\n\t\t0x4393c3,\n\t\t0x2166ac,\n\t\t0x053061,\n\t],\n\tPiYG: [\n\t\t0x8e0152,\n\t\t0xc51b7d,\n\t\t0xde77ae,\n\t\t0xf1b6da,\n\t\t0xfde0ef,\n\t\t0xf7f7f7,\n\t\t0xe6f5d0,\n\t\t0xb8e186,\n\t\t0x7fbc41,\n\t\t0x4d9221,\n\t\t0x276419,\n\t],\n\tPRGn: [\n\t\t0x40004b,\n\t\t0x762a83,\n\t\t0x9970ab,\n\t\t0xc2a5cf,\n\t\t0xe7d4e8,\n\t\t0xf7f7f7,\n\t\t0xd9f0d3,\n\t\t0xa6dba0,\n\t\t0x5aae61,\n\t\t0x1b7837,\n\t\t0x00441b,\n\t],\n\tRdYlBu: [\n\t\t0xa50026,\n\t\t0xd73027,\n\t\t0xf46d43,\n\t\t0xfdae61,\n\t\t0xfee090,\n\t\t0xffffbf,\n\t\t0xe0f3f8,\n\t\t0xabd9e9,\n\t\t0x74add1,\n\t\t0x4575b4,\n\t\t0x313695,\n\t],\n\tBrBG: [\n\t\t0x543005,\n\t\t0x8c510a,\n\t\t0xbf812d,\n\t\t0xdfc27d,\n\t\t0xf6e8c3,\n\t\t0xf5f5f5,\n\t\t0xc7eae5,\n\t\t0x80cdc1,\n\t\t0x35978f,\n\t\t0x01665e,\n\t\t0x003c30,\n\t],\n\tRdGy: [\n\t\t0x67001f,\n\t\t0xb2182b,\n\t\t0xd6604d,\n\t\t0xf4a582,\n\t\t0xfddbc7,\n\t\t0xffffff,\n\t\t0xe0e0e0,\n\t\t0xbababa,\n\t\t0x878787,\n\t\t0x4d4d4d,\n\t\t0x1a1a1a,\n\t],\n\tPuOr: [\n\t\t0x7f3b08,\n\t\t0xb35806,\n\t\t0xe08214,\n\t\t0xfdb863,\n\t\t0xfee0b6,\n\t\t0xf7f7f7,\n\t\t0xd8daeb,\n\t\t0xb2abd2,\n\t\t0x8073ac,\n\t\t0x542788,\n\t\t0x2d004b,\n\t],\n\tSet2: [0x66c2a5, 0xfc8d62, 0x8da0cb, 0xe78ac3, 0xa6d854, 0xffd92f, 0xe5c494, 0xb3b3b3],\n\tAccent: [0x7fc97f, 0xbeaed4, 0xfdc086, 0xffff99, 0x386cb0, 0xf0027f, 0xbf5b17, 0x666666],\n\tSet1: [0xe41a1c, 0x377eb8, 0x4daf4a, 0x984ea3, 0xff7f00, 0xffff33, 0xa65628, 0xf781bf, 0x999999],\n\tSet3: [\n\t\t0x8dd3c7,\n\t\t0xffffb3,\n\t\t0xbebada,\n\t\t0xfb8072,\n\t\t0x80b1d3,\n\t\t0xfdb462,\n\t\t0xb3de69,\n\t\t0xfccde5,\n\t\t0xd9d9d9,\n\t\t0xbc80bd,\n\t\t0xccebc5,\n\t\t0xffed6f,\n\t],\n\tDark2: [0x1b9e77, 0xd95f02, 0x7570b3, 0xe7298a, 0x66a61e, 0xe6ab02, 0xa6761d, 0x666666],\n\tPaired: [\n\t\t0xa6cee3,\n\t\t0x1f78b4,\n\t\t0xb2df8a,\n\t\t0x33a02c,\n\t\t0xfb9a99,\n\t\t0xe31a1c,\n\t\t0xfdbf6f,\n\t\t0xff7f00,\n\t\t0xcab2d6,\n\t\t0x6a3d9a,\n\t\t0xffff99,\n\t\t0xb15928,\n\t],\n\tPastel2: [0xb3e2cd, 0xfdcdac, 0xcbd5e8, 0xf4cae4, 0xe6f5c9, 0xfff2ae, 0xf1e2cc, 0xcccccc],\n\tPastel1: [0xfbb4ae, 0xb3cde3, 0xccebc5, 0xdecbe4, 0xfed9a6, 0xffffcc, 0xe5d8bd, 0xfddaec, 0xf2f2f2],\n}\n\n/**\n * X11 color names\n * http://www.w3.org/TR/css3-color/#svg-color\n *\n * @example chroma.Object.keys(w3cx11).slice(0, 4)\n */\nexport const w3cx11 = {\n\taliceblue: 0xf0f8ff,\n\tantiquewhite: 0xfaebd7,\n\taqua: 0x00ffff,\n\taquamarine: 0x7fffd4,\n\tazure: 0xf0ffff,\n\tbeige: 0xf5f5dc,\n\tbisque: 0xffe4c4,\n\tblack: 0x000000,\n\tblanchedalmond: 0xffebcd,\n\tblue: 0x0000ff,\n\tblueviolet: 0x8a2be2,\n\tbrown: 0xa52a2a,\n\tburlywood: 0xdeb887,\n\tcadetblue: 0x5f9ea0,\n\tchartreuse: 0x7fff00,\n\tchocolate: 0xd2691e,\n\tcoral: 0xff7f50,\n\tcornflower: 0x6495ed,\n\tcornflowerblue: 0x6495ed,\n\tcornsilk: 0xfff8dc,\n\tcrimson: 0xdc143c,\n\tcyan: 0x00ffff,\n\tdarkblue: 0x00008b,\n\tdarkcyan: 0x008b8b,\n\tdarkgoldenrod: 0xb8860b,\n\tdarkgray: 0xa9a9a9,\n\tdarkgreen: 0x006400,\n\tdarkgrey: 0xa9a9a9,\n\tdarkkhaki: 0xbdb76b,\n\tdarkmagenta: 0x8b008b,\n\tdarkolivegreen: 0x556b2f,\n\tdarkorange: 0xff8c00,\n\tdarkorchid: 0x9932cc,\n\tdarkred: 0x8b0000,\n\tdarksalmon: 0xe9967a,\n\tdarkseagreen: 0x8fbc8f,\n\tdarkslateblue: 0x483d8b,\n\tdarkslategray: 0x2f4f4f,\n\tdarkslategrey: 0x2f4f4f,\n\tdarkturquoise: 0x00ced1,\n\tdarkviolet: 0x9400d3,\n\tdeeppink: 0xff1493,\n\tdeepskyblue: 0x00bfff,\n\tdimgray: 0x696969,\n\tdimgrey: 0x696969,\n\tdodgerblue: 0x1e90ff,\n\tfirebrick: 0xb22222,\n\tfloralwhite: 0xfffaf0,\n\tforestgreen: 0x228b22,\n\tfuchsia: 0xff00ff,\n\tgainsboro: 0xdcdcdc,\n\tghostwhite: 0xf8f8ff,\n\tgold: 0xffd700,\n\tgoldenrod: 0xdaa520,\n\tgray: 0x808080,\n\tgreen: 0x008000,\n\tgreenyellow: 0xadff2f,\n\tgrey: 0x808080,\n\thoneydew: 0xf0fff0,\n\thotpink: 0xff69b4,\n\tindianred: 0xcd5c5c,\n\tindigo: 0x4b0082,\n\tivory: 0xfffff0,\n\tkhaki: 0xf0e68c,\n\tlaserlemon: 0xffff54,\n\tlavender: 0xe6e6fa,\n\tlavenderblush: 0xfff0f5,\n\tlawngreen: 0x7cfc00,\n\tlemonchiffon: 0xfffacd,\n\tlightblue: 0xadd8e6,\n\tlightcoral: 0xf08080,\n\tlightcyan: 0xe0ffff,\n\tlightgoldenrod: 0xfafad2,\n\tlightgoldenrodyellow: 0xfafad2,\n\tlightgray: 0xd3d3d3,\n\tlightgreen: 0x90ee90,\n\tlightgrey: 0xd3d3d3,\n\tlightpink: 0xffb6c1,\n\tlightsalmon: 0xffa07a,\n\tlightseagreen: 0x20b2aa,\n\tlightskyblue: 0x87cefa,\n\tlightslategray: 0x778899,\n\tlightslategrey: 0x778899,\n\tlightsteelblue: 0xb0c4de,\n\tlightyellow: 0xffffe0,\n\tlime: 0x00ff00,\n\tlimegreen: 0x32cd32,\n\tlinen: 0xfaf0e6,\n\tmagenta: 0xff00ff,\n\tmaroon: 0x800000,\n\tmaroon2: 0x7f0000,\n\tmaroon3: 0xb03060,\n\tmediumaquamarine: 0x66cdaa,\n\tmediumblue: 0x0000cd,\n\tmediumorchid: 0xba55d3,\n\tmediumpurple: 0x9370db,\n\tmediumseagreen: 0x3cb371,\n\tmediumslateblue: 0x7b68ee,\n\tmediumspringgreen: 0x00fa9a,\n\tmediumturquoise: 0x48d1cc,\n\tmediumvioletred: 0xc71585,\n\tmidnightblue: 0x191970,\n\tmintcream: 0xf5fffa,\n\tmistyrose: 0xffe4e1,\n\tmoccasin: 0xffe4b5,\n\tnavajowhite: 0xffdead,\n\tnavy: 0x000080,\n\toldlace: 0xfdf5e6,\n\tolive: 0x808000,\n\tolivedrab: 0x6b8e23,\n\torange: 0xffa500,\n\torangered: 0xff4500,\n\torchid: 0xda70d6,\n\tpalegoldenrod: 0xeee8aa,\n\tpalegreen: 0x98fb98,\n\tpaleturquoise: 0xafeeee,\n\tpalevioletred: 0xdb7093,\n\tpapayawhip: 0xffefd5,\n\tpeachpuff: 0xffdab9,\n\tperu: 0xcd853f,\n\tpink: 0xffc0cb,\n\tplum: 0xdda0dd,\n\tpowderblue: 0xb0e0e6,\n\tpurple: 0x800080,\n\tpurple2: 0x7f007f,\n\tpurple3: 0xa020f0,\n\trebeccapurple: 0x663399,\n\tred: 0xff0000,\n\trosybrown: 0xbc8f8f,\n\troyalblue: 0x4169e1,\n\tsaddlebrown: 0x8b4513,\n\tsalmon: 0xfa8072,\n\tsandybrown: 0xf4a460,\n\tseagreen: 0x2e8b57,\n\tseashell: 0xfff5ee,\n\tsienna: 0xa0522d,\n\tsilver: 0xc0c0c0,\n\tskyblue: 0x87ceeb,\n\tslateblue: 0x6a5acd,\n\tslategray: 0x708090,\n\tslategrey: 0x708090,\n\tsnow: 0xfffafa,\n\tspringgreen: 0x00ff7f,\n\tsteelblue: 0x4682b4,\n\ttan: 0xd2b48c,\n\tteal: 0x008080,\n\tthistle: 0xd8bfd8,\n\ttomato: 0xff6347,\n\tturquoise: 0x40e0d0,\n\tviolet: 0xee82ee,\n\twheat: 0xf5deb3,\n\twhite: 0xffffff,\n\twhitesmoke: 0xf5f5f5,\n\tyellow: 0xffff00,\n\tyellowgreen: 0x9acd32,\n}\n\n/**\n * Return a new [[CubeHelix]].\n *\n * @example chroma.cubehelix() // use the default helix\n * @example chroma.cubehelix().start(200).rotations(-0.5).gamma(0.8).lightness([0.3, 0.8])\n */\nexport function cubehelix(\n\tstart = 300,\n\trotations = -1.5,\n\thue: number | [number, number] = 1,\n\tgamma = 1,\n\tlightness: number | [number, number] = [0, 1],\n) {\n\tconst f: CubeHelix = ((t) => f.at(t)) as CubeHelix\n\t;(Object.getOwnPropertyNames(CubeHelix.prototype) as (keyof typeof CubeHelix)[]).forEach(\n\t\t(key) => (f[key] = CubeHelix.prototype[key]),\n\t)\n\tf.start(start)\n\tf.rotations(rotations)\n\tf.hue(hue)\n\tf.gamma(gamma)\n\tf.lightness(lightness)\n\treturn f\n}\n\n/**\n * [Dave Green's cubehelix color scheme](http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/)!\n *\n * A CubeHelix is a function defined on [0, 1] which returns colors.\n */\nexport interface CubeHelix {\n\t(f: number): Color\n}\nexport class CubeHelix {\n\tprivate _start!: number\n\tprivate _rotations!: number\n\tprivate _gamma!: number\n\tprivate _hue!: [number, number]\n\tprivate _lightness!: [number, number]\n\n\tpublic start(): number\n\tpublic start(s: number): this\n\tpublic start(s?: number) {\n\t\tif (undefined === s) {\n\t\t\treturn this._start\n\t\t}\n\t\tthis._start = s\n\t\treturn this\n\t}\n\n\tpublic rotations(): number\n\tpublic rotations(r: number): this\n\tpublic rotations(r?: number) {\n\t\tif (undefined === r) {\n\t\t\treturn this._rotations\n\t\t}\n\t\tthis._rotations = r\n\t\treturn this\n\t}\n\n\tpublic gamma(): number\n\tpublic gamma(g: number): this\n\tpublic gamma(g?: number) {\n\t\tif (undefined === g) {\n\t\t\treturn this._gamma\n\t\t}\n\t\tthis._gamma = g\n\t\treturn this\n\t}\n\n\tpublic hue(): [number, number]\n\tpublic hue(h: number | [number, number]): this\n\tpublic hue(h?: number | [number, number]) {\n\t\tif (undefined === h) {\n\t\t\treturn this._hue\n\t\t}\n\t\tthis._hue = Array.isArray(h) ? h : [h, h]\n\t\treturn this\n\t}\n\n\tpublic lightness(): [number, number]\n\tpublic lightness(h: number | [number, number]): this\n\tpublic lightness(h?: number | [number, number]) {\n\t\tif (undefined === h) {\n\t\t\treturn this._lightness\n\t\t}\n\t\tthis._lightness = Array.isArray(h) ? h : [h, h]\n\t\treturn this\n\t}\n\n\t/**\n\t * Convert to a [[Scale]].\n\t *\n\t * @example chroma.cubehelix().scale().correctLightness().domain(2, 22)\n\t */\n\tpublic scale() {\n\t\treturn scale(this)\n\t}\n\n\tpublic at(fract: number) {\n\t\tconst a = TWOPI * ((this._start + 120) / 360 + this._rotations * fract)\n\t\tconst l = lerp(this._lightness[0], this._lightness[1], fract) ** this._gamma\n\t\tconst h = lerp(this._hue[0], this._hue[1], fract)\n\t\tconst amp = (h * l * (1 - l)) / 2\n\t\tconst cos_a = cos(a)\n\t\tconst sin_a = sin(a)\n\t\tconst r = l + amp * (-0.14861 * cos_a + 1.78277 * sin_a)\n\t\tconst g = l + amp * (-0.29227 * cos_a - 0.90649 * sin_a)\n\t\tconst b = l + amp * (+1.97294 * cos_a)\n\t\treturn rgb([r * 255, g * 255, b * 255, 1])\n\t}\n}\n\n/**\n * Create a new random [Color] from a random point in the RGB color space.\n * @param randomSource A function which returns random `number`s in the interval [0; 1). Useful if you want to\n *     create a deterministic sequence of \"random\" colors. Defaults to `Math.random`.\n */\nexport function random(randomSource = Math.random) {\n\treturn num((randomSource() * 0x1_00_00_00) | 0)\n}\n\n/**\n * Create a valid RGB color (`.clipped() == false`) from a random point in the CIELAB color space. This results in\n * more colors in the RGB color space where humans can perceive more differences.\n * @param randomSource A function which returns random `number`s in the interval [0; 1). Useful if you want to\n *     create a deterministic sequence of \"random\" colors. Defaults to `Math.random`.\n * @example chroma.random((() => { let i = 0; return () => (i = (i *Math.SQRT2) % 1); })())\n */\n// export function randomLab(randomSource = Math.random) {\n// \tconst labAMin = -87,\n// \t\tlabAMax = 99,\n// \t\tlabBMin = -108,\n// \t\tlabBMax = 95\n// \tlet maxIterations = 100\n// \twhile (maxIterations--) {\n// \t\tconst u = randomSource(),\n// \t\t\tv = randomSource(),\n// \t\t\tw = randomSource()\n// \t\t// The following matrix multiplication transform the random point (u v w) in the unit cube into the\n// \t\t// oriented bounding box (OBB) of the projection of the RGB space into the LAB space. This is necessary to\n// \t\t// avoid a huge number of misses.\n// \t\tconst color = lab(\n// \t\t\tu * -53.903 + v * -88.755 + w * 71.7 + 99.707,\n// \t\t\tu * -82.784 + v * 187.036 + w * -2.422 + -28.17,\n// \t\t\tu * -75.813 + v * -141.406 + w * -48.261 + 152.469,\n// \t\t)\n// \t\tconsole.log(color.lab())\n// \t\tconsole.log(color.rgba(false, false))\n// \t\tif (!color.clipped()) return color\n// \t}\n// \tthrow new Error(\"Could find a random color in 100 iterations\")\n// }\n\n/**\n * Mixes two colors. The mix ratio is a value between 0 and 1.\n * The color mixing produces different results based the color space used for interpolation.\n *\n * @param col2\n * @param f\n * @param m\n * @example chroma.mix('red', 'blue')\n * @example chroma.mix('red', 'blue', 0.25)\n * @example chroma.mix('red', 'blue', 0.75)\n *\n * @example chroma.mix('red', 'blue', 0.5, 'rgb')\n * @example chroma.mix('red', 'blue', 0.5, 'hsl')\n * @example chroma.mix('red', 'blue', 0.5, 'lab')\n * @example chroma.mix('red', 'blue', 0.5, 'lch')\n * @example chroma.mix('red', 'blue', 0.5, 'lrgb')\n */\nexport function mix(col1: Chromable, col2: Chromable, f = 0.5, m: InterpolationMode = \"rgb\") {\n\tconst c1 = color(col1)\n\tconst c2 = color(col2)\n\tconst res = interpolators[m] && ((interpolators as any)[m](c1, c2, f, m) as Color)\n\tif (!res) {\n\t\tthrow new Error(\"color mode \" + m + \" is not supported\")\n\t}\n\treturn res.alpha(lerp(c1.alpha(), c2.alpha(), f))\n}\n\n/**\n * Parse a CSS color. See [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color) for all the possible\n * variants.\n *\n * @example chroma.css('hsl(2rad 90% 50% / 0.9)')\n * @example chroma.css('laserlemon')\n */\nexport function css(cssString: string) {\n\tconst [r, g, b, a] = css2rgb(cssString)\n\treturn new Color(r, g, b, a)\n}\n\n/**\n * @example chroma.cmyk(0.2, 0.8, 0, 0)\n * @example chroma.color(0.2, 0.8, 0, 0, 'cmyk')\n */\nexport function cmyk(cmyk: CMYK): Color\nexport function cmyk(cyan1: number, magenta1: number, yellow1: number, key1: number): Color\nexport function cmyk(...args: any[]) {\n\treturn guess(args, \"cmyk\")\n}\n\n/**\n * @example chroma.gl(1, 1, 0, 1)\n */\nexport function gl(gl: RGBA | RGB): Color\n/**\n * @example chroma.gl([1, 0, 1, 0.5])\n */\nexport function gl(red1: number, green1: number, blue1: number, alpha1: number): Color\nexport function gl(...args: any[]) {\n\treturn guess(args, \"gl\")\n}\n\nexport function hcg(hcg: HCG): Color\n/**\n * @param alpha1 default=1\n */\nexport function hcg(h: number, c: number, g: number, alpha1?: number): Color\nexport function hcg(...args: any[]) {\n\treturn guess(args, \"hcg\")\n}\n\nexport function lch(lch: LCH): Color\n/**\n * @param alpha1 default=1\n */\nexport function lch(h: number, c: number, l: number, alpha1?: number): Color\nexport function lch(...args: any[]) {\n\treturn guess(args, \"lch\")\n}\n\nexport function hsi(hsi: HSI): Color\n/**\n * @param alpha1 default=1\n */\nexport function hsi(h: number, s: number, i: number, alpha1?: number): Color\nexport function hsi(...args: any[]) {\n\treturn guess(args, \"hsi\")\n}\n\nexport function hsl(hsl: HSL): Color\n/**\n * @param alpha1 default=1\n * @example chroma.hsl(30, 1, 0.5)\n * @example chroma.hsl(30, 0.6, 0.5)\n */\nexport function hsl(hueDegrees: number, saturation1: number, lightness1: number, alpha1?: number): Color\nexport function hsl(...args: any[]) {\n\treturn guess(args, \"hsl\")\n}\n\nexport function hsv(hsv: LAB): Color\nexport function hsv(h: number, s: number, v: number): Color\nexport function hsv(...args: any[]) {\n\treturn guess(args, \"hsv\")\n}\n\n/**\n *\n * @param temperature\n * @example chroma.kelvin(2000) // candle light\n * @example chroma.kelvin(3500) // sunset\n * @example chroma.kelvin(6500) // daylight\n * @example x0_1 => chroma.kelvin(x0_1 * 30000) // effective range: [0; 30000]\n */\nexport function kelvin(temperature: number) {\n\tconst [r, g, b] = kelvin2rgb(temperature)\n\treturn new Color(r, g, b)\n}\n\nexport function lab(lab: LAB): Color\n/**\n * @param alpha1 default=1\n */\nexport function lab(lightness1: number, a1: number, b: number, alpha1?: number): Color\nexport function lab(...args: any[]) {\n\treturn guess(args, \"lab\")\n}\n\n/**\n * @example chroma.num(0x663399) // rebeccapurple\n */\nexport function num(num: number) {\n\tconst [r, g, b] = num2rgb(num)\n\treturn new Color(r, g, b)\n}\n\nexport function rgb(rgb: RGBA | RGB): Color\n/**\n * @param alpha1 default=1\n * @example chroma.rgb(0, 100, 200)\n */\nexport function rgb(red255: number, green255: number, blue255: number, alpha1?: number): Color\nexport function rgb(...args: any[]) {\n\treturn guess(args, \"rgb\")\n}\n\nexport function xyz(xyz: XYZ): Color\n/** @param alpha1 default=1 */\nexport function xyz(x1: number, y1: number, z1: number, alpha1?: number): Color\nexport function xyz(...args: any[]) {\n\treturn guess(args, \"xyz\")\n}\n\n/**\n * Similar to mix, but accepts more than two colors.\n *\n * @example colors = ['#ddd', 'yellow', 'red', 'teal']\n * @example chroma.average(colors) // default = 'rgb'\n * @example chroma.average(colors, 'lab')\n * @example chroma.average(colors, 'lch')\n * @example chroma.average(colors, 'lrgb')\n * @example chroma.average(['red', 'rgba(0,0,0,0.5)']).css()\n */\nexport function average(chromables: Chromable[], mode: InterpolationMode = \"rgb\") {\n\tconst colors = chromables.map((c) => color(c))\n\tif (mode == \"lrgb\") {\n\t\treturn _average_lrgb(colors)\n\t}\n\tif (mode == \"num\") {\n\t\tlet numSum = 0,\n\t\t\talphaSum = 0\n\t\tfor (const col of colors) {\n\t\t\tnumSum += col.num()\n\t\t\talphaSum += col.alpha()\n\t\t}\n\t\treturn num(numSum / colors.length).alpha(alphaSum / colors.length)\n\t}\n\tconst xyz = [0, 0, 0]\n\tlet dx = 0\n\tlet dy = 0\n\tlet alphaSum = 0\n\tfor (const c of colors) {\n\t\tconst xyz2 = c[mode]()\n\t\talphaSum += c.alpha()\n\n\t\tfor (let i = 0; i < xyz.length; i++) {\n\t\t\tif (mode.charAt(i) == \"h\") {\n\t\t\t\tconst A = xyz2[i] * DEG2RAD\n\t\t\t\tdx += cos(A)\n\t\t\t\tdy += sin(A)\n\t\t\t} else {\n\t\t\t\txyz[i] += xyz2[i]\n\t\t\t}\n\t\t}\n\t}\n\tfor (let i = 0; i < xyz.length; i++) {\n\t\tif (mode.charAt(i) == \"h\") {\n\t\t\tconst A = atan2(dy / colors.length, dx / colors.length) * RAD2DEG\n\t\t\txyz[i] = (A + 360) % 360\n\t\t} else {\n\t\t\txyz[i] = xyz[i] / colors.length\n\t\t}\n\t}\n\treturn guess(xyz, mode).alpha(alphaSum / colors.length)\n}\n\n/**\n *\n * @param chromables\n * @example chroma.scale('black', 'red', 'gold') // linear interpolation\n * @example chroma.bezier('black', 'red', 'gold') // bezier interpolation\n */\nexport function bezier(chromables: Chromable[]): { (t: number): Color; scale(): Scale }\nexport function bezier(...chromables: Chromable[]): { (t: number): Color; scale(): Scale }\nexport function bezier(...args: any[]) {\n\tconst chromables: Chromable[] = Array.isArray(args[0]) ? args[0] : args\n\tconst f = _bezier(chromables) as { (t: number): Color; scale(): Scale }\n\tf.scale = CubeHelix.prototype.scale\n\treturn f\n}\n\n/**\n * Blends two colors using RGB channel-wise blend functions.\n * @param bottom\n * @param top\n * @param mode\n * @example chroma.blend('4CBBFC', 'EEEE22', 'multiply')\n * @example chroma.blend('4CBBFC', 'EEEE22', 'darken')\n * @example chroma.blend('4CBBFC', 'EEEE22', 'lighten')\n */\nexport function blend(bottom: Chromable, top: Chromable, mode: BlendMode) {\n\tif (!blend_fs[mode]) {\n\t\tthrow new Error(\"unknown blend mode \" + mode)\n\t}\n\treturn blend_fs[mode](bottom, top)\n}\nexport type BlendMode = keyof typeof blend_fs\nconst blend_fs = {\n\tnormal: blend_f(each((a, _) => a)),\n\tmultiply: blend_f(each((a, b) => (a * b) / 255)),\n\tscreen: blend_f(each(_screen)),\n\toverlay: blend_f(each(_overlay)),\n\tdarken: blend_f(each(min)),\n\tlighten: blend_f(each(max)),\n\tdodge: blend_f(each(_dodge)),\n\tburn: blend_f(each(_burn)),\n}\n\n/**\n * @param colors\n * @example scale = chroma.scale(['yellow', '008ae5'])\n * @example scale(0.25)\n * @example scale(0.5)\n * @example scale(0.75)\n * @example chroma.scale('Viridis')\n */\nexport function scale(colors: Chromable[] | keyof typeof brewer | ((f: number) => Color)): Scale\nexport function scale(...colors: Chromable[]): Scale\nexport function scale(...args: any[]) {\n\tconst f: Scale = ((t) => (f as any)._at(t)) as Scale\n\t;(Object.getOwnPropertyNames(Scale.prototype) as (keyof typeof Scale)[]).forEach(\n\t\t(key) => (f[key] = Scale.prototype[key]),\n\t)\n\tif (Array.isArray(args[0])) args = args[0]\n\tif (args.length == 1 && \"string\" == typeof args[0]) args = brewer[args[0] as keyof typeof brewer]\n\t;(f as any)._init(\"function\" == typeof args[0] ? args[0] : args.map((a) => color(a)))\n\t//f.setColors(args.length > 1 ? args : args[0])\n\treturn f\n}\n/**\n * A color scale, created with scale, is a function that maps numeric values to a color palette.\n *\n * The type parameter describes the output type and can be changed with out(). Defaults to Color objects.\n *\n * @param T The output format. default=Color\n * @example chroma.scale('Purples')\n * @example chroma.scale('Purples')(0.4)\n */\nexport interface Scale<T = Color> {\n\t(val: number): T\n}\nexport class Scale<T = Color> {\n\tprivate _colors!: Color[] | ((t: number) => Color)\n\tprivate _classes!: number[] | undefined\n\t/**\n\t * Color cache. undefined if the cache should not be used.\n\t */\n\tprivate _cache!: Map<number, Color> | undefined\n\tprivate _correctLightness!: boolean\n\tprivate _gamma!: number\n\tprivate _mode!: InterpolationMode\n\tprivate _out!: ColorFormat | undefined\n\tprivate _min!: number\n\tprivate _max!: number\n\tprivate _paddingLeft!: number\n\tprivate _paddingRight!: number\n\t// positions of the colors on the interval [0, 1]. guaranteed to have the same length as _colors\n\t// undefined when _colors is a function\n\tprivate _pos: number[] | undefined\n\n\t/**\n\t * Get the current scale classes.\n\t */\n\tpublic classes(): number[]\n\t/**\n\t * Make the scale return a number of distint color instead of a continuous gradient.\n\t * If you pass a number the scale will broken into equi-distant classes:\n\t *\n\t * @example chroma.scale('OrRd') // continous\n\t * @example chroma.scale('OrRd').classes(5) // equidistant classes\n\t * @example chroma.scale('OrRd').classes(8)\n\t *\n\t * @example chroma.scale('OrRd').classes([0, 6, 11, 17, 20]) // also sets domain\n\t */\n\tpublic classes(classes: number | number[]): this\n\tpublic classes(classes?: number | number[]) {\n\t\tif (undefined === classes) {\n\t\t\treturn this._classes\n\t\t}\n\t\tif (Array.isArray(classes)) {\n\t\t\tthis._classes = classes\n\t\t\tthis.domain(classes[0], classes[classes.length - 1])\n\t\t} else {\n\t\t\tif (classes % 1 != 0 || classes < 1) throw new Error(\"invalid classes param\")\n\t\t\t// const d = analyze(this.domain())\n\t\t\tthis._classes = limits(this.domain(), \"e\", classes)\n\t\t}\n\t\treturn this\n\t}\n\n\t/**\n\t * Get the domain.\n\t * @return If _colors is a function, [this._min, this._max]. If _colors is an array of colors, an array with the\n\t * same length as the number of colors.\n\t * @example chroma.scale(\"red\", \"white\", \"blue\").domain(0, 20).domain() // == [0, 10, 20]\n\t */\n\tpublic domain(): number[]\n\t/**\n\t * Set the domain interval on which the scale is defined. Colors are distributed equidistantly along the\n\t * interval.\n\t * @param start\n\t * @param end\n\t * @return `this`\n\t * @example chroma.scale(\"red\", \"white\", \"blue\").domain(0, 100)(50) // == white\n\t * @example chroma.scale(\"red\", \"white\", \"blue\").domain(0, 0.25, 1).domain(0, 100).domain() // == [0, 25, 100]\n\t */\n\tpublic domain(start: number, end: number): this\n\t/**\n\t * Set the domain interval and the individual positions of the colors. The number of passed values must match\n\t * the number of colors which define the scale. Not valid if the scale is defined by a function.\n\t * @param domain The positions of all scale colors. Values must be in ascending order and should not have\n\t * duplicates.\n\t * @return `this`\n\t * @example scale = chroma.scale(\"red\", \"white\", \"blue\").domain(0, 25, 100)\n\t * @example scale(25) // == white\n\t * @example scale(100) // == blue\n\t * @example scale(50) // == #aaaaff\n\t */\n\tpublic domain(...domain: number[]): this\n\tpublic domain(...domain: number[]): number[] | this {\n\t\tif (undefined === domain[0]) {\n\t\t\treturn \"function\" !== typeof this._colors\n\t\t\t\t? this._pos!.map((p) => lerp(this._min, this._max, p))\n\t\t\t\t: [this._min, this._max]\n\t\t}\n\t\tthis._min = domain[0]\n\t\tthis._max = domain[domain.length - 1]\n\t\tif (2 == domain.length) {\n\t\t\tif (\"function\" !== typeof this._colors) {\n\t\t\t\t// equidistant positions\n\t\t\t\tthis._pos = this._colors.map((_, c) => c / (this._colors.length - 1))\n\t\t\t}\n\t\t} else if (\"function\" !== typeof this._colors && domain.length == this._colors.length) {\n\t\t\tthis._pos = domain.map((d) => lerpInv(this._min, this._max, d))\n\t\t} else {\n\t\t\tthrow new Error(\"invalid domain \" + domain)\n\t\t}\n\t\treturn this\n\t}\n\n\t/**\n\t * Get the interpolation mode used when calculating colors.\n\t */\n\tpublic mode(): InterpolationMode\n\t/**\n\t * Set the interpolation mode used when calculating colors. The defaut mode is \"rgb\".\n\t * See also {@link chroma#mix}\n\t * @param mode the mode to set.\n\t * @return `this`\n\t * @example chroma.scale(\"red\", \"green\").mode(\"lab\")\n\t * @example chroma.scale(\"red\", \"green\").mode(\"lrgb\")\n\t */\n\tpublic mode(mode: InterpolationMode): this\n\tpublic mode(mode?: InterpolationMode) {\n\t\tif (undefined === mode) {\n\t\t\treturn this._mode\n\t\t}\n\t\tthis._mode = mode\n\t\tthis._resetCache()\n\t\treturn this\n\t}\n\n\t/**\n\t * Set the output format return by `this(x)` and `this.colors(n)`.\n\t * @param outputFormat The color format to use. Pass `undefined` to return [Color] objects.\n\t * @return `this`\n\t * @example chroma.scale(\"red\", \"white\").out(\"hex\")(0) // == \"#ff0000\"\n\t * @example chroma.scale(\"red\", \"white\").out(\"num\").colors(2) // == [0xff0000, 0xffffff]\n\t */\n\tpublic out<M extends ColorFormat | undefined>(\n\t\toutputFormat: M,\n\t): Scale<M extends ColorFormat ? ReturnType<Color[M]> : Color> {\n\t\tthis._out = outputFormat\n\t\treturn this as any\n\t}\n\n\t/**\n\t * This makes sure the lightness range is spread evenly across a color scale. Especially useful when working\n\t * with [multi-hue color scales](https://www.vis4.net/blog/2013/09/mastering-multi-hued-color-scales/), where\n\t * simple gamma correction can't help you very much.\n\t *\n\t * @example chroma.scale('black','red','yellow','white')\n\t * @example chroma.scale('black','red','yellow','white').correctLightness()\n\t */\n\tpublic correctLightness(enableCorrectLightness = true) {\n\t\tif (this._correctLightness != enableCorrectLightness) {\n\t\t\tthis._resetCache()\n\t\t\tconst colors = this._colors\n\t\t\tif (enableCorrectLightness && \"function\" !== typeof colors) {\n\t\t\t\t// make sure that the colors have ascending or descending lightnesses\n\t\t\t\tlet sign = 0\n\t\t\t\tfor (let i = 1; i < colors.length; i++) {\n\t\t\t\t\tconst sign2 = colors[i].lab()[0] - colors[i - 1].lab()[0]\n\t\t\t\t\tif (0 == sign) {\n\t\t\t\t\t\tsign = sign2\n\t\t\t\t\t} else if (sign * sign2 < 0) {\n\t\t\t\t\t\tthrow new Error(\"scale color lightnesses must be monotonic\")\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._correctLightness = enableCorrectLightness\n\t\treturn this\n\t}\n\n\t/**\n\t * Get the padding.\n\t * @returns [paddingLeft, paddingRight]\n\t */\n\tpublic padding(): [number, number]\n\t/**\n\t * Set the padding. Positive values will \"cut off\" the ends of gradient, while negative values will add a\n\t * section of constant color at the ends.\n\t * @example chroma.scale(\"red\", \"white\").padding(0.2)\n\t * @example chroma.scale(\"red\", \"white\").padding(0.1)(0) // == color('#ff1a1a'), instead of red\n\t * @example chroma.scale(\"red\", \"white\").padding(-0.1)(0) // == color('red')\n\t * @param paddingLeft padding on left side.(lower-valued end of the interval).\n\t * @param paddingRight padding on right (higher-valued end of the interval).\n\t * default=paddingLeft\n\t */\n\tpublic padding(paddingLeft: number, paddingRight?: number): this\n\tpublic padding(paddingLeft?: number, paddingRight: number | undefined = paddingLeft) {\n\t\tif (!paddingLeft) {\n\t\t\treturn [this._paddingLeft, this._paddingRight]\n\t\t}\n\t\tthis._paddingLeft = paddingLeft\n\t\tthis._paddingRight = paddingRight!\n\t\treturn this\n\t}\n\n\t/**\n\t * Get a number of equidistant colors.\n\t * @param numColors The number of colors to return.\n\t * @param format Output format. Defaults to `\"hex\"`. Pass `\"color\"` to get {@link Color} objects.\n\t * @returns If `numColors` is `undefined`, the colors which define this [Scale]. If `numColors` is 1,\n\t * `[this((min + max) / 2)]`. Otherwise, an array where the first element is `this(min)`, the last one is\n\t * `this(max)` and the rest are equidistant samples between min and max.\n\t * @example chroma.scale('OrRd').colors(5)\n\t * @example chroma.scale(['white', 'black']).colors(12)\n\t */\n\tpublic colors<M extends ColorFormat | \"color\" | undefined = \"hex\">(\n\t\tnumColors?: number,\n\t\tformat: M = \"hex\" as any,\n\t): Array<M extends ColorFormat ? ReturnType<Color[M]> : M extends \"color\" ? Color : string> {\n\t\tlet result: Color[]\n\t\tif (undefined === numColors) {\n\t\t\tresult = (this._colors as Color[]).slice()\n\t\t} else if (numColors == 1) {\n\t\t\tresult = [this._color((this._min + this._max) / 2)]\n\t\t} else if (numColors > 1) {\n\t\t\tresult = Array.from({ length: numColors }, (_, i) =>\n\t\t\t\tthis._color(lerp(this._min, this._max, i / (numColors - 1))),\n\t\t\t)\n\t\t} else {\n\t\t\t// returns all colors based on the defined classes\n\t\t\tlet samples\n\t\t\tif (this._classes && this._classes.length > 2) {\n\t\t\t\tsamples = Array.from(\n\t\t\t\t\t{ length: this._classes.length - 1 },\n\t\t\t\t\t(_, i) => (this._classes![i] + this._classes![i + 1]) * 0.5,\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tsamples = this.domain() // TODO?!\n\t\t\t}\n\t\t\tresult = samples.map((s) => this._color(s))\n\t\t}\n\n\t\treturn (format != \"color\" ? result.map((c) => c[format as \"hex\"]()) : result) as any\n\t}\n\n\t/**\n\t * Get whether the cache is enabled. Defaults to true.\n\t */\n\tpublic cache(): boolean\n\t/**\n\t * Enable or disable the cache.\n\t * @param enableCache Whether the cache should be enabled.\n\t */\n\tpublic cache(enableCache: boolean): this\n\tpublic cache(enableCache?: boolean) {\n\t\tif (undefined === enableCache) {\n\t\t\treturn !!this._cache\n\t\t}\n\t\tthis._cache = enableCache ? this._cache || new Map() : undefined\n\t\treturn this\n\t}\n\n\t/**\n\t * Get the current gamma value. Defaults to 1.\n\t */\n\tpublic gamma(): number\n\t/**\n\t * Set the gamma value. Gamma-correction can be used to \"shift\" a scale's center more the the beginning (gamma <\n\t * 1) or end (gamma > 1), typically used to \"even\" the lightness gradient. Default is 1.\n\t * @example chroma.scale('YlGn').gamma(0.5)\n\t * @example chroma.scale('YlGn').gamma(1)\n\t * @example chroma.scale('YlGn').gamma(2)\n\t */\n\tpublic gamma(gamma: number): this\n\tpublic gamma(gamma?: number) {\n\t\tif (undefined === gamma) {\n\t\t\treturn this._gamma\n\t\t}\n\t\tthis._gamma = gamma\n\t\treturn this\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _at(t: number) {\n\t\tconst c = this._color(t)\n\t\treturn this._out ? c[this._out]() : c\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic _init(colorsOrFunction: Color[] | ((t: number) => Color)) {\n\t\tthis._colors = colorsOrFunction\n\t\tif (\"function\" != typeof colorsOrFunction) {\n\t\t\tthis._pos = colorsOrFunction.map((_, i) => i / (colorsOrFunction.length - 1))\n\t\t}\n\t\tthis._mode = \"rgb\"\n\t\tthis.domain(0, 1)\n\t\tthis._paddingLeft = 0\n\t\tthis._paddingRight = 0\n\t\tthis._correctLightness = false\n\t\tthis._cache = new Map()\n\t\tthis._gamma = 1\n\t}\n\n\tprivate _getClass(value: number) {\n\t\treturn this._classes!.findIndex((cls) => value <= cls) - 1\n\t}\n\n\tprivate _color(val: number, bypassMap = false) {\n\t\tlet t\n\t\tif (!bypassMap) {\n\t\t\tconst min = this._min,\n\t\t\t\tmax = this._max\n\t\t\tif (this._classes && this._classes.length > 2) {\n\t\t\t\tconst c = this._getClass(val)\n\t\t\t\tt = c / (this._classes.length - 2)\n\t\t\t} else if (max !== min) {\n\t\t\t\tt = (val - min) / (max - min)\n\t\t\t} else {\n\t\t\t\tt = 1\n\t\t\t}\n\t\t\tif (this._correctLightness) {\n\t\t\t\tt = this._tCorrectedLightness(t)\n\t\t\t}\n\t\t} else {\n\t\t\tt = val\n\t\t}\n\t\tt = t ** this._gamma\n\t\tt = (this._paddingLeft + t) / (1 + this._paddingLeft + this._paddingRight)\n\t\t//\tt = this._paddingLeft + t * (1 - this._paddingLeft - this._paddingRight)\n\t\tt = clamp(t, 0, 1)\n\t\tconst tHash = t\n\t\tconst cacheResult = this._cache && this._cache.get(tHash)\n\t\tif (cacheResult) {\n\t\t\treturn cacheResult\n\t\t} else {\n\t\t\tlet col: Color\n\t\t\tif (Array.isArray(this._colors)) {\n\t\t\t\tfor (let i = 0; i < this._pos!.length; i++) {\n\t\t\t\t\tconst p = this._pos![i]\n\t\t\t\t\tif (t <= p) {\n\t\t\t\t\t\tcol = this._colors[i]\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tif (t >= p && i == this._pos!.length - 1) {\n\t\t\t\t\t\tcol = this._colors[i]\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tif (t > p && t < this._pos![i + 1]) {\n\t\t\t\t\t\tt = (t - p) / (this._pos![i + 1] - p)\n\t\t\t\t\t\tcol = mix(this._colors[i], this._colors[i + 1], t, this._mode)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcol = this._colors(t)\n\t\t\t}\n\t\t\tif (this._cache) {\n\t\t\t\t// tslint:disable-next-line\n\t\t\t\tthis._cache.set(tHash, col!)\n\t\t\t}\n\t\t\t// tslint:disable-next-line\n\t\t\treturn col!\n\t\t}\n\t}\n\tprivate _tCorrectedLightness(t0_1: number) {\n\t\tconst L0 = this._color(0, true).lab()[0]\n\t\tconst L1 = this._color(1, true).lab()[0]\n\t\tconst L_ideal = lerp(L0, L1, t0_1)\n\t\treturn bisect((t) => this._color(t, true).lab()[0] - L_ideal, 0, 1, 8)\n\t}\n\tprivate _resetCache() {\n\t\tif (this._cache) this._cache.clear()\n\t}\n}\n\nexport namespace scales {\n\t/**\n\t * @example chroma.scales.cool()\n\t */\n\texport function cool() {\n\t\treturn scale([hsl(180, 1, 0.9), hsl(250, 0.7, 0.4)])\n\t}\n\n\t/**\n\t * @example chroma.scales.hot()\n\t */\n\texport function hot() {\n\t\treturn scale([\"#000\", \"#f00\", \"#ff0\", \"#fff\"]).mode(\"rgb\")\n\t}\n}\n\n/**\n * Computes the WCAG contrast ratio between two colors. A minimum contrast of 4.5:1\n * [is recommended](http://www.w3.org/TR/WCAG20-TECHS/G18.html) to ensure that text is still readable against a\n * background color.\n *\n * @param a\n * @param b\n */\nexport function contrast(a: Chromable, b: Chromable) {\n\tconst l1 = color(a).luminance()\n\tconst l2 = color(b).luminance()\n\tif (l1 > l2) {\n\t\treturn (l1 + 0.05) / (l2 + 0.05)\n\t} else {\n\t\treturn (l2 + 0.05) / (l1 + 0.05)\n\t}\n}\n\n/**\n * Compute the [euclidean distance](https://en.wikipedia.org/wiki/Euclidean_distance#Three_dimensions) between two\n * colors in a given color space.\n * @param a First color.\n * @param b Second color.\n * @param mode The color space in which to compute the distance. Defaults to \"lab\".\n * @example chroma.distance('#fff', '#ff0', 'rgb')\n * @example chroma.distance('#fff', '#f0f', 'rgb')\n * @example chroma.distance('#fff', '#ff0')\n * @example chroma.distance('#fff', '#f0f')\n */\nexport function distance(a: Chromable, b: Chromable, mode: ColorMode = \"lab\") {\n\tconst l1 = color(a)[mode]()\n\tconst l2 = color(b)[mode]()\n\tconst channelDifferences = l1.map((channelValue: number, channelIndex: number) => channelValue - l2[channelIndex])\n\treturn hypot(...channelDifferences)\n}\n\n/**\n * Computes color difference as developed by the Colour Measurement Committee of the Society of Dyers and Colourists\n * (CMC) in 1984. The implementation is adapted from Bruce Lindbloom. The parameters L and C are weighting factors\n * for lightness and chromaticity.\n * @param reference\n * @param sample\n * @param L\n * @param C\n * @example [r = '#ededee', s = '#edeeed', chroma.deltaE(r, s)]\n * @example [r = '#ececee', s = '#eceeec', chroma.deltaE(r, s)]\n * @example [r = '#e9e9ee', s = '#e9eee9', chroma.deltaE(r, s)]\n * @example [r = '#e4e4ee', s = '#e4eee4', chroma.deltaE(r, s)]\n * @example [r = '#e0e0ee', s = '#e0eee0', chroma.deltaE(r, s)]\n */\nexport function deltaE(reference: Chromable, sample: Chromable, L = 1, C = 1) {\n\tconst [L1, a1, b1] = color(reference).lab()\n\tconst [L2, a2, b2] = color(sample).lab()\n\tconst c1 = sqrt(a1 * a1 + b1 * b1)\n\tconst c2 = sqrt(a2 * a2 + b2 * b2)\n\tconst sl = L1 < 16.0 ? 0.511 : (0.040975 * L1) / (1.0 + 0.01765 * L1)\n\tconst sc = (0.0638 * c1) / (1.0 + 0.0131 * c1) + 0.638\n\tconst h1 = norm360(c1 < 0.000001 ? 0.0 : atan2(b1, a1) * RAD2DEG)\n\tconst t =\n\t\th1 >= 164.0 && h1 <= 345.0\n\t\t\t? 0.56 + abs(0.2 * cos((h1 + 168.0) * DEG2RAD))\n\t\t\t: 0.36 + abs(0.4 * cos((h1 + 35.0) * DEG2RAD))\n\tconst c4 = c1 * c1 * c1 * c1\n\tconst f = sqrt(c4 / (c4 + 1900.0))\n\tconst sh = sc * (f * t + 1.0 - f)\n\tconst delL = L1 - L2\n\tconst delC = c1 - c2\n\tconst delA = a1 - a2\n\tconst delB = b1 - b2\n\tconst dH2 = delA * delA + delB * delB - delC * delC\n\tconst v1 = delL / (L * sl)\n\tconst v2 = delC / (C * sc)\n\tconst v3 = sh\n\treturn sqrt(v1 * v1 + v2 * v2 + dH2 / (v3 * v3))\n}\ntype DataInfo = {\n\tmin: number\n\tmax: number\n\tsum: number\n\tvalues: number[]\n\tcount: number\n\tdomain: [number, number]\n\tlimits(mode: LimitsMode, num: number): number[]\n}\nexport function analyze(data: number[]): DataInfo {\n\tconst r: DataInfo = {\n\t\tmin: Infinity,\n\t\tmax: -Infinity,\n\t\tsum: 0,\n\t\tvalues: [] as number[],\n\t\tcount: 0,\n\t} as DataInfo\n\tfunction add(val: number) {\n\t\tif (val != undefined && !isNaN(val)) {\n\t\t\tr.values.push(val)\n\t\t\tr.sum += val\n\t\t\tif (val < r.min) r.min = val\n\t\t\tif (val > r.max) r.max = val\n\t\t\tr.count += 1\n\t\t}\n\t}\n\tdata.forEach((val) => add(val))\n\tr.domain = [r.min, r.max]\n\tr.limits = function (mode, num) {\n\t\treturn limits(this, mode, num)\n\t}\n\treturn r\n}\n\ntype LimitsMode = \"c\" | \"e\" | \"q\" | \"l\" | \"k\"\nexport function limits(data: number[] | DataInfo, mode: LimitsMode = \"e\", num = 7): number[] {\n\tconst info = Array.isArray(data) ? analyze(data) : data\n\tconst { min, max, values } = info\n\tvalues.sort((a, b) => a - b)\n\tif (num == 1) {\n\t\treturn [min, max]\n\t}\n\tif (mode.startsWith(\"c\")) {\n\t\treturn [min, max]\n\t} else if (mode.startsWith(\"e\")) {\n\t\treturn Array.from({ length: num + 1 }, (_, i) => lerp(min, max, i / num))\n\t} else if (mode.startsWith(\"l\")) {\n\t\tif (min <= 0) {\n\t\t\tthrow new Error(\"Logarithmic scales are only possible for values > 0\")\n\t\t}\n\t\tconst min_log = Math.LOG10E * log(min)\n\t\tconst max_log = Math.LOG10E * log(max)\n\t\treturn Array.from({ length: num + 1 }, (_, i) => 10 ** lerp(min_log, max_log, i / num))\n\t} else if (mode.startsWith(\"q\")) {\n\t\treturn Array.from({ length: num + 1 }, (_, i) => {\n\t\t\tconst p = ((values.length - 1) * i) / num\n\t\t\tconst pb = floor(p)\n\t\t\treturn pb == p ? values[pb] : lerp(values[pb], values[pb + 1], p - pb)\n\t\t})\n\t} else if (mode.startsWith(\"k\")) {\n\t\t// implementation based on\n\t\t// http://code.google.com/p/figue/source/browse/trunk/figue.js#336\n\t\t// simplified for 1-d input values\n\t\tconst n = values.length\n\t\tconst assignments = new Array(n)\n\t\tconst clusterSizes = new Array(num)\n\t\tlet repeat = true\n\t\tlet nb_iters = 0\n\t\tlet centroids = Array.from({ length: num + 1 }, (_, i) => lerp(min, max, i / num))\n\t\tdo {\n\t\t\t// assignment step\n\t\t\tclusterSizes.fill(0)\n\t\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\t\tconst value = values[i]\n\t\t\t\tconst minDistIndex = indexOfMax(centroids, (c) => -abs(c - value))\n\t\t\t\tclusterSizes[minDistIndex]++\n\t\t\t\tassignments[i] = minDistIndex\n\t\t\t}\n\n\t\t\t// update centroids step\n\t\t\tconst newCentroids = new Array(num).fill(0)\n\t\t\tfor (let i = 0; i < assignments.length; i++) {\n\t\t\t\tconst cluster = assignments[i]\n\t\t\t\tnewCentroids[cluster] += values[i]\n\t\t\t}\n\t\t\tfor (let j = 0; j < newCentroids.length; j++) {\n\t\t\t\tnewCentroids[j] /= clusterSizes[j]\n\t\t\t}\n\n\t\t\t// check convergence\n\t\t\trepeat = newCentroids.some((nc, j) => nc != centroids[j])\n\t\t\tcentroids = newCentroids\n\t\t} while (nb_iters++ < 200 && repeat)\n\n\t\t// finished k-means clustering\n\t\t// the next part is borrowed from gabrielflor.it\n\t\tconst kClusters: number[][] = Array.from({ length: num }, () => [])\n\t\tfor (let i = 0; i < assignments.length; i++) {\n\t\t\tconst cluster = assignments[i]\n\t\t\tkClusters[cluster].push(values[i])\n\t\t}\n\t\tconst tmpKMeansBreaks = []\n\t\tfor (const kCluster of kClusters) {\n\t\t\ttmpKMeansBreaks.push(kCluster[0], kCluster[kCluster.length - 1])\n\t\t}\n\t\ttmpKMeansBreaks.sort((a, b) => a - b)\n\n\t\tconst limits = []\n\t\tlimits.push(tmpKMeansBreaks[0])\n\t\tfor (let i = 1; i < tmpKMeansBreaks.length; i += 2) {\n\t\t\tconst v = tmpKMeansBreaks[i]\n\t\t\tif (!isNaN(v) && limits.indexOf(v) == -1) {\n\t\t\t\tlimits.push(v)\n\t\t\t}\n\t\t}\n\t\treturn limits\n\t} else {\n\t\tthrow new Error(\"unknown mode\")\n\t}\n}\n\nconst interpolators: { [K in InterpolationMode]?: (color1: Color, color2: Color, f: number, mode: K) => Color } = {}\n\n// const _guess_formats: { p: number; test: (args: any[]) => ColorFormat | undefined }[] = []\nconst _input: {\n\t[mode: string]: (...args: any[]) => RGB | RGBA\n} = {}\n\nfunction linear_interpolator(col1: Color, col2: Color, f: number, m: ColorMode) {\n\tconst xyz1 = col1[m]()\n\tconst xyz2 = col2[m]()\n\treturn guess(\n\t\t[\n\t\t\tlerp(xyz1[0], xyz2[0], f),\n\t\t\tlerp(xyz1[1], xyz2[1], f),\n\t\t\tlerp(xyz1[2], xyz2[2], f),\n\t\t\tlerp(col1.alpha(), col2.alpha(), f),\n\t\t],\n\t\tm,\n\t)\n}\ninterpolators.xyz = interpolators.rgb = interpolators.lab = linear_interpolator\n\ninterpolators.num = function (col1, col2, f) {\n\tconst n1 = col1.num()\n\tconst n2 = col2.num()\n\treturn num(lerp(n1, n2, f))\n}\n\ninterpolators.lrgb = function (col1, col2, f) {\n\tconst [r1, g1, b1, a1] = col1.rgba(false, false)\n\tconst [r2, g2, b2, a2] = col2.rgba(false, false)\n\treturn new Color(\n\t\tsqrt(r1 ** 2 * (1 - f) + r2 ** 2 * f),\n\t\tsqrt(g1 ** 2 * (1 - f) + g2 ** 2 * f),\n\t\tsqrt(b1 ** 2 * (1 - f) + b2 ** 2 * f),\n\t\tlerp(a1, a2, f),\n\t)\n}\n\nfunction _bezier(chromables: Chromable[]): (t: number) => Color {\n\tconst colors = chromables.map((c) => color(c))\n\tconst [lab0, lab1, lab2, lab3] = colors.map((c) => c.lab())\n\tif (2 == chromables.length) {\n\t\t// linear interpolation\n\t\treturn (t) => {\n\t\t\treturn lab([0, 1, 2].map((i) => lerp(lab0[i], lab1[i], t)) as LAB)\n\t\t}\n\t} else if (3 == chromables.length) {\n\t\t// quadratic bezier interpolation\n\t\tconst bezier2 = (p0: number, p1: number, p2: number, t: number) =>\n\t\t\t(1 - t) ** 2 * p0 + 2 * (1 - t) * t * p1 + t ** 2 * p2\n\t\treturn (t) => lab([0, 1, 2].map((i) => bezier2(lab0[i], lab1[i], lab2[i], t)) as LAB)\n\t} else if (4 == chromables.length) {\n\t\t// cubic bezier interpolation\n\t\tconst bezier3 = (p0: number, p1: number, p2: number, p3: number, t: number) =>\n\t\t\t(1 - t) ** 3 * p0 + 3 * (1 - t) ** 2 * t * p1 + 3 * (1 - t) * t ** 2 * p2 + t ** 3 * p3\n\t\treturn (t) => lab([0, 1, 2].map((i) => bezier3(lab0[i], lab1[i], lab2[i], lab3[i], t)) as LAB)\n\t} else if (5 == chromables.length) {\n\t\tconst I0 = _bezier(colors.slice(0, 3))\n\t\tconst I1 = _bezier(colors.slice(2, 5))\n\t\treturn (t) => (t < 0.5 ? I0(t * 2) : I1((t - 0.5) * 2))\n\t} else throw new Error()\n}\n\nfunction guess(args: any[], mode?: ColorFormat): Color {\n\tif (Array.isArray(args[0])) args = args[0]\n\tif (!mode) {\n\t\tif (args.length == 1 && args[0] in w3cx11) {\n\t\t\tmode = \"name\"\n\t\t} else if (args.length == 1 && \"string\" == typeof args[0]) {\n\t\t\tmode = \"css\"\n\t\t} else if (args.length == 3) {\n\t\t\tmode = \"rgb\"\n\t\t} else if (args.length == 4 && \"number\" == typeof args[3] && args[3] >= 0 && args[3] <= 1) {\n\t\t\tmode = \"rgb\"\n\t\t} else if (args.length == 1 && \"number\" == typeof args[0] && args[0] >= 0 && args[0] <= 0xffffff) {\n\t\t\tmode = \"num\"\n\t\t} else throw new Error(\"could not guess mode. args \" + JSON.stringify(args))\n\t}\n\tconst channels = _input[mode](...args)\n\treturn new Color(channels[0], channels[1], channels[2], undefined !== channels[3] ? channels[3] : 1)\n}\n\nfunction _average_lrgb(colors: Color[]) {\n\tlet rSquareSum = 0,\n\t\tgSquareSum = 0,\n\t\tbSquareSum = 0,\n\t\talphaSum = 0\n\tfor (const col of colors) {\n\t\tconst [r, g, b, alpha] = col.rgba(false, false)\n\t\trSquareSum += r ** 2\n\t\tgSquareSum += g ** 2\n\t\tbSquareSum += b ** 2\n\t\talphaSum += alpha\n\t}\n\treturn new Color(\n\t\tsqrt(rSquareSum) / colors.length,\n\t\tsqrt(gSquareSum) / colors.length,\n\t\tsqrt(bSquareSum) / colors.length,\n\t\talphaSum / colors.length,\n\t)\n}\n\nfunction hex2rgb(hex: string): RGBA {\n\tlet m\n\tif ((m = hex.match(/^#?([A-F\\d]{2})([A-F\\d]{2})([A-F\\d]{2})([A-F\\d]{2})?$/i))) {\n\t\treturn [parseInt(m[1], 16), parseInt(m[2], 16), parseInt(m[3], 16), m[4] ? parseInt(m[4], 16) / 255 : 1]\n\t} else if ((m = hex.match(/^#?([A-F\\d])([A-F\\d])([A-F\\d])([A-F\\d])?$/i))) {\n\t\treturn [\n\t\t\tparseInt(m[1], 16) * 0x11,\n\t\t\tparseInt(m[2], 16) * 0x11,\n\t\t\tparseInt(m[3], 16) * 0x11,\n\t\t\tm[4] ? (parseInt(m[4], 16) * 0x11) / 255 : 1,\n\t\t]\n\t}\n\tthrow new Error(\"invalid hex color: \" + hex)\n}\n// color mode, i.e. representation as array of number\nexport type ColorMode = \"rgb\" | \"cmyk\" | \"lab\" | \"hsv\" | \"hsi\" | \"hcg\" | \"hsl\" | \"gl\" | \"lch\" | \"xyz\"\nexport type InterpolationMode = \"rgb\" | \"lab\" | \"hsv\" | \"hsi\" | \"hcg\" | \"hsl\" | \"lch\" | \"xyz\" | \"lrgb\" | \"num\"\nexport type ColorFormat = ColorMode | \"hex\" | \"num\" | \"name\" | \"kelvin\" | \"css\"\n/**\n * CMYK color space\n * @see https://en.wikipedia.org/wiki/cmyk_color_model\n * [cyan, magenta, yellow, alpha1]\n */\ntype CMYK = [number, number, number, number]\n/**\n * WebGL colors. Like RGB, but floats in [0; 1] instead of 0-255.\n * [red255, green255, blue255, alpha1]\n */\ntype GL = [number, number, number, number]\n/**\n * Red, green, blue ranging from 0-255.\n * Can be floats and outside the above range internally.\n */\ntype RGB = [number, number, number]\n/**\n * RGB plus alpha ranging from 0-1\n * [red255, green255, blue255, alpha1]\n */\ntype RGBA = [number, number, number, number]\n/**\n * CIELAB color space\n * [lightness, A*, B*]\n * @see https://en.wikipedia.org/wiki/CIELAB_color_space\n */\ntype LAB = [number, number, number]\n/**\n * Cylindrical representation of CIELAB\n * @see https://en.wikipedia.org/wiki/CIELAB_color_space#Cylindrical_representation:_CIELCh_or_CIEHLC\n *\n */\ntype LCH = [number, number, number]\n/**\n * @see https://en.wikipedia.org/wiki/HSL_and_HSV\n * [hueDegrees, saturation1, lightness1]\n */\ntype HSL = [number, number, number]\n/**\n * @see https://en.wikipedia.org/wiki/HSL_and_HSV\n * [hueDegrees, saturation1, value1]\n */\ntype HSV = [number, number, number]\n/**\n * @see https://en.wikipedia.org/w/index.php?title=HSI_color_space&redirect=no\n * [hueDegrees, saturation1, intensity1]\n */\ntype HSI = [number, number, number]\ntype XYZ = [number, number, number]\n/**\n * HCG Color Model\n * See https://github.com/acterhd/hcg-color\n * A color value in the HCG format is an array of three numbers [h, c, g], where\n * `h` is the hue as an angle in degrees [0; 360)\n * `c` is the chroma value in [0; 1]\n * `g` is the gray value in [0; 1]\n */\ntype HCG = [number, number, number]\n\n// interface ColorModes {\n// \tcmyk: CMYK\n// \tgl: GL\n// \trgb: RGB\n// \trgba: RGBA\n// \tlab: LAB\n// \thsl: HSL\n// \thsv: HSV\n// \thsi: HSI\n// \txyz: XYZ\n// \thcg: HCG\n// \tlch: LCH\n// \thex: string\n// \tnum: number\n// \tname: string\n// \tkelvin: number\n// \tcss: string\n// }\nfunction rgb2hex(r255: number, g255: number, b255: number, a1: number, mode: \"rgb\" | \"rgba\" | \"argb\" = \"rgb\") {\n\tr255 = clamp(round(r255), 0, 255)\n\tg255 = clamp(round(g255), 0, 255)\n\tb255 = clamp(round(b255), 0, 255)\n\tconst rgb = (r255 << 16) | (g255 << 8) | b255\n\tconst rgbString = rgb.toString(16).padStart(6, \"0\")\n\tconst alphaString = round(clamp(a1) * 255)\n\t\t.toString(16)\n\t\t.padStart(2, \"0\")\n\treturn \"#\" + (\"argb\" == mode ? alphaString + rgbString : \"rgba\" == mode ? rgbString + alphaString : rgbString)\n}\n\n_input.lrgb = _input.rgb\n\n_input.hex = hex2rgb\n_input.hsl = hsl2rgb\nfunction norm360(degrees: number) {\n\treturn ((degrees % 360) + 360) % 360\n}\n\n_input.hsv = hsv2rgb\n\nfunction num2rgb(num: number): RGBA {\n\tif (!(\"number\" == typeof num && num >= 0 && num <= 0xffffff)) {\n\t\tthrow new Error(\"unknown num color: \" + num)\n\t}\n\tconst r = num >> 16\n\tconst g = (num >> 8) & 0xff\n\tconst b = num & 0xff\n\treturn [r, g, b, 1]\n}\n\nfunction rgb2num(r255: number, g255: number, b255: number, a1: number = 1, mode: \"rgb\" | \"rgba\" | \"argb\" = \"rgb\") {\n\tconst rgbNum = (round(r255) << 16) | (round(g255) << 8) | round(b255)\n\tif (\"rgb\" === mode) {\n\t\treturn rgbNum\n\t} else if (\"rgba\" === mode) {\n\t\treturn (rgbNum << 8) | (round(a1 * 255) << 24)\n\t} else {\n\t\treturn (round(a1 * 255) << 24) | rgbNum\n\t}\n}\n\n_input.num = num2rgb\n\nconst WS = \"\\\\s*\"\nconst FLOAT = \"([+-]?(?:\\\\d*\\\\.?)?\\\\d+(?:[eE][+-]?\\\\d+)?)\"\nconst CSS_RGB_REGEX = new RegExp(\n\t[\"^rgba?\\\\(\", FLOAT, \",\", FLOAT, \",\", FLOAT, \"(?:,\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS),\n\t\"i\",\n)\nconst CSS_RGB_WS_REGEX = new RegExp([\"^rgba?\\\\(\", FLOAT, FLOAT, FLOAT, \"(?:/\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS), \"i\")\nconst CSS_RGB_PERCENT_REGEX = new RegExp(\n\t[\"^rgba?\\\\(\", FLOAT + \"%\", \",\", FLOAT + \"%\", \",\", FLOAT + \"%\", \"(?:,\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS),\n\t\"i\",\n)\nconst CSS_RGB_WS_PERCENT_REGEX = new RegExp(\n\t[\"^rgba?\\\\(\", FLOAT + \"%\", FLOAT + \"%\", FLOAT + \"%\", \"(?:/\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS),\n\t\"i\",\n)\nconst CSS_HSL_REGEX = new RegExp(\n\t[\"^hsla?\\\\(\", FLOAT + \"(deg|rad|turn)?\", \",\", FLOAT + \"%\", \",\", FLOAT + \"%\", \"(?:,\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(\n\t\tWS,\n\t),\n\t\"i\",\n)\nconst CSS_HSL_WS_REGEX = new RegExp(\n\t[\"^hsla?\\\\(\", FLOAT + \"(deg|rad|turn)?\\\\s+\" + FLOAT + \"%\", FLOAT + \"%\", \"(?:/\", FLOAT + \"(%)?\", \")?\\\\)$\"].join(WS),\n\t\"i\",\n)\nfunction css2rgb(css: string): RGBA {\n\tif (w3cx11 && w3cx11.hasOwnProperty(css)) {\n\t\treturn num2rgb((w3cx11 as any)[css.toLowerCase()])\n\t}\n\tlet m\n\tif ((m = css.match(CSS_RGB_REGEX) || css.match(CSS_RGB_WS_REGEX))) {\n\t\treturn [\n\t\t\tclamp(+m[1], 0, 255),\n\t\t\tclamp(+m[2], 0, 255),\n\t\t\tclamp(+m[3], 0, 255),\n\t\t\tm[4] ? clamp(m[5] ? +m[4] / 100 : +m[4]) : 1,\n\t\t]\n\t} else if ((m = css.match(CSS_RGB_PERCENT_REGEX) || css.match(CSS_RGB_WS_PERCENT_REGEX))) {\n\t\treturn [\n\t\t\tclamp(+m[1] / 100) * 255,\n\t\t\tclamp(+m[2] / 100) * 255,\n\t\t\tclamp(+m[3] / 100) * 255,\n\t\t\tm[4] ? clamp(m[5] ? +m[4] / 100 : +m[4]) : 1,\n\t\t]\n\t} else if ((m = css.match(CSS_HSL_REGEX) || css.match(CSS_HSL_WS_REGEX))) {\n\t\tconst CONVERSION = { deg: 1, rad: RAD2DEG, turn: 360 }\n\t\tconst angleUnit = (m[2] ? m[2].toLowerCase() : \"deg\") as \"deg\" | \"rad\" | \"turn\"\n\t\treturn hsl2rgb(\n\t\t\t(((+m[1] * CONVERSION[angleUnit]) % 360) + 360) % 360,\n\t\t\tclamp(+m[3] / 100),\n\t\t\tclamp(+m[4] / 100),\n\t\t\tm[5] ? clamp(m[6] ? +m[5] / 100 : +m[5]) : 1,\n\t\t)\n\t} else {\n\t\treturn hex2rgb(css)\n\t}\n}\n\nfunction rgb2css(r: number, g: number, b: number, a = 1) {\n\tif (a >= 1) {\n\t\treturn \"rgb(\" + [r, g, b].map(round).join(\",\") + \")\"\n\t} else {\n\t\treturn \"rgba(\" + [r, g, b].map(round).join(\",\") + \",\" + a + \")\"\n\t}\n}\n\nfunction rnd(a: any) {\n\treturn round(a * 100) / 100\n}\n\nfunction hsl2css([h, s, l]: HSL, alpha: number) {\n\tconst mode = alpha < 1 ? \"hsla\" : \"hsl\"\n\treturn (\n\t\tmode +\n\t\t\"(\" +\n\t\trnd(h) +\n\t\t\",\" +\n\t\trnd(s * 100) +\n\t\t\"%\" +\n\t\t\",\" +\n\t\trnd(l * 100) +\n\t\t\"%\" +\n\t\t(\"hsla\" == mode ? \",\" + rnd(alpha) : \"\") +\n\t\t\")\"\n\t)\n}\n\n_input.css = css2rgb\n\n_input.name = function (name) {\n\treturn num2rgb((w3cx11 as any)[name])\n}\n\nfunction lch2lab(l: number, c: number, hueDegrees: number): LAB {\n\t/*\n    Convert from a qualitative parameter h and a quantitative parameter l to a 24-bit pixel.\n    These formulas were invented by David Dalrymple to obtain maximum contrast without going\n    out of gamut if the parameters are in the range 0-1.\n\n    A saturation multiplier was added by Gregor Aisch\n     */\n\treturn [l, cos(hueDegrees * DEG2RAD) * c, sin(hueDegrees * DEG2RAD) * c]\n}\n\nfunction lch2rgb(l: number, c: number, hDegrees: number, alpha1 = 1): RGBA {\n\tconst [, a, b] = lch2lab(l, c, hDegrees)\n\treturn cielab2rgb(l, a, b, alpha1)\n}\n\nfunction lab2lch(l: number, a: number, b: number): LCH {\n\tconst c = hypot(a, b)\n\tconst h = (atan2(b, a) * RAD2DEG + 360) % 360\n\treturn [l, c, h]\n}\n\nfunction rgb2lch(r255: number, g255: number, b255: number) {\n\tconst [l, a, b2] = rgb2lab(r255, g255, b255)\n\treturn lab2lch(l, a, b2)\n}\n\n_input.lch = lch2rgb\n\nfunction rgb2cmyk(r255: number, g255: number, b255: number): CMYK {\n\tr255 /= 255\n\tg255 /= 255\n\tb255 /= 255\n\tconst k = 1 - max(r255, g255, b255)\n\tif (1 == k) return [0, 0, 0, 1]\n\tconst c = (1 - r255 - k) / (1 - k)\n\tconst m = (1 - g255 - k) / (1 - k)\n\tconst y = (1 - b255 - k) / (1 - k)\n\treturn [c, m, y, k]\n}\n\nfunction cmyk2rgb(c1: number, m1: number, y1: number, k1: number, alpha1 = 1): RGBA {\n\tif (k1 == 1) {\n\t\treturn [0, 0, 0, alpha1]\n\t}\n\tconst r255 = 255 * (1 - c1) * (1 - k1)\n\tconst g255 = 255 * (1 - m1) * (1 - k1)\n\tconst b255 = 255 * (1 - y1) * (1 - k1)\n\treturn [r255, g255, b255, alpha1]\n}\n\n_input.cmyk = cmyk2rgb\n\n_input.gl = function (r: number, g: number, b: number, a: number = 1): RGBA {\n\treturn [r * 255, g * 255, b * 255, a]\n}\n\n//function rgb2luminance(r: number, g: number, b: number) {\n//\t// https://en.wikipedia.org/wiki/Relative_luminance\n//\tconst [, Y] = rgb2xyz(r, g, b)\n//\treturn Y\n//}\n\nfunction rgbChannel2RgbLinear(x255: number) {\n\tconst x1 = x255 / 255\n\t// http://entropymine.com/imageworsener/srgbformula/\n\tif (x1 <= 0.04045) {\n\t\treturn x1 / 12.92\n\t} else {\n\t\treturn ((x1 + 0.055) / 1.055) ** 2.4\n\t}\n}\nfunction rgbLinearChannel2Rgb(xLinear1: number) {\n\tif (xLinear1 <= 0.0031308) {\n\t\treturn 255 * (12.92 * xLinear1)\n\t} else {\n\t\treturn 255 * ((1 + 0.055) * xLinear1 ** (1 / 2.4) - 0.055)\n\t}\n}\n\nfunction kelvin2rgb(kelvin: number): RGB {\n\tconst t = kelvin / 100\n\tlet r, g, b\n\tif (t < 66) {\n\t\tr = 255\n\t\tg = -155.25485562709179 - 0.44596950469579133 * (t - 2) + 104.49216199393888 * log(t - 2)\n\t\tb = t < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (t - 10) + 115.67994401066147 * log(t - 10)\n\t} else {\n\t\tr = 351.97690566805693 + 0.114206453784165 * (t - 55) - 40.25366309332127 * log(t - 55)\n\t\tg = 325.4494125711974 + 0.07943456536662342 * (t - 50) - 28.0852963507957 * log(t - 50)\n\t\tb = 255\n\t}\n\treturn [r, g, b]\n}\n\n_input.rgb = (...args: number[]) => args as RGB\n\nfunction rgb2kelvin(r255: number, g255: number, b255: number) {\n\tconsole.log(b255 - r255)\n\tif (g255 + b255 < 158.61) {\n\t\tconsole.log(\"0 < t < 20\")\n\t\t// calc from green\n\t\treturn round(\n\t\t\tnewtonIterate1d(\n\t\t\t\t(t) => g255 - (-155.25485562709179 - 0.44596950469579133 * (t - 2) + 104.49216199393888 * log(t - 2)),\n\t\t\t\t15,\n\t\t\t\t4,\n\t\t\t) * 100,\n\t\t)\n\t\treturn (Math.E ** ((g255 + 155.25485562709179 + 0.44596950469579133 * (15 - 2)) / 104.49216199393888) + 2) * 100\n\t} else if (b255 - r255 < 0) {\n\t\tconsole.log(\"20 < t < 66\")\n\t\treturn round(\n\t\t\tnewtonIterate1d(\n\t\t\t\t(t) => b255 - (-254.76935184120902 + 0.8274096064007395 * (t - 10) + 115.67994401066147 * log(t - 10)),\n\t\t\t\t43,\n\t\t\t\t4,\n\t\t\t) * 100,\n\t\t)\n\t\treturn (\n\t\t\t(Math.E ** ((b255 + 254.76935184120902 - 0.8274096064007395 * (43 - 10)) / 115.67994401066147) + 10) * 100\n\t\t)\n\t} else {\n\t\tconsole.log(\"0 < t < 400, start= \" + (-1.4 * (r255 + g255) + 755))\n\t\treturn round(\n\t\t\tnewtonIterate1d(\n\t\t\t\t(t) => r255 - (351.97690566805693 + 0.114206453784165 * (t - 55) - 40.25366309332127 * log(t - 55)),\n\t\t\t\t-1.4 * (r255 + g255) + 755,\n\t\t\t\t8,\n\t\t\t) * 100,\n\t\t)\n\t\treturn ((r255 / 329.698727446) ** (1 / -0.1332047592) + 60) * 100\n\t}\n\treturn newtonIterate1d(\n\t\t(k) => {\n\t\t\tconst eps = 1e-9\n\t\t\tconst [kr, kg, kb] = kelvin2rgb(k)\n\t\t\tconst [kr2, kg2, kb2] = kelvin2rgb(k + eps)\n\t\t\tconst dkr = (kr2 - kr) / eps,\n\t\t\t\tdkg = (kg2 - kg) / eps,\n\t\t\t\tdkb = (kb2 - kb) / eps\n\t\t\treturn dkr * (kr - r255) + dkg * (kg - g255) + dkb * (kb - b255)\n\n\t\t\treturn kb / kr - b255 / r255\n\t\t},\n\t\t//1000,\n\t\t//40000,\n\t\tMath.E ** ((b255 / r255 + 2.5) / 0.4),\n\t\t20,\n\t\t//1e-6,\n\t)\n\tlet maxTemp = 40000\n\tlet minTemp = 1000\n\tconst eps = 0.4\n\tlet temp: number = 0\n\tlet rgb\n\twhile (maxTemp - minTemp > eps) {\n\t\ttemp = (maxTemp + minTemp) * 0.5\n\t\trgb = kelvin2rgb(temp)\n\t\tif (rgb[2] / rgb[0] >= b255 / r255) {\n\t\t\tmaxTemp = temp\n\t\t} else {\n\t\t\tminTemp = temp\n\t\t}\n\t}\n\treturn round(temp)\n}\n\n_input.temperature = _input.kelvin = _input.K = kelvin2rgb\n\nfunction blend_f(f: (c1: RGB, c2: RGB) => RGB) {\n\treturn function (bottom: Chromable, top: Chromable) {\n\t\tconst [r, g, b] = f(color(top).rgb(), color(bottom).rgb())\n\t\treturn rgb(r, g, b)\n\t}\n}\n\nfunction each(f: (a: number, b: number) => number) {\n\treturn function (c1: RGB, c2: RGB): RGB {\n\t\treturn c1.map((e, i) => f(e, c2[i])) as RGB\n\t}\n}\n\nfunction _screen(a: number, b: number) {\n\treturn 255 * (1 - (1 - a / 255) * (1 - b / 255))\n}\n\nfunction _overlay(a: number, b: number) {\n\tif (b < 128) {\n\t\treturn (2 * a * b) / 255\n\t} else {\n\t\treturn 255 * (1 - 2 * (1 - a / 255) * (1 - b / 255))\n\t}\n}\n\nfunction _burn(a: number, b: number) {\n\treturn 255 * (1 - (1 - b / 255) / (a / 255))\n}\n\nfunction _dodge(a: number, b: number) {\n\tif (a == 255) {\n\t\treturn 255\n\t}\n\treturn 255 * min(1, b / 255 / (1 - a / 255))\n}\n\n/**\n * r, g, b can be in any interval (0-1 or 0-255)\n * @param r\n * @param g\n * @param b\n */\nfunction rgb2hexhue(r: number, g: number, b: number) {\n\tconst m = min(r, g, b)\n\tconst M = max(r, g, b)\n\tconst delta = M - m\n\tlet hueTurnX6 // angle as value between 0 and 6\n\tif (0 == delta) {\n\t\thueTurnX6 = 0\n\t} else if (r == M) {\n\t\t// second term to make sure the value is > 0\n\t\thueTurnX6 = (g - b) / delta + (g < b ? 6 : 0)\n\t} else if (g == M) {\n\t\thueTurnX6 = 2 + (b - r) / delta\n\t} else {\n\t\thueTurnX6 = 4 + (r - g) / delta\n\t}\n\treturn [hueTurnX6 * 60, m, M]\n}\nfunction hcxm2rgb(hueDegrees: number, c1: number, x1: number, m1: number, alpha1: number): RGBA {\n\tconst m255 = m1 * 255\n\tconst cm255 = c1 * 255 + m255\n\tconst xm255 = x1 * 255 + m255\n\tif (hueDegrees < 60) {\n\t\treturn [cm255, xm255, m255, alpha1]\n\t} else if (hueDegrees < 120) {\n\t\treturn [xm255, cm255, m255, alpha1]\n\t} else if (hueDegrees < 180) {\n\t\treturn [m255, cm255, xm255, alpha1]\n\t} else if (hueDegrees < 240) {\n\t\treturn [m255, xm255, cm255, alpha1]\n\t} else if (hueDegrees < 300) {\n\t\treturn [xm255, m255, cm255, alpha1]\n\t} else {\n\t\treturn [cm255, m255, xm255, alpha1]\n\t}\n}\n\n/**\n * https://en.wikipedia.org/w/index.php?title=HSL_and_HSV&oldid=856714654#From_HSL\n */\nfunction hsl2rgb(hueDegrees: number, s1: number, l1: number, alpha1 = 1): RGBA {\n\thueDegrees = norm360(hueDegrees)\n\tconst c1 = (1 - abs(2 * l1 - 1)) * s1\n\treturn hcxm2rgb(hueDegrees, c1, c1 * (1 - abs(((hueDegrees / 60) % 2) - 1)), l1 - c1 / 2, alpha1)\n}\nfunction rgb2hsl(r255: number, g255: number, b255: number): HSL {\n\tconst [hue, min1, max1] = rgb2hexhue(r255 / 255, g255 / 255, b255 / 255)\n\tconst l1 = (max1 + min1) / 2\n\tlet s1: number\n\tif (max1 == min1) {\n\t\ts1 = 0\n\t} else {\n\t\ts1 = l1 < 0.5 ? (max1 - min1) / (max1 + min1) : (max1 - min1) / (2 - max1 - min1)\n\t}\n\treturn [hue, s1, l1]\n}\n\nfunction hsv2rgb(hueDegrees: number, s1: number, v1: number, alpha1: number = 1): RGBA {\n\thueDegrees = norm360(hueDegrees)\n\tconst c1 = v1 * s1\n\treturn hcxm2rgb(hueDegrees, c1, c1 * (1 - abs(((hueDegrees / 60) % 2) - 1)), v1 - c1, alpha1)\n}\n\nfunction rgb2hsv(r255: number, g255: number, b255: number): HSV {\n\tconst [hue, min255, max255] = rgb2hexhue(r255, g255, b255)\n\tconst delta255 = max255 - min255\n\tconst v1 = max255 / 255.0\n\tconst s1 = max255 == 0 ? 0 : delta255 / max255\n\treturn [hue, s1, v1]\n}\n\nfunction hcg2rgb(hueDegrees: number, c1: number, g1: number, alpha1 = 1): RGBA {\n\thueDegrees = norm360(hueDegrees)\n\tconst p = g1 * (1 - c1)\n\treturn hcxm2rgb(hueDegrees, c1, c1 * (1 - abs(((hueDegrees / 60) % 2) - 1)), p, alpha1)\n}\n\nfunction rgb2hcg(r255: number, g255: number, b255: number): HCG {\n\tconst [hue, min255, max255] = rgb2hexhue(r255, g255, b255)\n\tconst c1 = (max255 - min255) / 255\n\tconst _g1 = c1 < 1 ? min255 / 255 / (1 - c1) : 0\n\treturn [hue, c1, _g1]\n}\n\n_input.hcg = hcg2rgb\n\nfunction cielab2rgb(LStar100: number, aStar: number, bStar: number, alpha = 1): RGBA {\n\tconst [x, y, z] = cielab2xyz(LStar100, aStar, bStar)\n\treturn xyz2rgb(x, y, z, alpha)\n}\n\nfunction cielab2xyz(LStar100: number, aStar: number, bStar: number) {\n\tfunction fInv(t: number) {\n\t\tif (t > LAB_delta) {\n\t\t\treturn t ** 3\n\t\t} else {\n\t\t\treturn LAB_3DeltaPow2 * (t - 4 / 29)\n\t\t}\n\t}\n\treturn [\n\t\tLAB_Xn * fInv((LStar100 + 16) / 116 + aStar / 500),\n\t\tLAB_Yn * fInv((LStar100 + 16) / 116),\n\t\tLAB_Zn * fInv((LStar100 + 16) / 116 - bStar / 200),\n\t]\n}\nfunction xyz2cielab(x: number, y: number, z: number): LAB {\n\t// https://en.wikipedia.org/w/index.php?title=CIELAB_color_space&oldid=849576085#Forward_transformation\n\tfunction f(t: number) {\n\t\tif (t > LAB_deltaPow3) {\n\t\t\treturn cbrt(t)\n\t\t} else {\n\t\t\treturn t / LAB_3DeltaPow2 + 4 / 29\n\t\t}\n\t}\n\treturn [116 * f(y / LAB_Yn) - 16, 500 * (f(x / LAB_Xn) - f(y / LAB_Yn)), 200 * (f(y / LAB_Yn) - f(z / LAB_Zn))]\n}\n\n// const LAB_CONSTANTS = {\nconst LAB_Kn = 18\nconst LAB_Xn = 0.95047\nconst LAB_Yn = 1\nconst LAB_Zn = 1.08883\nconst LAB_delta = 0.206896552 // delta = 6 / 29\nconst LAB_3DeltaPow2 = 0.12841855 // 3 * delta ** 2\nconst LAB_deltaPow3 = 0.008856452 // delta ** 3\n// }\n\nfunction rgb2lab(r255: number, g255: number, b255: number): RGB {\n\tconst [x, y, z] = rgb2xyz(r255, g255, b255)\n\treturn xyz2cielab(x, y, z)\n}\n\nfunction rgb2xyz(r255: number, g255: number, b255: number): XYZ {\n\t// https://en.wikipedia.org/wiki/SRGB#The_reverse_transformation\n\tconst r1Linear = rgbChannel2RgbLinear(r255)\n\tconst g1Linear = rgbChannel2RgbLinear(g255)\n\tconst b1Linear = rgbChannel2RgbLinear(b255)\n\tconst X = 0.4124564 * r1Linear + 0.3575761 * g1Linear + 0.1804375 * b1Linear\n\tconst Y = 0.2126729 * r1Linear + 0.7151522 * g1Linear + 0.072175 * b1Linear\n\tconst Z = 0.0193339 * r1Linear + 0.119192 * g1Linear + 0.9503041 * b1Linear\n\treturn [X, Y, Z]\n}\nfunction xyz2rgb(X1: number, Y1: number, Z1: number, alpha1 = 1): RGBA {\n\t// https://en.wikipedia.org/wiki/SRGB#The_forward_transformation_(CIE_XYZ_to_sRGB)\n\tconst r1Linear = 3.2404542 * X1 - 1.5371385 * Y1 - 0.4985314 * Z1\n\tconst g1Linear = -0.969266 * X1 + 1.8760108 * Y1 + 0.041556 * Z1\n\tconst b1Linear = 0.0556434 * X1 - 0.2040259 * Y1 + 1.0572252 * Z1\n\treturn [rgbLinearChannel2Rgb(r1Linear), rgbLinearChannel2Rgb(g1Linear), rgbLinearChannel2Rgb(b1Linear), alpha1]\n}\n\n_input.xyz = xyz2rgb\n_input.lab = cielab2rgb\n\n/**\n * For HSI, we use the direct angle calculation. I.e. atan2(beta, alpha). See wikipedia link. This is why we don't use\n * hcxm2rgb.\n */\nfunction hsi2rgb(hueDegrees: number, s1: number, i1: number, alpha1 = 1): RGBA {\n\t/*\n    borrowed from here:\n    http://hummer.stanford.edu/museinfo/doc/examples/humdrum/keyscape2/hsi2rgb.cpp\n     */\n\tlet r, g, b\n\tlet hRad = hueDegrees * DEG2RAD\n\tif (hRad < (2 * PI) / 3) {\n\t\tb = (1 - s1) / 3\n\t\tr = (1 + (s1 * cos(hRad)) / cos(PI / 3 - hRad)) / 3\n\t\tg = 1 - (b + r)\n\t} else if (hRad < (4 * PI) / 3) {\n\t\thRad -= (2 * PI) / 3\n\t\tr = (1 - s1) / 3\n\t\tg = (1 + (s1 * cos(hRad)) / cos(PI / 3 - hRad)) / 3\n\t\tb = 1 - (r + g)\n\t} else {\n\t\thRad -= (4 * PI) / 3\n\t\tg = (1 - s1) / 3\n\t\tb = (1 + (s1 * cos(hRad)) / cos(PI / 3 - hRad)) / 3\n\t\tr = 1 - (g + b)\n\t}\n\treturn [3 * i1 * r * 255, 3 * i1 * g * 255, 3 * i1 * b * 255, alpha1]\n}\n\n/**\n * For HSI, we use the direct angle calculation. I.e. atan2(beta, alpha). See wikipedia link. This is why we don't use\n * rgb2hexhue.\n */\nfunction rgb2hsi(r255: number, g255: number, b255: number): HSI {\n\t// See https://en.wikipedia.org/wiki/HSL_and_HSV#Hue_and_chroma\n\t// See https://en.wikipedia.org/wiki/HSL_and_HSV#Lightness\n\tconst r1 = r255 / 255\n\tconst g1 = g255 / 255\n\tconst b1 = b255 / 255\n\tconst i1 = (r1 + g1 + b1) / 3\n\tif (r1 == g1 && g1 == b1) {\n\t\treturn [0, 0, i1]\n\t} else {\n\t\tconst alpha = (1 / 2) * (2 * r1 - g1 - b1)\n\t\tconst beta = (sqrt(3) / 2) * (g1 - b1)\n\t\tconst hRad = atan2(beta, alpha)\n\t\tconst min1 = min(r1, g1, b1)\n\t\tconst s1 = 1 - min1 / i1\n\t\treturn [(hRad < 0 ? 2 * PI + hRad : hRad) * RAD2DEG, s1, i1]\n\t}\n}\n\n_input.hsi = hsi2rgb\n\ninterpolators.hsv = interpolators.hsl = interpolators.hsi = interpolators.lch = interpolators.hcg = function interpolate_hsx(\n\tcolor1: Color,\n\tcolor2: Color,\n\tf: number,\n\tm: \"hsv\" | \"hsl\" | \"hsi\" | \"lch\" | \"hcg\",\n) {\n\tconst [a1, b1, c1] = color1[m]()\n\tconst [a2, b2, c2] = color2[m]()\n\tfunction lerpHue(hue1: number, hue2: number, f: number) {\n\t\tconst dh = norm360(hue2 - hue1 + 180) - 180\n\t\treturn hue1 + f * dh\n\t}\n\treturn color(\n\t\t(\"h\" == m.charAt(0) ? lerpHue : lerp)(a1, a2, f),\n\t\tlerp(b1, b2, f),\n\t\t(\"h\" == m.charAt(2) ? lerpHue : lerp)(c1, c2, f),\n\t\tm,\n\t)\n}\n\nfunction indexOfMax<T>(arr: ArrayLike<T>, f: (el: T) => number) {\n\tlet maxValue = -Infinity,\n\t\tmaxValueIndex = -1\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tconst value = f(arr[i])\n\t\tif (value > maxValue) {\n\t\t\tmaxValue = value\n\t\t\tmaxValueIndex = i\n\t\t}\n\t}\n\treturn maxValueIndex\n}\nfunction withMax<T>(arr: ArrayLike<T>, f: (el: T) => number): T {\n\treturn arr[indexOfMax(arr, f)]\n}\n","/// <reference types=\"webgl-strict-types\" />\nimport { assert, int, NLA_DEBUG, V3 } from \"ts3dutils\"\nimport { currentGL, TSGLContext } from \"./index\"\n\nimport GL = WebGLRenderingContextStrict\nconst WGL = (WebGLRenderingContext as any) as WebGLRenderingContextStrict.Constants\n\nexport class Buffer {\n\tbuffer: WebGLBuffer | undefined = undefined\n\tdata: any[] = []\n\n\t/** Number of elements in buffer. 2 V3s is still 2, not 6. */\n\tcount: int = 0\n\n\t/** Space between elements in buffer. 3 for V3s. */\n\tspacing: 1 | 2 | 3 | 4 = 1\n\n\thasBeenCompiled: boolean = false\n\n\tname?: string\n\n\tmaxValue?: number\n\n\tbindSize: GL[\"UNSIGNED_INT\"] | GL[\"UNSIGNED_SHORT\"]\n\n\t/**\n\t * Provides a simple method of uploading data to a GPU buffer.\n\t *\n\t * @example\n\t *     const vertices = new Buffer(WGL.ARRAY_BUFFER, Float32Array)\n\t *     vertices.data = [[0, 0, 0], [1, 0, 0], [0, 1, 0], [1, 1, 0]]\n\t *     vertices.compile()\n\t *\n\t * @example\n\t *     const indices = new Buffer(WGL.ELEMENT_ARRAY_BUFFER, Uint16Array)\n\t *     indices.data = [[0, 1, 2], [2, 1, 3]]\n\t *     indices.compile()\n\t *\n\t * @param target Specifies the target to which the buffer object is bound.\n\t * @param type\n\t */\n\tconstructor(\n\t\tpublic readonly target: GL.BufferTarget,\n\t\tpublic readonly type:\n\t\t\t| typeof Float32Array\n\t\t\t| typeof Uint16Array\n\t\t\t| typeof Uint32Array,\n\t) {\n\t\tassert(\n\t\t\ttarget == WGL.ARRAY_BUFFER || target == WGL.ELEMENT_ARRAY_BUFFER,\n\t\t\t\"target == WGL.ARRAY_BUFFER || target == WGL.ELEMENT_ARRAY_BUFFER\",\n\t\t)\n\t\tassert(\n\t\t\ttype == Float32Array || type == Uint16Array || type == Uint32Array,\n\t\t\t\"type == Float32Array || type == Uint16Array || type == Uint32Array\",\n\t\t)\n\t\tif (Uint16Array == type) {\n\t\t\tthis.bindSize = WGL.UNSIGNED_SHORT\n\t\t} else if (Uint32Array == type) {\n\t\t\tthis.bindSize = WGL.UNSIGNED_INT\n\t\t}\n\t}\n\n\t/**\n\t * Upload the contents of `data` to the GPU in preparation for rendering. The data must be a list of lists\n\t * where each inner list has the same length. For example, each element of data for vertex normals would be a\n\t * list of length three. This will remember the data length and element length for later use by shaders.\n\t *\n\t * This could have used `[].concat.apply([], this.data)` to flatten the array but Google\n\t * Chrome has a maximum number of arguments so the concatenations are chunked to avoid that limit.\n\t *\n\t * @param usage Either `WGL.STATIC_DRAW` or `WGL.DYNAMIC_DRAW`. Defaults to `WGL.STATIC_DRAW`\n\t */\n\tcompile(\n\t\tusage: GL.BufferDataUsage = WGL.STATIC_DRAW,\n\t\tgl: TSGLContext = currentGL(),\n\t): void {\n\t\tassert(\n\t\t\tWGL.STATIC_DRAW == usage || WGL.DYNAMIC_DRAW == usage,\n\t\t\t\"WGL.STATIC_DRAW == type || WGL.DYNAMIC_DRAW == type\",\n\t\t)\n\t\tthis.buffer = this.buffer || gl.createBuffer()!\n\t\tlet buffer: Float32Array | Uint16Array | Uint32Array\n\t\tif (this.data.length == 0) {\n\t\t\tconsole.warn(\"empty buffer \" + this.name)\n\t\t\t//console.trace()\n\t\t}\n\t\tif (this.data.length == 0 || this.data[0] instanceof V3) {\n\t\t\tassert(!(this.data[0] instanceof V3) || this.type == Float32Array)\n\t\t\tV3.pack(\n\t\t\t\tthis.data,\n\t\t\t\t(buffer = new this.type(this.data.length * 3) as Float32Array),\n\t\t\t) // asserts that all\n\t\t\t// elements are V3s\n\t\t\tthis.spacing = 3\n\t\t\tthis.count = this.data.length\n\t\t\tthis.maxValue = 0\n\t\t} else {\n\t\t\t//assert(Array != this.data[0].constructor, this.name + this.data[0])\n\t\t\tif (Array.isArray(this.data[0])) {\n\t\t\t\tconst bufferLength = this.data.length * this.data[0].length\n\t\t\t\tbuffer = new this.type(bufferLength)\n\t\t\t\tlet i = this.data.length,\n\t\t\t\t\tdestPtr = bufferLength\n\t\t\t\twhile (i--) {\n\t\t\t\t\tconst subArray = this.data[i]\n\t\t\t\t\tlet j = subArray.length\n\t\t\t\t\twhile (j--) {\n\t\t\t\t\t\tbuffer[--destPtr] = subArray[j]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tassert(0 == destPtr)\n\t\t\t} else {\n\t\t\t\tbuffer = new this.type(this.data)\n\t\t\t}\n\n\t\t\tconst spacing = this.data.length\n\t\t\t\t? buffer.length / this.data.length\n\t\t\t\t: 0\n\t\t\tassert(\n\t\t\t\tspacing % 1 == 0,\n\t\t\t\t`buffer ${this.name} elements not of consistent size, average size is ` +\n\t\t\t\t\tspacing,\n\t\t\t)\n\t\t\tif (NLA_DEBUG) {\n\t\t\t\tif (10000 <= buffer.length) {\n\t\t\t\t\tthis.maxValue = 0\n\t\t\t\t} else {\n\t\t\t\t\tthis.maxValue = Math.max.apply(undefined, buffer)\n\t\t\t\t}\n\t\t\t}\n\t\t\tassert([1, 2, 3, 4].includes(spacing))\n\t\t\tthis.spacing = spacing as 1 | 2 | 3 | 4\n\t\t\tthis.count = this.data.length\n\t\t}\n\t\tgl.bindBuffer(this.target, this.buffer)\n\t\tgl.bufferData(this.target, buffer, usage)\n\t\tthis.hasBeenCompiled = true\n\t}\n}\n","/// <reference types=\"webgl-strict-types\" />\nimport {\n\tAABB,\n\tarrayFromFunction,\n\tassert,\n\tassertVectors,\n\teq0,\n\tint,\n\tlerp,\n\tM4,\n\tNLA_PRECISION,\n\traddd,\n\tTAU,\n\tTransformable,\n\tTuple3,\n\tV,\n\tV3,\n} from \"ts3dutils\"\n\nimport { Buffer, currentGL, GL_COLOR, pushQuad, TSGLContext } from \"./index\"\n\nconst { cos, sin, PI, min, max } = Math\n\nconst WGL = (WebGLRenderingContext as any) as WebGLRenderingContextStrict.Constants\nimport GL = WebGLRenderingContextStrict\n\nconst tempM4_1 = new M4()\nconst tempM4_2 = new M4()\n\nexport interface MeshData {\n\tnormals: V3[]\n\tcoords: [number, number][]\n\tcolors: GL_COLOR[]\n\tTRIANGLES: int[]\n\tLINES: int[]\n}\nexport type MeshWith<T extends keyof MeshData = never> = Mesh &\n\tPick<MeshData, T>\n\n/**\n * @example new Mesh()\n *        .addIndexBuffer('TRIANGLES')\n *        .addIndexBuffer('LINES')\n *        .addVertexBuffer('normals', 'ts_Normal')\n */\nexport class Mesh extends Transformable {\n\thasBeenCompiled: boolean = false\n\tvertexBuffers: { [name: string]: Buffer } = {}\n\tindexBuffers: { [name: string]: Buffer } = {}\n\n\tvertices: V3[]\n\tnormals?: V3[]\n\n\tconstructor() {\n\t\tsuper()\n\t\tthis.addVertexBuffer(\"vertices\", \"ts_Vertex\")\n\t}\n\n\t/**\n\t * Calculate area, volume and centroid of the mesh.\n\t *\n\t * The area is the sum of the areas of the triangles.\n\t *\n\t * For closed meshes, the volume is the contained volume. If the volume is inside-out, i.e. the face normals point\n\t * inwards, the returned value is negative. In general, this calculates the sum of the z-direction shadow volumes\n\t * of the triangles. The z-dir shadow volume is the cut-off prism with the triangle projected onto the XY plane as\n\t * the base face and the triangle itself as the top face.\n\t *\n\t * The centroid is the \"mean point of all points inside the volume\". If a uniform density is assumed, this is\n\t * equivalent to the center of gravity. In general, this calculates the weighted average of the centroids of all the\n\t * triangle shadow volumes.\n\t */\n\tcalcVolume(\n\t\tthis: Mesh & { TRIANGLES: int[] },\n\t): { volume: number; centroid: V3; area: number } {\n\t\tlet totalVolumeX2 = 0,\n\t\t\ttotalCentroidWithZX2 = V3.O,\n\t\t\ttotalAreaX2 = 0\n\t\tconst triangles = this.TRIANGLES\n\t\tconst vertices = this.vertices\n\t\tfor (let i = 0; i < triangles.length; i += 3) {\n\t\t\tconst ai = triangles[i + 0],\n\t\t\t\tbi = triangles[i + 1],\n\t\t\t\tci = triangles[i + 2]\n\t\t\tconst a = vertices[ai],\n\t\t\t\tb = vertices[bi],\n\t\t\t\tc = vertices[ci]\n\t\t\tconst ab = b.minus(a),\n\t\t\t\tac = c.minus(a)\n\t\t\tconst normal = ab.cross(ac)\n\t\t\t//const centroidZ = (v0.z + v1.z + v2.z) / 3\n\t\t\tconst faceCentroid = V3.add(a, b, c).div(3)\n\t\t\t//totalVolume += centroidZ * (area === v01.cross(v02).length() / 2) * v01.cross(v02).unit().z\n\t\t\ttotalVolumeX2 += faceCentroid.z * normal.z\n\t\t\tconst faceAreaX2 = normal.length()\n\t\t\ttotalAreaX2 += faceAreaX2\n\n\t\t\t// NB: the shadow volume centroid does NOT have the same XY coordinates\n\t\t\t// as the face centroid.\n\t\t\t// calculate the weighted centroid of the shadow volume:\n\t\t\t// faceShadowCentroid = INTEGRATE [0; 1] (\n\t\t\t//   INTEGRATE [0; 1 - s] (\n\t\t\t//     normal.z *\n\t\t\t//     ((1 - s - t) a + s b + t c) *\n\t\t\t//     ((1 - s - t) a + s b + t c).z\n\t\t\t//   ) dt\n\t\t\t// ) ds\n\t\t\t// = (a (2 a.z + b.z + c.z) + b (a.z + 2 b.z + c.z) + c (a.z + b.z + 2 c.z)) / 24\n\t\t\tconst faceShadowCentroid = V3.add(\n\t\t\t\ta.times(2 * a.z + b.z + c.z),\n\t\t\t\tb.times(a.z + 2 * b.z + c.z),\n\t\t\t\tc.times(a.z + b.z + 2 * c.z),\n\t\t\t).times(normal.z) // 1/24 factor is done at very end\n\t\t\ttotalCentroidWithZX2 = totalCentroidWithZX2.plus(faceShadowCentroid)\n\t\t}\n\t\t// sumInPlaceTree adds negligible additional accuracy for XY sphere\n\t\tconst volume = totalVolumeX2 / 2\n\t\treturn {\n\t\t\tvolume,\n\t\t\tcentroid: eq0(volume)\n\t\t\t\t? V3.O\n\t\t\t\t: totalCentroidWithZX2\n\t\t\t\t\t\t.div(24 * volume)\n\t\t\t\t\t\t.schur(new V3(1, 1, 0.5)),\n\t\t\tarea: totalAreaX2 / 2,\n\t\t}\n\t}\n\n\t/**\n\t * Add a new vertex buffer with a list as a property called `name` on this object and map it to\n\t * the attribute called `attribute` in all shaders that draw this mesh.\n\t * @example new Mesh().addVertexBuffer('coords', 'ts_TexCoord')\n\t */\n\taddVertexBuffer<K extends string>(\n\t\tname: K,\n\t\tattribute: string,\n\t): this & { [k in K]: any[] } {\n\t\tassert(\n\t\t\t!this.vertexBuffers[attribute],\n\t\t\t\"Buffer \" + attribute + \" already exists.\",\n\t\t)\n\t\t//assert(!this[name])\n\t\tthis.hasBeenCompiled = false\n\t\tassert(\"string\" == typeof name)\n\t\tassert(\"string\" == typeof attribute)\n\t\tconst buffer = (this.vertexBuffers[attribute] = new Buffer(\n\t\t\tWGL.ARRAY_BUFFER,\n\t\t\tFloat32Array,\n\t\t))\n\t\tbuffer.name = name\n\t\t;(this as any)[name] = []\n\t\treturn this as any\n\t}\n\n\t/**\n\t * Add a new index buffer.\n\t * @example new Mesh().addIndexBuffer('TRIANGLES')\n\t * @example new Mesh().addIndexBuffer('LINES')\n\t */\n\taddIndexBuffer<K extends string>(\n\t\tname: K,\n\t\ttype: GL[\"UNSIGNED_SHORT\"] | GL[\"UNSIGNED_INT\"] = WGL.UNSIGNED_SHORT,\n\t): this & { [k in K]: int[] } {\n\t\tthis.hasBeenCompiled = false\n\t\tconst arrayType = WGL.UNSIGNED_SHORT == type ? Uint16Array : Uint32Array\n\t\tconst buffer = (this.indexBuffers[name] = new Buffer(\n\t\t\tWGL.ELEMENT_ARRAY_BUFFER,\n\t\t\tarrayType,\n\t\t))\n\t\tbuffer.name = name\n\t\t;(this as any)[name] = []\n\t\treturn this as any\n\t}\n\n\tconcat(...others: this[]): this {\n\t\tconst result = new Mesh() as any\n\t\tconst allMeshes = [this as Mesh].concat(others)\n\t\tObject.getOwnPropertyNames(this.vertexBuffers).forEach((attribute) => {\n\t\t\tassert(others.every((other) => !!other.vertexBuffers[attribute]))\n\t\t\tconst bufferName = this.vertexBuffers[attribute].name!\n\t\t\tif (\"ts_Vertex\" !== attribute) {\n\t\t\t\tresult.addVertexBuffer(bufferName, attribute)\n\t\t\t}\n\t\t\tresult[bufferName] = [].concat(\n\t\t\t\t...allMeshes.map((mesh) => (mesh as any)[bufferName]),\n\t\t\t)\n\t\t})\n\t\tObject.getOwnPropertyNames(this.indexBuffers).forEach((name) => {\n\t\t\tassert(others.every((other) => !!other.indexBuffers[name]))\n\t\t\tresult.addIndexBuffer(name, this.indexBuffers[name].bindSize)\n\t\t\tconst newIndexBufferData = new Array(\n\t\t\t\tallMeshes.reduce(\n\t\t\t\t\t(sum, mesh) => sum + (mesh as any)[name].length,\n\t\t\t\t\t0,\n\t\t\t\t),\n\t\t\t)\n\t\t\tlet ptr = 0\n\t\t\tlet startIndex = 0\n\t\t\tfor (const mesh of allMeshes) {\n\t\t\t\tfor (const index of (mesh as any)[name] as int[]) {\n\t\t\t\t\tnewIndexBufferData[ptr++] = startIndex + index\n\t\t\t\t}\n\t\t\t\tstartIndex += mesh.vertices.length\n\t\t\t}\n\t\t\tresult[name] = newIndexBufferData\n\t\t})\n\t\tresult.compile()\n\t\treturn result\n\t}\n\n\t/**\n\t * Upload all attached buffers to the GPU in preparation for rendering. This doesn't need to be called every\n\t * frame, only needs to be done when the data changes.\n\t *\n\t * Sets `this.hasBeenCompiled` to true.\n\t */\n\tcompile(gl: TSGLContext = currentGL()) {\n\t\t// figure out shortest vertex buffer to make sure indexBuffers are in bounds\n\t\tlet minVertexBufferLength = Infinity // TODO, _minBufferName\n\t\tObject.getOwnPropertyNames(this.vertexBuffers).forEach((attribute) => {\n\t\t\tconst buffer = this.vertexBuffers[attribute]\n\t\t\tbuffer.data = (this as any)[buffer.name!]\n\t\t\tbuffer.compile(undefined, gl)\n\t\t\tif ((this as any)[buffer.name!].length < minVertexBufferLength) {\n\t\t\t\t// _minBufferName = attribute\n\t\t\t\tminVertexBufferLength = (this as any)[buffer.name!].length\n\t\t\t}\n\t\t})\n\n\t\tfor (const name in this.indexBuffers) {\n\t\t\tconst buffer = this.indexBuffers[name]\n\t\t\tbuffer.data = (this as any)[buffer.name!]\n\t\t\tbuffer.compile(undefined, gl)\n\t\t\t// if (NLA_DEBUG && buffer.maxValue >= minVertexBufferLength) {\n\t\t\t// \tthrow new Error(`max index value for buffer ${name}\n\t\t\t// \tis too large ${buffer.maxValue} min Vbuffer size: ${minVertexBufferLength} ${minBufferName}`)\n\t\t\t// }\n\t\t}\n\t\tthis.hasBeenCompiled = true\n\t\treturn this\n\t}\n\n\tstatic async fromBinarySTL(stl: Blob) {\n\t\treturn new Promise<Mesh & { normals: V3[] }>((resolve, reject) => {\n\t\t\tconst mesh = new Mesh().addVertexBuffer(\"normals\", \"ts_Normal\")\n\t\t\tconst fileReader = new FileReader()\n\t\t\tfileReader.onerror = reject\n\t\t\tfileReader.onload = function (_progressEvent) {\n\t\t\t\tconst dataView = new DataView(this.result as ArrayBuffer)\n\t\t\t\tconst HEADER_BYTE_SIZE = 80\n\t\t\t\tconst triangleCount = dataView.getUint32(HEADER_BYTE_SIZE, true)\n\t\t\t\tmesh.normals.length = triangleCount * 3\n\t\t\t\tmesh.vertices.length = triangleCount * 3\n\t\t\t\tlet i = triangleCount * 3,\n\t\t\t\t\tbufferPtr = HEADER_BYTE_SIZE + 4\n\n\t\t\t\tfunction readV3() {\n\t\t\t\t\tconst x = dataView.getFloat32(bufferPtr, true)\n\t\t\t\t\tbufferPtr += 4\n\t\t\t\t\tconst y = dataView.getFloat32(bufferPtr, true)\n\t\t\t\t\tbufferPtr += 4\n\t\t\t\t\tconst z = dataView.getFloat32(bufferPtr, true)\n\t\t\t\t\tbufferPtr += 4\n\t\t\t\t\treturn new V3(x, y, z)\n\t\t\t\t}\n\n\t\t\t\twhile (i) {\n\t\t\t\t\ti -= 3\n\t\t\t\t\tconst normal = readV3()\n\t\t\t\t\tmesh.normals[i + 0] = normal\n\t\t\t\t\tmesh.normals[i + 1] = normal\n\t\t\t\t\tmesh.normals[i + 2] = normal\n\t\t\t\t\tmesh.vertices[i + 0] = readV3()\n\t\t\t\t\tmesh.vertices[i + 1] = readV3()\n\t\t\t\t\tmesh.vertices[i + 2] = readV3()\n\n\t\t\t\t\tbufferPtr += 2\n\t\t\t\t}\n\t\t\t\tresolve(mesh)\n\t\t\t}\n\t\t\tfileReader.readAsArrayBuffer(stl)\n\t\t})\n\t}\n\n\ttoBinarySTL(this: Mesh & { TRIANGLES: number[] }): Blob {\n\t\tif (!this.TRIANGLES) throw new Error(\"TRIANGLES must be defined.\")\n\t\tconst HEADER_BYTE_SIZE = 80,\n\t\t\tFLOAT_BYTE_SIZE = 4\n\t\tconst triangles = this.TRIANGLES\n\t\tconst triangleCount = triangles.length / 3\n\t\tconst buffer = new ArrayBuffer(\n\t\t\tHEADER_BYTE_SIZE +\n\t\t\t\t4 +\n\t\t\t\ttriangleCount * (4 * 3 * FLOAT_BYTE_SIZE + 2),\n\t\t)\n\t\tconst dataView = new DataView(buffer)\n\t\tdataView.setUint32(HEADER_BYTE_SIZE, triangleCount, true)\n\t\tlet bufferPtr = HEADER_BYTE_SIZE + 4\n\t\tlet i = triangles.length\n\t\twhile (i) {\n\t\t\ti -= 3\n\t\t\tconst a = this.vertices[triangles[i]],\n\t\t\t\tb = this.vertices[triangles[i + 1]],\n\t\t\t\tc = this.vertices[triangles[i + 2]]\n\t\t\tconst normal = V3.normalOnPoints(a, b, c)\n\t\t\t;[normal, a, b, c].forEach((v) => {\n\t\t\t\tdataView.setFloat32(bufferPtr, v.x, true)\n\t\t\t\tbufferPtr += 4\n\t\t\t\tdataView.setFloat32(bufferPtr, v.y, true)\n\t\t\t\tbufferPtr += 4\n\t\t\t\tdataView.setFloat32(bufferPtr, v.z, true)\n\t\t\t\tbufferPtr += 4\n\t\t\t})\n\t\t\t// skip 2 bytes, already initalized to zero\n\t\t\tbufferPtr += 2\n\t\t}\n\t\tassert(\n\t\t\tbufferPtr == buffer.byteLength,\n\t\t\tbufferPtr + \" \" + buffer.byteLength,\n\t\t)\n\t\treturn new Blob([buffer], { type: \"application/octet-stream\" })\n\t}\n\n\t/**\n\t * Returns a new Mesh with transformed vertices.\n\t *\n\t * Transform all vertices by `matrix` and all normals by the inverse transpose of `matrix`.\n\t *\n\t * Index buffer data is referenced.\n\t */\n\ttransform(m4: M4): this {\n\t\tconst mesh = new Mesh()\n\t\tmesh.vertices = m4.transformedPoints(this.vertices)\n\t\tif (this.normals) {\n\t\t\tmesh.addVertexBuffer(\"normals\", \"ts_Normal\")\n\t\t\tconst invTrans = m4\n\t\t\t\t.as3x3(tempM4_1)\n\t\t\t\t.inversed(tempM4_2)\n\t\t\t\t.transposed(tempM4_1)\n\t\t\tmesh.normals = this.normals.map((n) =>\n\t\t\t\tinvTrans.transformVector(n).unit(),\n\t\t\t)\n\t\t\t// mesh.normals.forEach(n => assert(n.hasLength(1)))\n\t\t}\n\t\tfor (const name in this.indexBuffers) {\n\t\t\tmesh.addIndexBuffer(name)\n\t\t\t;(mesh as any)[name] = (this as any)[name]\n\t\t}\n\t\tfor (const attribute in this.vertexBuffers) {\n\t\t\tif (\"ts_Vertex\" !== attribute && \"ts_Normal\" !== attribute) {\n\t\t\t\tconst name = this.vertexBuffers[attribute].name!\n\t\t\t\tmesh.addVertexBuffer(name, attribute)\n\t\t\t\t;(mesh as any)[name] = (this as any)[name]\n\t\t\t}\n\t\t}\n\t\t// this.hasBeenCompiled && mesh.compile()\n\t\treturn mesh as this\n\t}\n\n\t/**\n\t * Computes a new normal for each vertex from the average normal of the neighboring triangles. This means\n\t * adjacent triangles must share vertices for the resulting normals to be smooth.\n\t */\n\tcomputeNormalsFromFlatTriangles(\n\t\tthis: Mesh & { TRIANGLES: int[] },\n\t): this & { normals: V3[] } {\n\t\tif (!this.normals) this.addVertexBuffer(\"normals\", \"ts_Normal\")\n\t\t// tslint:disable:no-string-literal\n\t\t//this.vertexBuffers['ts_Normal'].data = arrayFromFunction(this.vertices.length, i => V3.O)\n\n\t\tconst TRIANGLES = this.TRIANGLES,\n\t\t\tvertices = this.vertices,\n\t\t\tnormals = this.normals!\n\t\tnormals.length = vertices.length\n\t\tfor (let i = 0; i < TRIANGLES.length; i += 3) {\n\t\t\tconst ai = TRIANGLES[i],\n\t\t\t\tbi = TRIANGLES[i + 1],\n\t\t\t\tci = TRIANGLES[i + 2]\n\t\t\tconst a = vertices[ai]\n\t\t\tconst b = vertices[bi]\n\t\t\tconst c = vertices[ci]\n\t\t\tconst normal = b.minus(a).cross(c.minus(a)).unit()\n\t\t\tnormals[ai] = normals[ai] ? normals[ai].plus(normal) : normal\n\t\t\tnormals[bi] = normals[bi] ? normals[bi].plus(normal) : normal\n\t\t\tnormals[ci] = normals[ci] ? normals[ci].plus(normal) : normal\n\t\t}\n\t\tfor (let i = 0; i < vertices.length; i++) {\n\t\t\tnormals[i] = normals[i].unit()\n\t\t}\n\t\tthis.hasBeenCompiled = false\n\t\treturn this as any\n\t}\n\n\t/**\n\t * Populate the specified index buffer (default 'LINES') from the `triangles` index buffer.\n\t */\n\tcomputeWireframeFromFlatTriangles(\n\t\tthis: Mesh & { TRIANGLES: int[] },\n\t): this & { LINES: int[] }\n\tcomputeWireframeFromFlatTriangles<T extends string>(\n\t\tthis: Mesh & { TRIANGLES: int[] },\n\t\tindexBufferName: T,\n\t): this & { [k in T]: int[] }\n\tcomputeWireframeFromFlatTriangles(\n\t\tthis: any,\n\t\tindexBufferName: string = \"LINES\",\n\t): this {\n\t\tif (!this.TRIANGLES) throw new Error(\"TRIANGLES must be defined.\")\n\t\tconst canonEdges = new Set<number>()\n\n\t\tfunction canonEdge(i0: int, i1: int) {\n\t\t\tconst iMin = min(i0, i1),\n\t\t\t\tiMax = max(i0, i1)\n\t\t\treturn (iMin << 16) | iMax\n\t\t}\n\n\t\t// function uncanonEdge(key) {\n\t\t// \treturn [key >> 16, key & 0xffff]\n\t\t// }\n\t\tconst t = this.TRIANGLES\n\t\tfor (let i = 0; i < t.length; i += 3) {\n\t\t\tcanonEdges.add(canonEdge(t[i + 0], t[i + 1]))\n\t\t\tcanonEdges.add(canonEdge(t[i + 1], t[i + 2]))\n\t\t\tcanonEdges.add(canonEdge(t[i + 2], t[i + 0]))\n\t\t}\n\t\tconst data = indexBufferName\n\t\tif (!this[data]) this.addIndexBuffer(indexBufferName)\n\t\t//this.LINES = new Array(canonEdges.size)\n\t\tcanonEdges.forEach((val) => this[data].push(val >> 16, val & 0xffff))\n\t\tthis.hasBeenCompiled = false\n\t\treturn this\n\t}\n\n\tcomputeWireframeFromFlatTrianglesClosedMesh(\n\t\tthis: Mesh & { TRIANGLES: int[] },\n\t): this & { LINES: int[] }\n\tcomputeWireframeFromFlatTrianglesClosedMesh<T extends string>(\n\t\tthis: Mesh & { TRIANGLES: int[] },\n\t\tindexBufferName: T,\n\t): this & { [k in T]: int[] }\n\tcomputeWireframeFromFlatTrianglesClosedMesh(\n\t\tthis: any,\n\t\tindexBufferName: string = \"LINES\",\n\t): this {\n\t\tif (!this.TRIANGLES) throw new Error(\"TRIANGLES must be defined.\")\n\t\tif (!this.LINES) this.addIndexBuffer(\"LINES\")\n\t\tconst tris = this.TRIANGLES\n\t\tif (!this[indexBufferName]) this.addIndexBuffer(indexBufferName)\n\t\tconst lines = this[indexBufferName]\n\t\tfor (let i = 0; i < tris.length; i += 3) {\n\t\t\tif (tris[i + 0] < tris[i + 1]) lines.push(tris[i + 0], tris[i + 1])\n\t\t\tif (tris[i + 1] < tris[i + 2]) lines.push(tris[i + 1], tris[i + 2])\n\t\t\tif (tris[i + 2] < tris[i + 0]) lines.push(tris[i + 2], tris[i + 0])\n\t\t}\n\t\tthis.hasBeenCompiled = false\n\t\treturn this\n\t}\n\n\tcomputeNormalLines(\n\t\tthis: Mesh & { normals: V3[] },\n\t\tlength: number,\n\t): this & { LINES: int[] }\n\tcomputeNormalLines<T extends string>(\n\t\tthis: Mesh & { normals: V3[] },\n\t\tlength: number,\n\t\tindexBufferName: T,\n\t): this & { [k in T]: int[] }\n\tcomputeNormalLines(\n\t\tthis: any,\n\t\tlength: number = 1,\n\t\tindexBufferName: string = \"LINES\",\n\t) {\n\t\tif (!this.normals) {\n\t\t\tthrow new Error(\"normals must be defined.\")\n\t\t}\n\t\tconst vs = this.vertices,\n\t\t\tsi = this.vertices.length\n\t\tif (!this[indexBufferName]) this.addIndexBuffer(indexBufferName)\n\n\t\tfor (let i = 0; i < this.normals.length; i++) {\n\t\t\tvs[si + i] = vs[i].plus(this.normals[i].toLength(length))\n\t\t\tthis[indexBufferName].push(si + i, i)\n\t\t}\n\t\tthis.hasBeenCompiled = false\n\t\treturn this\n\t}\n\n\tgetAABB(): AABB {\n\t\treturn new AABB().addPoints(this.vertices)\n\t}\n\n\tgetBoundingSphere(): { center: V3; radius: number } {\n\t\tconst sphere = { center: this.getAABB().getCenter(), radius: 0 }\n\t\tfor (let i = 0; i < this.vertices.length; i++) {\n\t\t\tsphere.radius = Math.max(\n\t\t\t\tsphere.radius,\n\t\t\t\tthis.vertices[i].minus(sphere.center).length(),\n\t\t\t)\n\t\t}\n\t\treturn sphere\n\t}\n\n\t/**\n\t * Generates a square mesh in the XY plane.\n\t * Texture coordinates (buffer \"coords\") are set to go from 0 to 1 in either direction.\n\t *\n\t * @param options foo\n\t * @param options.detail Defaults to 1\n\t * @param options.detailX Defaults to options.detail. Number of subdivisions in X direction.\n\t * @param options.detailY Defaults to options.detail. Number of subdivisions in Y direction.j\n\t * @param options.width defaults to 1\n\t * @param options.height defaults to 1\n\t * @param options.startX defaults to 0\n\t * @param options.startY defaults to 0\n\t */\n\tstatic plane(\n\t\toptions: {\n\t\t\tdetail?: int\n\t\t\tdetailX?: int\n\t\t\tdetailY?: int\n\t\t\twidth?: number\n\t\t\theight?: number\n\t\t\tstartX?: number\n\t\t\tstartY?: number\n\t\t} = {},\n\t) {\n\t\tconst detailX = options.detailX || options.detail || 1\n\t\tconst detailY = options.detailY || options.detail || 1\n\t\tconst startX = options.startX || 0\n\t\tconst startY = options.startY || 0\n\t\tconst width = options.width || 1\n\t\tconst height = options.height || 1\n\t\tconst mesh = new Mesh()\n\t\t\t.addIndexBuffer(\"LINES\")\n\t\t\t.addIndexBuffer(\"TRIANGLES\")\n\t\t\t.addVertexBuffer(\"normals\", \"ts_Normal\")\n\t\t\t.addVertexBuffer(\"coords\", \"ts_TexCoord\")\n\n\t\tfor (let j = 0; j <= detailY; j++) {\n\t\t\tconst t = j / detailY\n\t\t\tfor (let i = 0; i <= detailX; i++) {\n\t\t\t\tconst s = i / detailX\n\t\t\t\tmesh.vertices.push(\n\t\t\t\t\tnew V3(startX + s * width, startY + t * height, 0),\n\t\t\t\t)\n\t\t\t\tmesh.coords.push([s, t])\n\t\t\t\tmesh.normals.push(V3.Z)\n\t\t\t\tif (i < detailX && j < detailY) {\n\t\t\t\t\tconst offset = i + j * (detailX + 1)\n\t\t\t\t\tmesh.TRIANGLES.push(\n\t\t\t\t\t\toffset,\n\t\t\t\t\t\toffset + 1,\n\t\t\t\t\t\toffset + detailX + 1,\n\t\t\t\t\t\toffset + detailX + 1,\n\t\t\t\t\t\toffset + 1,\n\t\t\t\t\t\toffset + detailX + 2,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < detailX; i++) {\n\t\t\tmesh.LINES.push(i, i + 1)\n\t\t\tmesh.LINES.push(\n\t\t\t\t(detailX + 1) * detailY + i,\n\t\t\t\t(detailX + 1) * detailY + i + 1,\n\t\t\t)\n\t\t}\n\t\tfor (let j = 0; j < detailY; j++) {\n\t\t\tmesh.LINES.push(detailX * j, detailX * (j + 1) + 1)\n\t\t\tmesh.LINES.push(detailX * (j + 1), detailX * (j + 2) + 1)\n\t\t}\n\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\t// unique corners of a unit cube. Used by Mesh.cube to generate a cube mesh.\n\t//  Z            Y\n\t//  ^  6      7 /\n\t//  |  +------+\n\t//  4/ |   5 /|\n\t//  +------+  |\n\t//  |  +---|--+\n\t//  | /2   | /3\n\t//  +------+     --> X\n\t//  0      1\n\tstatic UNIT_CUBE_CORNERS = [\n\t\tV3.O,\n\t\tnew V3(0, 0, 1),\n\t\tnew V3(0, 1, 0),\n\t\tnew V3(0, 1, 1),\n\n\t\tnew V3(1, 0, 0),\n\t\tnew V3(1, 0, 1),\n\t\tnew V3(1, 1, 0),\n\t\tV3.XYZ,\n\t]\n\tstatic box(xDetail: int = 1, yDetail: int = 1, zDetail: int = 1) {\n\t\tconst mesh = new Mesh()\n\t\t\t.addIndexBuffer(\"LINES\")\n\t\t\t.addIndexBuffer(\"TRIANGLES\")\n\t\t\t.addVertexBuffer(\"normals\", \"ts_Normal\")\n\t\tmesh.vertices.length = mesh.normals.length =\n\t\t\t2 *\n\t\t\t((xDetail + 1) * (yDetail + 1) +\n\t\t\t\t(yDetail + 1) * (zDetail + 1) +\n\t\t\t\t(zDetail + 1) * (xDetail + 1))\n\t\tmesh.TRIANGLES.length =\n\t\t\t4 * (xDetail * yDetail + yDetail * zDetail + zDetail * xDetail)\n\t\tlet vi = 0,\n\t\t\tti = 0\n\t\tfunction x(\n\t\t\tdetailX: int,\n\t\t\tdetailY: int,\n\t\t\tm: M4,\n\t\t\tstartX = 0,\n\t\t\twidth = 1,\n\t\t\tstartY = 0,\n\t\t\theight = 1,\n\t\t) {\n\t\t\tconst normal = m.transformVector(V3.Z)\n\t\t\tfor (let j = 0; j <= detailY; j++) {\n\t\t\t\tconst t = j / detailY\n\t\t\t\tfor (let i = 0; i <= detailX; i++) {\n\t\t\t\t\tconst s = i / detailX\n\t\t\t\t\tmesh.vertices[vi] = m.transformPoint(\n\t\t\t\t\t\tnew V3(startX + s * width, startY + t * height, 0),\n\t\t\t\t\t)\n\t\t\t\t\tmesh.normals[vi] = normal\n\t\t\t\t\tvi++\n\t\t\t\t\tif (i < detailX && j < detailY) {\n\t\t\t\t\t\tconst offset = i + j * (detailX + 1)\n\t\t\t\t\t\tmesh.TRIANGLES[ti++] = offset\n\t\t\t\t\t\tmesh.TRIANGLES[ti++] = offset + detailX + 1\n\t\t\t\t\t\tmesh.TRIANGLES[ti++] = offset + 1\n\t\t\t\t\t\tmesh.TRIANGLES[ti++] = offset + detailX + 1\n\t\t\t\t\t\tmesh.TRIANGLES[ti++] = offset + detailX + 2\n\t\t\t\t\t\tmesh.TRIANGLES[ti++] = offset + 1\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tx(yDetail, xDetail, M4.forSys(V3.Y, V3.X, V3.Z.negated()))\n\t\tx(xDetail, yDetail, M4.translate(V3.Z))\n\t\tx(zDetail, yDetail, M4.forSys(V3.Z, V3.Y, V3.X.negated()))\n\t\tx(yDetail, zDetail, M4.forSys(V3.Y, V3.Z, V3.X, V3.X))\n\t\tx(xDetail, zDetail, M4.forSys(V3.X, V3.Z, V3.Y.negated()))\n\t\tx(zDetail, xDetail, M4.forSys(V3.Z, V3.X, V3.Y, V3.Y))\n\t\treturn mesh\n\t}\n\n\t/**\n\t * Generates a unit cube (1x1x1) starting at the origin and extending into the (+ + +) octant.\n\t * I.e. box from V3.O to V3(1,1,1)\n\t * Creates line (only cube edges), triangle, vertex and normal1 buffers.\n\t */\n\tstatic cube() {\n\t\tconst mesh = new Mesh()\n\t\t\t.addVertexBuffer(\"normals\", \"ts_Normal\")\n\t\t\t.addIndexBuffer(\"TRIANGLES\")\n\t\t\t.addIndexBuffer(\"LINES\")\n\n\t\t// basically indexes for faces of the cube. vertices each need to be added 3 times,\n\t\t// as they have different normals depending on the face being rendered\n\t\tconst VERTEX_CORNERS = [\n\t\t\t[0, 4, 6, 2], // X = 0\n\t\t\t[1, 3, 7, 5], // X = 1\n\n\t\t\t[0, 1, 5, 4], // Y = 0\n\t\t\t[2, 6, 7, 3], // Y = 1\n\n\t\t\t[0, 2, 3, 1], // Z = 0\n\t\t\t[4, 5, 7, 6], // Z = 1\n\t\t]\n\n\t\tconst VERTEX_NORMALS = [\n\t\t\tV3.X.negated(),\n\t\t\tV3.X,\n\t\t\tV3.Y.negated(),\n\t\t\tV3.Y,\n\t\t\tV3.Z.negated(),\n\t\t\tV3.Z,\n\t\t]\n\n\t\tfor (let i = 0; i < 6; i++) {\n\t\t\tpushQuad(\n\t\t\t\tmesh.TRIANGLES,\n\t\t\t\ttrue,\n\t\t\t\tmesh.vertices.length,\n\t\t\t\tmesh.vertices.length + 1,\n\t\t\t\tmesh.vertices.length + 3,\n\t\t\t\tmesh.vertices.length + 2,\n\t\t\t)\n\t\t\tmesh.vertices.push(\n\t\t\t\t...VERTEX_CORNERS[i].map((j) => Mesh.UNIT_CUBE_CORNERS[j]),\n\t\t\t)\n\t\t\tmesh.normals.push(\n\t\t\t\tVERTEX_NORMALS[i],\n\t\t\t\tVERTEX_NORMALS[i],\n\t\t\t\tVERTEX_NORMALS[i],\n\t\t\t\tVERTEX_NORMALS[i],\n\t\t\t)\n\t\t}\n\t\t// indexes of LINES relative to UNIT_CUBE_CORNERS. Mapped to VERTEX_CORNERS.indexOf\n\t\t// so they make sense in the context of the mesh\n\t\t// prettier-ignore\n\t\tmesh.LINES = [\n\t\t\t0, 1,\n\t\t\t0, 2,\n\t\t\t1, 3,\n\t\t\t2, 3,\n\n\t\t\t0, 4,\n\t\t\t1, 5,\n\t\t\t2, 6,\n\t\t\t3, 7,\n\n\t\t\t4, 5,\n\t\t\t4, 6,\n\t\t\t5, 7,\n\t\t\t6, 7,\n\t\t].map(i => VERTEX_CORNERS.indexOf(i))\n\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\tstatic isocahedron() {\n\t\treturn Mesh.sphere(0)\n\t}\n\n\tstatic sphere2(latitudes: int, longitudes: int) {\n\t\tconst baseVertices = arrayFromFunction(latitudes, (i) => {\n\t\t\tconst angle = (i / (latitudes - 1)) * PI - PI / 2\n\t\t\treturn new V3(0, cos(angle), sin(angle))\n\t\t})\n\t\tconst vqs = arrayFromFunction(latitudes, (i) => {\n\t\t\tconst angle = (i / (latitudes - 1)) * PI - PI / 2\n\t\t\tconst q = cos(angle)\n\t\t\treturn [(i / (latitudes - 1)) * q, q]\n\t\t})\n\t\treturn Mesh.rotation(\n\t\t\tbaseVertices,\n\t\t\t{ anchor: V3.O, dir1: V3.Z },\n\t\t\t2 * PI,\n\t\t\tlongitudes,\n\t\t\ttrue,\n\t\t\tbaseVertices,\n\t\t\tvqs,\n\t\t)\n\t}\n\n\t/**\n\t * Returns a sphere mesh with radius 1 created by subdividing the faces of a isocahedron (20-sided) recursively\n\t * The sphere is positioned at the origin\n\t * @param subdivisions\n\t *      How many recursive divisions to do. A subdivision divides a triangle into 4,\n\t *      so the total number of triangles is 20 * 4^subdivisions\n\t * @returns\n\t *      Contains vertex and normal1 buffers and index buffers for triangles and LINES\n\t */\n\tstatic sphere(subdivisions: int = 3) {\n\t\tconst golden = (1 + Math.sqrt(5)) / 2,\n\t\t\tu = new V3(1, golden, 0).unit(),\n\t\t\ts = u.x,\n\t\t\tt = u.y\n\t\t// base vertices of isocahedron\n\t\tconst vertices = [\n\t\t\tnew V3(-s, t, 0),\n\t\t\tnew V3(s, t, 0),\n\t\t\tnew V3(-s, -t, 0),\n\t\t\tnew V3(s, -t, 0),\n\n\t\t\tnew V3(0, -s, t),\n\t\t\tnew V3(0, s, t),\n\t\t\tnew V3(0, -s, -t),\n\t\t\tnew V3(0, s, -t),\n\n\t\t\tnew V3(t, 0, -s),\n\t\t\tnew V3(t, 0, s),\n\t\t\tnew V3(-t, 0, -s),\n\t\t\tnew V3(-t, 0, s),\n\t\t]\n\t\t// base triangles of isocahedron\n\t\t// prettier-ignore\n\t\tconst triangles = [\n\t\t\t// 5 faces around point 0\n\t\t\t0, 11, 5,\n\t\t\t0, 5, 1,\n\t\t\t0, 1, 7,\n\t\t\t0, 7, 10,\n\t\t\t0, 10, 11,\n\n\t\t\t// 5 adjacent faces\n\t\t\t1, 5, 9,\n\t\t\t5, 11, 4,\n\t\t\t11, 10, 2,\n\t\t\t10, 7, 6,\n\t\t\t7, 1, 8,\n\n\t\t\t// 5 faces around point 3\n\t\t\t3, 9, 4,\n\t\t\t3, 4, 2,\n\t\t\t3, 2, 6,\n\t\t\t3, 6, 8,\n\t\t\t3, 8, 9,\n\n\t\t\t// 5 adjacent faces\n\t\t\t4, 9, 5,\n\t\t\t2, 4, 11,\n\t\t\t6, 2, 10,\n\t\t\t8, 6, 7,\n\t\t\t9, 8, 1,\n\t\t]\n\n\t\t/**\n\t\t * Tesselates triangle a b c\n\t\t * a b c must already be in vertices with the indexes ia ib ic\n\t\t * res is the number of subdivisions to do. 0 just results in triangle and line indexes being added to the\n\t\t * respective buffers.\n\t\t */\n\t\tfunction tesselateRecursively(\n\t\t\ta: V3,\n\t\t\tb: V3,\n\t\t\tc: V3,\n\t\t\tres: int,\n\t\t\tvertices: V3[],\n\t\t\ttriangles: int[],\n\t\t\tia: int,\n\t\t\tib: int,\n\t\t\tic: int,\n\t\t\tlines: int[],\n\t\t) {\n\t\t\tif (0 == res) {\n\t\t\t\ttriangles.push(ia, ib, ic)\n\t\t\t\tif (ia < ib) lines.push(ia, ib)\n\t\t\t\tif (ib < ic) lines.push(ib, ic)\n\t\t\t\tif (ic < ia) lines.push(ic, ia)\n\t\t\t} else {\n\t\t\t\t// subdivide the triangle abc into 4 by adding a vertex (with the correct distance from the origin)\n\t\t\t\t// between each segment ab, bc and cd, then calling the function recursively\n\t\t\t\tconst abMid1 = a.plus(b).toLength(1),\n\t\t\t\t\tbcMid1 = b.plus(c).toLength(1),\n\t\t\t\t\tcaMid1 = c.plus(a).toLength(1)\n\t\t\t\t// indexes of new vertices:\n\t\t\t\tconst iabm = vertices.length,\n\t\t\t\t\tibcm = iabm + 1,\n\t\t\t\t\ticam = iabm + 2\n\t\t\t\tvertices.push(abMid1, bcMid1, caMid1)\n\t\t\t\ttesselateRecursively(\n\t\t\t\t\tabMid1,\n\t\t\t\t\tbcMid1,\n\t\t\t\t\tcaMid1,\n\t\t\t\t\tres - 1,\n\t\t\t\t\tvertices,\n\t\t\t\t\ttriangles,\n\t\t\t\t\tiabm,\n\t\t\t\t\tibcm,\n\t\t\t\t\ticam,\n\t\t\t\t\tlines,\n\t\t\t\t)\n\t\t\t\ttesselateRecursively(\n\t\t\t\t\ta,\n\t\t\t\t\tabMid1,\n\t\t\t\t\tcaMid1,\n\t\t\t\t\tres - 1,\n\t\t\t\t\tvertices,\n\t\t\t\t\ttriangles,\n\t\t\t\t\tia,\n\t\t\t\t\tiabm,\n\t\t\t\t\ticam,\n\t\t\t\t\tlines,\n\t\t\t\t)\n\t\t\t\ttesselateRecursively(\n\t\t\t\t\tb,\n\t\t\t\t\tbcMid1,\n\t\t\t\t\tabMid1,\n\t\t\t\t\tres - 1,\n\t\t\t\t\tvertices,\n\t\t\t\t\ttriangles,\n\t\t\t\t\tib,\n\t\t\t\t\tibcm,\n\t\t\t\t\tiabm,\n\t\t\t\t\tlines,\n\t\t\t\t)\n\t\t\t\ttesselateRecursively(\n\t\t\t\t\tc,\n\t\t\t\t\tcaMid1,\n\t\t\t\t\tbcMid1,\n\t\t\t\t\tres - 1,\n\t\t\t\t\tvertices,\n\t\t\t\t\ttriangles,\n\t\t\t\t\tic,\n\t\t\t\t\ticam,\n\t\t\t\t\tibcm,\n\t\t\t\t\tlines,\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\n\t\tconst mesh = new Mesh()\n\t\t\t.addVertexBuffer(\"normals\", \"ts_Normal\")\n\t\t\t.addIndexBuffer(\"TRIANGLES\")\n\t\t\t.addIndexBuffer(\"LINES\")\n\t\tmesh.vertices.push(...vertices)\n\t\tsubdivisions = undefined == subdivisions ? 4 : subdivisions\n\t\tfor (let i = 0; i < 20; i++) {\n\t\t\tconst [ia, ic, ib] = triangles.slice(i * 3, i * 3 + 3)\n\t\t\ttesselateRecursively(\n\t\t\t\tvertices[ia],\n\t\t\t\tvertices[ic],\n\t\t\t\tvertices[ib],\n\t\t\t\tsubdivisions,\n\t\t\t\tmesh.vertices,\n\t\t\t\tmesh.TRIANGLES,\n\t\t\t\tia,\n\t\t\t\tic,\n\t\t\t\tib,\n\t\t\t\tmesh.LINES,\n\t\t\t)\n\t\t}\n\n\t\tmesh.normals = mesh.vertices\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\tstatic aabb(aabb: AABB) {\n\t\tconst matrix = M4.product(\n\t\t\tM4.translate(aabb.min),\n\t\t\tM4.scale(\n\t\t\t\taabb\n\t\t\t\t\t.size()\n\t\t\t\t\t.max(new V3(NLA_PRECISION, NLA_PRECISION, NLA_PRECISION)),\n\t\t\t),\n\t\t)\n\t\tconst mesh = Mesh.cube().transform(matrix)\n\t\t// mesh.vertices = aabb.corners()\n\t\tmesh.computeNormalLines(20)\n\t\tmesh.compile()\n\n\t\treturn mesh\n\t}\n\n\tstatic offsetVertices(\n\t\tvertices: V3[],\n\t\toffset: V3,\n\t\tclose: boolean,\n\t): Mesh & { TRIANGLES: int[]; coords: [number, number][] }\n\tstatic offsetVertices(\n\t\tvertices: V3[],\n\t\toffset: V3,\n\t\tclose: boolean,\n\t\tnormals: V3[],\n\t): Mesh & { TRIANGLES: int[]; coords: [number, number][]; normals: V3[] }\n\tstatic offsetVertices(\n\t\tvertices: V3[],\n\t\toffset: V3,\n\t\tclose: boolean,\n\t\tnormals?: V3[],\n\t) {\n\t\tassertVectors.apply(undefined, vertices)\n\t\tassertVectors(offset)\n\n\t\tconst mesh = new Mesh()\n\t\t\t.addIndexBuffer(\"TRIANGLES\")\n\t\t\t.addVertexBuffer(\"coords\", \"ts_TexCoord\")\n\t\tnormals && mesh.addVertexBuffer(\"normals\", \"ts_Normal\")\n\t\tmesh.vertices = vertices.concat(vertices.map((v) => v.plus(offset)))\n\t\tconst vl = vertices.length\n\t\tmesh.coords = arrayFromFunction(vl * 2, (i): [number, number] => [\n\t\t\t(i % vl) / vl,\n\t\t\t(i / vl) | 0,\n\t\t])\n\n\t\tconst triangles = mesh.TRIANGLES\n\t\tfor (let i = 0; i < vertices.length - 1; i++) {\n\t\t\tpushQuad(\n\t\t\t\ttriangles,\n\t\t\t\tfalse,\n\t\t\t\ti,\n\t\t\t\ti + 1,\n\t\t\t\tvertices.length + i,\n\t\t\t\tvertices.length + i + 1,\n\t\t\t)\n\t\t}\n\t\tif (close) {\n\t\t\tpushQuad(\n\t\t\t\ttriangles,\n\t\t\t\tfalse,\n\t\t\t\tvertices.length - 1,\n\t\t\t\t0,\n\t\t\t\tvertices.length * 2 - 1,\n\t\t\t\tvertices.length,\n\t\t\t)\n\t\t}\n\t\tif (normals) {\n\t\t\tmesh.normals = normals.concat(normals)\n\t\t}\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\t// Creates a new $Mesh by rotating $vertices by $totalRads around $lineAxis (according to the right-hand\n\t// rule). $steps is the number of steps to take. $close is whether the vertices of the first and last step\n\t// should be connected by triangles. If $normals is set (pass an array of V3s of the same length as $vertices),\n\t// these will also be rotated and correctly added to the mesh.\n\t// @example const precious = Mesh.rotation([V(10, 0, -2), V(10, 0, 2), V(11, 0, 2), V(11, 0, -2)], , L3.Z, 512)\n\tstatic rotation(\n\t\tvertices: V3[],\n\t\tlineAxis: { anchor: V3; dir1: V3 },\n\t\ttotalRads: raddd,\n\t\tsteps: int,\n\t\tclose = true,\n\t\tnormals?: V3[],\n\t\tvqs?: [number, number][],\n\t) {\n\t\tconst mesh = new Mesh().addIndexBuffer(\"TRIANGLES\")\n\t\tnormals && mesh.addVertexBuffer(\"normals\", \"ts_Normal\")\n\t\tvqs && mesh.addVertexBuffer(\"coordsUVQ\", \"ts_TexCoordUVQ\")\n\t\tconst vc = vertices.length,\n\t\t\tvTotal = vc * steps\n\n\t\tconst rotMat = new M4()\n\t\tconst triangles = mesh.TRIANGLES\n\t\tfor (let i = 0; i < steps; i++) {\n\t\t\t// add triangles\n\t\t\tconst rads = totalRads * (i / steps)\n\t\t\tM4.rotateLine(lineAxis.anchor, lineAxis.dir1, rads, rotMat)\n\t\t\tmesh.vertices.push(...rotMat.transformedPoints(vertices))\n\n\t\t\tnormals && mesh.normals!.push(...rotMat.transformedVectors(normals))\n\t\t\tvqs &&\n\t\t\t\t((mesh as unknown) as {\n\t\t\t\t\tcoordsUVQ: [number, number, number][]\n\t\t\t\t}).coordsUVQ.push(\n\t\t\t\t\t...vqs.map(([v, q]): [number, number, number] => [\n\t\t\t\t\t\t(i / steps) * q,\n\t\t\t\t\t\tv,\n\t\t\t\t\t\tq,\n\t\t\t\t\t]),\n\t\t\t\t)\n\t\t\tif (close || i !== steps - 1) {\n\t\t\t\tfor (let j = 0; j < vc - 1; j++) {\n\t\t\t\t\tpushQuad(\n\t\t\t\t\t\ttriangles,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\ti * vc + j + 1,\n\t\t\t\t\t\ti * vc + j,\n\t\t\t\t\t\t((i + 1) * vc + j + 1) % vTotal,\n\t\t\t\t\t\t((i + 1) * vc + j) % vTotal,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\tstatic spiral(\n\t\tvertices: V3[],\n\t\tlineAxis: { anchor: V3; dir1: V3 },\n\t\ttotalRads: raddd,\n\t\tsteps: int,\n\t\tgradient: number,\n\t\tnormals?: V3[],\n\t\tvqs?: [number, number][],\n\t) {\n\t\tconst mesh = new Mesh().addIndexBuffer(\"TRIANGLES\")\n\t\tnormals && mesh.addVertexBuffer(\"normals\", \"ts_Normal\")\n\t\tvqs && mesh.addVertexBuffer(\"coordsUVQ\", \"ts_TexCoordUVQ\")\n\t\tconst vc = vertices.length,\n\t\t\tvTotal = vc * steps\n\n\t\tconst rotMat = new M4()\n\t\tconst triangles = mesh.TRIANGLES\n\t\tfor (let i = 0; i < steps; i++) {\n\t\t\t// add triangles\n\t\t\tconst rads = totalRads * (i / steps)\n\t\t\tM4.rotateLine(lineAxis.anchor, lineAxis.dir1, rads, rotMat)\n\n\t\t\tmesh.vertices.push(\n\t\t\t\t...rotMat\n\t\t\t\t\t.translate(\n\t\t\t\t\t\tlineAxis.dir1.toLength(\n\t\t\t\t\t\t\t(totalRads / TAU) * (i / steps) * gradient,\n\t\t\t\t\t\t),\n\t\t\t\t\t)\n\t\t\t\t\t.transformedPoints(vertices),\n\t\t\t)\n\n\t\t\tnormals && mesh.normals!.push(...rotMat.transformedVectors(normals))\n\t\t\tvqs &&\n\t\t\t\t((mesh as unknown) as {\n\t\t\t\t\tcoordsUVQ: [number, number, number][]\n\t\t\t\t}).coordsUVQ.push(\n\t\t\t\t\t...vqs.map(([v, q]): [number, number, number] => [\n\t\t\t\t\t\t(i / steps) * q,\n\t\t\t\t\t\tv,\n\t\t\t\t\t\tq,\n\t\t\t\t\t]),\n\t\t\t\t)\n\t\t\tif (i !== steps - 1) {\n\t\t\t\tfor (let j = 0; j < vc - 1; j++) {\n\t\t\t\t\tpushQuad(\n\t\t\t\t\t\ttriangles,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\ti * vc + j + 1,\n\t\t\t\t\t\ti * vc + j,\n\t\t\t\t\t\t((i + 1) * vc + j + 1) % vTotal,\n\t\t\t\t\t\t((i + 1) * vc + j) % vTotal,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\tstatic parametric(\n\t\tpF: (d: number, z: number) => V3,\n\t\tpN: undefined,\n\t\tsMin: number,\n\t\tsMax: number,\n\t\ttMin: number,\n\t\ttMax: number,\n\t\tsRes: number,\n\t\ttRes: number,\n\t): Mesh & { TRIANGLES: int[] }\n\tstatic parametric(\n\t\tpF: (d: number, z: number) => V3,\n\t\tpN: (d: number, z: number) => V3,\n\t\tsMin: number,\n\t\tsMax: number,\n\t\ttMin: number,\n\t\ttMax: number,\n\t\tsRes: number,\n\t\ttRes: number,\n\t): Mesh & { normals: V3[]; TRIANGLES: int[] }\n\tstatic parametric(\n\t\tpF: (d: number, z: number) => V3,\n\t\tpN: ((d: number, z: number) => V3) | undefined,\n\t\tsMin: number,\n\t\tsMax: number,\n\t\ttMin: number,\n\t\ttMax: number,\n\t\tsRes: number,\n\t\ttRes: number,\n\t) {\n\t\tconst mesh = new Mesh()\n\t\t\t.addIndexBuffer(\"TRIANGLES\")\n\t\t\t.addVertexBuffer(\"normals\", \"ts_Normal\")\n\t\tfor (let si = 0; si <= sRes; si++) {\n\t\t\tconst s = lerp(sMin, sMax, si / sRes)\n\t\t\tfor (let ti = 0; ti <= tRes; ti++) {\n\t\t\t\tconst t = lerp(tMin, tMax, ti / tRes)\n\t\t\t\tmesh.vertices.push(pF(s, t))\n\t\t\t\tpN && mesh.normals.push(pN(s, t))\n\t\t\t\tif (ti < tRes && si < sRes) {\n\t\t\t\t\tconst offset = ti + si * (tRes + 1)\n\t\t\t\t\tpushQuad(\n\t\t\t\t\t\tmesh.TRIANGLES,\n\t\t\t\t\t\tfalse,\n\t\t\t\t\t\toffset,\n\t\t\t\t\t\toffset + tRes + 1,\n\t\t\t\t\t\toffset + 1,\n\t\t\t\t\t\toffset + tRes + 2,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn mesh\n\t}\n\n\tstatic load(json: {\n\t\tvertices: Tuple3<number>[]\n\t\ttriangles?: Tuple3<number>[]\n\t\tnormals?: Tuple3<number>[]\n\t}) {\n\t\tconst mesh = new Mesh()\n\t\tif (Array.isArray(json.vertices[0])) {\n\t\t\tmesh.vertices = json.vertices.map((x) => V(x))\n\t\t} else {\n\t\t\tthrow new Error()\n\t\t}\n\t\tif (json.triangles) {\n\t\t\tmesh.addIndexBuffer(\"TRIANGLES\")\n\t\t\t;(mesh as any).TRIANGLES = json.triangles\n\t\t}\n\t\tif (json.normals) {\n\t\t\tmesh.addVertexBuffer(\"normals\", \"ts_Normal\")\n\t\t\t;(mesh as any).normals = json.normals\n\t\t}\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\ttoJSON() {\n\t\treturn {\n\t\t\tvertices: this.vertices.map((x) => x.toArray()),\n\t\t\tTRIANGLES: (this as any).TRIANGLES,\n\t\t}\n\t}\n}\n","/* tslint:disable:no-string-literal */\n/// <reference types=\"webgl-strict-types\" />\nimport {\n\tassert,\n\tassertf,\n\tassertInst,\n\tassertVectors,\n\tint,\n\tM4,\n\tNLA_DEBUG,\n\tV3,\n} from \"ts3dutils\"\n\nimport { Buffer, currentGL, GL_COLOR, Mesh, TSGLContext } from \"./index\"\n\nimport GL = WebGLRenderingContextStrict\nconst WGL = (WebGLRenderingContext as any) as WebGLRenderingContextStrict.Constants\n\n/**\n * These are all the draw modes usable in OpenGL ES\n */\nconst DRAW_MODE_NAMES = {\n\t[WGL.POINTS]: \"POINTS\",\n\t[WGL.LINES]: \"LINES\",\n\t[WGL.LINE_STRIP]: \"LINE_STRIP\",\n\t[WGL.LINE_LOOP]: \"LINE_LOOP\",\n\t[WGL.TRIANGLES]: \"TRIANGLES\",\n\t[WGL.TRIANGLE_STRIP]: \"TRIANGLE_STRIP\",\n\t[WGL.TRIANGLE_FAN]: \"TRIANGLE_FAN\",\n}\nconst DRAW_MODE_CHECKS: { [type: string]: (x: int) => boolean } = {\n\t[WGL.POINTS]: (_) => true,\n\t[WGL.LINES]: (x) => 0 == x % 2, // divisible by 2\n\t[WGL.LINE_STRIP]: (x) => x > 2, // need at least 2\n\t[WGL.LINE_LOOP]: (x) => x > 2, // more like > 3, but oh well\n\t[WGL.TRIANGLES]: (x) => 0 == x % 3, // divisible by 3\n\t[WGL.TRIANGLE_STRIP]: (x) => x > 3,\n\t[WGL.TRIANGLE_FAN]: (x) => x > 3,\n}\n\nexport const SHADER_VAR_TYPES = [\n\t\"FLOAT\",\n\t\"FLOAT_MAT2\",\n\t\"FLOAT_MAT3\",\n\t\"FLOAT_MAT4\",\n\t\"FLOAT_VEC2\",\n\t\"FLOAT_VEC3\",\n\t\"FLOAT_VEC4\",\n\t\"INT\",\n\t\"INT_VEC2\",\n\t\"INT_VEC3\",\n\t\"INT_VEC4\",\n\t\"UNSIGNED_INT\",\n]\n\nexport function isArray<T>(obj: any): obj is T[] {\n\treturn (\n\t\tArray == obj.constructor ||\n\t\tFloat32Array == obj.constructor ||\n\t\tFloat64Array == obj.constructor\n\t)\n}\n\nexport interface UniformTypesMap {\n\tFLOAT_VEC4: GL_COLOR | V3\n\tFLOAT_VEC3: [number, number, number] | V3\n\tFLOAT_VEC2: [number, number] | V3\n\tFLOAT: number\n\tINT: int\n\tFLOAT_MAT4: M4 | number[]\n\tFLOAT_MAT3: M4 | number[]\n\tSAMPLER_2D: int\n\tBOOL: boolean\n}\nexport type UniformTypes = keyof UniformTypesMap\n\nfunction isFloatArray(obj: any): obj is number[] | Float64Array | Float32Array {\n\treturn (\n\t\tFloat32Array == obj.constructor ||\n\t\tFloat64Array == obj.constructor ||\n\t\t(Array.isArray(obj) && obj.every((x) => \"number\" == typeof x))\n\t)\n}\n\nfunction isIntArray(x: any) {\n\tif (\n\t\t[\n\t\t\tInt8Array,\n\t\t\tUint8Array,\n\t\t\tUint8ClampedArray,\n\t\t\tInt16Array,\n\t\t\tUint16Array,\n\t\t\tInt32Array,\n\t\t\tUint32Array,\n\t\t].some((y) => x instanceof y)\n\t) {\n\t\treturn true\n\t}\n\treturn (\n\t\t(x instanceof Float32Array ||\n\t\t\tx instanceof Float64Array ||\n\t\t\tArray.isArray(x)) &&\n\t\t(x as number[]).every((x) => Number.isInteger(x))\n\t)\n}\n\nexport type ShaderType<UniformTypes, AttributeTypes = {}> = string & {\n\tT?: UniformTypes\n\tA?: AttributeTypes\n}\nexport type VarTypeMap = { [name: string]: UniformTypes }\nexport type ShaderSource<\n\tU extends VarTypeMap,\n\tIN extends VarTypeMap,\n\tOUT extends VarTypeMap,\n\tkind extends \"vertex\" | \"fragment\"\n> = string & { U: U; IN: IN; OUT: OUT; kind: kind }\n\n//const x:UniformTypes = undefined as 'FLOAT_VEC4' | 'FLOAT_VEC3'\nexport class Shader<\n\tUniformTypes extends VarTypeMap = any,\n\tAttributeTypes extends VarTypeMap = any\n> {\n\tprogram: WebGLProgram\n\tactiveMatrices: { [matrixName: string]: boolean }\n\tattributeLocations: { [attributeName: string]: number }\n\tconstantAttributes: { [attributeName: string]: boolean }\n\tuniformLocations: { [uniformName: string]: WebGLUniformLocation }\n\tuniformInfos: { [uniformName: string]: GL.WebGLActiveInfo<GL.UniformType> }\n\tprojectionMatrixVersion = -1\n\tmodelViewMatrixVersion = -1\n\tgl: TSGLContext\n\n\t/**\n\t * Create shader drom typed vertex and fragment source. Weird generic arguments are because\n\t * the vertex shader is required to have the OUT types the fragment shader needs as IN,\n\t * but not vice-versa.\n\t */\n\tstatic create<\n\t\tFragSrc extends ShaderSource<{}, {}, {}, \"fragment\">,\n\t\tVertSrc extends ShaderSource<{}, {}, FragSrc[\"IN\"], \"vertex\">\n\t>(\n\t\tvertexSource: VertSrc,\n\t\tfragmentSource: FragSrc,\n\t\tgl?: TSGLContext,\n\t): Shader<VertSrc[\"U\"] & FragSrc[\"U\"], VertSrc[\"IN\"]>\n\t/**\n\t * Create shader from typed vertex and untyped fragment source. Uniform of the fragment shader\n\t * can optionally be manually specified.\n\t */\n\tstatic create<\n\t\tFU extends VarTypeMap,\n\t\tVertSrc extends ShaderSource<{}, {}, {}, \"vertex\">\n\t>(\n\t\tvertexSource: VertSrc,\n\t\tfragmentSource: string & { IN?: undefined },\n\t\tgl?: TSGLContext,\n\t): Shader<FU & VertSrc[\"U\"], VertSrc[\"IN\"]>\n\t/**\n\t * Create shader from untyped vertex and typed fragment source. Uniform and attribute types of the shader\n\t * can optionally be manually specified.\n\t */\n\tstatic create<\n\t\tVU extends VarTypeMap,\n\t\tVA extends VarTypeMap,\n\t\tFragSrc extends ShaderSource<{}, {}, {}, \"vertex\">\n\t>(\n\t\tvertexSource: string & { IN?: undefined },\n\t\tfragmentSource: FragSrc,\n\t\tgl?: TSGLContext,\n\t): Shader<VU & FragSrc[\"U\"], VA>\n\t/**\n\t * Create shader from untyped vertex and fragment source. Uniform and attribute types of the shader\n\t * can optionally be manually specified.\n\t */\n\tstatic create<U extends VarTypeMap = {}, A extends VarTypeMap = {}>(\n\t\tvertexSource: string & { IN?: undefined },\n\t\tfragmentSource: string & { IN?: undefined },\n\t\tgl?: TSGLContext,\n\t): Shader<U, A>\n\tstatic create(\n\t\tvertexSource: string,\n\t\tfragmentSource: string,\n\t\tgl?: TSGLContext,\n\t) {\n\t\treturn new Shader(vertexSource, fragmentSource, gl) as any\n\t}\n\n\t/**\n\t * Provides a convenient wrapper for WebGL shaders. A few uniforms and attributes,\n\t * prefixed with `gl_`, are automatically added to all shader sources to make\n\t * simple shaders easier to write.\n\t * Headers for the following variables are automatically prepended to the passed source. The correct variables\n\t * are also automatically passed to the shader when drawing.\n\t *\n\t * For vertex and fragment shaders:\n\t uniform mat3 ts_NormalMatrix;\n\t uniform mat4 ts_ModelViewMatrix;\n\t uniform mat4 ts_ProjectionMatrix;\n\t uniform mat4 ts_ModelViewProjectionMatrix;\n\t uniform mat4 ts_ModelViewMatrixInverse;\n\t uniform mat4 ts_ProjectionMatrixInverse;\n\t uniform mat4 ts_ModelViewProjectionMatrixInverse;\n\t *\n\t *\n\t * Example usage:\n\t *\n\t *  const shader = new GL.Shader(\n\t *      `void main() { gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex; }`,\n\t *      `uniform vec4 color; void main() { gl_FragColor = color; }`)\n\t *\n\t *  shader.uniforms({ color: [1, 0, 0, 1] }).draw(mesh)\n\t *\n\t * Compiles a shader program using the provided vertex and fragment shaders.\n\t */\n\tprotected constructor(\n\t\tvertexSource: string,\n\t\tfragmentSource: string,\n\t\tgl = currentGL(),\n\t) {\n\t\t// const versionRegex = /^(?:\\s+|\\/\\/[\\s\\S]*?[\\r\\n]+|\\/\\*[\\s\\S]*?\\*\\/)+(#version\\s+(\\d+)\\s+es)/\n\t\t// Headers are prepended to the sources to provide some automatic functionality.\n\t\tconst header = `\n\t\tuniform mat3 ts_NormalMatrix;\n\t\tuniform mat4 ts_ModelViewMatrix;\n\t\tuniform mat4 ts_ProjectionMatrix;\n\t\tuniform mat4 ts_ModelViewProjectionMatrix;\n\t\tuniform mat4 ts_ModelViewMatrixInverse;\n\t\tuniform mat4 ts_ProjectionMatrixInverse;\n\t\tuniform mat4 ts_ModelViewProjectionMatrixInverse;\n\t`\n\t\tconst matrixNames = header.match(/\\bts_\\w+/g)\n\n\t\t// Compile and link errors are thrown as strings.\n\t\tfunction compileSource(type: GL.ShaderType, source: string) {\n\t\t\tconst shader = gl.createShader(type)!\n\t\t\tgl.shaderSource(shader, source)\n\t\t\tgl.compileShader(shader)\n\t\t\tif (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n\t\t\t\tthrow new Error(\"compile error: \" + gl.getShaderInfoLog(shader))\n\t\t\t}\n\t\t\treturn shader\n\t\t}\n\n\t\tthis.gl = gl\n\t\tthis.program = gl.createProgram()!\n\t\tgl.attachShader(\n\t\t\tthis.program,\n\t\t\tcompileSource(gl.VERTEX_SHADER, vertexSource),\n\t\t)\n\t\tgl.attachShader(\n\t\t\tthis.program,\n\t\t\tcompileSource(gl.FRAGMENT_SHADER, fragmentSource),\n\t\t)\n\t\tgl.linkProgram(this.program)\n\t\tif (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n\t\t\tthrow new Error(\"link error: \" + gl.getProgramInfoLog(this.program))\n\t\t}\n\t\tthis.attributeLocations = {}\n\t\tthis.uniformLocations = {}\n\t\tthis.constantAttributes = {}\n\n\t\t// Check for the use of built-in matrices that require expensive matrix\n\t\t// multiplications to compute, and record these in `activeMatrices`.\n\t\tthis.activeMatrices = {}\n\t\tmatrixNames &&\n\t\t\tmatrixNames.forEach((name) => {\n\t\t\t\tif (gl.getUniformLocation(this.program, name)) {\n\t\t\t\t\tthis.activeMatrices[name] = true\n\t\t\t\t}\n\t\t\t})\n\n\t\tthis.uniformInfos = {}\n\t\tfor (\n\t\t\tlet i = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);\n\t\t\ti-- > 0;\n\n\t\t) {\n\t\t\t// see https://www.khronos.org/registry/OpenGL-Refpages/es2.0/xhtml/glGetActiveUniform.xml\n\t\t\t// this.program has already been checked\n\t\t\t// i is in bounds\n\t\t\tconst info = gl.getActiveUniform(this.program, i)!\n\t\t\tthis.uniformInfos[info.name] = info\n\t\t}\n\t}\n\n\t/**\n\t * Set a uniform for each property of `uniforms`. The correct `viewerGL.uniform*()` method is inferred from the\n\t * value types and from the stored uniform sampler flags.\n\t */\n\tuniforms(\n\t\tuniforms: Partial<\n\t\t\t{ [K in keyof UniformTypes]: UniformTypesMap[UniformTypes[K]] }\n\t\t>,\n\t): this {\n\t\tconst gl = this.gl\n\t\tgl.useProgram(this.program)\n\n\t\tfor (const name in uniforms) {\n\t\t\tconst location =\n\t\t\t\tthis.uniformLocations[name] ||\n\t\t\t\tgl.getUniformLocation(this.program, name)\n\t\t\t// !location && console.warn(name + ' uniform is not used in shader')\n\t\t\tif (!location) continue\n\t\t\tthis.uniformLocations[name] = location\n\t\t\tlet value: any = uniforms[name] as any\n\t\t\tconst info = this.uniformInfos[name]\n\t\t\tif (NLA_DEBUG) {\n\t\t\t\tif (!info) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`uniform ${name} is not defined (available = ${Object.keys(\n\t\t\t\t\t\t\tthis.uniformInfos,\n\t\t\t\t\t\t).join(\",\")})`,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\t// TODO: better errors\n\t\t\t\tif (\n\t\t\t\t\tgl.SAMPLER_2D == info.type ||\n\t\t\t\t\tgl.SAMPLER_CUBE == info.type ||\n\t\t\t\t\tgl.INT == info.type\n\t\t\t\t) {\n\t\t\t\t\tif (1 == info.size) {\n\t\t\t\t\t\tassert(Number.isInteger(value))\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert(\n\t\t\t\t\t\t\tisIntArray(value) && value.length == info.size,\n\t\t\t\t\t\t\t\"value must be int array if info.size != 1\",\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tassert(\n\t\t\t\t\tgl.FLOAT != info.type ||\n\t\t\t\t\t\t(1 == info.size && \"number\" === typeof value) ||\n\t\t\t\t\t\tisFloatArray(value),\n\t\t\t\t)\n\t\t\t\tassert(\n\t\t\t\t\tgl.FLOAT_VEC3 != info.type ||\n\t\t\t\t\t\t(1 == info.size && value instanceof V3) ||\n\t\t\t\t\t\t(Array.isArray(value) &&\n\t\t\t\t\t\t\tinfo.size == value.length &&\n\t\t\t\t\t\t\tassertVectors(...value)),\n\t\t\t\t)\n\t\t\t\tassert(\n\t\t\t\t\tgl.FLOAT_VEC4 != info.type ||\n\t\t\t\t\t\t1 != info.size ||\n\t\t\t\t\t\t(isFloatArray(value) && value.length == 4),\n\t\t\t\t)\n\t\t\t\tassert(gl.FLOAT_MAT4 != info.type || value instanceof M4, () =>\n\t\t\t\t\tvalue.toSource(),\n\t\t\t\t)\n\t\t\t\tassert(\n\t\t\t\t\tgl.FLOAT_MAT3 != info.type ||\n\t\t\t\t\t\tvalue.length == 9 ||\n\t\t\t\t\t\tvalue instanceof M4,\n\t\t\t\t)\n\t\t\t}\n\t\t\tif (value instanceof V3) {\n\t\t\t\tvalue = value.toArray()\n\t\t\t}\n\t\t\tif (gl.FLOAT_VEC4 == info.type && info.size != 1) {\n\t\t\t\tif (\n\t\t\t\t\tvalue instanceof Float32Array ||\n\t\t\t\t\tvalue instanceof Float64Array\n\t\t\t\t) {\n\t\t\t\t\tgl.uniform4fv(\n\t\t\t\t\t\tlocation,\n\t\t\t\t\t\tvalue instanceof Float32Array\n\t\t\t\t\t\t\t? value\n\t\t\t\t\t\t\t: Float32Array.from(value),\n\t\t\t\t\t)\n\t\t\t\t} else {\n\t\t\t\t\tgl.uniform4fv(\n\t\t\t\t\t\tlocation,\n\t\t\t\t\t\tvalue.flatMap((x: any[]) => x),\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t} else if (gl.FLOAT == info.type && info.size != 1) {\n\t\t\t\tgl.uniform1fv(location, value)\n\t\t\t} else if (gl.FLOAT_VEC3 == info.type && info.size != 1) {\n\t\t\t\tgl.uniform3fv(location, V3.pack(value))\n\t\t\t} else if (value.length) {\n\t\t\t\tswitch (value.length) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tgl.uniform1fv(location, value)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tgl.uniform2fv(location, value)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tgl.uniform3fv(location, value)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tgl.uniform4fv(location, value)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t// Matrices are automatically transposed, since WebGL uses column-major\n\t\t\t\t\t// indices instead of row-major indices.\n\t\t\t\t\tcase 9:\n\t\t\t\t\t\t// prettier-ignore\n\t\t\t\t\t\tgl.uniformMatrix3fv(location, false, new Float32Array([\n\t\t\t\t\t\t\tvalue[0], value[3], value[6],\n\t\t\t\t\t\t\tvalue[1], value[4], value[7],\n\t\t\t\t\t\t\tvalue[2], value[5], value[8],\n\t\t\t\t\t\t]))\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 16:\n\t\t\t\t\t\t// prettier-ignore\n\t\t\t\t\t\tgl.uniformMatrix4fv(location, false, new Float32Array([\n\t\t\t\t\t\t\tvalue[0], value[4], value[8], value[12],\n\t\t\t\t\t\t\tvalue[1], value[5], value[9], value[13],\n\t\t\t\t\t\t\tvalue[2], value[6], value[10], value[14],\n\t\t\t\t\t\t\tvalue[3], value[7], value[11], value[15],\n\t\t\t\t\t\t]))\n\t\t\t\t\t\tbreak\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\"don't know how to load uniform \\\"\" +\n\t\t\t\t\t\t\t\tname +\n\t\t\t\t\t\t\t\t'\" of length ' +\n\t\t\t\t\t\t\t\tvalue.length,\n\t\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t} else if (\"number\" == typeof value) {\n\t\t\t\tif (\n\t\t\t\t\tgl.SAMPLER_2D == info.type ||\n\t\t\t\t\tgl.SAMPLER_CUBE == info.type ||\n\t\t\t\t\tgl.INT == info.type\n\t\t\t\t) {\n\t\t\t\t\tgl.uniform1i(location, value)\n\t\t\t\t} else {\n\t\t\t\t\tgl.uniform1f(location, value)\n\t\t\t\t}\n\t\t\t} else if (\"boolean\" == typeof value) {\n\t\t\t\tgl.uniform1i(location, +value)\n\t\t\t} else if (value instanceof M4) {\n\t\t\t\tconst m = value.m\n\t\t\t\tif (gl.FLOAT_MAT4 == info.type) {\n\t\t\t\t\t// prettier-ignore\n\t\t\t\t\tgl.uniformMatrix4fv(location, false, [\n\t\t\t\t\t\tm[0], m[4], m[8], m[12],\n\t\t\t\t\t\tm[1], m[5], m[9], m[13],\n\t\t\t\t\t\tm[2], m[6], m[10], m[14],\n\t\t\t\t\t\tm[3], m[7], m[11], m[15]])\n\t\t\t\t} else if (gl.FLOAT_MAT3 == info.type) {\n\t\t\t\t\t// prettier-ignore\n\t\t\t\t\tgl.uniformMatrix3fv(location, false, [\n\t\t\t\t\t\tm[0], m[4], m[8],\n\t\t\t\t\t\tm[1], m[5], m[9],\n\t\t\t\t\t\tm[2], m[6], m[10]])\n\t\t\t\t} else if (gl.FLOAT_MAT2 == info.type) {\n\t\t\t\t\t// prettier-ignore\n\t\t\t\t\tgl.uniformMatrix2fv(location, false, new Float32Array([\n\t\t\t\t\t\tm[0], m[4],\n\t\t\t\t\t\tm[1], m[5]]))\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(`Can't assign M4 to ${info.type}`)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'attempted to set uniform \"' +\n\t\t\t\t\t\tname +\n\t\t\t\t\t\t'\" to invalid value ' +\n\t\t\t\t\t\tvalue,\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\n\t\treturn this\n\t}\n\n\tattributes(\n\t\tattributes: Partial<\n\t\t\t{ [K in keyof AttributeTypes]: UniformTypesMap[AttributeTypes[K]] }\n\t\t>,\n\t): this {\n\t\tconst gl = this.gl\n\t\tgl.useProgram(this.program)\n\n\t\tfor (const name in attributes) {\n\t\t\tconst location =\n\t\t\t\tthis.attributeLocations[name] ||\n\t\t\t\tgl.getAttribLocation(this.program, name)\n\t\t\tif (location == -1) {\n\t\t\t\tif (!name.startsWith(\"ts_\")) {\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t`Vertex buffer ${name} was not bound because the attribute is not active.`,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tthis.attributeLocations[name] = location\n\t\t\tgl.disableVertexAttribArray(location)\n\t\t\tlet value = attributes[name]\n\t\t\tif (value instanceof V3) {\n\t\t\t\t// TODO: figure out the types here...\n\t\t\t\tvalue = value.toArray() as any\n\t\t\t}\n\t\t\tif (\"number\" === typeof value) {\n\t\t\t\tgl.vertexAttrib1f(location, value)\n\t\t\t} else {\n\t\t\t\tgl.vertexAttrib4fv(location, value as number[])\n\t\t\t\t// switch ((value as number[]).length) {\n\t\t\t\t// \tcase 1:\n\t\t\t\t// \t\tgl.vertexAttrib1fv(location, value as number[])\n\t\t\t\t// \t\tbreak\n\t\t\t\t// \tcase 2:\n\t\t\t\t// \t\tgl.vertexAttrib2fv(location, value as number[])\n\t\t\t\t// \t\tbreak\n\t\t\t\t// \tcase 3:\n\t\t\t\t// \t\tgl.vertexAttrib3fv(location, value as number[])\n\t\t\t\t// \t\tbreak\n\t\t\t\t// \tcase 4:\n\t\t\t\t// \t\tbreak\n\t\t\t\t// }\n\t\t\t}\n\t\t\tthis.constantAttributes[name] = true\n\t\t}\n\t\treturn this\n\t}\n\n\t/**\n\t * Sets all uniform matrix attributes, binds all relevant buffers, and draws the mesh geometry as indexed\n\t * triangles or indexed LINES. Set `mode` to `gl.LINES` (and either add indices to `LINES` or call\n\t * `computeWireframe()`) to draw the mesh in wireframe.\n\t *\n\t * @param mesh\n\t * @param mode Defaults to 'TRIANGLES'. Must be passed as string so the correct index buffer can be\n\t *     automatically drawn.\n\t * @param start int\n\t * @param count int\n\t */\n\tdraw(\n\t\tmesh: Mesh,\n\t\tmode: GL.DrawMode = WGL.TRIANGLES,\n\t\tstart?: int,\n\t\tcount?: int,\n\t): this {\n\t\tassert(mesh.hasBeenCompiled, \"mesh.hasBeenCompiled\")\n\t\tassert(undefined != DRAW_MODE_NAMES[mode])\n\t\tconst modeName: string = DRAW_MODE_NAMES[mode]\n\t\t// assert(mesh.indexBuffers[modeStr], `mesh.indexBuffers[${modeStr}] undefined`)\n\t\treturn this.drawBuffers(\n\t\t\tmesh.vertexBuffers,\n\t\t\tmesh.indexBuffers[modeName],\n\t\t\tmode,\n\t\t\tstart,\n\t\t\tcount,\n\t\t)\n\t}\n\n\tprivate outputWarnings: { [key: string]: boolean } = {}\n\n\t/**\n\t * Sets all uniform matrix attributes, binds all relevant buffers, and draws the\n\t * indexed mesh geometry. The `vertexBuffers` argument is a map from attribute\n\t * names to `Buffer` objects of type `WGL.ARRAY_BUFFER`, `indexBuffer` is a `Buffer`\n\t * object of type `WGL.ELEMENT_ARRAY_BUFFER`, and `mode` is a WebGL primitive mode\n\t * like `WGL.TRIANGLES` or `WGL.LINES`. This method automatically creates and caches\n\t * vertex attribute pointers for attributes as needed.\n\t */\n\tdrawBuffers(\n\t\tvertexBuffers: { [attributeName: string]: Buffer },\n\t\tindexBuffer: Buffer | undefined,\n\t\tmode: GL.DrawMode = WGL.TRIANGLES,\n\t\tstart: int = 0,\n\t\tcount?: int,\n\t): this {\n\t\tconst gl = this.gl\n\t\tassert(undefined != DRAW_MODE_NAMES[mode])\n\t\tassertf(() => 1 <= Object.keys(vertexBuffers).length)\n\t\tObject.keys(vertexBuffers).forEach((key) =>\n\t\t\tassertInst(Buffer, vertexBuffers[key]),\n\t\t)\n\n\t\t// Only varruct up the built-in matrices that are active in the shader\n\t\tconst on = this.activeMatrices\n\t\tconst modelViewMatrixInverse =\n\t\t\t(on[\"ts_ModelViewMatrixInverse\"] || on[\"ts_NormalMatrix\"]) &&\n\t\t\t//&& this.modelViewMatrixVersion != gl.modelViewMatrixVersion\n\t\t\tgl.modelViewMatrix.inversed()\n\t\tconst projectionMatrixInverse =\n\t\t\ton[\"ts_ProjectionMatrixInverse\"] &&\n\t\t\t//&& this.projectionMatrixVersion != gl.projectionMatrixVersion\n\t\t\tgl.projectionMatrix.inversed()\n\t\tconst modelViewProjectionMatrix =\n\t\t\t(on[\"ts_ModelViewProjectionMatrix\"] ||\n\t\t\t\ton[\"ts_ModelViewProjectionMatrixInverse\"]) &&\n\t\t\t//&& (this.projectionMatrixVersion != gl.projectionMatrixVersion || this.modelViewMatrixVersion !=\n\t\t\t// gl.modelViewMatrixVersion)\n\t\t\tgl.projectionMatrix.times(gl.modelViewMatrix)\n\n\t\tconst uni: { [matrixName: string]: M4 } = {} // Uniform Matrices\n\t\ton[\"ts_ModelViewMatrix\"] &&\n\t\t\tthis.modelViewMatrixVersion != gl.modelViewMatrixVersion &&\n\t\t\t(uni[\"ts_ModelViewMatrix\"] = gl.modelViewMatrix)\n\t\ton[\"ts_ModelViewMatrixInverse\"] &&\n\t\t\t(uni[\"ts_ModelViewMatrixInverse\"] = modelViewMatrixInverse as M4)\n\t\ton[\"ts_ProjectionMatrix\"] &&\n\t\t\tthis.projectionMatrixVersion != gl.projectionMatrixVersion &&\n\t\t\t(uni[\"ts_ProjectionMatrix\"] = gl.projectionMatrix)\n\t\tprojectionMatrixInverse &&\n\t\t\t(uni[\"ts_ProjectionMatrixInverse\"] = projectionMatrixInverse)\n\t\tmodelViewProjectionMatrix &&\n\t\t\t(uni[\"ts_ModelViewProjectionMatrix\"] = modelViewProjectionMatrix)\n\t\tmodelViewProjectionMatrix &&\n\t\t\ton[\"ts_ModelViewProjectionMatrixInverse\"] &&\n\t\t\t(uni[\n\t\t\t\t\"ts_ModelViewProjectionMatrixInverse\"\n\t\t\t] = modelViewProjectionMatrix.inversed())\n\t\ton[\"ts_NormalMatrix\"] &&\n\t\t\tthis.modelViewMatrixVersion != gl.modelViewMatrixVersion &&\n\t\t\t(uni[\n\t\t\t\t\"ts_NormalMatrix\"\n\t\t\t] = (modelViewMatrixInverse as M4).transposed())\n\t\tthis.uniforms(uni as any)\n\t\tthis.projectionMatrixVersion = gl.projectionMatrixVersion\n\t\tthis.modelViewMatrixVersion = gl.modelViewMatrixVersion\n\n\t\t// Create and enable attribute pointers as necessary.\n\t\tlet minVertexBufferLength = Infinity\n\t\tfor (const attribute in vertexBuffers) {\n\t\t\tconst buffer = vertexBuffers[attribute]\n\t\t\tassert(buffer.hasBeenCompiled)\n\t\t\tconst location =\n\t\t\t\tthis.attributeLocations[attribute] ||\n\t\t\t\tgl.getAttribLocation(this.program, attribute)\n\t\t\tif (location == -1 || !buffer.buffer) {\n\t\t\t\tif (!attribute.startsWith(\"ts_\")) {\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t`Vertex buffer ${attribute} was not bound because the attribute is not active.`,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tthis.attributeLocations[attribute] = location\n\t\t\tgl.bindBuffer(WGL.ARRAY_BUFFER, buffer.buffer)\n\n\t\t\tgl.enableVertexAttribArray(location)\n\n\t\t\tgl.vertexAttribPointer(\n\t\t\t\tlocation,\n\t\t\t\tbuffer.spacing,\n\t\t\t\tWGL.FLOAT,\n\t\t\t\tfalse,\n\t\t\t\t0,\n\t\t\t\t0,\n\t\t\t)\n\n\t\t\tminVertexBufferLength = Math.min(\n\t\t\t\tminVertexBufferLength,\n\t\t\t\tbuffer.count,\n\t\t\t)\n\t\t}\n\n\t\t// Disable unused attribute pointers.\n\t\tfor (const attribute in this.attributeLocations) {\n\t\t\tif (!(attribute in vertexBuffers)) {\n\t\t\t\tgl.disableVertexAttribArray(this.attributeLocations[attribute])\n\t\t\t}\n\t\t}\n\n\t\tif (NLA_DEBUG) {\n\t\t\tconst numAttribs = gl.getProgramParameter(\n\t\t\t\tthis.program,\n\t\t\t\tgl.ACTIVE_ATTRIBUTES,\n\t\t\t)\n\t\t\tfor (let i = 0; i < numAttribs; ++i) {\n\t\t\t\tconst buffer = gl.getVertexAttrib(\n\t\t\t\t\ti,\n\t\t\t\t\tgl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING,\n\t\t\t\t)\n\t\t\t\tif (!buffer) {\n\t\t\t\t\tconst info = gl.getActiveAttrib(this.program, i)!\n\t\t\t\t\tif (\n\t\t\t\t\t\t!this.constantAttributes[info.name] &&\n\t\t\t\t\t\t!this.outputWarnings[info.name]\n\t\t\t\t\t) {\n\t\t\t\t\t\tthis.outputWarnings[info.name] = true\n\t\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\t\t\"No buffer is bound to attribute \" +\n\t\t\t\t\t\t\t\tinfo.name +\n\t\t\t\t\t\t\t\t\" and it was not set with .attributes()\",\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// console.log('name:', info.name, 'type:', info.type, 'size:', info.size)\n\t\t\t}\n\t\t}\n\n\t\t// Draw the geometry.\n\t\tif (minVertexBufferLength) {\n\t\t\tif (undefined === count) {\n\t\t\t\tcount = indexBuffer ? indexBuffer.count : minVertexBufferLength\n\t\t\t}\n\t\t\tassert(\n\t\t\t\tDRAW_MODE_CHECKS[mode](count),\n\t\t\t\t\"count \" +\n\t\t\t\t\tcount +\n\t\t\t\t\t\"doesn't fulfill requirement +\" +\n\t\t\t\t\tDRAW_MODE_CHECKS[mode].toString() +\n\t\t\t\t\t\" for mode \" +\n\t\t\t\t\tDRAW_MODE_NAMES[mode],\n\t\t\t)\n\n\t\t\tif (indexBuffer) {\n\t\t\t\tassert(indexBuffer.hasBeenCompiled)\n\t\t\t\tassert(minVertexBufferLength > indexBuffer.maxValue!)\n\t\t\t\tassert(count % indexBuffer.spacing == 0)\n\t\t\t\tassert(start % indexBuffer.spacing == 0)\n\t\t\t\tif (start + count > indexBuffer.count) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\"Buffer not long enough for passed parameters start/length/buffer length \" +\n\t\t\t\t\t\t\tstart +\n\t\t\t\t\t\t\t\" \" +\n\t\t\t\t\t\t\tcount +\n\t\t\t\t\t\t\t\" \" +\n\t\t\t\t\t\t\tindexBuffer.count,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\tgl.bindBuffer(WGL.ELEMENT_ARRAY_BUFFER, indexBuffer.buffer!)\n\t\t\t\t// start parameter has to be multiple of sizeof(WGL.UNSIGNED_SHORT)\n\t\t\t\tgl.drawElements(\n\t\t\t\t\tmode,\n\t\t\t\t\tcount,\n\t\t\t\t\tindexBuffer.bindSize as GL[\"UNSIGNED_SHORT\"],\n\t\t\t\t\tindexBuffer.type.BYTES_PER_ELEMENT * start,\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tif (start + count > minVertexBufferLength) {\n\t\t\t\t\tthrow new Error(\"invalid\")\n\t\t\t\t}\n\t\t\t\tgl.drawArrays(mode, start, count)\n\t\t\t}\n\t\t\tgl.drawCallCount++\n\t\t}\n\n\t\treturn this\n\t}\n}\n","/// <reference types=\"webgl-strict-types\" />\nimport { assert, int } from \"ts3dutils\"\n\nimport { currentGL, TSGLContext } from \"./index\"\nimport GL = WebGLRenderingContextStrict\nimport GL2 = WebGL2RenderingContextStrict\n\nexport interface TextureOptions {\n\twrap?: GL.TextureWrap // defaults to WGL.CLAMP_TO_EDGE, or set wrapS and wrapT individually.\n\twrapS?: GL.TextureWrap\n\twrapT?: GL.TextureWrap\n\tfilter?: GL.TextureMagFilter // defaults to WGL.LINEAR, or set minFilter and magFilter individually.\n\tminFilter?: GL.TextureMinFilter\n\tmagFilter?: GL.TextureMagFilter\n\tformat?: GL2.TextureFormat // defaults to WGL.RGBA.\n\tinternalFormat?: GL2.TextureInternalFormat\n\ttype?: GL.ReadPixelsType // defaults to WGL.UNSIGNED_BYTE.\n\tdata?: any\n}\n\nexport class Texture {\n\theight: int\n\twidth: int\n\ttexture: WebGLTexture\n\t// e.g. viewerGL.UNSIGNED_BYTE, viewerGL.FLOAT\n\tinternalFormat: GL2.TextureInternalFormat\n\tformat: GL2.TextureFormat\n\t// e.g. viewerGL.RGBA\n\ttype: GL.ReadPixelsType\n\n\t/**\n\t * Provides a simple wrapper around WebGL textures that supports render-to-texture.\n\t *\n\t * The arguments `width` and `height` give the size of the texture in texels.\n\t * WebGL texture dimensions must be powers of two unless `filter` is set to\n\t * either `WGL.NEAREST` or `WGL.LINEAR` and `wrap` is set to `WGL.CLAMP_TO_EDGE`\n\t * (which they are by default).\n\t *\n\t * Texture parameters can be passed in via the `options` argument.\n\t * Example usage:\n\t *\n\t *      let tex = new GL.Texture(256, 256, {\n\t *       magFilter: WGL.NEAREST,\n\t *       minFilter: WGL.LINEAR,\n\t *\n\t *       wrapS: WGL.REPEAT,\n\t *       wrapT: WGL.REPEAT,\n\t *\n\t *       format: WGL.RGB, // Defaults to WGL.RGBA\n\t *       type: WGL.FLOAT // Defaults to WGL.UNSIGNED_BYTE\n\t *     })\n\t *\n\t */\n\tconstructor(\n\t\twidth: int,\n\t\theight: int,\n\t\toptions: TextureOptions = {},\n\t\treadonly gl = currentGL(),\n\t) {\n\t\tthis.width = width\n\t\tthis.height = height\n\t\tthis.format = options.format || gl.RGBA\n\t\tthis.internalFormat = options.internalFormat || gl.RGBA\n\t\tthis.type = options.type || gl.UNSIGNED_BYTE\n\t\tconst magFilter = options.filter || options.magFilter || gl.LINEAR\n\t\tconst minFilter = options.filter || options.minFilter || gl.LINEAR\n\t\tif (this.type === gl.FLOAT) {\n\t\t\tif (gl.version != 2 && !gl.getExtension(\"OES_texture_float\")) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"OES_texture_float is required but not supported\",\n\t\t\t\t)\n\t\t\t}\n\t\t\tif (\n\t\t\t\t(minFilter !== gl.NEAREST || magFilter !== gl.NEAREST) &&\n\t\t\t\t!gl.getExtension(\"OES_texture_float_linear\")\n\t\t\t) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"OES_texture_float_linear is required but not supported\",\n\t\t\t\t)\n\t\t\t}\n\t\t} else if (this.type === gl.HALF_FLOAT_OES) {\n\t\t\tif (!gl.getExtension(\"OES_texture_half_float\")) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"OES_texture_half_float is required but not supported\",\n\t\t\t\t)\n\t\t\t}\n\t\t\tif (\n\t\t\t\t(minFilter !== gl.NEAREST || magFilter !== gl.NEAREST) &&\n\t\t\t\t!gl.getExtension(\"OES_texture_half_float_linear\")\n\t\t\t) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"OES_texture_half_float_linear is required but not supported\",\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\n\t\tthis.texture = gl.createTexture()!\n\t\tgl.bindTexture(gl.TEXTURE_2D, this.texture)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter)\n\t\tgl.texParameteri(\n\t\t\tgl.TEXTURE_2D,\n\t\t\tgl.TEXTURE_WRAP_S,\n\t\t\toptions.wrap || options.wrapS || gl.CLAMP_TO_EDGE,\n\t\t)\n\t\tgl.texParameteri(\n\t\t\tgl.TEXTURE_2D,\n\t\t\tgl.TEXTURE_WRAP_T,\n\t\t\toptions.wrap || options.wrapT || gl.CLAMP_TO_EDGE,\n\t\t)\n\t\tgl.texImage2D(\n\t\t\tgl.TEXTURE_2D,\n\t\t\t0,\n\t\t\tthis.internalFormat as any,\n\t\t\twidth,\n\t\t\theight,\n\t\t\t0,\n\t\t\tthis.format as any,\n\t\t\tthis.type as any,\n\t\t\toptions.data,\n\t\t)\n\t}\n\n\tsetData(data: ArrayBufferView) {\n\t\tthis.gl.bindTexture(this.gl.TEXTURE_2D, this.texture)\n\t\tthis.gl.texImage2D(\n\t\t\tthis.gl.TEXTURE_2D,\n\t\t\t0,\n\t\t\tthis.internalFormat as any,\n\t\t\tthis.width,\n\t\t\tthis.height,\n\t\t\t0,\n\t\t\tthis.format as any,\n\t\t\tthis.type as any,\n\t\t\tdata as any,\n\t\t)\n\t}\n\n\tdownloadData(data: ArrayBufferView) {\n\t\tif (!this.framebuffer) {\n\t\t\tthrow new Error(\n\t\t\t\t\"No framebuffer. You need to draw to this texture before it makes sense to read from it.\",\n\t\t\t)\n\t\t}\n\t\tconst gl = this.gl\n\t\tconst prevFramebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING)\n\t\tthis.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.framebuffer)\n\t\tthis.gl.readPixels(\n\t\t\t0,\n\t\t\t0,\n\t\t\tthis.width,\n\t\t\tthis.height,\n\t\t\tthis.format as any,\n\t\t\tthis.type as any,\n\t\t\tdata as any,\n\t\t\t0,\n\t\t)\n\t\tprevFramebuffer !== this.framebuffer &&\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, prevFramebuffer)\n\t}\n\n\tbind(unit: int) {\n\t\tthis.gl.activeTexture((this.gl.TEXTURE0 + unit) as GL.TextureUnit)\n\t\tthis.gl.bindTexture(this.gl.TEXTURE_2D, this.texture)\n\t}\n\n\tunbind(unit: int) {\n\t\tthis.gl.activeTexture((this.gl.TEXTURE0 + unit) as GL.TextureUnit)\n\t\tthis.gl.bindTexture(this.gl.TEXTURE_2D, null)\n\t}\n\n\tprivate framebuffer: WebGLFramebuffer | undefined\n\tstatic checkerBoardCanvas: HTMLCanvasElement\n\n\tdrawTo(render: (gl: TSGLContext) => void): void {\n\t\tconst gl = this.gl\n\t\tconst prevFramebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING)\n\t\tif (!this.framebuffer) {\n\t\t\t// create a renderbuffer for the depth component\n\t\t\tconst prevRenderbuffer = gl.getParameter(gl.RENDERBUFFER_BINDING)\n\t\t\tconst depthRenderbuffer = gl.createRenderbuffer()\n\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, depthRenderbuffer)\n\t\t\t// DEPTH_COMPONENT16 is the only depth format\n\t\t\tgl.renderbufferStorage(\n\t\t\t\tgl.RENDERBUFFER,\n\t\t\t\tgl.DEPTH_COMPONENT16,\n\t\t\t\tthis.width,\n\t\t\t\tthis.height,\n\t\t\t)\n\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, prevRenderbuffer)\n\n\t\t\t// create a framebuffer to render to\n\t\t\tthis.framebuffer = gl.createFramebuffer()!\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer)\n\t\t\tgl.framebufferTexture2D(\n\t\t\t\tgl.FRAMEBUFFER,\n\t\t\t\tgl.COLOR_ATTACHMENT0,\n\t\t\t\tgl.TEXTURE_2D,\n\t\t\t\tthis.texture,\n\t\t\t\t0,\n\t\t\t)\n\t\t\tgl.framebufferRenderbuffer(\n\t\t\t\tgl.FRAMEBUFFER,\n\t\t\t\tgl.DEPTH_ATTACHMENT,\n\t\t\t\tgl.RENDERBUFFER,\n\t\t\t\tdepthRenderbuffer,\n\t\t\t)\n\t\t\tif (\n\t\t\t\tgl.checkFramebufferStatus(gl.FRAMEBUFFER) !==\n\t\t\t\tgl.FRAMEBUFFER_COMPLETE\n\t\t\t) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"Rendering to this texture is not supported (incomplete this.framebuffer)\",\n\t\t\t\t)\n\t\t\t}\n\t\t} else if (prevFramebuffer !== this.framebuffer) {\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer)\n\t\t}\n\n\t\tconst prevViewport = gl.getParameter(gl.VIEWPORT)\n\n\t\tgl.viewport(0, 0, this.width, this.height)\n\t\trender(gl)\n\n\t\t// restore previous state\n\t\tprevFramebuffer !== this.framebuffer &&\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, prevFramebuffer)\n\t\tgl.viewport(\n\t\t\tprevViewport[0],\n\t\t\tprevViewport[1],\n\t\t\tprevViewport[2],\n\t\t\tprevViewport[3],\n\t\t)\n\t}\n\n\tswapWith(other: Texture): void {\n\t\tassert(this.gl == other.gl)\n\t\tlet temp\n\t\ttemp = other.texture\n\t\tother.texture = this.texture\n\t\tthis.texture = temp\n\n\t\ttemp = other.width\n\t\tother.width = this.width\n\t\tthis.width = temp\n\n\t\ttemp = other.height\n\t\tother.height = this.height\n\t\tthis.height = temp\n\n\t\ttemp = other.framebuffer\n\t\tother.framebuffer = this.framebuffer\n\t\tthis.framebuffer = temp\n\t}\n\n\t/**\n\t * Return a new texture created from `imgElement`, an `<img>` tag.\n\t */\n\tstatic fromImage(\n\t\timgElement: HTMLImageElement | HTMLCanvasElement,\n\t\toptions: TextureOptions = {},\n\t\tgl: TSGLContext = currentGL(),\n\t): Texture {\n\t\tconst texture = new Texture(\n\t\t\timgElement.width,\n\t\t\timgElement.height,\n\t\t\toptions,\n\t\t\tgl,\n\t\t)\n\t\ttry {\n\t\t\tgl.texImage2D(\n\t\t\t\tgl.TEXTURE_2D,\n\t\t\t\t0,\n\t\t\t\ttexture.format as any,\n\t\t\t\ttexture.format as any,\n\t\t\t\ttexture.type as any,\n\t\t\t\timgElement,\n\t\t\t)\n\t\t} catch (e) {\n\t\t\tif (location.protocol == \"file:\") {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'imgElement not loaded for security reasons (serve this page over \"http://\" instead)',\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"imgElement not loaded for security reasons (imgElement must originate from the same \" +\n\t\t\t\t\t\t\"domain as this page or use Cross-Origin Resource Sharing)\",\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\tif (\n\t\t\toptions.minFilter &&\n\t\t\toptions.minFilter != gl.NEAREST &&\n\t\t\toptions.minFilter != gl.LINEAR\n\t\t) {\n\t\t\tgl.generateMipmap(gl.TEXTURE_2D)\n\t\t}\n\t\treturn texture\n\t}\n\n\t/**\n\t * Returns a checkerboard texture that will switch to the correct texture when it loads.\n\t */\n\tstatic fromURLSwitch(\n\t\turl: string,\n\t\toptions?: TextureOptions,\n\t\tgl = currentGL(),\n\t): Texture {\n\t\tTexture.checkerBoardCanvas =\n\t\t\tTexture.checkerBoardCanvas ||\n\t\t\t(function () {\n\t\t\t\tconst c = document.createElement(\"canvas\").getContext(\"2d\")\n\t\t\t\tif (!c) throw new Error(\"Could not create 2d canvas.\")\n\t\t\t\tc.canvas.width = c.canvas.height = 128\n\t\t\t\tfor (let y = 0; y < c.canvas.height; y += 16) {\n\t\t\t\t\tfor (let x = 0; x < c.canvas.width; x += 16) {\n\t\t\t\t\t\t//noinspection JSBitwiseOperatorUsage\n\t\t\t\t\t\tc.fillStyle = (x ^ y) & 16 ? \"#FFF\" : \"#DDD\"\n\t\t\t\t\t\tc.fillRect(x, y, 16, 16)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn c.canvas\n\t\t\t})()\n\t\tconst texture = Texture.fromImage(Texture.checkerBoardCanvas, options)\n\t\tconst image = new Image()\n\t\timage.onload = () =>\n\t\t\tTexture.fromImage(image, options, gl).swapWith(texture)\n\t\t// error event doesn't return a reason. Most likely a 404.\n\t\timage.onerror = () => {\n\t\t\tthrow new Error(\"Could not load image \" + image.src + \". 404?\")\n\t\t}\n\t\timage.src = url\n\t\treturn texture\n\t}\n\n\tstatic fromURL(\n\t\turl: string,\n\t\toptions?: TextureOptions,\n\t\tgl = currentGL(),\n\t): Promise<Texture> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst image = new Image()\n\t\t\timage.onload = () => resolve(Texture.fromImage(image, options, gl))\n\t\t\timage.onerror = (ev) =>\n\t\t\t\treject(\"Could not load image \" + image.src + \". 404?\" + ev)\n\t\t\timage.src = url\n\t\t})\n\t}\n}\n","\r\nattribute vec2 ts_TexCoord;\r\nattribute vec4 ts_Vertex;\r\nuniform mat4 ts_ModelViewProjectionMatrix;\r\nvarying vec2 coord;\r\nvoid main() {\r\n    coord = ts_TexCoord.xy;\r\n    gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\r\n}","// A fragment shader for rendering signed distance fields. Main use case: text.\r\n\r\nprecision mediump float;\r\n\r\n// the atlas texture\r\nuniform sampler2D u_texture;\r\n\r\n// the color the text should be rendered\r\nuniform vec4 u_color;\r\n\r\n// the zero distance value in the texture\r\nuniform float u_buffer;\r\n\r\n// control the bluriness of the output 0.05 is a good value\r\nuniform float u_gamma;\r\n\r\n// set to > 1.0 to just output the texture \r\nuniform float u_debug;\r\n\r\nvarying vec2 coord;\r\n\r\nvoid main() {\r\n    float dist = texture2D(u_texture, coord).r;\r\n    if (u_debug > 0.0) {\r\n        gl_FragColor = vec4(dist, dist, dist, 1);\r\n    } else {\r\n        float alpha = smoothstep(u_buffer - u_gamma, u_buffer + u_gamma, dist);\r\n        gl_FragColor = vec4(u_color.rgb, alpha * u_color.a);\r\n        if (gl_FragColor.a == 0.0) {\r\n            discard;\r\n        }\r\n    }\r\n}","/*\n ** Copyright (c) 2012 The Khronos Group Inc.\n **\n ** Permission is hereby granted, free of charge, to any person obtaining a\n ** copy of this software and/or associated documentation files (the\n ** 'Materials'), to deal in the Materials without restriction, including\n ** without limitation the rights to use, copy, modify, merge, publish,\n ** distribute, sublicense, and/or sell copies of the Materials, and to\n ** permit persons to whom the Materials are furnished to do so, subject to\n ** the following conditions:\n **\n ** The above copyright notice and this permission notice shall be included\n ** in all copies or substantial portions of the Materials.\n **\n ** THE MATERIALS ARE PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n ** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n ** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n ** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n ** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n ** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n ** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.\n */\n\n// tslint:disable\nimport GL = WebGLRenderingContextStrict\nconst GL = (WebGLRenderingContext as any) as new () => WebGLRenderingContextStrict\n\n// Various functions for helping debug WebGL apps.\n\n/**\n * Wrapped logging function.\n * @param msg Message to log.\n */\nfunction log(msg: string) {\n\tif (window.console && window.console.log) {\n\t\twindow.console.log(msg)\n\t}\n}\n\n/**\n * Wrapped error logging function.\n * @param msg Message to log.\n */\nfunction error(msg: string) {\n\tif (window.console && window.console.error) {\n\t\twindow.console.error(msg)\n\t} else {\n\t\tlog(msg)\n\t}\n}\n\n/**\n * Which arguments are enums based on the number of arguments to the function.\n * So\n *    'texImage2D': {\n *       9: { 0:true, 2:true, 6:true, 7:true },\n *       6: { 0:true, 2:true, 3:true, 4:true },\n *    },\n *\n * means if there are 9 arguments then 6 and 7 are enums, if there are 6\n * arguments 3 and 4 are enums\n *\n * @type {!Object.<number, !Object.<number, string>}\n */\nconst glValidEnumContexts: {\n\t[funcName: string]: {\n\t\t[argCount: number]: {\n\t\t\t[argIndex: number]: boolean | { enumBitwiseOr: string[] }\n\t\t}\n\t}\n} = {\n\t// Generic setters and getters\n\n\tenable: { 1: { 0: true } },\n\tdisable: { 1: { 0: true } },\n\tgetParameter: { 1: { 0: true } },\n\n\t// Rendering\n\n\tdrawArrays: { 3: { 0: true } },\n\tdrawElements: { 4: { 0: true, 2: true } },\n\n\t// Shaders\n\n\tcreateShader: { 1: { 0: true } },\n\tgetShaderParameter: { 2: { 1: true } },\n\tgetProgramParameter: { 2: { 1: true } },\n\tgetShaderPrecisionFormat: { 2: { 0: true, 1: true } },\n\n\t// Vertex attributes\n\n\tgetVertexAttrib: { 2: { 1: true } },\n\tvertexAttribPointer: { 6: { 2: true } },\n\n\t// Textures\n\n\tbindTexture: { 2: { 0: true } },\n\tactiveTexture: { 1: { 0: true } },\n\tgetTexParameter: { 2: { 0: true, 1: true } },\n\ttexParameterf: { 3: { 0: true, 1: true } },\n\ttexParameteri: { 3: { 0: true, 1: true, 2: true } },\n\t// texImage2D and texSubImage2D are defined below with WebGL 2 entrypoints\n\tcopyTexImage2D: { 8: { 0: true, 2: true } },\n\tcopyTexSubImage2D: { 8: { 0: true } },\n\tgenerateMipmap: { 1: { 0: true } },\n\t// compressedTexImage2D and compressedTexSubImage2D are defined below with WebGL 2 entrypoints\n\n\t// Buffer objects\n\n\tbindBuffer: { 2: { 0: true } },\n\t// bufferData and bufferSubData are defined below with WebGL 2 entrypoints\n\tgetBufferParameter: { 2: { 0: true, 1: true } },\n\n\t// Renderbuffers and framebuffers\n\n\tpixelStorei: { 2: { 0: true, 1: true } },\n\t// readPixels is defined below with WebGL 2 entrypoints\n\tbindRenderbuffer: { 2: { 0: true } },\n\tbindFramebuffer: { 2: { 0: true } },\n\tcheckFramebufferStatus: { 1: { 0: true } },\n\tframebufferRenderbuffer: { 4: { 0: true, 1: true, 2: true } },\n\tframebufferTexture2D: { 5: { 0: true, 1: true, 2: true } },\n\tgetFramebufferAttachmentParameter: { 3: { 0: true, 1: true, 2: true } },\n\tgetRenderbufferParameter: { 2: { 0: true, 1: true } },\n\trenderbufferStorage: { 4: { 0: true, 1: true } },\n\n\t// Frame buffer operations (clear, blend, depth test, stencil)\n\n\tclear: {\n\t\t1: {\n\t\t\t0: {\n\t\t\t\tenumBitwiseOr: [\n\t\t\t\t\t\"COLOR_BUFFER_BIT\",\n\t\t\t\t\t\"DEPTH_BUFFER_BIT\",\n\t\t\t\t\t\"STENCIL_BUFFER_BIT\",\n\t\t\t\t],\n\t\t\t},\n\t\t},\n\t},\n\tdepthFunc: { 1: { 0: true } },\n\tblendFunc: { 2: { 0: true, 1: true } },\n\tblendFuncSeparate: { 4: { 0: true, 1: true, 2: true, 3: true } },\n\tblendEquation: { 1: { 0: true } },\n\tblendEquationSeparate: { 2: { 0: true, 1: true } },\n\tstencilFunc: { 3: { 0: true } },\n\tstencilFuncSeparate: { 4: { 0: true, 1: true } },\n\tstencilMaskSeparate: { 2: { 0: true } },\n\tstencilOp: { 3: { 0: true, 1: true, 2: true } },\n\tstencilOpSeparate: { 4: { 0: true, 1: true, 2: true, 3: true } },\n\n\t// Culling\n\n\tcullFace: { 1: { 0: true } },\n\tfrontFace: { 1: { 0: true } },\n\n\t// ANGLE_instanced_arrays extension\n\n\tdrawArraysInstancedANGLE: { 4: { 0: true } },\n\tdrawElementsInstancedANGLE: { 5: { 0: true, 2: true } },\n\n\t// EXT_blend_minmax extension\n\n\tblendEquationEXT: { 1: { 0: true } },\n\n\t// WebGL 2 Buffer objects\n\n\tbufferData: {\n\t\t3: { 0: true, 2: true }, // WebGL 1\n\t\t4: { 0: true, 2: true }, // WebGL 2\n\t\t5: { 0: true, 2: true }, // WebGL 2\n\t},\n\tbufferSubData: {\n\t\t3: { 0: true }, // WebGL 1\n\t\t4: { 0: true }, // WebGL 2\n\t\t5: { 0: true }, // WebGL 2\n\t},\n\tcopyBufferSubData: { 5: { 0: true, 1: true } },\n\tgetBufferSubData: { 3: { 0: true }, 4: { 0: true }, 5: { 0: true } },\n\n\t// WebGL 2 Framebuffer objects\n\n\tblitFramebuffer: {\n\t\t10: {\n\t\t\t8: {\n\t\t\t\tenumBitwiseOr: [\n\t\t\t\t\t\"COLOR_BUFFER_BIT\",\n\t\t\t\t\t\"DEPTH_BUFFER_BIT\",\n\t\t\t\t\t\"STENCIL_BUFFER_BIT\",\n\t\t\t\t],\n\t\t\t},\n\t\t\t9: true,\n\t\t},\n\t},\n\tframebufferTextureLayer: { 5: { 0: true, 1: true } },\n\tinvalidateFramebuffer: { 2: { 0: true } },\n\tinvalidateSubFramebuffer: { 6: { 0: true } },\n\treadBuffer: { 1: { 0: true } },\n\n\t// WebGL 2 Renderbuffer objects\n\n\tgetInternalformatParameter: { 3: { 0: true, 1: true, 2: true } },\n\trenderbufferStorageMultisample: { 5: { 0: true, 2: true } },\n\n\t// WebGL 2 Texture objects\n\n\ttexStorage2D: { 5: { 0: true, 2: true } },\n\ttexStorage3D: { 6: { 0: true, 2: true } },\n\ttexImage2D: {\n\t\t9: { 0: true, 2: true, 6: true, 7: true }, // WebGL 1 & 2\n\t\t6: { 0: true, 2: true, 3: true, 4: true }, // WebGL 1\n\t\t10: { 0: true, 2: true, 6: true, 7: true }, // WebGL 2\n\t},\n\ttexImage3D: {\n\t\t10: { 0: true, 2: true, 7: true, 8: true },\n\t\t11: { 0: true, 2: true, 7: true, 8: true },\n\t},\n\ttexSubImage2D: {\n\t\t9: { 0: true, 6: true, 7: true }, // WebGL 1 & 2\n\t\t7: { 0: true, 4: true, 5: true }, // WebGL 1\n\t\t10: { 0: true, 6: true, 7: true }, // WebGL 2\n\t},\n\ttexSubImage3D: {\n\t\t11: { 0: true, 8: true, 9: true },\n\t\t12: { 0: true, 8: true, 9: true },\n\t},\n\tcopyTexSubImage3D: { 9: { 0: true } },\n\tcompressedTexImage2D: {\n\t\t7: { 0: true, 2: true }, // WebGL 1 & 2\n\t\t8: { 0: true, 2: true }, // WebGL 2\n\t\t9: { 0: true, 2: true }, // WebGL 2\n\t},\n\tcompressedTexImage3D: {\n\t\t8: { 0: true, 2: true },\n\t\t9: { 0: true, 2: true },\n\t\t10: { 0: true, 2: true },\n\t},\n\tcompressedTexSubImage2D: {\n\t\t8: { 0: true, 6: true }, // WebGL 1 & 2\n\t\t9: { 0: true, 6: true }, // WebGL 2\n\t\t10: { 0: true, 6: true }, // WebGL 2\n\t},\n\tcompressedTexSubImage3D: {\n\t\t10: { 0: true, 8: true },\n\t\t11: { 0: true, 8: true },\n\t\t12: { 0: true, 8: true },\n\t},\n\n\t// WebGL 2 Vertex attribs\n\n\tvertexAttribIPointer: { 5: { 2: true } },\n\n\t// WebGL 2 Writing to the drawing buffer\n\n\tdrawArraysInstanced: { 4: { 0: true } },\n\tdrawElementsInstanced: { 5: { 0: true, 2: true } },\n\tdrawRangeElements: { 6: { 0: true, 4: true } },\n\n\t// WebGL 2 Reading back pixels\n\n\treadPixels: {\n\t\t7: { 4: true, 5: true }, // WebGL 1 & 2\n\t\t8: { 4: true, 5: true }, // WebGL 2\n\t},\n\n\t// WebGL 2 Multiple Render Targets\n\n\tclearBufferfv: { 3: { 0: true }, 4: { 0: true } },\n\tclearBufferiv: { 3: { 0: true }, 4: { 0: true } },\n\tclearBufferuiv: { 3: { 0: true }, 4: { 0: true } },\n\tclearBufferfi: { 4: { 0: true } },\n\n\t// WebGL 2 Query objects\n\n\tbeginQuery: { 2: { 0: true } },\n\tendQuery: { 1: { 0: true } },\n\tgetQuery: { 2: { 0: true, 1: true } },\n\tgetQueryParameter: { 2: { 1: true } },\n\n\t// WebGL 2 Sampler objects\n\n\tsamplerParameteri: { 3: { 1: true, 2: true } },\n\tsamplerParameterf: { 3: { 1: true } },\n\tgetSamplerParameter: { 2: { 1: true } },\n\n\t// WebGL 2 Sync objects\n\n\tfenceSync: { 2: { 0: true, 1: { enumBitwiseOr: [] } } },\n\tclientWaitSync: {\n\t\t3: { 1: { enumBitwiseOr: [\"SYNC_FLUSH_COMMANDS_BIT\"] } },\n\t},\n\twaitSync: { 3: { 1: { enumBitwiseOr: [] } } },\n\tgetSyncParameter: { 2: { 1: true } },\n\n\t// WebGL 2 Transform Feedback\n\n\tbindTransformFeedback: { 2: { 0: true } },\n\tbeginTransformFeedback: { 1: { 0: true } },\n\ttransformFeedbackVaryings: { 3: { 2: true } },\n\n\t// WebGL2 Uniform Buffer Objects and Transform Feedback Buffers\n\n\tbindBufferBase: { 3: { 0: true } },\n\tbindBufferRange: { 5: { 0: true } },\n\tgetIndexedParameter: { 2: { 0: true } },\n\tgetActiveUniforms: { 3: { 2: true } },\n\tgetActiveUniformBlockParameter: { 3: { 2: true } },\n}\n\n/**\n * Map of numbers to names.\n * @type {Object}\n */\nlet glEnums: { [k: number]: string } = null as any\n\n/**\n * Map of names to numbers.\n * @type {Object}\n */\nlet enumStringToValue: { [k: string]: GL.GLenum<string> } = null as any\n\n/**\n * Initializes this module. Safe to call more than once.\n * @param ctx A WebGL context. If\n *    you have more than one context it doesn't matter which one\n *    you pass in, it is only used to pull out constants.\n */\nexport function init() {\n\tif (null === glEnums) {\n\t\tglEnums = {}\n\t\tenumStringToValue = {}\n\t\tconst c =\n\t\t\t(window as any).WebGL2RenderingContext ||\n\t\t\t(window as any).WebGLRenderingContext\n\t\tif (!c)\n\t\t\tthrow new Error(\n\t\t\t\t\"Neither WebGL2RenderingContext nor WebGLRenderingContext exists on window.\",\n\t\t\t)\n\t\tfor (const propertyName in c) {\n\t\t\tconst prop = c[propertyName]\n\t\t\tif (\"number\" === typeof prop) {\n\t\t\t\tglEnums[prop] = propertyName\n\t\t\t\tenumStringToValue[propertyName] = prop as any\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Returns true or false if value matches any WebGL enum\n * @param value Value to check if it might be an enum.\n * @return True if value matches one of the WebGL defined enums\n */\nexport function mightBeEnum(value: number): boolean {\n\tinit()\n\treturn glEnums[value] !== undefined\n}\n\n/**\n * Gets an string version of an WebGL enum.\n *\n * Example:\n *   var str = WebGLDebugUtil.glEnumToString(ctx.getError())\n *\n * @param value Value to return an enum for\n * @return The string version of the enum.\n */\nexport function glEnumToString(value: GL.GLenum<string>): string {\n\tinit()\n\tvar name = glEnums[value as any]\n\treturn name !== undefined\n\t\t? \"gl.\" + name\n\t\t: \"/*UNKNOWN WebGL ENUM*/ 0x\" + (value as any).toString(16) + \"\"\n}\n\n/**\n * Converts the argument of a WebGL function to a string.\n * Attempts to convert enum arguments to strings.\n *\n * Example:\n *   WebGLDebugUtil.init(ctx)\n *   var str = WebGLDebugUtil.glFunctionArgToString('bindTexture', 2, 0, gl.TEXTURE_2D)\n *\n * would return 'TEXTURE_2D'\n *\n * @param functionName the name of the WebGL function.\n * @param numArgs the number of arguments passed to the function.\n * @param argumentIndex the index of the argument.\n * @param value The value of the argument.\n * @return The value as a string.\n */\nexport function glFunctionArgToString(\n\tfunctionName: string,\n\tnumArgs: number,\n\targumentIndex: number,\n\tvalue: any,\n): string {\n\tconst funcInfo = glValidEnumContexts[functionName]\n\tif (funcInfo !== undefined) {\n\t\tconst funcOverloadInfo = funcInfo[numArgs]\n\t\tif (funcOverloadInfo !== undefined) {\n\t\t\tconst argInfo = funcOverloadInfo[argumentIndex]\n\t\t\tif (argInfo) {\n\t\t\t\tif (typeof argInfo === \"object\") {\n\t\t\t\t\tconst enums = argInfo.enumBitwiseOr\n\t\t\t\t\tconst orEnums = []\n\t\t\t\t\tlet orResult = 0\n\t\t\t\t\tfor (let i = 0; i < enums.length; ++i) {\n\t\t\t\t\t\tconst enumValue = enumStringToValue[enums[i]]\n\t\t\t\t\t\tif ((value & enumValue) !== 0) {\n\t\t\t\t\t\t\torResult |= enumValue\n\t\t\t\t\t\t\torEnums.push(glEnumToString(enumValue))\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (orResult === value) {\n\t\t\t\t\t\treturn orEnums.join(\" | \")\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn glEnumToString(value)\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn glEnumToString(value)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (value === null) {\n\t\treturn \"null\"\n\t} else if (value === undefined) {\n\t\treturn \"undefined\"\n\t} else {\n\t\treturn value.toString()\n\t}\n}\n\n/**\n * Converts the arguments of a WebGL function to a string.\n * Attempts to convert enum arguments to strings.\n *\n * @param functionName the name of the WebGL function.\n * @param args The arguments.\n * @return The arguments as a string.\n */\nexport function glFunctionArgsToString(\n\tfunctionName: string,\n\targs: number[],\n): string {\n\t// apparently we can't do args.join(',')\n\tvar argStr = \"\"\n\tvar numArgs = args.length\n\tfor (var ii = 0; ii < numArgs; ++ii) {\n\t\targStr +=\n\t\t\t(ii == 0 ? \"\" : \", \") +\n\t\t\tglFunctionArgToString(functionName, numArgs, ii, args[ii])\n\t}\n\treturn argStr\n}\n\nfunction makePropertyWrapper(\n\twrapper: any,\n\toriginal: any,\n\tpropertyName: string,\n) {\n\t//log('wrap prop: ' + propertyName)\n\twrapper.__defineGetter__(propertyName, function () {\n\t\treturn original[propertyName]\n\t})\n\t// TODO(gmane): this needs to handle properties that take more than\n\t// one value?\n\twrapper.__defineSetter__(propertyName, function (value: any) {\n\t\t//log('set: ' + propertyName)\n\t\toriginal[propertyName] = value\n\t})\n}\n\n/**\n * Given a WebGL context returns a wrapped context that calls\n * gl.getError after every command and calls a function if the\n * result is not NO_ERROR.\n *\n * You can supply your own function if you want. For example, if you'd like\n * an exception thrown on any GL error you could do this\n *\n *    function throwOnGLError(err, funcName, args) {\n *      throw new Error(WebGLDebugUtils.glEnumToString(err) +\n *            ' was caused by call to ' + funcName)\n *    }\n *\n *    ctx = WebGLDebugUtils.makeDebugContext(\n *        canvas.getContext('webgl'), throwOnGLError)\n *\n * @param ctx The webgl context to wrap.\n * @param opt_onErrorFunc The function\n *     to call when gl.getError returns an error. If not specified the default\n *     function calls console.log with a message.\n * @param opt_onFunc The\n *     function to call when each webgl function is called. You\n *     can use this to log all calls for example.\n * @param opt_err_ctx The webgl context\n *        to call getError on if different than ctx.\n */\nexport function makeDebugContext(\n\tctx: WebGLRenderingContextStrict,\n\topt_onErrorFunc?: (err: GL.Error, funcName: string, args: any[]) => void,\n\topt_onFunc?: (funcName: string, args: any[]) => void,\n\topt_err_ctx: WebGLRenderingContextStrict = ctx,\n): WebGLRenderingContext {\n\tinit()\n\topt_onErrorFunc =\n\t\topt_onErrorFunc ||\n\t\tfunction (err, functionName, args) {\n\t\t\t// apparently we can't do args.join(',')\n\t\t\tvar argStr = \"\"\n\t\t\tvar numArgs = args.length\n\t\t\tfor (let i = 0; i < numArgs; ++i) {\n\t\t\t\targStr +=\n\t\t\t\t\t(i == 0 ? \"\" : \", \") +\n\t\t\t\t\tglFunctionArgToString(functionName, numArgs, i, args[i])\n\t\t\t}\n\t\t\terror(\n\t\t\t\t\"WebGL error \" +\n\t\t\t\t\tglEnumToString(err) +\n\t\t\t\t\t\" in \" +\n\t\t\t\t\tfunctionName +\n\t\t\t\t\t\"(\" +\n\t\t\t\t\targStr +\n\t\t\t\t\t\")\",\n\t\t\t)\n\t\t}\n\n\t// Holds booleans for each GL error so after we get the error ourselves\n\t// we can still return it to the client app.\n\tconst glErrorShadow: { [k: number]: boolean } = {}\n\n\t// Makes a function that calls a WebGL function and then calls getError.\n\tfunction makeErrorWrapper(\n\t\tctx: WebGLRenderingContextStrict,\n\t\tfunctionName: string,\n\t) {\n\t\treturn function (...args: any[]) {\n\t\t\tif (opt_onFunc) {\n\t\t\t\topt_onFunc(functionName, args)\n\t\t\t}\n\t\t\tconst result = (ctx as any)[functionName].apply(ctx, args)\n\t\t\tconst err = opt_err_ctx.getError()\n\t\t\tif (err != 0) {\n\t\t\t\tglErrorShadow[err] = true\n\t\t\t\topt_onErrorFunc!(err, functionName, args)\n\t\t\t}\n\t\t\treturn result\n\t\t}\n\t}\n\n\t// Make a an object that has a copy of every property of the WebGL context\n\t// but wraps all functions.\n\tconst wrapper: any = {}\n\tfor (let propertyName in ctx) {\n\t\tconst prop = ctx[propertyName as keyof WebGLRenderingContextStrict]\n\t\tif (\"function\" === typeof prop) {\n\t\t\tif (propertyName != \"getExtension\") {\n\t\t\t\twrapper[propertyName] = makeErrorWrapper(ctx, propertyName)\n\t\t\t} else {\n\t\t\t\tlet wrapped = makeErrorWrapper(ctx, propertyName)\n\t\t\t\twrapper[propertyName as any] = function () {\n\t\t\t\t\tconst result = wrapped.apply(ctx, arguments)\n\t\t\t\t\tif (!result) {\n\t\t\t\t\t\treturn null\n\t\t\t\t\t}\n\t\t\t\t\treturn makeDebugContext(\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\topt_onErrorFunc,\n\t\t\t\t\t\topt_onFunc,\n\t\t\t\t\t\topt_err_ctx,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tmakePropertyWrapper(wrapper, ctx, propertyName)\n\t\t}\n\t}\n\n\t// Override the getError function with one that returns our saved results.\n\twrapper.getError = function () {\n\t\tfor (const err in glErrorShadow) {\n\t\t\tif (glErrorShadow.hasOwnProperty(err)) {\n\t\t\t\tif (glErrorShadow[err]) {\n\t\t\t\t\tglErrorShadow[err] = false\n\t\t\t\t\treturn parseInt(err)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ctx.NO_ERROR\n\t}\n\n\treturn wrapper\n}\nexport function isWebGL2RenderingContext(o: any): o is WebGL2RenderingContext {\n\treturn !!o.createTransformFeedback\n}\n/**\n * Resets a context to the initial state.\n * @param ctx The webgl context to\n *     reset.\n */\nexport function resetToInitialState(\n\tctx2: WebGL2RenderingContextStrict | WebGLRenderingContextStrict,\n) {\n\tif (isWebGL2RenderingContext(ctx2)) {\n\t\tctx2.bindVertexArray(null)\n\t}\n\n\tconst numAttribs = ctx2.getParameter(ctx2.MAX_VERTEX_ATTRIBS)\n\tconst tmp = ctx2.createBuffer()\n\tctx2.bindBuffer(ctx2.ARRAY_BUFFER, tmp)\n\tfor (let ii = 0; ii < numAttribs; ++ii) {\n\t\tctx2.disableVertexAttribArray(ii)\n\t\tctx2.vertexAttribPointer(ii, 4, ctx2.FLOAT, false, 0, 0)\n\t\tctx2.vertexAttrib1f(ii, 0)\n\t\tif (isWebGL2RenderingContext(ctx2)) {\n\t\t\tctx2.vertexAttribDivisor(ii, 0)\n\t\t}\n\t}\n\tctx2.deleteBuffer(tmp)\n\n\tconst numTextureUnits = ctx2.getParameter(ctx2.MAX_TEXTURE_IMAGE_UNITS)\n\tfor (let ii = 0; ii < numTextureUnits; ++ii) {\n\t\tctx2.activeTexture((ctx2.TEXTURE0 + ii) as GL.TextureUnit)\n\t\tctx2.bindTexture(ctx2.TEXTURE_CUBE_MAP, null)\n\t\tctx2.bindTexture(ctx2.TEXTURE_2D, null)\n\t\tif (isWebGL2RenderingContext(ctx2)) {\n\t\t\tctx2.bindTexture(ctx2.TEXTURE_2D_ARRAY, null)\n\t\t\tctx2.bindTexture(ctx2.TEXTURE_3D, null)\n\t\t\tctx2.bindSampler(ii, null)\n\t\t}\n\t}\n\n\tctx2.activeTexture(ctx2.TEXTURE0)\n\tctx2.useProgram(null)\n\tctx2.bindBuffer(ctx2.ARRAY_BUFFER, null)\n\tctx2.bindBuffer(ctx2.ELEMENT_ARRAY_BUFFER, null)\n\tctx2.bindFramebuffer(ctx2.FRAMEBUFFER, null)\n\tctx2.bindRenderbuffer(ctx2.RENDERBUFFER, null)\n\tctx2.disable(ctx2.BLEND)\n\tctx2.disable(ctx2.CULL_FACE)\n\tctx2.disable(ctx2.DEPTH_TEST)\n\tctx2.disable(ctx2.DITHER)\n\tctx2.disable(ctx2.SCISSOR_TEST)\n\tctx2.blendColor(0, 0, 0, 0)\n\tctx2.blendEquation(ctx2.FUNC_ADD)\n\tctx2.blendFunc(ctx2.ONE, ctx2.ZERO)\n\tctx2.clearColor(0, 0, 0, 0)\n\tctx2.clearDepth(1)\n\tctx2.clearStencil(-1)\n\tctx2.colorMask(true, true, true, true)\n\tctx2.cullFace(ctx2.BACK)\n\tctx2.depthFunc(ctx2.LESS)\n\tctx2.depthMask(true)\n\tctx2.depthRange(0, 1)\n\tctx2.frontFace(ctx2.CCW)\n\tctx2.hint(ctx2.GENERATE_MIPMAP_HINT, ctx2.DONT_CARE)\n\tctx2.lineWidth(1)\n\tctx2.pixelStorei(ctx2.PACK_ALIGNMENT, 4)\n\tctx2.pixelStorei(ctx2.UNPACK_ALIGNMENT, 4)\n\tctx2.pixelStorei(ctx2.UNPACK_FLIP_Y_WEBGL, false)\n\tctx2.pixelStorei(ctx2.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false)\n\tctx2.pixelStorei(\n\t\tctx2.UNPACK_COLORSPACE_CONVERSION_WEBGL,\n\t\tctx2.BROWSER_DEFAULT_WEBGL,\n\t)\n\tctx2.polygonOffset(0, 0)\n\tctx2.sampleCoverage(1, false)\n\tctx2.scissor(0, 0, ctx2.canvas.width, ctx2.canvas.height)\n\tctx2.stencilFunc(ctx2.ALWAYS, 0, 0xffffffff)\n\tctx2.stencilMask(0xffffffff)\n\tctx2.stencilOp(ctx2.KEEP, ctx2.KEEP, ctx2.KEEP)\n\tctx2.viewport(0, 0, ctx2.canvas.width, ctx2.canvas.height)\n\tctx2.clear(\n\t\tctx2.COLOR_BUFFER_BIT | ctx2.DEPTH_BUFFER_BIT | ctx2.STENCIL_BUFFER_BIT,\n\t)\n\n\tif (isWebGL2RenderingContext(ctx2)) {\n\t\tctx2.drawBuffers([ctx2.BACK])\n\t\tctx2.readBuffer(ctx2.BACK)\n\t\tctx2.bindBuffer(ctx2.COPY_READ_BUFFER, null)\n\t\tctx2.bindBuffer(ctx2.COPY_WRITE_BUFFER, null)\n\t\tctx2.bindBuffer(ctx2.PIXEL_PACK_BUFFER, null)\n\t\tctx2.bindBuffer(ctx2.PIXEL_UNPACK_BUFFER, null)\n\t\tconst numTransformFeedbacks = ctx2.getParameter(\n\t\t\tctx2.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS,\n\t\t)\n\t\tfor (let ii = 0; ii < numTransformFeedbacks; ++ii) {\n\t\t\tctx2.bindBufferBase(ctx2.TRANSFORM_FEEDBACK_BUFFER, ii, null)\n\t\t}\n\t\tconst numUBOs = ctx2.getParameter(ctx2.MAX_UNIFORM_BUFFER_BINDINGS)\n\t\tfor (let ii = 0; ii < numUBOs; ++ii) {\n\t\t\tctx2.bindBufferBase(ctx2.UNIFORM_BUFFER, ii, null)\n\t\t}\n\t\tctx2.disable(ctx2.RASTERIZER_DISCARD)\n\t\tctx2.pixelStorei(ctx2.UNPACK_IMAGE_HEIGHT, 0)\n\t\tctx2.pixelStorei(ctx2.UNPACK_SKIP_IMAGES, 0)\n\t\tctx2.pixelStorei(ctx2.UNPACK_ROW_LENGTH, 0)\n\t\tctx2.pixelStorei(ctx2.UNPACK_SKIP_ROWS, 0)\n\t\tctx2.pixelStorei(ctx2.UNPACK_SKIP_PIXELS, 0)\n\t\tctx2.pixelStorei(ctx2.PACK_ROW_LENGTH, 0)\n\t\tctx2.pixelStorei(ctx2.PACK_SKIP_ROWS, 0)\n\t\tctx2.pixelStorei(ctx2.PACK_SKIP_PIXELS, 0)\n\t\tctx2.hint(ctx2.FRAGMENT_SHADER_DERIVATIVE_HINT, ctx2.DONT_CARE)\n\t}\n\n\t// TODO: This should NOT be needed but Firefox fails with 'hint'\n\twhile (ctx2.getError()) {}\n}\n\n/**\n * Given a canvas element returns a wrapped canvas element that will\n * simulate lost context. The canvas returned adds the following functions.\n *\n * loseContext:\n *   simulates a lost context event.\n *\n * restoreContext:\n *   simulates the context being restored.\n *\n * lostContextInNCalls:\n *   loses the context after N gl calls.\n *\n * getNumCalls:\n *   tells you how many gl calls there have been so far.\n *\n * setRestoreTimeout:\n *   sets the number of milliseconds until the context is restored\n *   after it has been lost. Defaults to 0. Pass -1 to prevent\n *   automatic restoring.\n *\n * @param canvas The canvas element to wrap.\n */\nexport function makeLostContextSimulatingCanvas(canvas: HTMLCanvasElement) {\n\tconst canvas2 = canvas as any\n\tlet unwrappedContext_:\n\t\t| WebGLRenderingContextStrict\n\t\t| WebGL2RenderingContextStrict\n\tconst onLost_: WebGLContextEventListener[] = []\n\tconst onRestored_: WebGLContextEventListener[] = []\n\tlet wrappedContext_: any = {}\n\tlet contextId_ = 1\n\tlet contextLost_ = false\n\t// const resourceId_ = 0\n\tconst resourceDb_: WebGLObject[] = []\n\tlet numCallsToLoseContext_ = 0\n\tlet numCalls_ = 0\n\tlet canRestore_ = false\n\tlet restoreTimeout_ = 0\n\n\t// Holds booleans for each GL error so can simulate errors.\n\tconst glErrorShadow_: { [e: number]: boolean } = {}\n\n\tcanvas2.getContext = (function (f) {\n\t\treturn function () {\n\t\t\tconst ctx = f.apply(\n\t\t\t\tcanvas2,\n\t\t\t\targuments,\n\t\t\t) as WebGLRenderingContextStrict\n\t\t\t// Did we get a context and is it a WebGL context?\n\t\t\t// @ts-ignore\n\t\t\tif (\n\t\t\t\tctx instanceof GL ||\n\t\t\t\t((window as any).WebGL2RenderingContext &&\n\t\t\t\t\tctx instanceof WebGL2RenderingContext)\n\t\t\t) {\n\t\t\t\tif (ctx != unwrappedContext_) {\n\t\t\t\t\tif (unwrappedContext_) {\n\t\t\t\t\t\tthrow new Error(\"got different context\")\n\t\t\t\t\t}\n\t\t\t\t\tunwrappedContext_ = ctx\n\t\t\t\t\twrappedContext_ = makeLostContextSimulatingContext(\n\t\t\t\t\t\tunwrappedContext_,\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\treturn wrappedContext_\n\t\t\t}\n\t\t\treturn ctx\n\t\t}\n\t})(canvas2.getContext)\n\n\tfunction wrapEvent(\n\t\tlistener:\n\t\t\t| WebGLContextEventListener\n\t\t\t| { handleEvent: WebGLContextEventListener },\n\t) {\n\t\tif (typeof listener == \"function\") {\n\t\t\treturn listener\n\t\t} else {\n\t\t\treturn function (e: CustomWebGLContextEvent) {\n\t\t\t\tlistener.handleEvent(e)\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction addOnContextLostListener(\n\t\tlistener:\n\t\t\t| WebGLContextEventListener\n\t\t\t| { handleEvent: WebGLContextEventListener },\n\t) {\n\t\tonLost_.push(wrapEvent(listener))\n\t}\n\n\tfunction addOnContextRestoredListener(\n\t\tlistener:\n\t\t\t| WebGLContextEventListener\n\t\t\t| { handleEvent: WebGLContextEventListener },\n\t) {\n\t\tonRestored_.push(wrapEvent(listener))\n\t}\n\n\tfunction wrapAddEventListener(canvas: HTMLCanvasElement) {\n\t\tconst f = canvas.addEventListener\n\t\tcanvas.addEventListener = function (type: string, listener: any) {\n\t\t\tswitch (type) {\n\t\t\t\tcase \"webglcontextlost\":\n\t\t\t\t\taddOnContextLostListener(listener)\n\t\t\t\t\tbreak\n\t\t\t\tcase \"webglcontextrestored\":\n\t\t\t\t\taddOnContextRestoredListener(listener)\n\t\t\t\t\tbreak\n\t\t\t\tdefault:\n\t\t\t\t\tf.apply(canvas, arguments)\n\t\t\t}\n\t\t}\n\t}\n\n\twrapAddEventListener(canvas2)\n\n\tcanvas2.loseContext = function () {\n\t\tif (!contextLost_) {\n\t\t\tcontextLost_ = true\n\t\t\tnumCallsToLoseContext_ = 0\n\t\t\t++contextId_\n\t\t\twhile (unwrappedContext_.getError()) clearErrors()\n\t\t\tglErrorShadow_[unwrappedContext_.CONTEXT_LOST_WEBGL] = true\n\t\t\tconst event = makeWebGLContextEvent(\"context lost\")\n\t\t\tconst callbacks = onLost_.slice()\n\t\t\tsetTimeout(function () {\n\t\t\t\t//log('numCallbacks:' + callbacks.length)\n\t\t\t\tfor (let ii = 0; ii < callbacks.length; ++ii) {\n\t\t\t\t\t//log('calling callback:' + ii)\n\t\t\t\t\tcallbacks[ii](event)\n\t\t\t\t}\n\t\t\t\tif (restoreTimeout_ >= 0) {\n\t\t\t\t\tsetTimeout(function () {\n\t\t\t\t\t\tcanvas2.restoreContext()\n\t\t\t\t\t}, restoreTimeout_)\n\t\t\t\t}\n\t\t\t}, 0)\n\t\t}\n\t}\n\n\tcanvas2.restoreContext = function () {\n\t\tif (contextLost_) {\n\t\t\tif (onRestored_.length) {\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (!canRestore_) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\"can not restore. webglcontestlost listener did not call event.preventDefault\",\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t\tfreeResources()\n\t\t\t\t\tresetToInitialState(unwrappedContext_)\n\t\t\t\t\tcontextLost_ = false\n\t\t\t\t\tnumCalls_ = 0\n\t\t\t\t\tcanRestore_ = false\n\t\t\t\t\tconst callbacks = onRestored_.slice()\n\t\t\t\t\tconst event = makeWebGLContextEvent(\"context restored\")\n\t\t\t\t\tfor (let ii = 0; ii < callbacks.length; ++ii) {\n\t\t\t\t\t\tcallbacks[ii](event)\n\t\t\t\t\t}\n\t\t\t\t}, 0)\n\t\t\t}\n\t\t}\n\t}\n\n\tcanvas2.loseContextInNCalls = function (numCalls: number) {\n\t\tif (contextLost_) {\n\t\t\tthrow new Error(\"You can not ask a lost context to be lost\")\n\t\t}\n\t\tnumCallsToLoseContext_ = numCalls_ + numCalls\n\t}\n\n\tcanvas2.getNumCalls = function () {\n\t\treturn numCalls_\n\t}\n\n\tcanvas2.setRestoreTimeout = function (timeout: number) {\n\t\trestoreTimeout_ = timeout\n\t}\n\n\t// function isWebGLObject(obj: any): obj is WebGLObject {\n\t// \t//return false\n\t// \treturn (\n\t// \t\tobj instanceof WebGLBuffer ||\n\t// \t\tobj instanceof WebGLFramebuffer ||\n\t// \t\tobj instanceof WebGLProgram ||\n\t// \t\tobj instanceof WebGLRenderbuffer ||\n\t// \t\tobj instanceof WebGLShader ||\n\t// \t\tobj instanceof WebGLTexture\n\t// \t)\n\t// }\n\n\t// function checkResources(args: any[]) {\n\t// \tfor (let i = 0; i < args.length; ++i) {\n\t// \t\tconst arg = args[i]\n\t// \t\tif (isWebGLObject(arg)) {\n\t// \t\t\treturn (arg as any).__webglDebugContextLostId__ == contextId_\n\t// \t\t}\n\t// \t}\n\t// \treturn true\n\t// }\n\n\tfunction clearErrors() {\n\t\tconst k = (Object.keys(glErrorShadow_) as any) as number[]\n\t\tfor (let i = 0; i < k.length; ++i) {\n\t\t\tdelete glErrorShadow_[k[i]]\n\t\t}\n\t}\n\n\tfunction loseContextIfTime() {\n\t\t++numCalls_\n\t\tif (!contextLost_) {\n\t\t\tif (numCallsToLoseContext_ == numCalls_) {\n\t\t\t\tcanvas2.loseContext()\n\t\t\t}\n\t\t}\n\t}\n\n\t// Makes a function that simulates WebGL when out of context.\n\tfunction makeLostContextFunctionWrapper(\n\t\tctx: WebGLRenderingContextStrict,\n\t\tfunctionName: string,\n\t) {\n\t\tconst f = (ctx as any)[functionName]\n\t\treturn function () {\n\t\t\t// log('calling:' + functionName)\n\t\t\t// Only call the functions if the context is not lost.\n\t\t\tloseContextIfTime()\n\t\t\tif (!contextLost_) {\n\t\t\t\t//if (!checkResources(arguments)) {\n\t\t\t\t//  glErrorShadow_[wrappedContext_.INVALID_OPERATION] = true\n\t\t\t\t//  return\n\t\t\t\t//}\n\t\t\t\tconst result = f.apply(ctx, arguments)\n\t\t\t\treturn result\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction freeResources() {\n\t\tfor (let ii = 0; ii < resourceDb_.length; ++ii) {\n\t\t\tconst resource = resourceDb_[ii]\n\t\t\tif (resource instanceof WebGLBuffer) {\n\t\t\t\tunwrappedContext_.deleteBuffer(resource)\n\t\t\t} else if (resource instanceof WebGLFramebuffer) {\n\t\t\t\tunwrappedContext_.deleteFramebuffer(resource)\n\t\t\t} else if (resource instanceof WebGLProgram) {\n\t\t\t\tunwrappedContext_.deleteProgram(resource)\n\t\t\t} else if (resource instanceof WebGLRenderbuffer) {\n\t\t\t\tunwrappedContext_.deleteRenderbuffer(resource)\n\t\t\t} else if (resource instanceof WebGLShader) {\n\t\t\t\tunwrappedContext_.deleteShader(resource)\n\t\t\t} else if (resource instanceof WebGLTexture) {\n\t\t\t\tunwrappedContext_.deleteTexture(resource)\n\t\t\t} else if (isWebGL2RenderingContext(unwrappedContext_)) {\n\t\t\t\tif (resource instanceof WebGLQuery) {\n\t\t\t\t\tunwrappedContext_.deleteQuery(resource)\n\t\t\t\t} else if (resource instanceof WebGLSampler) {\n\t\t\t\t\tunwrappedContext_.deleteSampler(resource)\n\t\t\t\t} else if (resource instanceof WebGLSync) {\n\t\t\t\t\tunwrappedContext_.deleteSync(resource)\n\t\t\t\t} else if (resource instanceof WebGLTransformFeedback) {\n\t\t\t\t\tunwrappedContext_.deleteTransformFeedback(resource)\n\t\t\t\t} else if (resource instanceof WebGLVertexArrayObject) {\n\t\t\t\t\tunwrappedContext_.deleteVertexArray(resource)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tinterface CustomWebGLContextEvent {\n\t\tstatusMessage: string\n\t\tpreventDefault: () => void\n\t}\n\ttype WebGLContextEventListener = (e: CustomWebGLContextEvent) => void\n\tfunction makeWebGLContextEvent(\n\t\tstatusMessage: string,\n\t): CustomWebGLContextEvent {\n\t\treturn {\n\t\t\tstatusMessage: statusMessage,\n\t\t\tpreventDefault: function () {\n\t\t\t\tcanRestore_ = true\n\t\t\t},\n\t\t}\n\t}\n\n\treturn canvas2\n\n\tfunction makeLostContextSimulatingContext(\n\t\tctx: WebGLRenderingContextStrict,\n\t) {\n\t\t// copy all functions and properties to wrapper\n\t\tfor (const propertyName in ctx) {\n\t\t\tif (typeof (ctx as any)[propertyName] == \"function\") {\n\t\t\t\twrappedContext_[propertyName] = makeLostContextFunctionWrapper(\n\t\t\t\t\tctx,\n\t\t\t\t\tpropertyName,\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tmakePropertyWrapper(wrappedContext_, ctx, propertyName)\n\t\t\t}\n\t\t}\n\n\t\t// Wrap a few functions specially.\n\t\twrappedContext_.getError = function () {\n\t\t\tloseContextIfTime()\n\t\t\tif (!contextLost_) {\n\t\t\t\tlet err\n\t\t\t\twhile ((err = unwrappedContext_.getError())) {\n\t\t\t\t\tglErrorShadow_[err] = true\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const err in glErrorShadow_) {\n\t\t\t\tif (glErrorShadow_[err]) {\n\t\t\t\t\tdelete glErrorShadow_[err]\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn wrappedContext_.NO_ERROR\n\t\t}\n\n\t\tconst creationFunctions = [\n\t\t\t\"createBuffer\",\n\t\t\t\"createFramebuffer\",\n\t\t\t\"createProgram\",\n\t\t\t\"createRenderbuffer\",\n\t\t\t\"createShader\",\n\t\t\t\"createTexture\",\n\t\t]\n\t\tif (isWebGL2RenderingContext(ctx)) {\n\t\t\tcreationFunctions.push(\n\t\t\t\t\"createQuery\",\n\t\t\t\t\"createSampler\",\n\t\t\t\t\"fenceSync\",\n\t\t\t\t\"createTransformFeedback\",\n\t\t\t\t\"createVertexArray\",\n\t\t\t)\n\t\t}\n\t\tfor (let i = 0; i < creationFunctions.length; ++i) {\n\t\t\tconst functionName = creationFunctions[i]\n\t\t\twrappedContext_[functionName] = (function (f) {\n\t\t\t\treturn function () {\n\t\t\t\t\tloseContextIfTime()\n\t\t\t\t\tif (contextLost_) {\n\t\t\t\t\t\treturn null\n\t\t\t\t\t}\n\t\t\t\t\tconst obj = f.apply(ctx, arguments)\n\t\t\t\t\tobj.__webglDebugContextLostId__ = contextId_\n\t\t\t\t\tresourceDb_.push(obj)\n\t\t\t\t\treturn obj\n\t\t\t\t}\n\t\t\t})((ctx as any)[functionName])\n\t\t}\n\n\t\tconst functionsThatShouldReturnNull = [\n\t\t\t\"getActiveAttrib\",\n\t\t\t\"getActiveUniform\",\n\t\t\t\"getBufferParameter\",\n\t\t\t\"getContextAttributes\",\n\t\t\t\"getAttachedShaders\",\n\t\t\t\"getFramebufferAttachmentParameter\",\n\t\t\t\"getParameter\",\n\t\t\t\"getProgramParameter\",\n\t\t\t\"getProgramInfoLog\",\n\t\t\t\"getRenderbufferParameter\",\n\t\t\t\"getShaderParameter\",\n\t\t\t\"getShaderInfoLog\",\n\t\t\t\"getShaderSource\",\n\t\t\t\"getTexParameter\",\n\t\t\t\"getUniform\",\n\t\t\t\"getUniformLocation\",\n\t\t\t\"getVertexAttrib\",\n\t\t]\n\t\tif (isWebGL2RenderingContext(ctx)) {\n\t\t\tfunctionsThatShouldReturnNull.push(\n\t\t\t\t\"getInternalformatParameter\",\n\t\t\t\t\"getQuery\",\n\t\t\t\t\"getQueryParameter\",\n\t\t\t\t\"getSamplerParameter\",\n\t\t\t\t\"getSyncParameter\",\n\t\t\t\t\"getTransformFeedbackVarying\",\n\t\t\t\t\"getIndexedParameter\",\n\t\t\t\t\"getUniformIndices\",\n\t\t\t\t\"getActiveUniforms\",\n\t\t\t\t\"getActiveUniformBlockParameter\",\n\t\t\t\t\"getActiveUniformBlockName\",\n\t\t\t)\n\t\t}\n\t\tfor (let ii = 0; ii < functionsThatShouldReturnNull.length; ++ii) {\n\t\t\tconst functionName = functionsThatShouldReturnNull[ii]\n\t\t\twrappedContext_[functionName] = (function (f) {\n\t\t\t\treturn function () {\n\t\t\t\t\tloseContextIfTime()\n\t\t\t\t\tif (contextLost_) {\n\t\t\t\t\t\treturn null\n\t\t\t\t\t}\n\t\t\t\t\treturn f.apply(ctx, arguments)\n\t\t\t\t}\n\t\t\t})(wrappedContext_[functionName])\n\t\t}\n\n\t\tconst isFunctions = [\n\t\t\t\"isBuffer\",\n\t\t\t\"isEnabled\",\n\t\t\t\"isFramebuffer\",\n\t\t\t\"isProgram\",\n\t\t\t\"isRenderbuffer\",\n\t\t\t\"isShader\",\n\t\t\t\"isTexture\",\n\t\t]\n\t\tif (isWebGL2RenderingContext(ctx)) {\n\t\t\tisFunctions.push(\n\t\t\t\t\"isQuery\",\n\t\t\t\t\"isSampler\",\n\t\t\t\t\"isSync\",\n\t\t\t\t\"isTransformFeedback\",\n\t\t\t\t\"isVertexArray\",\n\t\t\t)\n\t\t}\n\t\tfor (let ii = 0; ii < isFunctions.length; ++ii) {\n\t\t\tconst functionName = isFunctions[ii]\n\t\t\twrappedContext_[functionName] = (function (f) {\n\t\t\t\treturn function () {\n\t\t\t\t\tloseContextIfTime()\n\t\t\t\t\tif (contextLost_) {\n\t\t\t\t\t\treturn false\n\t\t\t\t\t}\n\t\t\t\t\treturn f.apply(ctx, arguments)\n\t\t\t\t}\n\t\t\t})(wrappedContext_[functionName])\n\t\t}\n\n\t\twrappedContext_.checkFramebufferStatus = (function (f) {\n\t\t\treturn function () {\n\t\t\t\tloseContextIfTime()\n\t\t\t\tif (contextLost_) {\n\t\t\t\t\treturn wrappedContext_.FRAMEBUFFER_UNSUPPORTED\n\t\t\t\t}\n\t\t\t\treturn f.apply(ctx, arguments)\n\t\t\t}\n\t\t})(wrappedContext_.checkFramebufferStatus)\n\n\t\twrappedContext_.getAttribLocation = (function (f) {\n\t\t\treturn function () {\n\t\t\t\tloseContextIfTime()\n\t\t\t\tif (contextLost_) {\n\t\t\t\t\treturn -1\n\t\t\t\t}\n\t\t\t\treturn f.apply(ctx, arguments)\n\t\t\t}\n\t\t})(wrappedContext_.getAttribLocation)\n\n\t\twrappedContext_.getVertexAttribOffset = (function (f) {\n\t\t\treturn function () {\n\t\t\t\tloseContextIfTime()\n\t\t\t\tif (contextLost_) {\n\t\t\t\t\treturn 0\n\t\t\t\t}\n\t\t\t\treturn f.apply(ctx, arguments)\n\t\t\t}\n\t\t})(wrappedContext_.getVertexAttribOffset)\n\n\t\twrappedContext_.isContextLost = function () {\n\t\t\treturn contextLost_\n\t\t}\n\n\t\tif (isWebGL2RenderingContext(ctx)) {\n\t\t\twrappedContext_.getFragDataLocation = (function (f) {\n\t\t\t\treturn function () {\n\t\t\t\t\tloseContextIfTime()\n\t\t\t\t\tif (contextLost_) {\n\t\t\t\t\t\treturn -1\n\t\t\t\t\t}\n\t\t\t\t\treturn f.apply(ctx, arguments)\n\t\t\t\t}\n\t\t\t})(wrappedContext_.getFragDataLocation)\n\n\t\t\twrappedContext_.clientWaitSync = (function (f) {\n\t\t\t\treturn function () {\n\t\t\t\t\tloseContextIfTime()\n\t\t\t\t\tif (contextLost_) {\n\t\t\t\t\t\treturn wrappedContext_.WAIT_FAILED\n\t\t\t\t\t}\n\t\t\t\t\treturn f.apply(ctx, arguments)\n\t\t\t\t}\n\t\t\t})(wrappedContext_.clientWaitSync)\n\n\t\t\twrappedContext_.getUniformBlockIndex = (function (f) {\n\t\t\t\treturn function () {\n\t\t\t\t\tloseContextIfTime()\n\t\t\t\t\tif (contextLost_) {\n\t\t\t\t\t\treturn wrappedContext_.INVALID_INDEX\n\t\t\t\t\t}\n\t\t\t\t\treturn f.apply(ctx, arguments)\n\t\t\t\t}\n\t\t\t})(wrappedContext_.getUniformBlockIndex)\n\t\t}\n\n\t\treturn wrappedContext_\n\t}\n}\n","/// <reference types=\"webgl-strict-types\" />\nimport * as chroma from \"chroma.ts\"\nimport { addOwnProperties, assert, DEG, int, M4, P3ZX, V, V3 } from \"ts3dutils\"\n\nimport posCoordVS from \"../src/shaders/posCoordVS.glslx\"\nimport sdfRenderFS from \"../src/shaders/sdfRenderFS.glslx\"\nimport { makeDebugContext, Mesh, Shader, Texture } from \"./index\"\nimport { glEnumToString } from \"./KhronosGroupWebGLDebug\"\n\nimport GL = WebGLRenderingContextStrict\nexport type GL_COLOR = [number, number, number, number]\n/**\n * There's only one constant, use it for default values. Use chroma-js or similar for actual colors.\n */\nexport const GL_COLOR_BLACK: GL_COLOR = [0, 0, 0, 1]\n\nexport function currentGL(): TSGLContext {\n\treturn TSGLContextBase.gl\n}\n\nexport function isNumber(obj: any) {\n\tconst str = Object.prototype.toString.call(obj)\n\treturn str == \"[object Number]\" || str == \"[object Boolean]\"\n}\n\nexport type UniformType = V3 | M4 | number[] | boolean | number\nexport type TSGLContext = TSGLContextBase &\n\t(WebGLRenderingContextStrict | WebGL2RenderingContextStrict)\nexport interface TSGLContextBase extends WebGLRenderingContextStrict {}\nexport class TSGLContextBase {\n\tmodelViewMatrix: M4 = M4.identity()\n\tprojectionMatrix: M4 = M4.identity()\n\tstatic readonly MODELVIEW: { __MATRIX_MODE_CONSTANT: any } = 0 as any\n\tstatic readonly PROJECTION: { __MATRIX_MODE_CONSTANT: any } = 1 as any\n\tMODELVIEW: typeof TSGLContextBase.MODELVIEW\n\tPROJECTION: typeof TSGLContextBase.PROJECTION\n\n\treadonly version: 1 | 2\n\n\tstatic HALF_FLOAT_OES: int = 0x8d61\n\tHALF_FLOAT_OES: int\n\n\tprivate tempMatrix = new M4()\n\tprivate resultMatrix = new M4()\n\tprivate modelViewStack: M4[] = []\n\tprivate projectionStack: M4[] = []\n\tprivate currentMatrixName: \"modelViewMatrix\" | \"projectionMatrix\"\n\tprivate stack: M4[]\n\n\tmeshes: { [name: string]: Mesh }\n\tshaders: { [name: string]: Shader }\n\tpublic drawCallCount: int = 0\n\tpublic projectionMatrixVersion: int = 0\n\tpublic modelViewMatrixVersion: int = 0\n\ttextCtx!: CanvasRenderingContext2D\n\tTEXT_TEXTURE_HEIGHT: string\n\tTEXT_TEXTURE_FONT: string\n\ttextMetrics: FontJsonMetrics\n\ttextAtlas: Texture\n\ttextRenderShader: Shader<any, any>\n\n\tprotected constructor(\n\t\tgl: TSGLContextBase,\n\t\tprivate immediate = {\n\t\t\tmesh: new Mesh()\n\t\t\t\t.addVertexBuffer(\"coords\", \"ts_TexCoord\")\n\t\t\t\t.addVertexBuffer(\"colors\", \"ts_Color\"),\n\t\t\tmode: -1 as GL.DrawMode | -1,\n\t\t\tcoord: [0, 0] as [number, number],\n\t\t\tcolor: [1, 1, 1, 1] as GL_COLOR,\n\t\t\tpointSize: 1,\n\t\t\tshader: Shader.create(\n\t\t\t\t`\n\t\t\tattribute vec4 ts_Color;\n\t\t\tattribute vec4 ts_Vertex;\n\t\t\tuniform mat4 ts_ModelViewProjectionMatrix;\n\t\t\tattribute vec2 ts_TexCoord;\n            uniform float pointSize;\n            varying vec4 color;\n            varying vec2 coord;\n            void main() {\n                color = ts_Color;\n                coord = ts_TexCoord;\n                gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\n                gl_PointSize = pointSize;\n            }\n\t\t`,\n\t\t\t\t`\n\t\t\tprecision highp float;\n            uniform sampler2D texture;\n            uniform float pointSize;\n            // uniform bool useTexture;\n            varying vec4 color;\n            varying vec2 coord;\n            void main() {\n                gl_FragColor = color;\n                // if (useTexture) gl_FragColor *= texture2D(texture, coord.xy);\n            }\n        `,\n\t\t\t\tgl,\n\t\t\t),\n\t\t},\n\t) {\n\t\tthis.matrixMode(TSGLContextBase.MODELVIEW)\n\t}\n\n\t/// Implement the OpenGL modelview and projection matrix stacks, along with some other useful GLU matrix functions.\n\tmatrixMode(mode: { __MATRIX_MODE_CONSTANT: any }): void {\n\t\tswitch (mode) {\n\t\t\tcase this.MODELVIEW:\n\t\t\t\tthis.currentMatrixName = \"modelViewMatrix\"\n\t\t\t\tthis.stack = this.modelViewStack\n\t\t\t\tbreak\n\t\t\tcase this.PROJECTION:\n\t\t\t\tthis.currentMatrixName = \"projectionMatrix\"\n\t\t\t\tthis.stack = this.projectionStack\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\"invalid matrix mode \" + mode)\n\t\t}\n\t}\n\n\tloadIdentity(): void {\n\t\tM4.identity(this[this.currentMatrixName])\n\t\tthis.currentMatrixName == \"projectionMatrix\"\n\t\t\t? this.projectionMatrixVersion++\n\t\t\t: this.modelViewMatrixVersion++\n\t}\n\n\tloadMatrix(m4: M4) {\n\t\tM4.copy(m4, this[this.currentMatrixName])\n\t\tthis.currentMatrixName == \"projectionMatrix\"\n\t\t\t? this.projectionMatrixVersion++\n\t\t\t: this.modelViewMatrixVersion++\n\t}\n\n\tmultMatrix(m4: M4) {\n\t\tM4.multiply(this[this.currentMatrixName], m4, this.resultMatrix)\n\t\tconst temp = this.resultMatrix\n\t\tthis.resultMatrix = this[this.currentMatrixName]\n\t\tthis[this.currentMatrixName] = temp\n\t\tthis.currentMatrixName == \"projectionMatrix\"\n\t\t\t? this.projectionMatrixVersion++\n\t\t\t: this.modelViewMatrixVersion++\n\t}\n\n\tmirror(plane: { normal1: V3; w: number }) {\n\t\tthis.multMatrix(M4.mirror(plane))\n\t}\n\n\tperspective(fovDegrees: number, aspect: number, near: number, far: number) {\n\t\tthis.multMatrix(\n\t\t\tM4.perspectiveRad(\n\t\t\t\tfovDegrees * DEG,\n\t\t\t\taspect,\n\t\t\t\tnear,\n\t\t\t\tfar,\n\t\t\t\tthis.tempMatrix,\n\t\t\t),\n\t\t)\n\t}\n\n\tfrustum(\n\t\tleft: number,\n\t\tright: number,\n\t\tbottom: number,\n\t\ttop: number,\n\t\tnear: number,\n\t\tfar: number,\n\t) {\n\t\tthis.multMatrix(\n\t\t\tM4.frustum(left, right, bottom, top, near, far, this.tempMatrix),\n\t\t)\n\t}\n\n\tortho(\n\t\tleft: number,\n\t\tright: number,\n\t\tbottom: number,\n\t\ttop: number,\n\t\tnear: number,\n\t\tfar: number,\n\t) {\n\t\tthis.multMatrix(\n\t\t\tM4.ortho(left, right, bottom, top, near, far, this.tempMatrix),\n\t\t)\n\t}\n\n\tscale(x: number, y: number, z?: number): void\n\tscale(scale: number): void\n\tscale(v: V3): void\n\tscale(...args: any[]) {\n\t\tthis.multMatrix((M4.scale as any)(...args, this.tempMatrix))\n\t}\n\n\tmirroredX() {\n\t\tthis.multMatrix(M4.mirror(P3ZX))\n\t}\n\n\ttranslate(x: number, y?: number, z?: number): void\n\ttranslate(v: V3): void\n\ttranslate(x: any, y?: any, z?: any) {\n\t\tif (undefined !== y) {\n\t\t\tthis.multMatrix(M4.translate(x, y, z, this.tempMatrix))\n\t\t} else {\n\t\t\tthis.multMatrix(M4.translate(x, this.tempMatrix))\n\t\t}\n\t}\n\n\trotate(angleDegrees: number, x: number, y: number, z: number) {\n\t\tthis.multMatrix(\n\t\t\tM4.rotate(angleDegrees * DEG, { x, y, z }, this.tempMatrix),\n\t\t)\n\t}\n\n\tlookAt(eye: V3, center: V3, up: V3) {\n\t\tthis.multMatrix(M4.lookAt(eye, center, up, this.tempMatrix))\n\t}\n\n\tpushMatrix() {\n\t\tthis.stack.push(M4.copy(this[this.currentMatrixName]))\n\t}\n\n\tpopMatrix() {\n\t\tconst pop = this.stack.pop()\n\t\tassert(undefined !== pop)\n\t\tthis[this.currentMatrixName] = pop as M4\n\t\tthis.currentMatrixName == \"projectionMatrix\"\n\t\t\t? this.projectionMatrixVersion++\n\t\t\t: this.modelViewMatrixVersion++\n\t}\n\n\t/**\n\t * World coordinates (WC) to screen/window coordinates matrix\n\t */\n\twcToWindowMatrix() {\n\t\tconst viewport = this.getParameter(this.VIEWPORT)\n\t\tconst [x, y, w, h] = viewport\n\t\t// prettier-ignore\n\t\tconst viewportToScreenMatrix = new M4([\n\t\t\tw / 2, 0, 0, x + w / 2,\n\t\t\th / 2, 0, 0, y + h / 2,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1,\n\t\t])\n\t\treturn M4.product(\n\t\t\tviewportToScreenMatrix,\n\t\t\tthis.projectionMatrix,\n\t\t\tthis.modelViewMatrix,\n\t\t)\n\t}\n\n\t/////////// IMMEDIATE MODE\n\t// ### Immediate mode\n\t//\n\t// Provide an implementation of OpenGL's deprecated immediate mode. This is\n\t// deprecated for a reason: constantly re-specifying the geometry is a bad\n\t// idea for performance. You should use a `GL.Mesh` instead, which specifies\n\t// the geometry once and caches it on the graphics card. Still, nothing\n\t// beats a quick `viewerGL.begin(WGL.POINTS); viewerGL.vertex(1, 2, 3); viewerGL.end();` for\n\t// debugging. This intentionally doesn't implement fixed-function lighting\n\t// because it's only meant for quick debugging tasks.\n\n\tpointSize(pointSize: number): void {\n\t\tthis.immediate.shader.uniforms({ pointSize: pointSize })\n\t}\n\n\tbegin(mode: GL.DrawMode) {\n\t\tif (this.immediate.mode != -1)\n\t\t\tthrow new Error(\n\t\t\t\t\"mismatched viewerGL.begin() and viewerGL.end() calls\",\n\t\t\t)\n\t\tthis.immediate.mode = mode\n\t\tthis.immediate.mesh.colors = []\n\t\tthis.immediate.mesh.coords = []\n\t\tthis.immediate.mesh.vertices = []\n\t}\n\n\tcolor(cssColor: string): void\n\tcolor(r: number, g: number, b: number, a?: number): void\n\tcolor(hexInt: int): void\n\tcolor(glColor: GL_COLOR): void\n\tcolor(...args: any[]) {\n\t\tthis.immediate.color =\n\t\t\t1 == args.length && Array.isArray(args[0])\n\t\t\t\t? (args[0] as GL_COLOR)\n\t\t\t\t: 1 == args.length && \"number\" == typeof args[0]\n\t\t\t\t? hexIntToGLColor(args[0])\n\t\t\t\t: 1 == args.length && \"string\" == typeof args[0]\n\t\t\t\t? chroma.color(args[0]).gl()\n\t\t\t\t: [args[0], args[1], args[2], args[3] || 1]\n\t}\n\n\ttexCoord(s: number, t: number): void\n\ttexCoord(coords: [number, number]): void\n\ttexCoord(coords: { x: number; y: number }): void\n\ttexCoord(...args: any[]) {\n\t\tthis.immediate.coord = V.apply(undefined, args).toArray(2)\n\t}\n\n\tvertex(v: V3): void\n\tvertex(x: number, y: number, z: number): void\n\tvertex(...args: any[]) {\n\t\tthis.immediate.mesh.colors.push(this.immediate.color)\n\t\tthis.immediate.mesh.coords.push(this.immediate.coord)\n\t\tthis.immediate.mesh.vertices.push(V.apply(undefined, args))\n\t}\n\n\tend(): void {\n\t\tif (this.immediate.mode == -1)\n\t\t\tthrow new Error(\n\t\t\t\t\"mismatched viewerGL.begin() and viewerGL.end() calls\",\n\t\t\t)\n\t\tthis.immediate.mesh.compile()\n\t\tthis.immediate.shader\n\t\t\t.uniforms({\n\t\t\t\tuseTexture: !!TSGLContextBase.gl.getParameter(\n\t\t\t\t\tthis.TEXTURE_BINDING_2D,\n\t\t\t\t),\n\t\t\t})\n\t\t\t.drawBuffers(\n\t\t\t\tthis.immediate.mesh.vertexBuffers,\n\t\t\t\tundefined,\n\t\t\t\tthis.immediate.mode,\n\t\t\t)\n\t\tthis.immediate.mode = -1\n\t}\n\n\t////////// MISCELLANEOUS METHODS\n\tstatic gl: TSGLContextBase\n\n\tmakeCurrent() {\n\t\tTSGLContextBase.gl = this\n\t}\n\n\t/**\n\t * Starts an animation loop.\n\t */\n\tanimate(\n\t\tcallback: (\n\t\t\tthis: TSGLContextBase,\n\t\t\tdomHighResTimeStamp: number,\n\t\t\ttimeSinceLast: number,\n\t\t) => void,\n\t): () => void {\n\t\tconst requestAnimationFrame: typeof window.requestAnimationFrame =\n\t\t\twindow.requestAnimationFrame ||\n\t\t\t(window as any).mozRequestAnimationFrame ||\n\t\t\twindow.webkitRequestAnimationFrame ||\n\t\t\tfunction (callback: FrameRequestCallback) {\n\t\t\t\tsetTimeout(() => callback(performance.now()), 1000 / 60)\n\t\t\t}\n\t\tlet time = performance.now(),\n\t\t\tkeepUpdating = true\n\t\tconst update = (now: number) => {\n\t\t\tif (keepUpdating) {\n\t\t\t\tcallback.call(this, now, now - time)\n\t\t\t\ttime = now\n\t\t\t\trequestAnimationFrame(update)\n\t\t\t}\n\t\t}\n\t\trequestAnimationFrame(update)\n\t\treturn () => {\n\t\t\tkeepUpdating = false\n\t\t}\n\t}\n\n\t/**\n\t * Provide an easy way to get a fullscreen app running, including an\n\t * automatic 3D perspective projection matrix by default. This should be\n\t * called once.\n\t *\n\t * Just fullscreen, no automatic camera:\n\t *\n\t *     viewerGL.fullscreen({ camera: false })\n\t *\n\t * Adjusting field of view, near plane distance, and far plane distance:\n\t *\n\t *     viewerGL.fullscreen({ fov: 45, near: 0.1, far: 1000 })\n\t *\n\t * Adding padding from the edge of the window:\n\t *\n\t *     viewerGL.fullscreen({ paddingLeft: 250, paddingBottom: 60 })\n\t */\n\tfullscreen(\n\t\toptions: {\n\t\t\tpaddingTop?: number\n\t\t\tpaddingLeft?: number\n\t\t\tpaddingRight?: number\n\t\t\tpaddingBottom?: number\n\t\t\tcamera?: boolean\n\t\t\tfov?: number\n\t\t\tnear?: number\n\t\t\tfar?: number\n\t\t} = {},\n\t) {\n\t\tconst top = options.paddingTop || 0\n\t\tconst left = options.paddingLeft || 0\n\t\tconst right = options.paddingRight || 0\n\t\tconst bottom = options.paddingBottom || 0\n\t\tif (!document.body) {\n\t\t\tthrow new Error(\n\t\t\t\t\"document.body doesn't exist yet (call viewerGL.fullscreen() from \" +\n\t\t\t\t\t\"window.onload() or from inside the <body> tag)\",\n\t\t\t)\n\t\t}\n\t\tdocument.body.appendChild(this.canvas)\n\t\tdocument.body.style.overflow = \"hidden\"\n\t\tthis.canvas.style.position = \"absolute\"\n\t\tthis.canvas.style.left = left + \"px\"\n\t\tthis.canvas.style.top = top + \"px\"\n\t\tthis.canvas.style.width = window.innerWidth - left - right + \"px\"\n\t\tthis.canvas.style.bottom = window.innerHeight - top - bottom + \"px\"\n\n\t\tthis.addResizeListener()\n\n\t\treturn this\n\t}\n\n\taddResizeListener(\n\t\toptions: {\n\t\t\tcamera?: boolean\n\t\t\tfov?: number\n\t\t\tnear?: number\n\t\t\tfar?: number\n\t\t} = {},\n\t): TSGLContext {\n\t\tconst gl = this\n\n\t\tfunction windowOnResize() {\n\t\t\tconst bb = gl.canvas.getBoundingClientRect()\n\t\t\tgl.canvas.width = bb.width * window.devicePixelRatio\n\t\t\tgl.canvas.height = bb.height * window.devicePixelRatio\n\t\t\tgl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n\t\t\tif (options.camera) {\n\t\t\t\tgl.matrixMode(TSGLContextBase.PROJECTION)\n\t\t\t\tgl.loadIdentity()\n\t\t\t\tgl.perspective(\n\t\t\t\t\toptions.fov || 45,\n\t\t\t\t\tgl.canvas.width / gl.canvas.height,\n\t\t\t\t\toptions.near || 0.1,\n\t\t\t\t\toptions.far || 1000,\n\t\t\t\t)\n\t\t\t\tgl.matrixMode(TSGLContextBase.MODELVIEW)\n\t\t\t}\n\t\t}\n\n\t\twindow.addEventListener(\"resize\", windowOnResize)\n\t\twindowOnResize()\n\t\treturn this\n\t}\n\n\tgetMouseLine(e: MouseEvent): { anchor: V3; dir: V3 }\n\tgetMouseLine(\n\t\tcanvasPosX: number,\n\t\tcanvasPosY: number,\n\t): { anchor: V3; dir: V3 }\n\tgetMouseLine(\n\t\tcanvasPosXOrE: number | MouseEvent,\n\t\tcanvasPosY?: number,\n\t): { anchor: V3; dir: V3 } {\n\t\tif (canvasPosXOrE instanceof MouseEvent) {\n\t\t\treturn this.getMouseLine(\n\t\t\t\tcanvasPosXOrE.offsetX,\n\t\t\t\tcanvasPosXOrE.offsetY,\n\t\t\t)\n\t\t}\n\t\tconst ndc1 = V(\n\t\t\t(canvasPosXOrE * 2) / this.canvas.offsetWidth - 1,\n\t\t\t(-canvasPosY! * 2) / this.canvas.offsetHeight + 1,\n\t\t\t0,\n\t\t)\n\t\tconst ndc2 = V(\n\t\t\t(canvasPosXOrE * 2) / this.canvas.offsetWidth - 1,\n\t\t\t(-canvasPosY! * 2) / this.canvas.offsetHeight + 1,\n\t\t\t1,\n\t\t)\n\t\tconst inverseProjectionMatrix = this.projectionMatrix.inversed()\n\t\tconst anchor = inverseProjectionMatrix.transformPoint(ndc1)\n\t\tconst dir = inverseProjectionMatrix.transformPoint(ndc2).minus(anchor)\n\t\treturn { anchor, dir }\n\t}\n\n\tviewportFill() {\n\t\tthis.viewport(0, 0, this.canvas.width, this.canvas.height)\n\t}\n\n\tasync setupTextRendering(pngURL: string, jsonURL: string) {\n\t\tthis.textRenderShader = Shader.create(posCoordVS, sdfRenderFS)\n\t\t;[this.textAtlas, this.textMetrics] = await Promise.all([\n\t\t\tTexture.fromURL(pngURL, {\n\t\t\t\tformat: this.LUMINANCE,\n\t\t\t\tinternalFormat: this.LUMINANCE,\n\t\t\t\ttype: this.UNSIGNED_BYTE,\n\t\t\t}),\n\t\t\tfetch(jsonURL).then((r) => r.json()),\n\t\t])\n\t\t// const cs = this.textMetrics.chars\n\t\t// const maxY = Object.keys(cs).reduce((a, b) => Math.max(a, cs[b][3]), 0)\n\t\t// const minY = Object.keys(cs).reduce((a, b) => Math.min(a, cs[b][3] - cs[b][1]), 0)\n\t\t// console.log(maxY, minY)\n\t}\n\n\tcachedSDFMeshes: {\n\t\t[str: string]: Mesh & {\n\t\t\tTRIANGLES: int[]\n\t\t\tcoords: number[]\n\t\t\twidth: number\n\t\t\tlineCount: int\n\t\t}\n\t} = {}\n\n\tgetSDFMeshForString(str: string) {\n\t\tassert(this.textMetrics)\n\t\treturn (\n\t\t\tthis.cachedSDFMeshes[str] ||\n\t\t\t(this.cachedSDFMeshes[str] = createTextMesh(\n\t\t\t\tthis.textMetrics,\n\t\t\t\tthis.textAtlas,\n\t\t\t\tstr,\n\t\t\t))\n\t\t)\n\t}\n\n\trenderText(\n\t\tstring: string,\n\t\tcolor: GL_COLOR,\n\t\tsize = 1,\n\t\txAlign: \"left\" | \"center\" | \"right\" = \"left\",\n\t\tbaseline: \"top\" | \"middle\" | \"alphabetic\" | \"bottom\" = \"bottom\",\n\t\tgamma = 0.05,\n\t\tlineHeight = 1.2,\n\t) {\n\t\tconst strMesh = this.getSDFMeshForString(string)\n\t\tthis.pushMatrix()\n\t\tthis.scale(size)\n\t\tconst xTranslate = { left: 0, center: -0.5, right: -1 }\n\t\tconst yTranslate = {\n\t\t\ttop: -this.textMetrics.ascender / this.textMetrics.size,\n\t\t\tmiddle:\n\t\t\t\t(-this.textMetrics.ascender - this.textMetrics.descender) /\n\t\t\t\t2 /\n\t\t\t\tthis.textMetrics.size,\n\t\t\talphabetic: 0,\n\t\t\tbottom: -this.textMetrics.descender / this.textMetrics.size,\n\t\t}\n\t\t// console.log('yTranslate[baseline]', yTranslate[baseline])\n\t\tthis.translate(\n\t\t\txTranslate[xAlign] * strMesh.width,\n\t\t\tyTranslate[baseline],\n\t\t\t0,\n\t\t)\n\t\tthis.multMatrix(M4.forSys(V3.X, V3.Y, new V3(0, -lineHeight, 0)))\n\t\tthis.textAtlas.bind(0)\n\t\tthis.textRenderShader\n\t\t\t.uniforms({\n\t\t\t\ttexture: 0,\n\t\t\t\tu_color: color,\n\t\t\t\tu_debug: 0,\n\t\t\t\tu_gamma: gamma,\n\t\t\t\tu_buffer: 192 / 256,\n\t\t\t})\n\t\t\t.draw(strMesh)\n\t\tthis.popMatrix()\n\n\t\t// gl.uniform1f(shader.u_debug, debug ? 1 : 0)\n\n\t\t// gl.uniform4fv(shader.u_color, [1, 1, 1, 1])\n\t\t// gl.uniform1f(shader.u_buffer, buffer)\n\t\t// gl.drawArrays(gl.TRIANGLES, 0, vertexBuffer.numItems)\n\n\t\t// gl.uniform4fv(shader.u_color, [0, 0, 0, 1])\n\t\t// gl.uniform1f(shader.u_buffer, 192 / 256)\n\t\t// gl.uniform1f(shader.u_gamma, (gamma * 1.4142) / scale)\n\t\t// gl.drawArrays(gl.TRIANGLES, 0, vertexBuffer.numItems)\n\t}\n\n\tstatic create(\n\t\toptions: Partial<\n\t\t\tGL.WebGLContextAttributes & {\n\t\t\t\tcanvas: HTMLCanvasElement\n\t\t\t\tthrowOnError: boolean\n\t\t\t}\n\t\t> = {},\n\t): TSGLContext {\n\t\tconst canvas = options.canvas || document.createElement(\"canvas\")\n\t\tif (!options.canvas) {\n\t\t\tcanvas.width = 800\n\t\t\tcanvas.height = 600\n\t\t}\n\t\tif (!(\"alpha\" in options)) options.alpha = false\n\t\tlet newGL: any = undefined\n\t\ttry {\n\t\t\tnewGL = canvas.getContext(\"webgl2\", options)\n\t\t\tnewGL && (newGL.version = 2)\n\t\t\tif (!newGL) {\n\t\t\t\tnewGL =\n\t\t\t\t\tcanvas.getContext(\"webgl\", options) ||\n\t\t\t\t\tcanvas.getContext(\"experimental-webgl\", options)\n\t\t\t\tnewGL && (newGL.version = 1)\n\t\t\t}\n\t\t\tconsole.log(\"getting context\")\n\t\t} catch (e) {\n\t\t\tconsole.log(e, \"Failed to get context\")\n\t\t}\n\t\tif (!newGL) throw new Error(\"WebGL not supported\")\n\t\tif (options.throwOnError) {\n\t\t\tnewGL = makeDebugContext(newGL, (err, funcName) => {\n\t\t\t\tthrow new Error(\n\t\t\t\t\tglEnumToString(err) + \" was caused by \" + funcName,\n\t\t\t\t)\n\t\t\t})\n\t\t}\n\n\t\tTSGLContextBase.gl = newGL\n\t\taddOwnProperties(newGL, TSGLContextBase.prototype)\n\t\taddOwnProperties(newGL, new TSGLContextBase(newGL))\n\t\t//addEventListeners(newGL)\n\t\treturn newGL\n\t}\n\n\t/**\n\t * Sets the canvas render resolution (canvas.width and canvas.height) to match the display. I.e. it takes into\n\t * account window.devicePixelRatio.\n\t * @param maxPixelRatio A limit for the pixelRatio. Useful for very high DPI devices such as mobile devices.\n\t */\n\tfixCanvasRes(maxPixelRatio = Infinity) {\n\t\tthis.canvas.width =\n\t\t\tthis.canvas.clientWidth *\n\t\t\tMath.min(window.devicePixelRatio, maxPixelRatio)\n\t\tthis.canvas.height =\n\t\t\tthis.canvas.clientHeight *\n\t\t\tMath.min(window.devicePixelRatio, maxPixelRatio)\n\t\tthis.viewport(0, 0, this.canvas.width, this.canvas.height)\n\t}\n\n\tdrawVector(\n\t\tvector: V3,\n\t\tanchor: V3,\n\t\tcolor: GL_COLOR = GL_COLOR_BLACK,\n\t\tsize = 1,\n\t) {\n\t\tif (vector.likeO()) return\n\t\tthis.pushMatrix()\n\n\t\tconst headLength = size * 4\n\t\tif (headLength > vector.length()) return\n\n\t\tconst vT = vector.getPerpendicular().unit()\n\t\tthis.multMatrix(\n\t\t\tM4.forSys(vector.unit(), vT, vector.cross(vT).unit(), anchor),\n\t\t)\n\t\tthis.scale(vector.length() - headLength, size / 2, size / 2)\n\n\t\tthis.shaders.singleColor\n\t\t\t.uniforms({\n\t\t\t\tcolor: color,\n\t\t\t})\n\t\t\t.draw(this.meshes.vectorShaft)\n\n\t\tthis.scale(1 / (vector.length() - headLength), 1, 1)\n\t\tthis.translate(vector.length() - headLength, 0, 0)\n\t\tthis.scale(headLength / 2, 1, 1)\n\n\t\tthis.shaders.singleColor.draw(this.meshes.vectorHead)\n\t\tthis.popMatrix()\n\t}\n}\nexport namespace TSGLContext {\n\t/**\n\t * `create()` creates a new WebGL context and augments it with more methods. The alpha channel is disabled\n\t * by default because it usually causes unintended transparencies in the canvas.\n\t */\n\texport const create = TSGLContextBase.create\n}\n\n// enum WGL_ERROR {\n// \tNO_ERROR = WGL.NO_ERROR,\n// \tINVALID_ENUM = WGL.INVALID_ENUM,\n// \tINVALID_VALUE = WGL.INVALID_VALUE,\n// \tINVALID_OPERATION = WGL.INVALID_OPERATION,\n// \tINVALID_FRAMEBUFFER_OPERATION = WGL.INVALID_FRAMEBUFFER_OPERATION,\n// \tOUT_OF_MEMORY = WGL.OUT_OF_MEMORY,\n// \tCONTEXT_LOST_WEBGL = WGL.CONTEXT_LOST_WEBGL,\n// }\n\nTSGLContextBase.prototype.MODELVIEW = TSGLContextBase.MODELVIEW\nTSGLContextBase.prototype.PROJECTION = TSGLContextBase.PROJECTION\nTSGLContextBase.prototype.HALF_FLOAT_OES = TSGLContextBase.HALF_FLOAT_OES\n\n/**\n *\n * Push two triangles:\n * ```\n c - d\n | \\ |\n a - b\n ```\n */\nexport function pushQuad(\n\ttriangles: int[],\n\tflipped: boolean,\n\ta: int,\n\tb: int,\n\tc: int,\n\td: int,\n) {\n\t// prettier-ignore\n\tif (flipped) {\n\t\ttriangles.push(\n\t\t\ta, c, b,\n\t\t\tb, c, d)\n\t} else {\n\t\ttriangles.push(\n\t\t\ta, b, c,\n\t\t\tb, d, c)\n\t}\n}\n\nfunction hexIntToGLColor(color: int): GL_COLOR {\n\treturn [\n\t\t(color >> 16) / 255.0,\n\t\t((color >> 8) & 0xff) / 255.0,\n\t\t(color & 0xff) / 255.0,\n\t\t1.0,\n\t]\n}\n\nexport interface FontJsonMetrics {\n\tfamily: string\n\tstyle: string\n\n\t// buffer refers to the width of the margin around glyph bounding boxes with distance values\n\tbuffer: int\n\tsize: number\n\n\t// [width, height, horiBearingX, horiBearingY, horiAdvance, posX, posY]\n\t// see https://www.freetype.org/freetype2/docs/tutorial/step2.html\n\tchars: {\n\t\t[char: string]: [number, number, number, number, number, number, number]\n\t}\n\n\tdescender: number\n\tascender: number\n}\n// function measureText(metrics: FontJsonMetrics, text: string, size: number) {\n// \tconst dimensions = {\n// \t\tadvance: 0,\n// \t}\n\n// \tconst scale = size / metrics.size\n// \tfor (let i = 0; i < text.length; i++) {\n// \t\tconst horiAdvance = metrics.chars[text[i]][4]\n// \t\tdimensions.advance += horiAdvance * scale\n// \t}\n\n// \treturn dimensions\n// }\n\n// gl.getExtension('OES_standard_derivatives')\n\n// gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE)\n\n// gl.enable(gl.BLEND)\n\n// const texture = gl.createTexture()\n\n// const vertexBuffer = gl.createBuffer()\n// const textureBuffer = gl.createBuffer()\n\nfunction createTextMesh(\n\tfontMetrics: FontJsonMetrics,\n\tfontTextureAtlas: Texture,\n\tstr: string,\n\tlineHeight = 1,\n) {\n\tconst mesh = new Mesh()\n\t\t.addIndexBuffer(\"TRIANGLES\")\n\t\t.addVertexBuffer(\"coords\", \"ts_TexCoord\")\n\n\tlet cursorX = 0\n\tlet cursorY = 0\n\n\tfunction drawGlyph(chr: string) {\n\t\tconst metric = fontMetrics.chars[chr]\n\t\tif (!metric) return\n\n\t\tconst [\n\t\t\twidth,\n\t\t\theight,\n\t\t\thoriBearingX,\n\t\t\thoriBearingY,\n\t\t\thoriAdvance,\n\t\t\tposX,\n\t\t\tposY,\n\t\t] = metric\n\t\tconst { size, buffer } = fontMetrics\n\t\tconst quadStartIndex = mesh.vertices.length\n\n\t\t// buffer = margin on texture\n\t\tif (width > 0 && height > 0) {\n\t\t\t// Add a quad (= two triangles) per glyph.\n\t\t\tconst left = (cursorX + horiBearingX - buffer) / size\n\t\t\tconst right = (cursorX + horiBearingX + width + buffer) / size\n\t\t\tconst bottom = (horiBearingY - height - buffer) / size\n\t\t\tconst top = (horiBearingY + buffer) / size\n\t\t\tmesh.vertices.push(\n\t\t\t\tnew V3(left, bottom, cursorY / size),\n\t\t\t\tnew V3(right, bottom, cursorY / size),\n\t\t\t\tnew V3(left, top, cursorY / size),\n\t\t\t\tnew V3(right, top, cursorY / size),\n\t\t\t)\n\n\t\t\tconst coordsLeft = posX / fontTextureAtlas.width\n\t\t\tconst coordsRight =\n\t\t\t\t(posX + width + 2 * buffer) / fontTextureAtlas.width\n\t\t\tconst coordsBottom =\n\t\t\t\t(posY + height + 2 * buffer) / fontTextureAtlas.height\n\t\t\tconst coordsTop = posY / fontTextureAtlas.height\n\t\t\tmesh.coords.push(\n\t\t\t\t[coordsLeft, coordsBottom],\n\t\t\t\t[coordsRight, coordsBottom],\n\t\t\t\t[coordsLeft, coordsTop],\n\t\t\t\t[coordsRight, coordsTop],\n\t\t\t)\n\t\t\t// mesh.coords.push([0, 0], [0, 1], [1, 0], [1, 1])\n\n\t\t\tpushQuad(\n\t\t\t\tmesh.TRIANGLES,\n\t\t\t\tfalse,\n\t\t\t\tquadStartIndex,\n\t\t\t\tquadStartIndex + 1,\n\t\t\t\tquadStartIndex + 2,\n\t\t\t\tquadStartIndex + 3,\n\t\t\t)\n\t\t}\n\n\t\t// pen.x += Math.ceil(horiAdvance * scale);\n\t\tcursorX += horiAdvance\n\t}\n\n\tfor (let i = 0; i < str.length; i++) {\n\t\tconst chr = str[i]\n\t\tif (\"\\n\" == chr) {\n\t\t\tcursorX = 0\n\t\t\tcursorY += lineHeight * fontMetrics.size\n\t\t} else {\n\t\t\tdrawGlyph(chr)\n\t\t}\n\t}\n\n\treturn Object.assign(mesh.compile(), {\n\t\twidth: cursorX / fontMetrics.size,\n\t\tlineCount: cursorY + 1,\n\t})\n}\n","precision mediump float;\r\n\r\nuniform mat4 ts_ModelViewProjectionMatrix;\r\nuniform mat3 ts_NormalMatrix;\r\n\r\nattribute vec3 ts_Normal;\r\nattribute vec4 ts_Vertex;\r\nattribute vec4 ts_Color;\r\n\r\nvarying vec3 normal;\r\nvarying vec4 color;\r\n\r\nvoid main() {\r\n\tgl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\r\n\tnormal = ts_NormalMatrix * ts_Normal;\r\n\tcolor = ts_Color;\r\n}","/// <reference path=\"../types.d.ts\" />\nimport { clamp, DEG, V, V3 } from \"ts3dutils\"\nimport { Mesh, Shader, TSGLContext } from \"tsgl\"\n\nimport { color } from \"chroma.ts\"\nimport posNormalColorVS from \"../shaders/posNormalColorVS.glslx\"\n\n/**\n * Move camera using mouse.\n */\nexport function camera(gl: TSGLContext) {\n\tlet yRot = -10 * DEG\n\tlet zRot = 90 * DEG\n\tlet camera = new V3(0, -5, 1)\n\tconst mesh = Mesh.sphere().computeWireframeFromFlatTriangles().compile()\n\tconst shader = Shader.create(\n\t\tposNormalColorVS,\n\t\t`\nprecision mediump float;\nuniform float brightness;\nvarying vec3 normal;\nvoid main() {\n\tgl_FragColor = vec4(brightness * (normal * 0.5 + 0.5), 1.0);\n}\n`,\n\t)\n\n\tlet lastPos = V3.O\n\t// scene rotation\n\tgl.canvas.onmousemove = function (e) {\n\t\tconst pagePos = V(e.pageX, e.pageY)\n\t\tconst delta = lastPos.to(pagePos)\n\t\tif (e.buttons & 1) {\n\t\t\tzRot -= delta.x * 0.25 * DEG\n\t\t\tyRot = clamp(yRot - delta.y * 0.25 * DEG, -85 * DEG, 85 * DEG)\n\t\t}\n\t\tlastPos = pagePos\n\t}\n\tgl.canvas.contentEditable = \"true\"\n\tconst keys: { [key: string]: boolean } = {}\n\tgl.canvas.onkeydown = function (e) {\n\t\tkeys[e.code] = true\n\t}\n\tgl.canvas.onkeyup = function (e) {\n\t\tkeys[e.code] = false\n\t}\n\n\tgl.clearColor(1, 1, 1, 1)\n\n\t// setup camera\n\n\tgl.enable(gl.CULL_FACE)\n\tgl.enable(gl.POLYGON_OFFSET_FILL)\n\tgl.polygonOffset(1, 1)\n\tgl.clearColor(0.8, 0.8, 0.8, 1)\n\tgl.enable(gl.DEPTH_TEST)\n\n\tgl.vertexAttrib1f(0, 42)\n\tgl.enableVertexAttribArray(0)\n\tconsole.log(gl.getVertexAttrib(0, gl.CURRENT_VERTEX_ATTRIB))\n\tconsole.log(gl.getVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_ENABLED))\n\n\tconst gl2 = (gl as any) as WebGL2RenderingContextStrict\n\tconst vao = gl2.createVertexArray()\n\tgl2.bindVertexArray(vao)\n\tgl2.vertexAttrib1f(0, 31)\n\tconsole.log(gl.getVertexAttrib(0, gl.CURRENT_VERTEX_ATTRIB))\n\tconsole.log(gl.getVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_ENABLED))\n\n\tgl2.bindVertexArray(null)\n\tconsole.log(gl.getVertexAttrib(0, gl.CURRENT_VERTEX_ATTRIB))\n\tconsole.log(gl.getVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_ENABLED))\n\n\treturn gl.animate(function (_abs, diff) {\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t\tgl.loadIdentity()\n\t\tconst speed = (diff / 1000) * 4\n\n\t\t// Forward movement\n\t\tconst forwardMov =\n\t\t\t+!!(keys.KeyW || keys.ArrowUp) - +!!(keys.KeyS || keys.ArrowDown)\n\t\tconst forwardV3 = V3.sphere(zRot, yRot)\n\n\t\t// Sideways movement\n\t\tconst sideMov =\n\t\t\t+!!(keys.KeyA || keys.ArrowLeft) - +!!(keys.KeyD || keys.ArrowRight)\n\t\tconst sideV3 = V3.sphere(zRot + Math.PI / 2, 0)\n\n\t\tconst movementV3 = forwardV3\n\t\t\t.times(forwardMov)\n\t\t\t.plus(sideV3.times(sideMov))\n\t\tcamera = movementV3.likeO()\n\t\t\t? camera\n\t\t\t: camera.plus(movementV3.toLength(speed))\n\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\n\t\tgl.matrixMode(gl.PROJECTION)\n\t\tgl.loadIdentity()\n\t\tgl.perspective(70, gl.canvas.width / gl.canvas.height, 0.1, 1000)\n\t\tgl.lookAt(camera, camera.plus(forwardV3), V3.Z)\n\n\t\tgl.matrixMode(gl.MODELVIEW)\n\t\tgl.loadIdentity()\n\t\tgl.rotate(-zRot, 0, 0, 1)\n\t\tgl.rotate(-yRot, 0, 1, 0)\n\t\tgl.translate(-camera.x, -camera.y, -camera.z)\n\n\t\tshader\n\t\t\t.uniforms({ brightness: 1 })\n\t\t\t.attributes({ ts_Color: color(\"red\").gl() })\n\t\t\t.draw(mesh, gl.TRIANGLES)\n\t\tshader.uniforms({ brightness: 0 }).draw(mesh, gl.LINES)\n\t})\n}\n\n;(camera as any).info = \"LMB-drag to move camera.\"\n","/// <reference path=\"../types.d.ts\" />\nimport { V, V3 } from \"ts3dutils\"\nimport { TSGLContext } from \"tsgl\"\n\n/**\n * OpenGL-style immediate mode.\n */\nexport function immediateMode(gl: TSGLContext) {\n\t// setup camera\n\tgl.disable(gl.CULL_FACE)\n\tgl.matrixMode(gl.PROJECTION)\n\tgl.loadIdentity()\n\tgl.perspective(90, gl.canvas.width / gl.canvas.height, 0.0001, 1000000)\n\tgl.lookAt(V(0, -3, 2), V3.O, V3.Z)\n\tgl.matrixMode(gl.MODELVIEW)\n\n\tgl.enable(gl.DEPTH_TEST)\n\tgl.clearColor(1, 1, 1, 0)\n\n\treturn gl.animate(function (abs, _diff) {\n\t\tconst angleDeg = (abs / 1000) * 45\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t\tgl.loadIdentity()\n\t\t// gl.translate(0, 0, -5)\n\t\tgl.rotate(angleDeg, 0, 0, 1)\n\n\t\tgl.color(0.5, 0.5, 0.5)\n\t\tgl.lineWidth(1)\n\t\tgl.begin(gl.LINES)\n\t\tfor (let i = -10; i <= 10; i++) {\n\t\t\tgl.vertex(i, -10, 0)\n\t\t\tgl.vertex(i, +10, 0)\n\t\t\tgl.vertex(-10, i, 0)\n\t\t\tgl.vertex(+10, i, 0)\n\t\t}\n\t\tgl.end()\n\n\t\tgl.pointSize(10)\n\t\tgl.begin(gl.POINTS)\n\n\t\tgl.color(1, 0, 0)\n\t\tgl.vertex(1, 0, 0)\n\n\t\tgl.color(0, 1, 0)\n\t\tgl.vertex(0, 1, 0)\n\n\t\tgl.color(0, 0, 1)\n\t\tgl.vertex(0, 0, 1)\n\n\t\tgl.end()\n\n\t\tgl.lineWidth(2)\n\t\tgl.begin(gl.LINE_LOOP)\n\t\tgl.color(\"red\")\n\t\tgl.vertex(1, 0, 0)\n\t\tgl.color(\"green\")\n\t\tgl.vertex(0, 1, 0)\n\t\tgl.color(\"blue\")\n\t\tgl.vertex(0, 0, 1)\n\t\tgl.end()\n\n\t\tgl.begin(gl.TRIANGLES)\n\t\tgl.color(1, 1, 0)\n\t\tgl.vertex(0.5, 0.5, 0)\n\t\tgl.color(0, 1, 1)\n\t\tgl.vertex(0, 0.5, 0.5)\n\t\tgl.color(1, 0, 1)\n\t\tgl.vertex(0.5, 0, 0.5)\n\t\tgl.end()\n\t})\n}\n","/// <reference path=\"../types.d.ts\" />\nimport { clamp, int, M4, TAU, V, V3 } from \"ts3dutils\"\n\nimport {\n\tisWebGL2RenderingContext,\n\tMesh,\n\tpushQuad,\n\tShader,\n\tTexture,\n\tTSGLContext,\n} from \"tsgl\"\n\nexport { TSGLContext }\n\n/**\n * Draw soft shadows by calculating a light map in multiple passes.\n */\nexport function gpuLightMap(gl: TSGLContext & WebGL2RenderingContextStrict) {\n\tif (!isWebGL2RenderingContext(gl)) throw new Error(\"needs WebGL2\")\n\tgl.getExtension(\"EXT_color_buffer_float\")\n\t// modified version of https://evanw.github.io/lightgl.js/tests/gpulightmap.html\n\n\tlet angleX = 0\n\tlet angleY = 0\n\tif (\n\t\tgl.version !== 2 &&\n\t\t(!gl.getExtension(\"OES_texture_float\") ||\n\t\t\t!gl.getExtension(\"OES_texture_float_linear\"))\n\t) {\n\t\tdocument.write(\n\t\t\t\"This demo requires the OES_texture_float and OES_texture_float_linear extensions to run\",\n\t\t)\n\t\tthrow new Error(\"not supported\")\n\t}\n\tconst texturePlane = Mesh.plane()\n\tconst textureShader = Shader.create(\n\t\t`\n\tattribute vec2 ts_TexCoord;\n\tvarying vec2 coord;\n\tvoid main() {\n\t\tcoord = ts_TexCoord;\n\t\tgl_Position = vec4(coord * 2.0 - 1.0, 0.0, 1.0);\n\t}`,\n\t\t`\n\tprecision highp float;\n\tuniform sampler2D texture;\n\tvarying vec2 coord;\n\tvoid main() {\n\t\tgl_FragColor = texture2D(texture, coord);\n\t}`,\n\t)\n\n\tconst depthMap = new Texture(1024, 1024, { format: gl.RGBA })\n\tconst depthShader = Shader.create(\n\t\t`\n\tuniform mat4 ts_ModelViewProjectionMatrix;\n\tattribute vec4 ts_Vertex;\n\t// GL does not make the fragment position in NDC available, (gl_FragCoord is in window coords)\n\t// so we have an addition varying pos to calculate it ourselves.\n\tvarying vec4 pos;\n\tvoid main() {\n\tgl_Position = pos = ts_ModelViewProjectionMatrix * ts_Vertex;\n\t}`,\n\t\t`\n\tprecision highp float;\n\tvarying vec4 pos;\n\tvoid main() {\n\t\tfloat depth = pos.z / pos.w;\n\t\tgl_FragColor = vec4(depth * 0.5 + 0.5);\n\t}`,\n\t)\n\n\tconst shadowTestShader = Shader.create(\n\t\t`\n  uniform mat4 shadowMapMatrix;\n  uniform vec3 light;\n  attribute vec4 offsetPosition;\n  attribute vec3 ts_Normal;\n  attribute vec2 ts_TexCoord;\n  varying vec4 shadowMapPos; // position inside the shadow map frustrum\n  varying vec3 normal;\n\n  void main() {\n    normal = ts_Normal;\n    shadowMapPos = shadowMapMatrix * offsetPosition;\n    gl_Position = vec4(ts_TexCoord * 2.0 - 1.0, 0.0, 1.0);\n  }\n`,\n\t\t`\n\tprecision highp float;\n  uniform float sampleCount;\n  uniform sampler2D depthMap;\n  uniform vec3 light;\n  varying vec4 shadowMapPos;\n  varying vec3 normal;\n  uniform vec4 res;\n\n  void main() {\n    /* Run shadow test */\n    const float bias = -0.0025;\n    float depth = texture2D(depthMap, shadowMapPos.xy / shadowMapPos.w * 0.5 + 0.5).r;\n    float shadow = (bias + shadowMapPos.z / shadowMapPos.w * 0.5 + 0.5 - depth > 0.0) ? 1.0 : 0.0;\n\n    /* Points on polygons facing away from the light are always in shadow */\n    float color = dot(normal, light) > 0.0 ? 1.0 - shadow : 0.0;\n    gl_FragColor = vec4(vec3(color), 1.0 / (1.0 + sampleCount));\n  }\n`,\n\t)\n\n\t/**\n\t * Wrapper for a Mesh made only of quads (two triangles in a \"square\") and\n\t * an associated automatically UV-unwrapped texture.\n\t */\n\tclass QuadMesh {\n\t\tmesh = new Mesh()\n\t\t\t.addVertexBuffer(\"normals\", \"ts_Normal\")\n\t\t\t.addIndexBuffer(\"TRIANGLES\")\n\t\t\t.addVertexBuffer(\"coords\", \"ts_TexCoord\")\n\t\t\t.addVertexBuffer(\"offsetCoords\", \"offsetCoord\")\n\t\t\t.addVertexBuffer(\"offsetPositions\", \"offsetPosition\")\n\t\tindex: int = 0\n\t\tlightmapTexture: Texture | undefined\n\t\tbounds: { center: V3; radius: number } | undefined\n\t\tsampleCount: int = 0\n\t\tcountedQuads = 0\n\n\t\t// Add a quad given its four vertices and allocate space for it in the lightmap\n\t\taddQuad(a: V3, b: V3, c: V3, d: V3) {\n\t\t\t// Add vertices\n\t\t\tconst vl = this.mesh.vertices.length\n\t\t\tthis.mesh.vertices.push(a, b, c, d)\n\n\t\t\t// Add normal\n\t\t\tconst normal = V3.normalOnPoints(a, b, c).unit()\n\t\t\tthis.mesh.normals.push(normal, normal, normal, normal)\n\n\t\t\t// A quad is two triangles\n\t\t\tpushQuad(this.mesh.TRIANGLES, false, vl, vl + 1, vl + 2, vl + 3)\n\n\t\t\tthis.countedQuads++\n\t\t}\n\n\t\taddDoubleQuad(a: V3, b: V3, c: V3, d: V3) {\n\t\t\t// Need a separate lightmap for each side of the quad\n\t\t\tthis.addQuad(a, b, c, d)\n\t\t\tthis.addQuad(a, c, b, d)\n\t\t}\n\n\t\taddCube(m4?: M4) {\n\t\t\t;[\n\t\t\t\t[V3.O, V3.Y, V3.X, V3.XY],\n\t\t\t\t[V3.Z, new V3(1, 0, 1), new V3(0, 1, 1), V3.XYZ],\n\t\t\t\t[V3.O, V3.X, V3.Z, new V3(1, 0, 1)],\n\t\t\t\t[V3.X, new V3(1, 1, 0), new V3(1, 0, 1), new V3(1, 1, 1)],\n\t\t\t\t[new V3(1, 1, 0), V3.Y, V3.XYZ, new V3(0, 1, 1)],\n\t\t\t\t[V3.Y, V3.O, new V3(0, 1, 1), V3.Z],\n\t\t\t].forEach((vs) =>\n\t\t\t\t(this.addQuad as any)(...(m4 ? m4.transformedPoints(vs) : vs)),\n\t\t\t)\n\t\t}\n\n\t\tcompile(texelsPerSide: int) {\n\t\t\tconst numQuads = this.mesh.vertices.length / 4\n\t\t\tif (numQuads % 1 != 0) throw new Error(\"not quads\")\n\t\t\tconst quadsPerSide = Math.ceil(Math.sqrt(numQuads))\n\n\t\t\tfor (let i = 0; i < numQuads; i++) {\n\t\t\t\t// Compute location of texture cell\n\t\t\t\tconst s = i % quadsPerSide\n\t\t\t\tconst t = (i - s) / quadsPerSide\n\n\t\t\t\t// Coordinates that are on the edge of border texels (to avoid cracks when rendering)\n\t\t\t\tconst rs0 = s / quadsPerSide\n\t\t\t\tconst rt0 = t / quadsPerSide\n\t\t\t\tconst rs1 = (s + 1) / quadsPerSide\n\t\t\t\tconst rt1 = (t + 1) / quadsPerSide\n\t\t\t\tthis.mesh.coords.push(\n\t\t\t\t\t[rs0, rt0],\n\t\t\t\t\t[rs1, rt0],\n\t\t\t\t\t[rs0, rt1],\n\t\t\t\t\t[rs1, rt1],\n\t\t\t\t)\n\n\t\t\t\tconst half = 1 / texelsPerSide\n\n\t\t\t\tconst [a, b, c, d] = this.mesh.vertices.slice(\n\t\t\t\t\ti * 4,\n\t\t\t\t\t(i + 1) * 4,\n\t\t\t\t)\n\n\t\t\t\t// Add fake positions\n\t\t\t\tconst bilerp = (x: number, y: number) => {\n\t\t\t\t\treturn a\n\t\t\t\t\t\t.times((1 - x) * (1 - y))\n\t\t\t\t\t\t.plus(b.times(x * (1 - y)))\n\t\t\t\t\t\t.plus(c.times((1 - x) * y))\n\t\t\t\t\t\t.plus(d.times(x * y))\n\t\t\t\t}\n\n\t\t\t\tthis.mesh.offsetPositions.push(\n\t\t\t\t\tbilerp(-half, -half),\n\t\t\t\t\tbilerp(1 + half, -half),\n\t\t\t\t\tbilerp(-half, 1 + half),\n\t\t\t\t\tbilerp(1 + half, 1 + half),\n\t\t\t\t)\n\n\t\t\t\tconst s0 = (s + half) / quadsPerSide\n\t\t\t\tconst t0 = (t + half) / quadsPerSide\n\t\t\t\tconst s1 = (s + 1 - half) / quadsPerSide\n\t\t\t\tconst t1 = (t + 1 - half) / quadsPerSide\n\t\t\t\tthis.mesh.offsetCoords.push(\n\t\t\t\t\t[s0, t0],\n\t\t\t\t\t[s1, t0],\n\t\t\t\t\t[s0, t1],\n\t\t\t\t\t[s1, t1],\n\t\t\t\t)\n\t\t\t}\n\t\t\t// Finalize mesh\n\t\t\tthis.mesh.compile()\n\t\t\tthis.bounds = this.mesh.getBoundingSphere()\n\n\t\t\t// Create textures\n\t\t\tconst textureSize = quadsPerSide * texelsPerSide\n\t\t\tconsole.log(\"texture size: \" + textureSize)\n\t\t\tthis.lightmapTexture = new Texture(textureSize, textureSize, {\n\t\t\t\tinternalFormat: gl.RGBA32F,\n\t\t\t\tformat: gl.RGBA,\n\t\t\t\ttype: gl.FLOAT,\n\t\t\t\tfilter: gl.LINEAR,\n\t\t\t})\n\n\t\t\tconsole.log(\"compiled quad mesh\")\n\t\t}\n\n\t\tdrawShadow(dir: V3) {\n\t\t\t// Construct a camera looking from the light toward the object\n\t\t\tconst r = this.bounds!.radius,\n\t\t\t\tc = this.bounds!.center\n\t\t\tgl.matrixMode(gl.PROJECTION)\n\t\t\tgl.pushMatrix()\n\t\t\tgl.loadIdentity()\n\t\t\tgl.ortho(-r, r, -r, r, -r, r)\n\t\t\tgl.matrixMode(gl.MODELVIEW)\n\t\t\tgl.pushMatrix()\n\t\t\tgl.loadIdentity()\n\t\t\tconst at = c.minus(dir)\n\t\t\tconst useY = dir.maxElement() != dir.z\n\t\t\tconst up = new V3(+!useY, 0, +useY).cross(dir)\n\t\t\tgl.lookAt(c, at, up)\n\n\t\t\t// Render the object viewed from the light using a shader that returns the fragment depth\n\t\t\tconst mesh = this.mesh\n\t\t\tconst shadowMapMatrix = gl.projectionMatrix.times(\n\t\t\t\tgl.modelViewMatrix,\n\t\t\t)\n\t\t\tdepthMap.drawTo(function (gl) {\n\t\t\t\tgl.enable(gl.DEPTH_TEST)\n\t\t\t\tgl.clearColor(1, 1, 1, 1)\n\t\t\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t\t\t\tdepthShader.draw(mesh)\n\t\t\t})\n\n\t\t\t//Run the shadow test for each texel in the lightmap and\n\t\t\t//accumulate that onto the existing lightmap contents\n\t\t\tconst sampleCount = this.sampleCount++\n\t\t\tdepthMap.bind(0)\n\t\t\tthis.lightmapTexture!.drawTo(function (gl) {\n\t\t\t\tgl.enable(gl.BLEND)\n\t\t\t\tgl.disable(gl.CULL_FACE)\n\t\t\t\tgl.disable(gl.DEPTH_TEST)\n\t\t\t\tgl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\n\t\t\t\tshadowTestShader\n\t\t\t\t\t.uniforms({\n\t\t\t\t\t\tshadowMapMatrix: shadowMapMatrix,\n\t\t\t\t\t\tsampleCount: sampleCount,\n\t\t\t\t\t\tlight: dir,\n\t\t\t\t\t})\n\t\t\t\t\t.draw(mesh)\n\t\t\t\tgl.disable(gl.BLEND)\n\t\t\t})\n\t\t\tdepthMap.unbind(0)\n\n\t\t\t// Reset the transform\n\t\t\tgl.matrixMode(gl.PROJECTION)\n\t\t\tgl.popMatrix()\n\t\t\tgl.matrixMode(gl.MODELVIEW)\n\t\t\tgl.popMatrix()\n\t\t}\n\t}\n\n\t// Make a mesh of quads\n\tconst numArcQuads = 32\n\tconst groundTilesPerSide = 5\n\tconst quadMesh = new QuadMesh()\n\t// Arc of randomly oriented quads\n\tquadMesh.addCube(\n\t\tM4.product(M4.translate(0, 0, -0.2), M4.rotateAB(V3.XYZ, V3.Z)),\n\t)\n\tfor (let i = 0; i < numArcQuads; i++) {\n\t\tconst r = 0.4\n\t\tconst t = (i / numArcQuads) * TAU\n\t\tconst center = V(0, 0, Math.sqrt(3) / 2 - 0.2)\n\t\t\t.plus(V(0, 1.5, 0).times(Math.cos(t)))\n\t\t\t.plus(V(1, 0, -1).toLength(1.5).times(Math.sin(t)))\n\t\t// const center = V3.sphere(0, (i + Math.random()) / numArcQuads * Math.PI)\n\t\tconst a = V3.randomUnit()\n\t\tconst b = V3.randomUnit().cross(a).unit()\n\t\tquadMesh.addCube(\n\t\t\tM4.product(\n\t\t\t\tM4.translate(center),\n\t\t\t\tM4.forSys(a, b),\n\t\t\t\tM4.scale(r, r, r),\n\t\t\t\tM4.translate(-0.5, -0.5, -0.5),\n\t\t\t),\n\t\t)\n\t}\n\n\t// Plane of quads\n\tfor (let x = 0; x < groundTilesPerSide; x++) {\n\t\tfor (let z = 0; z < groundTilesPerSide; z++) {\n\t\t\tconst dx = x - groundTilesPerSide / 2\n\t\t\tconst dz = z - groundTilesPerSide / 2\n\t\t\tquadMesh.addQuad(\n\t\t\t\tnew V3(dx, dz, 0),\n\t\t\t\tnew V3(dx + 1, dz, 0),\n\t\t\t\tnew V3(dx, dz + 1, 0),\n\t\t\t\tnew V3(dx + 1, dz + 1, 0),\n\t\t\t)\n\t\t}\n\t}\n\tquadMesh.compile(128)\n\n\t// The mesh will be drawn with texture mapping\n\tconst mesh = quadMesh.mesh\n\tconst textureMapShader = Shader.create(\n\t\t`\n\t\tattribute vec4 ts_Vertex;\n\t\tuniform mat4 ts_ModelViewProjectionMatrix;\n        attribute vec2 offsetCoord;\n        varying vec2 coord;\n        void main() {\n            coord = offsetCoord;\n            gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\n        }\n`,\n\t\t`\n\t\tprecision highp float;\n        uniform sampler2D texture;\n        varying vec2 coord;\n        void main() {\n            gl_FragColor = texture2D(texture, coord);\n        }\n`,\n\t)\n\n\tlet lastPos = V3.O\n\t// scene rotation\n\tgl.canvas.onmousemove = function (e) {\n\t\tconst pagePos = V(e.pageX, e.pageY)\n\t\tconst delta = lastPos.to(pagePos)\n\t\tif (e.buttons & 1) {\n\t\t\tangleY += delta.x\n\t\t\tangleX = clamp(angleX + delta.y, -90, 90)\n\t\t}\n\t\tlastPos = pagePos\n\t}\n\n\tlet flip = false\n\n\tgl.enable(gl.CULL_FACE)\n\tgl.enable(gl.DEPTH_TEST)\n\n\tconst lightDir = V3.XYZ\n\tconst ambientFraction = 0.4\n\n\treturn gl.animate(function (_abs, _diff) {\n\t\tconst gl = this\n\n\t\tgl.enable(gl.CULL_FACE)\n\t\tgl.clearColor(0.9, 0.9, 0.9, 1)\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\n\t\t// setup camera\n\t\tgl.matrixMode(gl.PROJECTION)\n\t\tgl.loadIdentity()\n\t\tgl.perspective(70, gl.canvas.width / gl.canvas.height, 0.1, 1000)\n\t\tgl.lookAt(V(0, -3, 3), V3.O, V3.Z)\n\n\t\tgl.matrixMode(gl.MODELVIEW)\n\t\tgl.loadIdentity()\n\t\tgl.rotate(angleX, 1, 0, 0)\n\t\tgl.rotate(angleY, 0, 0, 1)\n\n\t\t// Alternate between a shadow from a random point on the sky hemisphere\n\t\t// and a random point near the light (creates a soft shadow)\n\t\tflip = !flip\n\t\tconst dir =\n\t\t\tMath.random() < ambientFraction\n\t\t\t\t? V3.randomUnit()\n\t\t\t\t: lightDir\n\t\t\t\t\t\t.plus(\n\t\t\t\t\t\t\tV3.randomUnit().times(\n\t\t\t\t\t\t\t\t0.1 * Math.sqrt(Math.random()),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.unit()\n\t\tquadMesh.drawShadow(dir.z < 0 ? dir.negated() : dir)\n\n\t\t// Draw the mesh with the ambient occlusion so far\n\t\tgl.enable(gl.DEPTH_TEST)\n\t\tgl.enable(gl.CULL_FACE)\n\t\tquadMesh.lightmapTexture!.bind(0)\n\t\ttextureMapShader.draw(mesh)\n\n\t\t// Draw depth map overlay\n\t\tgl.disable(gl.CULL_FACE)\n\t\tquadMesh.lightmapTexture!.bind(0)\n\t\tgl.viewport(10, 10, 10 + 256, 10 + 256)\n\t\ttextureShader.draw(texturePlane)\n\t\tgl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n\t})\n}\n;(gpuLightMap as any).info = \"LMB-drag to rotate camera.\"\n","precision mediump float;\r\nvarying vec4 color;\r\nvoid main() {\r\n    gl_FragColor = color;\r\n}","/// <reference path=\"../types.d.ts\" />\nimport { color } from \"chroma.ts\"\nimport { AABB, arrayFromFunction, DEG, M4, time, V, V3 } from \"ts3dutils\"\nimport { Mesh, Shader, TSGLContext } from \"tsgl\"\nimport posNormalColorVS from \"../shaders/posNormalColorVS.glslx\"\nimport varyingColorFS from \"../shaders/varyingColorFS.glslx\"\n\n/**\n * Calculate and render magnetic field lines.\n */\nexport function mag(gl: TSGLContext) {\n\tconst cubeMesh = Mesh.cube()\n\t// simple pos/color\n\tconst shader = Shader.create(posNormalColorVS, varyingColorFS)\n\tgl.clearColor(1, 1, 1, 1)\n\n\ttype PointCharge = { pos: V3; charge: number }\n\n\t// given a magnetic field created by fieldCharges, calculate the field strength/dir at pos\n\tfunction fieldAtPos(fieldCharges: PointCharge[], pos: V3) {\n\t\tconst fieldChargeForces = fieldCharges.map((p) => {\n\t\t\tconst posToP = pos.to(p.pos)\n\t\t\tconst r = posToP.length()\n\t\t\tconst partialForceMagnitude = p.charge / r / r\n\t\t\tconst partialForce = posToP.toLength(partialForceMagnitude)\n\t\t\treturn partialForce\n\t\t})\n\t\treturn V3.add(...fieldChargeForces)\n\t}\n\n\t/**\n\t * Iteratively calculate a field line\n\t * @param fieldCharges charge defining magnetic field\n\t * @param bounds within which to calc field lines\n\t * @param start start point of field line\n\t * @param dir step size to take. negative to plot field line in reverse\n\t */\n\tfunction* qPath(\n\t\tfieldCharges: PointCharge[],\n\t\tbounds: AABB,\n\t\tstart: V3,\n\t\tdir: number,\n\t) {\n\t\tlet pos = start,\n\t\t\tf,\n\t\t\ti = 0\n\t\twhile (true) {\n\t\t\tf = fieldAtPos(fieldCharges, pos)\n\t\t\tpos = pos.plus(f.toLength(dir))\n\n\t\t\tif (\n\t\t\t\t!bounds.containsPoint(pos) || // pos outside bounds\n\t\t\t\ti++ > 1000 || // to many iterations\n\t\t\t\tf.squared() > 2.5e7 // force to high, i.e. to close to charge\n\t\t\t)\n\t\t\t\tbreak\n\t\t\tyield pos\n\t\t}\n\t}\n\n\t/**\n\t * Returns array of PointCharges to model a bar magnet.\n\t * @param count\n\t */\n\tfunction barMagnet(count = 4) {\n\t\treturn arrayFromFunction(count * count, (i) => {\n\t\t\tconst x = i % count\n\t\t\tconst y = (i / count) | 0\n\t\t\treturn {\n\t\t\t\tpos: V((0.5 + x) / count, (0.5 + y) / count, 0),\n\t\t\t\tcharge: +(x < count / 2) || -1,\n\t\t\t}\n\t\t})\n\t}\n\n\tconst enabledBarMagnets = [true, true, true, true, true]\n\tconst barMagnetMatrices = [\n\t\tM4.scale(0.2, 0.1, 0.02)\n\t\t\t.rotateZ(20 * DEG)\n\t\t\t.translate(0.5, 0.5, 0.1),\n\t\tM4.scale(0.1, 0.05, 0.02)\n\t\t\t.rotateZ(60 * DEG)\n\t\t\t.translate(0.2, 0.1),\n\t\tM4.scale(0.2, 0.02, 0.02)\n\t\t\t.rotateY(-100 * DEG)\n\t\t\t.rotateZ(120 * DEG)\n\t\t\t.translate(0.2, 0.8),\n\t\tM4.scale(0.2, 0.1, 0.02)\n\t\t\t.rotateX(90 * DEG)\n\t\t\t.rotateZ(270 * DEG)\n\t\t\t.translate(0.9, 0.4, 0.1),\n\t\tM4.scale(0.2, 0.1, 0.02)\n\t\t\t.rotateX(90 * DEG)\n\t\t\t.rotateZ(270 * DEG)\n\t\t\t.translate(0.9, 0.9, 0.1),\n\t]\n\n\tconst bounds = new AABB(V3.O, V(1, 1, 0.3))\n\tlet linesDensity = 10\n\tconst linesMesh = new Mesh().addIndexBuffer(\"LINES\")\n\n\tfunction calculateFieldLines() {\n\t\tconst ps: PointCharge[] = []\n\t\tbarMagnetMatrices.forEach(\n\t\t\t(mat, index) =>\n\t\t\t\tenabledBarMagnets[index] &&\n\t\t\t\tps.push(\n\t\t\t\t\t...barMagnet(6).map((p) => {\n\t\t\t\t\t\tp.pos = mat.transformPoint(p.pos)\n\t\t\t\t\t\treturn p\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t)\n\n\t\tlinesMesh.LINES.length = 0\n\t\tlinesMesh.vertices.length = 0\n\t\tconsole.log(\n\t\t\t\"generation took (ms): \" +\n\t\t\t\ttime(() => {\n\t\t\t\t\tfor (const [x, y, z] of grid3d(\n\t\t\t\t\t\tlinesDensity,\n\t\t\t\t\t\tlinesDensity,\n\t\t\t\t\t\tMath.ceil(0.4 * linesDensity),\n\t\t\t\t\t)) {\n\t\t\t\t\t\tconst start = V(x, y, z * bounds.max.z)\n\t\t\t\t\t\tlinesMesh.vertices.push(start)\n\t\t\t\t\t\tconst STEP = 0.01\n\t\t\t\t\t\tfor (const p of qPath(ps, bounds, start, STEP)) {\n\t\t\t\t\t\t\tlinesMesh.vertices.push(p)\n\t\t\t\t\t\t\tlinesMesh.LINES.push(\n\t\t\t\t\t\t\t\tlinesMesh.vertices.length - 2,\n\t\t\t\t\t\t\t\tlinesMesh.vertices.length - 1,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlinesMesh.vertices.push(start)\n\t\t\t\t\t\tfor (const p of qPath(ps, bounds, start, -STEP)) {\n\t\t\t\t\t\t\tlinesMesh.vertices.push(p)\n\t\t\t\t\t\t\tlinesMesh.LINES.push(\n\t\t\t\t\t\t\t\tlinesMesh.vertices.length - 2,\n\t\t\t\t\t\t\t\tlinesMesh.vertices.length - 1,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t)\n\t\tlinesMesh.compile()\n\t}\n\n\tcalculateFieldLines()\n\n\tconst vectorFieldMesh = new Mesh()\n\n\tconst fieldLinesXSide = 64\n\tconst vectorFieldVectorLength = (2 * 0.9) / fieldLinesXSide\n\tvectorFieldMesh.vertices = ballGrid(fieldLinesXSide).flatMap((p) => [\n\t\tnew V3(p.x, p.y, -vectorFieldVectorLength / 2),\n\t\tnew V3(p.x, p.y, vectorFieldVectorLength / 2),\n\t])\n\n\t// vectorFieldMesh.vertices = arrayFromFunction(fieldLinesXSide * fieldLinesXSide * 2, i => {\n\t//     const startOrEnd = i % 2\n\t//     const x = ((i / 2) | 0) % fieldLinesXSide\n\t//     const y = ((i / 2 / fieldLinesXSide) | 0) % fieldLinesXSide\n\t//     return new V3(x / fieldLinesXSide, y / fieldLinesXSide, (startOrEnd || -1) * 0.01)\n\t// })\n\tvectorFieldMesh.compile()\n\n\t// setup camera\n\tgl.matrixMode(gl.PROJECTION)\n\tgl.loadIdentity()\n\tgl.perspective(45, gl.canvas.width / gl.canvas.height, 0.1, 1000)\n\tgl.lookAt(V(0.5, 2, 1), V(0.5, 0.5), V3.Z)\n\tgl.matrixMode(gl.MODELVIEW)\n\tgl.clearColor(1, 1, 1, 0)\n\n\tgl.enable(gl.DEPTH_TEST)\n\n\t// vectorFieldShader.uniforms({\n\t// \t'ps[0]': ps as any,\n\t// \tcolor: chroma('red').gl(),\n\t// })\n\n\tgl.canvas.tabIndex = 0\n\tgl.canvas.focus()\n\n\tgl.canvas.addEventListener(\"keypress\", (e) => {\n\t\tconst index = e.key.charCodeAt(0) - \"1\".charCodeAt(0)\n\t\tif (0 <= index && index <= 4) {\n\t\t\tenabledBarMagnets[index] = !enabledBarMagnets[index]\n\t\t\tcalculateFieldLines()\n\t\t}\n\n\t\tif (e.key == \"+\" && linesDensity < 50) {\n\t\t\tlinesDensity++\n\t\t\tcalculateFieldLines()\n\t\t}\n\n\t\tif (e.key == \"-\" && linesDensity > 1) {\n\t\t\tlinesDensity--\n\t\t\tcalculateFieldLines()\n\t\t}\n\t})\n\n\treturn gl.animate(function (abs, _diff) {\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t\tgl.loadIdentity()\n\t\tgl.multMatrix(M4.rotateLine(V(0.5, 0.5), V3.Z, abs / 5000))\n\t\t// gl.translate(-1, -1, -1)\n\t\t// gl.scale(2)\n\n\t\tshader\n\t\t\t.attributes({ ts_Color: color(\"black\").gl() })\n\t\t\t.draw(linesMesh, gl.LINES)\n\t\tbarMagnetMatrices.forEach((mat, index) => {\n\t\t\tif (enabledBarMagnets[index]) {\n\t\t\t\tgl.pushMatrix()\n\t\t\t\tgl.multMatrix(mat)\n\t\t\t\tgl.scale(0.5, 1, 1)\n\t\t\t\tshader\n\t\t\t\t\t.attributes({ ts_Color: color(\"red\").gl() })\n\t\t\t\t\t.draw(cubeMesh, gl.LINES)\n\t\t\t\tgl.translate(1, 0)\n\t\t\t\tshader\n\t\t\t\t\t.attributes({ ts_Color: color(\"blue\").gl() })\n\t\t\t\t\t.draw(cubeMesh, gl.LINES)\n\t\t\t\tgl.popMatrix()\n\t\t\t}\n\t\t})\n\t\tgl.scale(bounds.max)\n\t\tshader\n\t\t\t.attributes({ ts_Color: color(\"grey\").gl() })\n\t\t\t.draw(cubeMesh, gl.LINES)\n\t\t// vectorFieldShader.drawBuffers(vectorFieldMesh.vertexBuffers, undefined, DRAW_MODES.LINES)\n\t})\n}\n\n/**\n * Returns a 1d array of V3s in a 2d-grid. The V3s are all within [0; 1]²\n * The V3s are spaced like circles fit together as tight as possible. i.e. rows offset by half the x-spacing.\n * .   .   .\n *   .   .   .\n * .   .   .\n *\n * @param xCount\n */\nfunction ballGrid(xCount = 64) {\n\tconst xSpacing = 1 / xCount\n\tconst ySpacing = (xSpacing * Math.sqrt(3)) / 2\n\tconst yCount = (1 / ySpacing) | 0\n\treturn arrayFromFunction(xCount * yCount, (i) => {\n\t\tconst x = i % xCount\n\t\tconst y = (i / xCount) | 0\n\t\treturn new V3((x + (y % 2) * 0.5) / xCount, y / yCount, 0)\n\t})\n}\n\nfunction grid3d(xCount = 64, yCount = xCount, zCount = 1) {\n\treturn arrayFromFunction(xCount * yCount * zCount, (i) => {\n\t\tconst x = i % xCount\n\t\tconst y = (i / xCount) % yCount | 0\n\t\tconst z = (i / xCount / yCount) | 0\n\t\treturn new V3(x / xCount, y / yCount, z / zCount)\n\t})\n}\n\n;(mag as any).info =\n\t\"Press keys 1-5 to toggle magnets, +/- to change to number of field lines.\"\n","/// <reference path=\"../types.d.ts\" />\nimport { V, V3 } from \"ts3dutils\"\nimport { Mesh, Shader, Texture, TSGLContext } from \"tsgl\"\n\n/**\n * Blend two textures while rendering them to a quad.\n */\nexport function multiTexture(gl: TSGLContext) {\n\tconst mesh = Mesh.plane()\n\tconst texture = Texture.fromURLSwitch(\"texture.png\")\n\tconst texture2 = Texture.fromURLSwitch(\"texture2.png\")\n\tconst shader = Shader.create<\n\t\t{ texture: \"SAMPLER_2D\"; texture2: \"SAMPLER_2D\" },\n\t\t{}\n\t>(\n\t\t`\n\tattribute vec2 ts_TexCoord;\n\tattribute vec4 ts_Vertex;\n\tuniform mat4 ts_ModelViewProjectionMatrix;\n  varying vec2 coord;\n  void main() {\n    coord = ts_TexCoord;\n    gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\n  }\n`,\n\t\t`\n\tprecision highp float;\n  uniform sampler2D texture;\n  uniform sampler2D texture2;\n  varying vec2 coord;\n  void main() {\n    //gl_FragColor = vec4(coord.x, coord.y, 0, 1);\n    gl_FragColor = texture2D(texture, coord) - texture2D(texture2, coord);\n  }\n`,\n\t)\n\tgl.clearColor(1, 1, 1, 1)\n\n\t// setup camera\n\tgl.matrixMode(gl.PROJECTION)\n\tgl.loadIdentity()\n\tgl.perspective(40, gl.canvas.width / gl.canvas.height, 0.1, 1000)\n\tgl.lookAt(V(0, -2, 1.5), V3.O, V3.Z)\n\tgl.matrixMode(gl.MODELVIEW)\n\n\tgl.enable(gl.DEPTH_TEST)\n\n\treturn gl.animate(function (abs, _diff) {\n\t\tconst angleDeg = (abs / 1000) * 45\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t\tgl.loadIdentity()\n\n\t\t//gl.translate(0, 0, -5)\n\t\tgl.rotate(angleDeg, 0, 0, 1)\n\t\tgl.translate(-0.5, -0.5)\n\n\t\ttexture.bind(0)\n\t\ttexture2.bind(1)\n\t\tshader\n\t\t\t.uniforms({\n\t\t\t\ttexture: 0,\n\t\t\t\ttexture2: 1,\n\t\t\t})\n\t\t\t.draw(mesh)\n\t})\n}\n","#version 300 es\r\nprecision highp float;\r\n\r\nconst float INFINITY = 1.0e9;\r\nconst int TRIANGLE_COUNT = 1024;\r\nuniform vec3 sphereCenters[8];\r\nuniform mat4 ts_ModelViewProjectionMatrixInverse;\r\nuniform float sphereRadii[8];\r\nuniform sampler2D vertices;\r\nuniform sampler2D texCoords;\r\nuniform sampler2D triangleTexture;\r\n\r\nin vec4 pos;\r\n\r\nout vec4 fragColor;\r\n\r\nfloat intersectSphere(vec3 origin, vec3 ray, vec3 sphereCenter, float sphereRadius) {\r\n\tvec3 toSphere = origin - sphereCenter;\r\n\tfloat a = dot(ray, ray);\r\n\tfloat b = 2.0 * dot(toSphere, ray);\r\n\tfloat c = dot(toSphere, toSphere) - sphereRadius * sphereRadius;\r\n\tfloat discriminant = b * b - 4.0 * a * c;\r\n\tif (discriminant > 0.0) {\r\n\t\tfloat t = (-b - sqrt(discriminant)) / (2.0 * a);\r\n\t\tif (t > 0.0) return t;\r\n\t}\r\n\treturn INFINITY;\r\n}\r\n\r\nstruct TriangleHitTest {\r\n\tfloat t;\r\n\tvec3 hit;\r\n\tfloat u;\r\n\tfloat v;\r\n};\r\nconst TriangleHitTest INFINITY_HIT = TriangleHitTest(INFINITY, vec3(0.0), 0.0, 0.0);\r\n\r\n\r\n// taken from https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm\r\nTriangleHitTest intersectTriangle(vec3 rayOrigin, vec3 rayVector, vec3 vertex0, vec3 vertex1, vec3 vertex2) {\r\n    const float EPSILON = 0.0000001;\r\n    vec3 edge1, edge2, h, s, q;\r\n    float a,f,u,v;\r\n    edge1 = vertex1 - vertex0;\r\n    edge2 = vertex2 - vertex0;\r\n    h = cross(rayVector, edge2);\r\n    a = dot(edge1, h);\r\n    if (a > -EPSILON && a < EPSILON)\r\n        return INFINITY_HIT;\r\n    f = 1.0/a;\r\n    s = rayOrigin - vertex0;\r\n    u = f * dot(s, h);\r\n    if (u < 0.0 || u > 1.0)\r\n        return INFINITY_HIT;\r\n    q = cross(s, edge1);\r\n    v = f * dot(rayVector, q);\r\n    if (v < 0.0 || u + v > 1.0)\r\n        return INFINITY_HIT;\r\n    // At this stage we can compute t to find out where the intersection point is on the line.\r\n    float t = f * dot(edge2, q);\r\n    if (t > 0.0001) // ray intersection\r\n    {\r\n        return TriangleHitTest(t, rayOrigin + rayVector * t, u, v);\r\n    }\r\n    else // This means that there is a line intersection but not a ray intersection.\r\n    {\r\n\t\treturn INFINITY_HIT;\r\n\t}\r\n}\r\n\r\n// use texelFetch because we don't want to interpolate values\r\nvec3 vertexi(int i) {\r\n\treturn texelFetch(vertices, ivec2(i, 0), 0).xyz;\r\n}\r\nvec3 textcoordi(int i) {\r\n\treturn texelFetch(texCoords, ivec2(i, 0), 0).xyz;\r\n}\r\n\r\nvoid main() {\r\n\t// pos.xy is the pixel we are drawing in normalized device coordinates (NDC, from -1 to +1)\r\n\t// the starting ray in NDC is (origin=pos.xy, dir=Z)\r\n\t// with ts_ModelViewProjectionMatrixInverse we transform the start and end point into world coordinates\r\n\tvec3 rayStart = (ts_ModelViewProjectionMatrixInverse * vec4(pos.xy, 1.0, 1.0)).xyz;\r\n\tvec3 rayEnd = (ts_ModelViewProjectionMatrixInverse * vec4(pos.xy, -1.0, 1.0)).xyz;\r\n\tvec3 rayDir = rayEnd - rayStart;\r\n\r\n\t// start with a black fragment\r\n\tfragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n\r\n\t// mask is the fraction of the fragment we haven't calculated yet\r\n\tvec4 mask = vec4(1.0, 1.0, 1.0, 1.0);\r\n\r\n\tfor (int bounce = 0; bounce < 8; bounce++) {\r\n\t\t/* Find the closest intersection with the scene */\r\n\t\tvec3 closestHit;\r\n\t\tvec4 closestColor = vec4(0.0);\r\n\t\tfloat closestT = INFINITY;\r\n\t\tvec3 closestNormal;\r\n\t\tfloat closestSpecular = 0.0;\r\n\t\tfor (int s = 0; s < 8; s++) {\r\n\t\t\tif (sphereRadii[s] == 0.0) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tfloat sphereT = intersectSphere(rayStart, rayDir, sphereCenters[s], sphereRadii[s]);\r\n\t\t\tif (sphereT < closestT) {\r\n\t\t\t\tclosestT = sphereT;\r\n\t\t\t\tclosestHit = rayStart + rayDir * sphereT;\r\n\t\t\t\tclosestNormal = (closestHit - sphereCenters[s]) / sphereRadii[s];\r\n\t\t\t\tclosestSpecular = 0.95;\r\n\t\t\t\tclosestColor = vec4(0.0);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (int i = 0; i < TRIANGLE_COUNT; i++) {\r\n\t\t\tvec3 a = vertexi(i*3);\r\n\t\t\tvec3 b = vertexi(i*3+1);\r\n\t\t\tvec3 c = vertexi(i*3 + 2);\r\n\r\n\t\t\tif (a == vec3(0.0) && b == vec3(0.0)) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tTriangleHitTest hitTest = intersectTriangle(rayStart, rayDir, a, b, c);\r\n\t\t\tfloat triangleT = hitTest.t;\r\n\t\t\tif (triangleT < closestT) {\r\n\t\t\t\tclosestT = triangleT;\r\n\t\t\t\tvec3 ab = b - a;\r\n\t\t\t\tvec3 ac = c - a;\r\n\t\t\t\tclosestNormal = normalize(cross(ab, ac));\r\n\t\t\t\tclosestHit = hitTest.hit;\r\n\r\n\t\t\t\t// interpolate the texCoords of the three triangle vertices\r\n\t\t\t\tvec3 texCoordsAndSheen = textcoordi(i*3) * (1.0 - hitTest.u - hitTest.v) // a\r\n\t\t\t\t\t+ textcoordi(i*3+1) * (hitTest.u) // b\r\n\t\t\t\t\t+ textcoordi(i*3+2) * (hitTest.v); // c\r\n\t\t\t\tclosestColor = texture(triangleTexture, texCoordsAndSheen.xy);\r\n\t\t\t\tclosestSpecular = texCoordsAndSheen.z;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/* The background is white */\r\n\t\tif (closestT == INFINITY) {\r\n\t\t\tfragColor += mask;\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tfragColor += mask * (1.0 - closestSpecular) * closestColor;\r\n\t\tif (0.0 == closestSpecular) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\trayDir = reflect(rayDir, closestNormal);\r\n\t\trayStart = closestHit;\r\n\t\tmask *= closestSpecular;\r\n\t}\r\n}","#version 300 es\r\nprecision mediump float;\r\nin vec4 ts_Vertex;\r\nout vec4 pos;\r\nvoid main() {\r\n\tgl_Position = ts_Vertex;\r\n\tpos = ts_Vertex;\r\n}","/// <reference path=\"../types.d.ts\" />\n\nimport { arrayFromFunction, clamp, DEG, Tuple2, V, V3 } from \"ts3dutils\"\n\nimport {\n\tisWebGL2RenderingContext,\n\tMesh,\n\tShader,\n\tTexture,\n\tTSGLContext,\n} from \"tsgl\"\n\nimport rayTracerFS from \"../shaders/rayTracerFS.glslx\"\nimport rayTracerVS from \"../shaders/rayTracerVS.glslx\"\n\n/**\n * Realtime GPU ray tracing including reflection.\n */\nexport async function rayTracing(gl: TSGLContext) {\n\tif (!isWebGL2RenderingContext(gl)) throw new Error(\"require webgl2\")\n\tlet angleX = 30\n\tlet angleY = 10\n\n\t// This is the mesh we tell WebGL to draw. It covers the whole view so each pixel will get a fragment shader call.\n\tconst mesh = Mesh.plane({ startX: -1, startY: -1, width: 2, height: 2 })\n\n\t// floor and dodecahedron are meshes we will ray-trace\n\t// add a vertex buffer \"specular\", which defines how reflective the mesh is.\n\t// specular=1 means it is perfectly reflective, specular=0 perfectly matte\n\t// meshes neeed coords vertex buffer as we will draw them with meshes\n\tconst floor = Mesh.plane({ startX: -4, startY: -4, width: 8, height: 8 })\n\t\t.addVertexBuffer(\"specular\", \"specular\")\n\t\t.rotateX(90 * DEG)\n\tfloor.specular = floor.vertices.map((_) => 0) // floor doesn't reflect\n\tconst dodecahedron = Mesh.sphere(0)\n\t\t.addVertexBuffer(\"specular\", \"specular\")\n\t\t.addVertexBuffer(\"coords\", \"ts_TexCoord\")\n\t\t.translate(3, 1)\n\t// d20 reflects most of the light\n\tdodecahedron.specular = dodecahedron.vertices.map((_) => 0.8)\n\t// all uv coordinates the same to pick a solid color from the texture\n\tdodecahedron.coords = dodecahedron.vertices.map(\n\t\t(_) => [0, 0] as Tuple2<number>,\n\t)\n\n\t// don't transform the vertices at all\n\t// out/in pos so we get the world position of the fragments\n\tconst shader = Shader.create(rayTracerVS, rayTracerFS)\n\n\t// define spheres which we will have the shader ray-trace\n\tconst sphereCenters = arrayFromFunction(\n\t\t8,\n\t\t(i) => [V(0.0, 1.6, 0.0), V(3, 3, 3), V(-3, 3, 3)][i] || V3.O,\n\t)\n\tconst sphereRadii = arrayFromFunction(8, (i) => [1.5, 0.5, 0.5][i] || 0)\n\n\t// texture for ray-traced mesh\n\tconst floorTexture = await Texture.fromURL(\"./mandelbrot.jpg\")\n\n\tconst showMesh = floor.concat(dodecahedron)\n\tconst textureWidth = 1024\n\tconst textureHeight = 1\n\n\t// verticesTexture contains the mesh vertices\n\t// vertices are unpacked so we don't have an extra index buffer for the triangles\n\tconst verticesTexture = new Texture(textureWidth, textureHeight)\n\tconst verticesBuffer = new Float32Array(textureWidth * textureHeight * 3)\n\tV3.pack(\n\t\tshowMesh.TRIANGLES.map((i) => showMesh.vertices[i]),\n\t\tverticesBuffer,\n\t)\n\tgl.texImage2D(\n\t\tgl.TEXTURE_2D,\n\t\t0,\n\t\tgl.RGB32F,\n\t\ttextureWidth,\n\t\ttextureHeight,\n\t\t0,\n\t\tgl.RGB,\n\t\tgl.FLOAT,\n\t\tverticesBuffer,\n\t)\n\n\t// uvTexture contains the uv coordinates for the vertices as wel as the specular value for each vertex\n\tconst uvTexture = new Texture(textureWidth, textureHeight, {\n\t\tformat: gl.RGB,\n\t\ttype: gl.FLOAT,\n\t})\n\tconst uvBuffer = new Float32Array(textureWidth * textureHeight * 3)\n\tshowMesh.TRIANGLES.forEach((i, index) => {\n\t\tuvBuffer[index * 3] = showMesh.coords[i][0]\n\t\tuvBuffer[index * 3 + 1] = showMesh.coords[i][1]\n\t\tuvBuffer[index * 3 + 2] = showMesh.specular[i]\n\t})\n\tgl.texImage2D(\n\t\tgl.TEXTURE_2D,\n\t\t0,\n\t\tgl.RGB32F,\n\t\ttextureWidth,\n\t\ttextureHeight,\n\t\t0,\n\t\tgl.RGB,\n\t\tgl.FLOAT,\n\t\tuvBuffer,\n\t)\n\n\tlet lastPos = V3.O\n\t// scene rotation\n\tgl.canvas.onmousemove = function (e) {\n\t\tconst pagePos = V(e.pageX, e.pageY)\n\t\tconst delta = lastPos.to(pagePos)\n\t\tif (e.buttons & 1) {\n\t\t\tangleY += delta.x\n\t\t\tangleX = clamp(angleX + delta.y, -90, 90)\n\t\t}\n\t\tlastPos = pagePos\n\t}\n\n\tgl.matrixMode(gl.PROJECTION)\n\tgl.loadIdentity()\n\n\tverticesTexture.bind(0)\n\tfloorTexture.bind(1)\n\tuvTexture.bind(2)\n\tshader.uniforms({\n\t\t\"sphereCenters[0]\": sphereCenters,\n\t\t\"sphereRadii[0]\": sphereRadii,\n\t\tvertices: 0,\n\t\ttriangleTexture: 1,\n\t\ttexCoords: 2,\n\t})\n\n\treturn gl.animate(function (_abs, _diff) {\n\t\t// Camera setup\n\t\tgl.matrixMode(gl.MODELVIEW)\n\t\tgl.loadIdentity()\n\t\t// gl.perspective(70, gl.canvas.width / gl.canvas.height, 0.1, 1000)\n\t\t// gl.lookAt(V(0, 200, 200), V(0, 0, 0), V3.Z)\n\t\tgl.translate(0, 0, -10)\n\t\tgl.rotate(angleX, 1, 0, 0)\n\t\tgl.rotate(angleY, 0, 1, 0)\n\t\tgl.scale(0.2)\n\n\t\tshader.draw(mesh)\n\n\t\t// Draw debug output to show that the raytraced scene lines up correctly with\n\t\t// the rasterized scene\n\t\tgl.color(0, 0, 0, 0.5)\n\t\tgl.enable(gl.BLEND)\n\t\tgl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\n\t\tgl.begin(gl.LINES)\n\t\tfor (let s = 4, i = -s; i <= s; i++) {\n\t\t\tgl.vertex(-s, 0, i)\n\t\t\tgl.vertex(s, 0, i)\n\t\t\tgl.vertex(i, 0, -s)\n\t\t\tgl.vertex(i, 0, s)\n\t\t}\n\t\tgl.end()\n\t\tgl.disable(gl.BLEND)\n\t})\n}\n;(rayTracing as any).info = \"LMB-drag to rotate camera.\"\n","import { color } from \"chroma.ts\"\nimport { V, V3 } from \"ts3dutils\"\nimport { TSGLContext } from \"tsgl\"\n\n/**\n * Render SDF text.\n */\nexport async function renderText(gl: TSGLContext) {\n\tgl.clearColor(1, 1, 1, 1)\n\tawait gl.setupTextRendering(\n\t\t\"font/OpenSans-Regular.png\",\n\t\t\"font/OpenSans-Regular.json\",\n\t)\n\n\tgl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE)\n\n\tgl.enable(gl.BLEND)\n\n\t// setup camera\n\tgl.matrixMode(gl.PROJECTION)\n\tgl.loadIdentity()\n\tgl.perspective(70, gl.canvas.width / gl.canvas.height, 0.1, 1000)\n\tgl.lookAt(V(0, 0, 15), V3.O, V3.Y)\n\tgl.matrixMode(gl.MODELVIEW)\n\n\tgl.enable(gl.DEPTH_TEST)\n\n\treturn gl.animate(function (abs, _diff) {\n\t\tconst angleDeg = Math.sin(abs / 10000) * 15\n\t\tconst textColor = color(\"brown\").darker().gl()\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t\tgl.loadIdentity()\n\t\tgl.rotate(angleDeg, 1, 1, 0)\n\n\t\tgl.pushMatrix()\n\t\tgl.translate(-18, 8)\n\t\t;[0, 0.05, 0.1, 0.15, 0.2, 0.5].forEach((gamma) => {\n\t\t\tgl.renderText(\n\t\t\t\t\"sdf text w/ gamma=\" + gamma,\n\t\t\t\ttextColor,\n\t\t\t\t1,\n\t\t\t\t\"left\",\n\t\t\t\t\"top\",\n\t\t\t\tgamma,\n\t\t\t)\n\t\t\tgl.translate(0, -1)\n\t\t})\n\t\tgl.popMatrix()\n\n\t\tgl.pushMatrix()\n\n\t\tgl.translate(-18, 0)\n\t\tgl.renderText(\n\t\t\t\"This text has\\nmultiple newlines\\nand a line height of 1.2.\",\n\t\t\t[1, 0, 0, 1],\n\t\t\t1,\n\t\t\t\"left\",\n\t\t\t\"middle\",\n\t\t\tundefined,\n\t\t\t1.2,\n\t\t)\n\n\t\tgl.translate(0, -5)\n\t\tgl.renderText(\"VERY LARGE\", [1, 0, 0, 1], 3, \"left\", \"middle\")\n\n\t\tgl.translate(0, -3)\n\t\tgl.renderText(\n\t\t\t\"This text is very small yet remains legible. gamma=0.15\",\n\t\t\t[1, 0, 0, 1],\n\t\t\t0.25,\n\t\t\t\"left\",\n\t\t\t\"middle\",\n\t\t\t0.15,\n\t\t)\n\n\t\tgl.popMatrix()\n\n\t\tgl.pushMatrix()\n\t\tgl.translate(0, 8)\n\t\t;[\"top\", \"middle\", \"alphabetic\", \"bottom\"].forEach((baseline) => {\n\t\t\tgl.begin(gl.LINES)\n\t\t\tgl.color(\"green\")\n\t\t\tgl.vertex(0, 0, 0)\n\t\t\tgl.vertex(20, 0, 0)\n\t\t\tgl.vertex(0, -1, 0)\n\t\t\tgl.vertex(0, 1, 0)\n\t\t\tgl.end()\n\n\t\t\tgl.renderText(\n\t\t\t\t'baseline=\"' + baseline + '\"|{}() ABC XYZ yjg Ẫß',\n\t\t\t\tcolor(\"blue\").gl(),\n\t\t\t\t1,\n\t\t\t\t\"left\",\n\t\t\t\tbaseline as any,\n\t\t\t)\n\n\t\t\tgl.translate(0, -2.2)\n\t\t})\n\t\tgl.popMatrix()\n\n\t\tgl.pushMatrix()\n\t\tgl.translate(10, -2)\n\t\t;[\"left\", \"center\", \"right\"].forEach((align) => {\n\t\t\tgl.begin(gl.LINES)\n\t\t\tgl.color(\"red\")\n\t\t\tgl.vertex(-10, 0, 0)\n\t\t\tgl.vertex(10, 0, 0)\n\t\t\tgl.vertex(0, -1, 0)\n\t\t\tgl.vertex(0, 1, 0)\n\t\t\tgl.end()\n\n\t\t\tgl.renderText(\n\t\t\t\t'align=\"' + align + '\"',\n\t\t\t\tcolor(\"blue\").gl(),\n\t\t\t\t1,\n\t\t\t\talign as any,\n\t\t\t\t\"alphabetic\",\n\t\t\t)\n\n\t\t\tgl.translate(0, -2.2)\n\t\t})\n\t\tgl.popMatrix()\n\t})\n}\n","import { arrayFromFunction, lerp, V, V3 } from \"ts3dutils\"\nimport { Mesh, Shader, Texture, TSGLContext } from \"tsgl\"\n\nimport gazeboJSON from \"../../gazebo.json\"\n\nconst { sin, PI } = Math\n\n/**\n * Render mesh to texture, then render that texture to another mesh.\n */\nexport function renderToTexture(gl: TSGLContext) {\n\tconst mesh = Mesh.load(gazeboJSON)\n\tconst sinVertices = arrayFromFunction(32, (i) => {\n\t\tconst x = lerp(-PI, PI, i / 31)\n\t\tconst y = sin(x)\n\t\treturn new V3(x / 7.64, y / 7.64, 0)\n\t})\n\tconst cyl = Mesh.offsetVertices(sinVertices, V3.Z, false)\n\tconst plane = Mesh.plane()\n\tconst texture = Texture.fromURLSwitch(\"texture.png\")\n\tconst overlay = new Texture(1024, 1024)\n\tconst meshShader = Shader.create(\n\t\t`\n\tattribute vec3 ts_Normal;\n\tattribute vec4 ts_Vertex;\n\tuniform mat4 ts_ModelViewProjectionMatrix;\n  varying vec3 normal;\n  void main() {\n    normal = ts_Normal;\n    gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\n  }\n`,\n\t\t`\n\tprecision highp float;\n  varying vec3 normal;\n  void main() {\n    gl_FragColor = vec4(normal * 0.5 + 0.5, 1.0);\n  }\n`,\n\t)\n\tconst planeShader = Shader.create(\n\t\t`\n\tattribute vec2 ts_TexCoord;\n\tattribute vec4 ts_Vertex;\n\tuniform mat4 ts_ModelViewProjectionMatrix;\n  varying vec2 coord;\n  void main() {\n    coord = ts_TexCoord.xy;\n    gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\n  }\n`,\n\t\t`\n\tprecision highp float;\n  uniform sampler2D texture;\n  uniform sampler2D overlay;\n  varying vec2 coord;\n  void main() {\n    gl_FragColor = (texture2D(overlay, coord) + texture2D(texture, coord)) / 2.0;\n  }\n`,\n\t)\n\n\tgl.clearColor(1, 1, 1, 1)\n\tgl.enable(gl.DEPTH_TEST)\n\n\treturn gl.animate(function (abs) {\n\t\tconst angleDeg = (abs / 1000) * 20\n\n\t\tgl.pushMatrix()\n\t\toverlay.drawTo(function (gl: TSGLContext) {\n\t\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t\t\tgl.matrixMode(gl.PROJECTION)\n\t\t\tgl.loadIdentity()\n\t\t\tgl.perspective(60, 1, 0.1, 1000)\n\t\t\tgl.lookAt(V(0, -2, 0.5), V(0, 0, 0.5), V3.Z)\n\t\t\tgl.matrixMode(gl.MODELVIEW)\n\t\t\tgl.loadIdentity()\n\t\t\tgl.rotate(angleDeg, 0, 0, 1)\n\t\t\tgl.rotate(90, 1, 0, 0)\n\t\t\tgl.scale(0.01, 0.01, 0.01)\n\t\t\tmeshShader.draw(mesh)\n\t\t})\n\t\tgl.popMatrix()\n\n\t\tgl.matrixMode(gl.PROJECTION)\n\t\tgl.loadIdentity()\n\t\tgl.perspective(70, gl.canvas.width / gl.canvas.height, 0.1, 1000)\n\t\tgl.lookAt(V(0, -2, 1), V(0.5, 0, 0), V3.Z)\n\t\tgl.matrixMode(gl.MODELVIEW)\n\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t\ttexture.bind(0)\n\t\toverlay.bind(1)\n\t\tplaneShader.uniforms({\n\t\t\ttexture: 0,\n\t\t\toverlay: 1,\n\t\t})\n\n\t\tgl.loadIdentity()\n\t\t//gl.rotate(angleDeg, 0, 0, 1)\n\t\t//gl.rotate(30 * DEG, 1, 0, 0)\n\t\t//gl.rotate(90, 0,0,1)\n\t\tplaneShader.draw(cyl)\n\n\t\tgl.loadIdentity()\n\t\tgl.rotate(90, 1, 0, 0)\n\t\tgl.translate(0.5, 0)\n\t\tplaneShader.draw(plane)\n\t})\n}\n","import { AABB, clamp, DEG, V, V3 } from \"ts3dutils\"\nimport { Mesh, Shader, Texture, TSGLContext } from \"tsgl\"\n\nimport cessnaJSON from \"../../cessna.json\"\n\n/**\n * Draw shadow of a mesh using a shadow map.\n */\nexport function shadowMap(gl: TSGLContext) {\n\t//const mesh = await fetch('dodecahedron.stl')\n\t//    .then(r => r.blob())\n\t//    .then(Mesh.fromBinarySTL)\n\t//    .then(mesh => mesh.translate(0,1,0).scale(5).compile())\n\tconst mesh = Mesh.load(cessnaJSON)\n\n\tlet angleX = 20\n\tlet angleY = 20\n\tlet useBoundingSphere = true\n\tconst cube = Mesh.cube()\n\tconst sphere = Mesh.sphere(2).computeWireframeFromFlatTriangles().compile()\n\tconst plane = Mesh.plane()\n\t\t.translate(-0.5, -0.5)\n\t\t.scale(300, 300, 1)\n\t\t.compile()\n\tconst depthMap = new Texture(1024, 1024, { format: gl.RGBA })\n\tconst texturePlane = Mesh.plane()\n\tconst boundingSphere = mesh.getBoundingSphere()\n\tconst boundingBox = mesh.getAABB()\n\tconst frustrumCube = Mesh.cube()\n\t\t.scale(2)\n\t\t.translate(V3.XYZ.negated())\n\t\t.compile()\n\tconst colorShader = Shader.create(\n\t\t`\n\tuniform mat4 ts_ModelViewProjectionMatrix;\n\tattribute vec4 ts_Vertex;\n  void main() {\n    gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\n  }\n`,\n\t\t`\n\tprecision highp float;\n  uniform vec4 color;\n  void main() {\n    gl_FragColor = color;\n  }\n`,\n\t)\n\tconst depthShader = Shader.create(\n\t\t`\n\tuniform mat4 ts_ModelViewProjectionMatrix;\n\tattribute vec4 ts_Vertex;\n  varying vec4 pos;\n  void main() {\n    gl_Position = pos = ts_ModelViewProjectionMatrix * ts_Vertex;\n  }\n`,\n\t\t`\n\tprecision highp float;\n  varying vec4 pos;\n  void main() {\n    float depth = pos.z / pos.w;\n    gl_FragColor = vec4(depth * 0.5 + 0.5);\n  }\n`,\n\t)\n\tconst displayShader = Shader.create(\n\t\t`\n\tuniform mat4 ts_ModelViewMatrix;\n\tuniform mat3 ts_NormalMatrix;\n\tuniform mat4 ts_ModelViewProjectionMatrix;\n\tattribute vec4 ts_Vertex;\n\tattribute vec3 ts_Normal;\n  uniform mat4 shadowMapMatrix;\n  uniform vec3 light;\n  varying vec4 coord;\n  varying vec3 normal;\n  varying vec3 toLight;\n  void main() {\n    toLight = light - (ts_ModelViewMatrix * ts_Vertex).xyz;\n    normal = ts_NormalMatrix * ts_Normal;\n    gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\n    coord = shadowMapMatrix * gl_Position;\n  }\n`,\n\t\t`\n\tprecision highp float;\n  uniform sampler2D depthMap;\n  varying vec4 coord;\n  varying vec3 normal;\n  varying vec3 toLight;\n  void main() {\n    float shadow = 0.0;\n    if (coord.w > 0.0) {\n      float depth = 0.0;\n      vec2 sample = coord.xy / coord.w * 0.5 + 0.5;\n      if (clamp(sample, 0.0, 1.0) == sample) {\n        float sampleDepth = texture2D(depthMap, sample).r;\n        depth = (sampleDepth == 1.0) ? 1.0e9 : sampleDepth;\n      }\n      if (depth > 0.0) {\n        float bias = -0.002;\n        shadow = clamp(300.0 * (bias + coord.z / coord.w * 0.5 + 0.5 - depth), 0.0, 1.0);\n      }\n    }\n    float ambient = 0.1;\n    float diffuse = max(0.0, dot(normalize(toLight), normalize(normal)));\n    gl_FragColor = vec4((normal * 0.5 + 0.5) * mix(ambient, 1.0, diffuse * (1.0 - shadow)), 1.0);\n  }\n`,\n\t)\n\tconst textureShader = Shader.create(\n\t\t`\n  varying vec2 coord;\n  attribute vec2 ts_TexCoord;\n  void main() {\n    coord = ts_TexCoord;\n    gl_Position = vec4(coord * 2.0 - 1.0, 0.0, 1.0);\n  }\n`,\n\t\t`\n\tprecision highp float;\n  uniform sampler2D texture;\n  varying vec2 coord;\n  void main() {\n    gl_FragColor = texture2D(texture, coord);\n  }\n`,\n\t)\n\n\tlet lastPos = V3.O\n\t// scene rotation\n\tgl.canvas.onmousemove = function (e) {\n\t\tconst pagePos = V(e.pageX, e.pageY)\n\t\tconst delta = lastPos.to(pagePos)\n\t\tif (e.buttons & 1) {\n\t\t\tangleY += delta.x\n\t\t\tangleX = clamp(angleX + delta.y, -90, 90)\n\t\t}\n\t\tlastPos = pagePos\n\t}\n\n\tgl.canvas.contentEditable = \"true\"\n\tgl.canvas.addEventListener(\"keypress\", () => {\n\t\tuseBoundingSphere = !useBoundingSphere\n\t})\n\n\tgl.enable(gl.DEPTH_TEST)\n\n\tfunction cameraForBoundingSphere(light: V3, sphere: typeof boundingSphere) {\n\t\tconst distance = sphere.center.minus(light).length()\n\t\tconst angle = 2 * Math.asin(sphere.radius / distance)\n\t\tgl.matrixMode(gl.PROJECTION)\n\t\tgl.loadIdentity()\n\t\tgl.perspective(\n\t\t\tangle / DEG,\n\t\t\t1,\n\t\t\tdistance - sphere.radius,\n\t\t\tdistance + sphere.radius,\n\t\t)\n\t\tgl.matrixMode(gl.MODELVIEW)\n\t\tgl.loadIdentity()\n\t\tgl.lookAt(light, sphere.center, V3.Y)\n\t}\n\n\tfunction cameraForBoundingBox(light: V3, boundingBox: AABB) {\n\t\tconst center = boundingBox.min.plus(boundingBox.max).div(2)\n\t\tconst axisZ = center.minus(light).unit()\n\t\tconst axisX = axisZ.cross(new V3(0, 1, 0)).unit()\n\t\tconst axisY = axisX.cross(axisZ)\n\t\tlet near = Number.MAX_VALUE\n\t\tlet far = -Number.MAX_VALUE\n\t\tlet slopeNegX = 0\n\t\tlet slopePosX = 0\n\t\tlet slopeNegY = 0\n\t\tlet slopePosY = 0\n\n\t\t// Loop over all the points and find the maximum slope for each direction.\n\t\t// Incidentally, this algorithm works for convex hulls of any shape and will\n\t\t// return the optimal bounding frustum for every hull.\n\t\tconst bbPoints = boundingBox.corners()\n\t\tfor (const point of bbPoints) {\n\t\t\tconst toPoint = point.minus(light)\n\t\t\tconst dotZ = toPoint.dot(axisZ)\n\t\t\tconst slopeX = toPoint.dot(axisX) / dotZ\n\t\t\tconst slopeY = toPoint.dot(axisY) / dotZ\n\t\t\tslopeNegX = Math.min(slopeNegX, slopeX)\n\t\t\tslopeNegY = Math.min(slopeNegY, slopeY)\n\t\t\tslopePosX = Math.max(slopePosX, slopeX)\n\t\t\tslopePosY = Math.max(slopePosY, slopeY)\n\t\t\tnear = Math.min(near, dotZ)\n\t\t\tfar = Math.max(far, dotZ)\n\t\t}\n\n\t\t// Need to fit an oblique view frustum to get optimal bounds\n\t\tgl.matrixMode(gl.PROJECTION)\n\t\tgl.loadIdentity()\n\t\tgl.frustum(\n\t\t\tslopeNegX * near,\n\t\t\tslopePosX * near,\n\t\t\tslopeNegY * near,\n\t\t\tslopePosY * near,\n\t\t\tnear,\n\t\t\tfar,\n\t\t)\n\t\tgl.matrixMode(gl.MODELVIEW)\n\t\tgl.loadIdentity()\n\t\tgl.lookAt(light, center, V3.Y)\n\t}\n\n\treturn gl.animate(function (abs) {\n\t\tconst time = abs / 1000\n\t\t// Move the light around\n\t\tconst light = new V3(\n\t\t\t100 * Math.sin(time * 0.2),\n\t\t\t25,\n\t\t\t20 * Math.cos(time * 0.2),\n\t\t)\n\n\t\t// Construct a camera looking from the light toward the object. The view\n\t\t// frustum is fit so it tightly encloses the bounding volume of the object\n\t\t// (sphere or box) to make best use of shadow map resolution. A frustum is\n\t\t// a pyramid shape with the apex chopped off.\n\t\tif (useBoundingSphere) {\n\t\t\tcameraForBoundingSphere(light, boundingSphere)\n\t\t} else {\n\t\t\tcameraForBoundingBox(light, boundingBox)\n\t\t}\n\n\t\t// Render the object viewed from the light using a shader that returns the\n\t\t// fragment depth.\n\t\tconst shadowMapMatrix = gl.projectionMatrix.times(gl.modelViewMatrix)\n\t\tdepthMap.unbind(0)\n\t\tdepthMap.drawTo(function () {\n\t\t\tgl.clearColor(1, 1, 1, 1)\n\t\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t\t\tdepthShader.draw(mesh)\n\t\t})\n\n\t\tconst shadowMapMatrixInversed = shadowMapMatrix.inversed()\n\n\t\t// Set up the camera for the scene\n\t\tgl.clearColor(0, 0, 0, 1)\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t\tgl.matrixMode(gl.PROJECTION)\n\t\tgl.loadIdentity()\n\t\tgl.perspective(45, gl.canvas.width / gl.canvas.height, 1, 1000)\n\t\tgl.matrixMode(gl.MODELVIEW)\n\t\tgl.loadIdentity()\n\t\tgl.translate(0, 0, -100)\n\t\tgl.rotate(angleX, 1, 0, 0)\n\t\tgl.rotate(angleY, 0, 1, 0)\n\n\t\t// Draw view frustum\n\t\tgl.pushMatrix()\n\t\tgl.translate(light)\n\t\tcolorShader\n\t\t\t.uniforms({\n\t\t\t\tcolor: [1, 1, 0, 1],\n\t\t\t})\n\t\t\t.draw(sphere, gl.LINES)\n\t\tgl.popMatrix()\n\n\t\tgl.pushMatrix()\n\t\tgl.multMatrix(shadowMapMatrixInversed)\n\t\tcolorShader\n\t\t\t.uniforms({\n\t\t\t\tcolor: [1, 1, 0, 1],\n\t\t\t})\n\t\t\t.draw(frustrumCube, gl.LINES)\n\t\tgl.popMatrix()\n\n\t\t// Draw the bounding volume\n\t\tgl.pushMatrix()\n\t\tif (useBoundingSphere) {\n\t\t\tgl.translate(boundingSphere.center)\n\t\t\tgl.scale(boundingSphere.radius)\n\t\t\tcolorShader\n\t\t\t\t.uniforms({\n\t\t\t\t\tcolor: [0, 1, 1, 1],\n\t\t\t\t})\n\t\t\t\t.draw(sphere, gl.LINES)\n\t\t} else {\n\t\t\tgl.translate(boundingBox.min)\n\t\t\tgl.scale(boundingBox.size())\n\t\t\tcolorShader\n\t\t\t\t.uniforms({\n\t\t\t\t\tcolor: [0, 1, 1, 1],\n\t\t\t\t})\n\t\t\t\t.draw(cube, gl.LINES)\n\t\t}\n\t\tgl.popMatrix()\n\n\t\t// Draw mesh\n\t\tdepthMap.bind(0)\n\t\tdisplayShader\n\t\t\t.uniforms({\n\t\t\t\tshadowMapMatrix: shadowMapMatrix.times(\n\t\t\t\t\tgl.projectionMatrix.times(gl.modelViewMatrix).inversed(),\n\t\t\t\t),\n\t\t\t\tlight: gl.modelViewMatrix.transformPoint(light),\n\t\t\t\tdepthMap: 0,\n\t\t\t})\n\t\t\t.draw(mesh)\n\n\t\t// Draw plane\n\t\tgl.pushMatrix()\n\t\tgl.rotate(-90, 1, 0, 0)\n\t\tdisplayShader.draw(plane)\n\t\tgl.popMatrix()\n\n\t\t// Draw depth map overlay\n\t\tgl.viewport(10, 10, 10 + 256, 10 + 256)\n\t\ttextureShader.draw(texturePlane)\n\t\tgl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n\t})\n}\n;(shadowMap as any).info =\n\t\"Press any key to toggle between sphere- or AABB-based camera clipping.\"\n","import { V, V3 } from \"ts3dutils\"\nimport { Mesh, Shader, TSGLContext } from \"tsgl\"\n\n/**\n * Draw a rotating cube.\n */\nexport function setupDemo(gl: TSGLContext) {\n\tconst mesh = Mesh.cube()\n\tconst shader = Shader.create<{ color: \"FLOAT_VEC4\" }, {}>(\n\t\t`\n\t\tuniform mat4 ts_ModelViewProjectionMatrix;\n\t\tattribute vec4 ts_Vertex;\n\t\tvarying vec4 foo;\n\t\tvoid main() {\n\t\t\tfoo = vec4(1.0, 1.0, 1.0, 1.0);\n\t\t\tgl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\n\t\t}\n\t`,\n\t\t`\n\t\tprecision highp float;\n\t\tuniform vec4 color;\n\t\tvarying vec4 bar;\n\t\tvoid main() {\n\t\t\tgl_FragColor = color;\n\t\t}\n\t`,\n\t)\n\n\t// setup camera\n\tgl.matrixMode(gl.PROJECTION)\n\tgl.loadIdentity()\n\tgl.perspective(70, gl.canvas.width / gl.canvas.height, 0.1, 1000)\n\tgl.lookAt(V(0, -2, 1.5), V3.O, V3.Z)\n\tgl.matrixMode(gl.MODELVIEW)\n\n\tgl.enable(gl.DEPTH_TEST)\n\n\treturn gl.animate(function (abs, _diff) {\n\t\tconst angleDeg = (abs / 1000) * 45\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t\tgl.loadIdentity()\n\t\tgl.rotate(angleDeg, 0, 0, 1)\n\t\tgl.scale(1.5)\n\t\tgl.translate(-0.5, -0.5, -0.5)\n\n\t\tshader.uniforms({ color: [1, 1, 0, 1] }).draw(mesh)\n\t\tshader.uniforms({ color: [0, 0, 0, 1] }).draw(mesh, gl.LINES)\n\t})\n}\n"],"names":["CustomMap","PI","abs","max","lerp","clamp","cos","sin","min","WGL","log","chroma.color","TSGLContext"],"mappings":"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AC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACrE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAA;YACpE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACtE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAA;YACpE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACnE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YAClE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACpE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YAGhE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACtE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAA;YACpE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACrE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAA;YACpE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACpE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YAClE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACnE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YAGhE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACpE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YACnE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACrE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YACnE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACpE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YAClE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACpE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YAG/D,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACtE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YACnE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACrE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YACnE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACrE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YAClE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACnE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;;;YAI/D,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAA;;YAElE,IAAI,CAAC,GAAG,EAAE,CAAA;YACV,OAAO,CAAC,EAAE,EAAE;gBACX,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,CAAA;aACX;YACD,OAAO,MAAM,CAAA;SACb;QAED,WAAW,CAAC,MAAc;YACzB,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;YAC1B,OAAO,IAAI,CAAC,KAAK,IAAI,MAAM,CAAC,MAAM,CAAA;SAClC;QAED,KAAK,CAAC,MAAc;YACnB,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;YAC1B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,wEAAwE,CAAC,CAAA;YAC1G,MAAM,MAAM,GAAG,MAAM,CAAC,KAAK,EAC1B,OAAO,GAAG,IAAI,CAAC,MAAM,EACrB,CAAC,GAAG,IAAI,CAAC,KAAK,CAAA;YACf,MAAM,EAAE,GAAG,IAAI,YAAY,CAAC,MAAM,GAAG,OAAO,CAAC,CAAA;YAC7C,IAAI,SAAS,GAAG,OAAO,CAAA;YACvB,OAAO,SAAS,EAAE,EAAE;gBACnB,IAAI,SAAS,GAAG,MAAM,CAAA;gBACtB,OAAO,SAAS,EAAE,EAAE;oBACnB,IAAI,MAAM,GAAG,CAAC,CAAA;oBACd,IAAI,CAAC,GAAG,CAAC,CAAA;oBACT,OAAO,CAAC,EAAE,EAAE;wBACX,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,SAAS,CAAC,CAAA;qBACtE;oBACD,EAAE,CAAC,SAAS,GAAG,MAAM,GAAG,SAAS,CAAC,GAAG,MAAM,CAAA;iBAC3C;aACD;YACD,OAAO,IAAI,MAAM,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE,CAAC,CAAA;SACtC;QAED,WAAW,CAAC,CAAS;YACpB,aAAa,CAAC,CAAC,CAAC,CAAA;YAChB,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC,CAAA;YAC7B,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,EAC1B,CAAC,GAAG,IAAI,CAAC,KAAK,CAAA;YACf,MAAM,EAAE,GAAG,IAAI,YAAY,CAAC,OAAO,CAAC,CAAA;YACpC,IAAI,SAAS,GAAG,OAAO,CAAA;YACvB,OAAO,SAAS,EAAE,EAAE;gBACnB,IAAI,MAAM,GAAG,CAAC,CAAA;gBACd,IAAI,CAAC,GAAG,CAAC,CAAA;gBACT,OAAO,CAAC,EAAE,EAAE;oBACX,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;iBAC5C;gBACD,EAAE,CAAC,SAAS,CAAC,GAAG,MAAM,CAAA;aACtB;YACD,OAAO,IAAI,MAAM,CAAC,EAAE,CAAC,CAAA;SACrB;QAED,UAAU;YACT,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,EACzB,OAAO,GAAG,IAAI,CAAC,KAAK,CAAA;YACrB,MAAM,EAAE,GAAG,IAAI,YAAY,CAAC,MAAM,GAAG,OAAO,CAAC,CAAA;YAC7C,IAAI,SAAS,GAAG,OAAO,CAAA;YACvB,OAAO,SAAS,EAAE,EAAE;gBACnB,IAAI,SAAS,GAAG,MAAM,CAAA;gBACtB,OAAO,SAAS,EAAE,EAAE;oBACnB,EAAE,CAAC,SAAS,GAAG,MAAM,GAAG,SAAS,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,SAAS,GAAG,OAAO,GAAG,SAAS,CAAC,CAAA;iBAC5E;aACD;YACD,OAAO,IAAI,MAAM,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE,CAAC,CAAA;SACtC;;;;QAKD,SAAS;YACR,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,EACpB,CAAC,GAAG,IAAI,CAAC,KAAK,EACd,EAAE,GAAG,IAAI,CAAC,CAAC,CAAA;YACZ,IAAI,SAAS,GAAG,CAAC,CAAA;YACjB,OAAO,SAAS,EAAE,EAAE;gBACnB,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,CAAA;gBACtC,OAAO,SAAS,EAAE,EAAE;oBACnB,MAAM,IAAI,GAAG,EAAE,CAAC,SAAS,GAAG,CAAC,GAAG,SAAS,CAAC,CAAA;oBAC1C,EAAE,CAAC,SAAS,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,EAAE,CAAC,SAAS,GAAG,CAAC,GAAG,SAAS,CAAC,CAAA;oBAC7D,EAAE,CAAC,SAAS,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,IAAI,CAAA;iBACpC;aACD;YACD,IAAI,CAAC,KAAK,GAAG,CAAC,CAAA;YACd,IAAI,CAAC,MAAM,GAAG,CAAC,CAAA;SACf;QAED,QAAQ;YACP,OAAO,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,KAAK,CAAA;SAChC;QAED,QAAQ;YACP,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE;gBACrB,MAAM,IAAI,KAAK,CAAC,IAAI,CAAC,CAAA;aACrB;YACD,MAAM,CAAC,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YACtC,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAA;YAC3C,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAA;YACvB,OAAO,MAAM,EAAE,EAAE;gBAChB,OAAO,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAA;gBACzB,CAAC,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAA;aAC3B;YACD,OAAO,IAAI,MAAM,CAAC,CAAC,CAAC,CAAA;SACpB;QAED,KAAK;YACJ,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,CAAA;SACxC;QAED,KAAK;YACJ,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,CAAA;SACxC;QAED,YAAY;YACX,IAAI,MAAM,GAAG,CAAC,CAAA;YACd,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAA;YACzB,OAAO,QAAQ,EAAE,EAAE;gBAClB,IAAI,MAAM,GAAG,CAAC,CAAA;gBACd,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAA;gBAC1B,OAAO,QAAQ,EAAE,EAAE;oBAClB,MAAM,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAA;iBAC5D;gBACD,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;aACjC;YACD,OAAO,MAAM,CAAA;SACb;QAED,YAAY;YACX,IAAI,MAAM,GAAG,CAAC,CAAA;YACd,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAA;YAC1B,OAAO,QAAQ,EAAE,EAAE;gBAClB,IAAI,MAAM,GAAG,CAAC,CAAA;gBACd,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAA;gBACzB,OAAO,QAAQ,EAAE,EAAE;oBAClB,MAAM,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAA;iBAC5D;gBACD,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAA;aACjC;YACD,OAAO,MAAM,CAAA;SACb;QAED,wBAAwB;YACvB,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,IAAI,CAAC,iBAAiB,EAAE,EAAE,yBAAyB,CAAC,CAAA;YAEvF,IAAI,OAAO,GAAG,CAAC,CAAA;YACf,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAA;YAC3C,OAAO,OAAO,EAAE;gBACf,OAAO,IAAI,IAAI,CAAC,KAAK,GAAG,CAAC,CAAA;gBACzB,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAA;aAC1B;YACD,OAAO,OAAO,CAAA;SACd;;;;;QAMD,cAAc;;;;;;YAMb,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,wBAAwB,EAAE,CAAA;SAC1D;QAED,WAAW;YACV,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE,CAAA;SACvD;QAED,qBAAqB;YACpB,OAAO,CAAC,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC,CAAA;YACnC,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YACrC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAA;YACnB,OAAO,CAAC,EAAE,EAAE;gBACX,MAAM,gBAAgB,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,CAAA;gBACvC,IAAI,WAAW,GAAG,gBAAgB,CAAA;gBAClC,OAAO,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,GAAG;oBAAE,WAAW,EAAE,CAAA;gBAC/C,MAAM,CAAC,CAAC,CAAC,GAAG,WAAW,GAAG,gBAAgB,CAAA;aAC1C;YACD,OAAO,MAAM,CAAA;SACb;QAED,sBAAsB,CAAC,QAA6C,IAAI,CAAC,KAAK,EAAE;YAC/E,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,KAAK,CAAA;;YAEzB,MAAM,UAAU,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YACzC,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,CAAA;YAC3B,OAAO,SAAS,EAAE,EAAE;gBACnB,MAAM,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;gBAC7B,IAAI,IAAI,CAAC,MAAM,EAAE,GAAG,aAAa,EAAE;oBAClC,UAAU,CAAC,SAAS,CAAC,GAAG,IAAI,CAAA;iBAC5B;qBAAM;oBACN,MAAK;iBACL;aACD;;YAED,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,CAAA;YAC3B,OAAO,SAAS,EAAE,EAAE;gBACnB,IAAI,UAAU,CAAC,SAAS,CAAC,EAAE;oBAC1B,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,CAAA;oBAC/C,OAAO,SAAS,EAAE,EAAE;wBACnB,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE;4BACpC,UAAU,CAAC,SAAS,CAAC,GAAG,IAAI,CAAA;yBAC5B;qBACD;iBACD;aACD;YACD,OAAO,CAAC,GAAG,CACV,KAAK,EACL,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAC5B,CAAA;YACD,OAAO,CAAC,GAAG,CACV,KAAK,EACL,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CACzB,CAAA;YACD,OAAO,CAAC,GAAG,CACV,KAAK,EACL,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CACzB,CAAA;YACD,OAAO,CAAC,GAAG,CACV,KAAK,EACL,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CACzB,CAAA;;YAED,MAAM,QAAQ,GAAG,CAAC,CAAC,qBAAqB,EAAE,CAAA;YAC1C,MAAM,mBAAmB,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,SAAS,CAAC,CAAA;YAC5G,OAAO,mBAAmB,CAAA;SAC1B;QAED,IAAI,CAAC,CAAS,EAAE,CAAS,EAAE,MAAM,GAAG,IAAI,CAAC,GAAG,EAAE;YAC7C,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,MAAM,CAAC,CAAA;YAC7B,aAAa,CAAC,CAAC,CAAC,CAAA;YAChB,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,MAAM,CAAC,CAAA;YACxD,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;YACf,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,MAAM,CAAA;YACrB,OAAO,CAAC,EAAE,EAAE;gBACX,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;aACxC;YACD,OAAO,MAAM,CAAA;SACb;;aCp9Bc,aAAa,CAAC,GAAG,OAAwB;QACzC;YACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC1C,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,YAAY,EAAE,IAAI,SAAS,CAAC,CAAC,CAAC,YAAY,MAAM,CAAC,EAAE;oBACpE,MAAM,IAAI,KAAK,CACd,0BAA0B;wBACzB,CAAC;wBACD,qBAAqB;wBACrB,OAAO,SAAS,CAAC,CAAC,CAAC;wBACnB,aAAa;wBACb,SAAS,CAAC,CAAC,CAAC,CACb,CAAA;iBACD;aACD;SACD;QACD,OAAO,IAAI,CAAA;IACZ,CAAC;;UCtEY,IAAI,GAAG,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAE;UAC9B,IAAI,GAAG,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAE;UAC9B,IAAI,GAAG,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAE;UAErB,aAAa;QAClC,MAAM,CAAC,KAAiC;YACvC,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAA;SACvC;QAED,SAAS;YACR,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;SACxB;QAED,OAAO;YACN,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;SACxB;QAED,OAAO;YACN,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;SACxB;QAED,OAAO,CAAC,KAAiC;YACxC,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAA;SACxC;QAED,SAAS;YACR,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAA;SACvC;QAED,SAAS;YACR,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAA;SACvC;QAED,SAAS;YACR,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAA;SACvC;QAID,SAAS,CAAC,GAAG,IAAW;YACvB,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,CAAC,CAAA;SAC1G;QAID,KAAK,CAAC,GAAG,IAAW;YACnB,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,EAAE,OAAO,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAC,CAAA;SAClG;QAED,OAAO,CAAC,OAAc;YACrB,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,YAAY,OAAO,GAAG,CAAC,CAAA;SAClE;QAED,OAAO,CAAC,OAAc;YACrB,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,YAAY,OAAO,GAAG,CAAC,CAAA;SAClE;QAED,OAAO,CAAC,OAAc;YACrB,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,YAAY,OAAO,GAAG,CAAC,CAAA;SAClE;QAED,MAAM,CAAC,cAAkB,EAAE,YAAgB,EAAE,OAAc;YAC1D,OAAO,IAAI,CAAC,SAAS,CACpB,EAAE,CAAC,UAAU,CAAC,cAAc,EAAE,YAAY,EAAE,OAAO,CAAC,EACpD,OAAO,CAAC,SAAS,EAAE,cAAc,EAAE,YAAY,EAAE,OAAO,CAAC,CACzD,CAAA;SACD;QAED,QAAQ,CAAC,IAAQ,EAAE,EAAM;YACxB,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,OAAO,CAAC,WAAW,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,CAAA;SAC5E;QAED,QAAQ,CAAC,KAAY,EAAE,IAAW,EAAE,KAAY;YAC/C,MAAM,IAAI,KAAK,EAAE,CAAA;;SAEjB;QAED,MAAM,CAAC,CAAS,EAAE,CAAS;;YAE1B,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;gBAC5B,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;gBACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;gBACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;gBACV,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;aAAC,CAAC,CAAC,CAAA;SACd;QAED,GAAG;YACF,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,GAAG,CAAC,CAAA;SAC7B;QAED,GAAG;YACF,OAAO,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,GAAG,CAAC,CAAA;SAC7B;QAeD,KAAK,CAAC,OAAyE,EAAE,GAAG,IAAW;YAC9F,IAAI,KAAK,GAAG,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;;YAEvC,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,KAAK,KAAK,aAAa,CAAC,SAAS,EAAE;gBAC5F,KAAK,GAAG,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;aACpC;YACD,IAAI,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE;gBACnD,OAAO,OAAO,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;aACxD;iBAAM;gBACN,MAAM,IAAI,KAAK,CAAC,wBAAwB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;aACjE;SACD;;;ICrHF,MAAM,cAAc,GAAG,IAAI,MAAM,CAChC,IAAI;QACH,4EAA4E;QAC5E,wEAAwE;QACxE,2EAA2E;QAC3E,4EAA4E;QAC5E,wEAAwE;QACxE,wCAAwC;QACxC,IAAI,CACL,CAAA;IACD,SAAS,gBAAgB,CAAC,GAAW;QACpC,OAAO,wBAAwB,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IACvE,CAAC;IAED,MAAM,IAAI,GAAS,EAAE,CAAA;aACL,QAAQ,CAAC,CAAK,EAAE,MAAM,GAAG,CAAC;QACzC,IAAI,SAAS,KAAK,CAAC;YAAE,OAAO,WAAW,CAAA;QACvC,IAAI,IAAI,KAAK,CAAC;YAAE,OAAO,MAAM,CAAA;QAC7B,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAA;IACpB,CAAC;IACD,SAAS,4BAA4B,CAAI,KAA+B,EAAE,MAA2B;QACpG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,EAAE;YAC9B,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,SAAS,EAAE,UAAU,EAAE;gBAClD,KAAK,EAAE,MAAM;gBACb,QAAQ,EAAE,IAAI;gBACd,YAAY,EAAE,IAAI;gBAClB,UAAU,EAAE,KAAK;aACjB,CAAC,CAAA;SACF;IACF,CAAC;IAED,4BAA4B,CAAC,OAAO,EAAE,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAA;IACjE,4BAA4B,CAAC,QAAQ,EAAE,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAA;IACnE,4BAA4B,CAAC,MAAM,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAA;IAC/D,4BAA4B,CAAC,MAAM,EAAE,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAA;IAC/D,4BAA4B,CAAC,IAAI,EAAE;QAClC,OAAO,WAAW,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,GAAG,CAAA;IAC1C,CAAC,CAAC,CAAA;IACF,4BAA4B,CAAC,MAAM,EAAE;QACpC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;IAC5B,CAAC,CAAC,CAAA;IACF,4BAA4B,CAAC,KAAK,EAAE;QACnC,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACxB,OAAO,oBAAoB,CAAA;SAC3B;QACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACf,IAAI,MAAM,GAAG,GAAG,CAAA;QAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrC,MAAM,IAAI,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,EAAE,MAAM,CAAC,CAAA;YACnE,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC1B,MAAM,IAAI,GAAG,CAAA;aACb;SACD;QACD,MAAM,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM,GAAG,GAAG,GAAG,KAAK,CAAA;QACzC,IAAI,CAAC,GAAG,EAAE,CAAA;QACV,OAAO,MAAM,CAAA;IACd,CAAC,CAAC,CAAA;IACF,4BAA4B,CAAC,MAAM,EAAE;QACpC,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACxB,OAAO,oBAAoB,CAAA;SAC3B;QACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACf,IAAI,MAAM,GAAG,GAAG,CAAA;QAChB,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAA;QACrC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACrC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;YACjB,MAAM;gBACL,MAAM;qBACL,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;oBAC7C,IAAI;oBACJ,QAAQ,CAAE,IAAY,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,EAAE,MAAM,CAAC,CAAA;YAC1D,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC1B,MAAM,IAAI,GAAG,CAAA;aACb;SACD;QACD,MAAM,IAAI,CAAC,KAAK,IAAI,CAAC,MAAM,GAAG,GAAG,GAAG,KAAK,CAAA;QACzC,IAAI,CAAC,GAAG,EAAE,CAAA;QACV,OAAO,MAAM,CAAA;IACd,CAAC,CAAC;;UCrEW,IAAK,SAAQ,aAAa;QACtC,YAAmB,MAAU,EAAE,CAAC,GAAG,EAAS,MAAU,EAAE,CAAC,GAAG,CAAC,OAAO,EAAE;YACrE,KAAK,EAAE,CAAA;YADW,QAAG,GAAH,GAAG,CAAa;YAAS,QAAG,GAAH,GAAG,CAAuB;YAErE,aAAa,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;SACvB;QAED,OAAO,MAAM,CAAC,CAAS,EAAE,CAAS,EAAE,CAAS;YAC5C,OAAO,IAAI,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;SACtC;QAED,OAAO,QAAQ,CAAC,KAAqB;YACpC,MAAM,MAAM,GAAG,IAAI,IAAI,EAAE,CAAA;YACzB,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;gBACzB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;aACpB;YACD,OAAO,MAAM,CAAA;SACb;QAED,QAAQ,CAAC,CAAK;YACb,aAAa,CAAC,CAAC,CAAC,CAAA;YAChB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;YAC1B,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;YAC1B,OAAO,IAAI,CAAA;SACX;QAED,SAAS,CAAC,EAAQ;YACjB,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;YACnC,OAAO,IAAI,CAAA;SACX;QAED,OAAO,CAAC,IAAU;YACjB,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;YACtB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;YACvB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;YACvB,OAAO,IAAI,CAAA;SACX;;;;;QAMD,WAAW,CAAC,IAAU;YACrB,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;YACtB,IAAI,GAAG,EAAE,GAAG,CAAA;YACZ,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,EAAE,EAC3B,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAA;YACnB,IAAI,eAAe,GAAG,CAAC,QAAQ,CAAA;YAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC3B,MAAM,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAoB,CAAA;gBACjD,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;gBAC1E,MAAM,MAAM,GAAG,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;gBAC5E,MAAM,MAAM,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA;gBAC7E,MAAM,kBAAkB,GAAG,CAAC,CAAC,MAAM,GAAG,MAAM,IAAI,MAAM,IAAI,IAAI,CAAC,GAAG,CAAC,CAAA;gBACnE,IAAI,kBAAkB,GAAG,eAAe,EAAE;oBACzC,eAAe,GAAG,kBAAkB,CAAA;oBACpC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;oBACvC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,EAAE,MAAM,CAAC,CAAA;iBACvC;aACD;YACD,OAAO,IAAI,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAA;SACzB;QAED,mBAAmB,CAAC,IAAU;YAC7B,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;YACtB,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;SAC/D;QAED,WAAW,CAAC,IAAU;YACrB,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;YACtB,OAAO,EACN,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;gBACvB,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;gBACvB,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;gBACvB,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;gBACvB,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;gBACvB,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CACvB,CAAA;SACD;QAED,gBAAgB,CAAC,IAAU,EAAE,WAAW,GAAG,aAAa;YACvD,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;YACtB,OAAO,EACN,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC;gBACvC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC;gBACvC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC;gBACvC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC;gBACvC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC;gBACvC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC,CACvC,CAAA;SACD;QAED,cAAc,CAAC,IAAU;YACxB,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;YACtB,OAAO,EACN,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;gBACxB,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;gBACxB,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;gBACxB,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;gBACxB,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;gBACxB,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CACxB,CAAA;SACD;QAED,gBAAgB,CAAC,IAAU;YAC1B,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;YACtB,OAAO,EACN,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;gBACxB,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;gBACxB,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;gBACxB,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CACxB,CAAA;SACD;QAED,aAAa,CAAC,CAAK;YAClB,aAAa,CAAC,CAAC,CAAC,CAAA;YAChB,QACC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACjB,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACjB,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACjB,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACjB,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACjB,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EACjB;SACD;QAED,cAAc,CAAC,MAAU,EAAE,MAAc;YACxC,aAAa,CAAC,MAAM,CAAC,CAAA;YACrB,aAAa,CAAC,MAAM,CAAC,CAAA;YACrB,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,GAAG,MAAM,CAAA;SAC5C;QAED,gBAAgB,CAAC,MAAU,EAAE,MAAc;YAC1C,aAAa,CAAC,MAAM,CAAC,CAAA;YACrB,aAAa,CAAC,MAAM,CAAC,CAAA;YACrB,OAAO,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,MAAM,CAAA;SAC7C;QAED,eAAe,CAAC,CAAK;YACpB,aAAa,CAAC,CAAC,CAAC,CAAA;YAChB,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EACZ,CAAC,GAAG,CAAC,CAAC,CAAC,EACP,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;YACR,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EACnB,GAAG,GAAG,IAAI,CAAC,GAAG,CAAA;YACf,IAAI,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE;gBAC1B,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAA;aACjF;YACD,OAAO,CAAC,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;SACnG;QAED,YAAY,CAAC,IAAU;YACtB,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;YACtB,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;SACnE;QAED,QAAQ,CAAC,IAAU;YAClB,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;YACtB,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;SACzD;QAED,cAAc,CAAC,IAA0D;YACxE,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAA;YACrC,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,MAAM,CAAC,SAAS,CAAC,CAAA;YACzD,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;YACnD,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;YACnD,MAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,UAAU,EAAE,EACzC,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,UAAU,EAAE,CAAA;YACrC,OAAO,IAAI,IAAI,IAAI,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAA;SAC9D;QAED,SAAS;YACR,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;SACvF;QAED,MAAM;YACL,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE;gBACtB,OAAO,CAAC,CAAC,CAAA;aACT;YACD,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;YAClC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;SACtB;QAED,IAAI;YACH,OAAO,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;SAC/B;QAED,SAAS;YACR,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;SACrC;QAED,SAAS,CAAC,EAAM;YACf,UAAU,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;YAClB,MAAM,CAAC,EAAE,CAAC,aAAa,EAAE,CAAC,CAAA;YAC1B,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAA;YACvB,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;YAC1C,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;YAC1C,OAAO,IAAY,CAAA;SACnB;QAED,aAAa,CAAC,EAAM;YACnB,UAAU,CAAC,EAAE,EAAE,EAAE,CAAC,CAAA;YAClB,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAA;YACvB,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAA;YACpD,OAAO,IAAI,CAAA;SACX;QAED,OAAO;YACN,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EACnB,GAAG,GAAG,IAAI,CAAC,GAAG,CAAA;YACf,OAAO;gBACN,GAAG;gBACH,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;gBAC3B,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;gBAC3B,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;gBAE3B,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;gBAC3B,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;gBAC3B,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;gBAC3B,GAAG;aACH,CAAA;SACD;QAED,QAAQ;YACP,OAAO,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAA;SAC9C;QAED,QAAQ;YACP,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAA;SACtB;;;;QAKD,KAAK;YACJ,OAAO,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAA;SAC1D;;;IC9NF,MAAM,MAAEC,IAAE,EAAE,GAAG,EAAE,GAAG,IAAI,CAAA;IAExB;UACa,EAAG,SAAQ,MAAM;;;;;;;;;;QAqD7B,YAAY,GAAG,QAA+B;YAC7C,IAAI,CAAC,CAAA;YACL,IAAI,CAAC,IAAI,SAAS,CAAC,MAAM,EAAE;gBAC1B,CAAC,GAAG,IAAI,YAAY,CAAC,EAAE,CAAC,CAAA;aACxB;iBAAM;gBACN,MAAM,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE,SAAS,CAAC,CAAA;gBAC7D,MAAM,CAAC,SAAS,CAAC,MAAM,IAAI,EAAE,EAAE,yBAAyB,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;gBAC5E,CAAC,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC,CAAA;aAC/B;YACD,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;SACd;;;;;;;QAQD,OAAO,OAAO,CAAC,MAAU,EAAE,SAAa,IAAI,EAAE,EAAE;YAC/C,OAAO,MAAM,CAAC,SAAS,CAAC,MAAM,CAAO,CAAA;SACrC;;;;;QAMD,OAAO,YAAY,CAAC,CAAM,EAAE,CAAM,EAAE,MAAM,GAAG,IAAI,EAAE,EAAE;YACpD,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAChB,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;YAC9B,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;YAC9B,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,CAAA;YAClB,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;YACnB,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAA;YAChB,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAA;YAChB,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAA;YAChB,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAA;YAChB,OAAO,MAAM,CAAA;SACb;;;;;QAMD,OAAO,SAAS,CAAC,MAAU,EAAE,SAAa,IAAI,EAAE,EAAE;YACjD,UAAU,CAAC,EAAE,EAAE,MAAM,CAAC,CAAA;YACtB,UAAU,CAAC,EAAE,EAAE,MAAM,CAAC,CAAA;YACtB,MAAM,CAAC,MAAM,IAAI,MAAM,EAAE,kBAAkB,CAAC,CAAA;YAC5C,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,EACjB,CAAC,GAAG,MAAM,CAAC,CAAC,CAAA;YACbb,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAA;YACb,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YACZ,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YACZ,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAA;YACb,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAA;YACb,OAAO,MAAM,CAAA;SACb;;;;QAKD,OAAO,QAAQ,CAAC,IAAQ,EAAE,KAAS,EAAE,SAAa,IAAI,EAAE,EAAE;YACzD,UAAU,CAAC,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,CAAA;YAC3B,UAAU,CAAC,EAAE,EAAE,MAAM,CAAC,CAAA;YACtB,MAAM,CAAC,IAAI,IAAI,MAAM,EAAE,gBAAgB,CAAC,CAAA;YACxC,MAAM,CAAC,KAAK,IAAI,MAAM,EAAE,iBAAiB,CAAC,CAAA;YAC1C,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,EACf,CAAC,GAAG,KAAK,CAAC,CAAC,EACX,CAAC,GAAG,MAAM,CAAC,CAAC,CAAA;YAEb,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAC/D,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAC/D,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAChE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAEhE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAC/D,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAC/D,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAChE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAEhE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YACjE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YACjE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YACnE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAEnE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,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AG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,CAAA;YAC1C,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAA;YACrC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAA;YACrC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,CAAA;YAEpG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAA;YACrC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,CAAA;YAC1C,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAA;YACrC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,CAAA;YAEpG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAA;YACrC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAA;YACrC,CAAC,CAAC,EAAE,CA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,QAAQ,EAAE,QAAQ,CAAC;QAChG,IAAI,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;QAChG,OAAO,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;QACnG,IAAI,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;QAChG,MAAM,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;QAClG,IAAI,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;QAChG,IAAI,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;QAChG,IAAI,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;QAChG,MAAM,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;QAClG,MAAM,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;QAClG,OAAO,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC;QACnG,IAAI,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAA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pB,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;SACvB,CAAC,CAAA;IACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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"}