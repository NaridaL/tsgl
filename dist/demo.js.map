{"version":3,"file":"demo.js","sources":["../../../javasetmap.ts/dist/bundle.module.js","../../ts3dutils/dist/bundle.module.js","../src/Mesh.ts","../src/Shader.ts","../src/LightGLContext.ts","../src/Buffer.ts","../src/Texture.ts","../src/shaders/colorFS.glslx","../src/shaders/posVS.glslx","../src/shaders/varyingColorFS.glslx","../src/shaders/vectorFieldVS.glslx","../src/demo.ts"],"sourcesContent":["/**\r\n * Java style map.\r\n */\r\nclass JavaMap {\r\n    constructor() {\r\n        this[Symbol.toStringTag] = 'Map';\r\n        this._map = new Map();\r\n        this._size = 0;\r\n    }\r\n    toString() {\r\n        return '{' + Array.from(this.entries2()).map(({ key, value }) => key + ':' + value).join(', ') + '}';\r\n    }\r\n    forEach(callbackfn, thisArg) {\r\n        for (const bucket of this._map.values()) {\r\n            for (const { key, value } of bucket) {\r\n                callbackfn.call(thisArg, value, key, this);\r\n            }\r\n        }\r\n    }\r\n    *keys() {\r\n        for (const bucket of this._map.values()) {\r\n            for (const { key } of bucket) {\r\n                yield key;\r\n            }\r\n        }\r\n    }\r\n    *values() {\r\n        for (const bucket of this._map.values()) {\r\n            for (const { value } of bucket) {\r\n                yield value;\r\n            }\r\n        }\r\n    }\r\n    [Symbol.iterator]() {\r\n        return this.entries();\r\n    }\r\n    set(key, value) {\r\n        this.set2(key, value);\r\n        return this;\r\n    }\r\n    /**\r\n     * Like {@link #set} except it returns true if key was new and false if the value was only updated.\r\n     *\r\n     */\r\n    set2(key, val) {\r\n        const hashCode = key.hashCode(), bucket = this._map.get(hashCode);\r\n        //assert(hashCode === (hashCode | 0))\r\n        if (bucket) {\r\n            const pairIndex = bucket.findIndex(pair => pair.key.equals(key));\r\n            if (-1 == pairIndex) {\r\n                bucket.push({ key: key, value: val });\r\n            }\r\n            else {\r\n                bucket[pairIndex].value = val;\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            this._map.set(hashCode, [{ key: key, value: val }]);\r\n        }\r\n        this._size++;\r\n        return true;\r\n    }\r\n    has(key) {\r\n        const hashCode = key.hashCode(), bucket = this._map.get(hashCode);\r\n        //assert(hashCode === (hashCode | 0))\r\n        return undefined !== bucket && bucket.some(pair => pair.key.equals(key));\r\n    }\r\n    get(key) {\r\n        const hashCode = key.hashCode(), bucket = this._map.get(hashCode), pair = bucket && bucket.find(pair => pair.key.equals(key));\r\n        return pair && pair.value;\r\n    }\r\n    getLike(key) {\r\n        for (const hashCode of key.hashCodes()) {\r\n            const bucket = this._map.get(hashCode);\r\n            const canonVal = bucket && bucket.find(x => x.key.like(key));\r\n            if (canonVal)\r\n                return canonVal;\r\n        }\r\n    }\r\n    setLike(key, val) {\r\n        return !this.getLike(key) && this.set(key, val);\r\n    }\r\n    'delete'(key) {\r\n        const hashCode = key.hashCode(), bucket = this._map.get(hashCode);\r\n        if (bucket) {\r\n            const index = bucket.findIndex(x => x.key.equals(key));\r\n            if (-1 != index) {\r\n                if (1 == bucket.length) {\r\n                    this._map.delete(hashCode);\r\n                }\r\n                else {\r\n                    bucket.splice(index, 1);\r\n                }\r\n                this._size--;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    deleteLike(key) {\r\n        for (const hashCode of key.hashCodes()) {\r\n            const bucket = this._map.get(hashCode);\r\n            if (bucket) {\r\n                const index = bucket.findIndex(x => x.key.like(key));\r\n                if (-1 != index) {\r\n                    const deleted = bucket[index];\r\n                    if (1 == bucket.length) {\r\n                        this._map.delete(hashCode);\r\n                    }\r\n                    else {\r\n                        bucket.splice(index, 1);\r\n                    }\r\n                    this._size--;\r\n                    return deleted;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    *entries2() {\r\n        for (const bucket of this._map.values()) {\r\n            yield* bucket;\r\n        }\r\n    }\r\n    *entries() {\r\n        for (const bucket of this._map.values()) {\r\n            for (const { key, value } of bucket) {\r\n                yield [key, value];\r\n            }\r\n        }\r\n    }\r\n    clear() {\r\n        this._map.clear();\r\n        this._size = 0;\r\n    }\r\n    get size() {\r\n        return this._size;\r\n    }\r\n}\n\nclass JavaSet {\r\n    constructor(iterable) {\r\n        this[Symbol.toStringTag] = 'Set';\r\n        this[Symbol.iterator] = JavaSet.prototype.values;\r\n        this.keys = JavaSet.prototype.values;\r\n        this._map = new Map();\r\n        this._size = 0;\r\n        if (iterable) {\r\n            this.addAll(iterable);\r\n        }\r\n    }\r\n    forEach(callbackfn, thisArg) {\r\n        for (const value of this.entries()) {\r\n            callbackfn.call(thisArg, value, value, this);\r\n        }\r\n    }\r\n    add(val) {\r\n        this.add2(val);\r\n        return this;\r\n    }\r\n    add2(val) {\r\n        // you can't use this.canonicalize here, as there is no way to differentiate if val\r\n        // is new or if val was === the exisitng value (not only .equals)\r\n        const hashCode = val.hashCode(), bucket = this._map.get(hashCode);\r\n        if (bucket) {\r\n            if (bucket.some(x => x.equals(val))) {\r\n                return false;\r\n            }\r\n            bucket.push(val);\r\n        }\r\n        else {\r\n            this._map.set(hashCode, [val]);\r\n        }\r\n        this._size++;\r\n        return true;\r\n    }\r\n    addAll(iterable) {\r\n        for (const val of iterable) {\r\n            this.add(val);\r\n        }\r\n        return this;\r\n    }\r\n    canonicalize(val) {\r\n        const hashCode = val.hashCode(), bucket = this._map.get(hashCode);\r\n        if (bucket) {\r\n            const existing = bucket.find(x => x.equals(val));\r\n            if (existing) {\r\n                return existing;\r\n            }\r\n            bucket.push(val);\r\n        }\r\n        else {\r\n            this._map.set(hashCode, [val]);\r\n        }\r\n        this._size++;\r\n        return val;\r\n    }\r\n    has(val) {\r\n        const hashCode = val.hashCode(), bucket = this._map.get(hashCode);\r\n        return undefined !== bucket && bucket.some(x => x.equals(val));\r\n    }\r\n    getLike(val) {\r\n        for (const hashCode of val.hashCodes()) {\r\n            const bucket = this._map.get(hashCode);\r\n            const canonVal = bucket && bucket.find(x => x.like(val));\r\n            if (canonVal)\r\n                return canonVal;\r\n        }\r\n    }\r\n    canonicalizeLike(val) {\r\n        // if this.getLike(val) is defined, return it, otherwise add val and return val\r\n        return this.getLike(val) || this.canonicalize(val);\r\n    }\r\n    addLike(val) {\r\n        return !this.getLike(val) && this.add(val);\r\n    }\r\n    'delete'(val) {\r\n        const hashCode = val.hashCode(), bucket = this._map.get(hashCode);\r\n        if (bucket) {\r\n            const index = bucket.findIndex(x => x.equals(val));\r\n            if (-1 != index) {\r\n                if (1 == bucket.length) {\r\n                    this._map.delete(hashCode);\r\n                }\r\n                else {\r\n                    bucket.splice(index, 1);\r\n                }\r\n                this._size--;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    deleteLike(val) {\r\n        for (const hashCode of val.hashCodes()) {\r\n            const bucket = this._map.get(hashCode);\r\n            if (bucket) {\r\n                const index = bucket.findIndex(x => x.like(val));\r\n                if (-1 != index) {\r\n                    const deleted = bucket[index];\r\n                    if (1 == bucket.length) {\r\n                        this._map.delete(hashCode);\r\n                    }\r\n                    else {\r\n                        bucket.splice(index, 1);\r\n                    }\r\n                    this._size--;\r\n                    return deleted;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    *values() {\r\n        for (const bucket of this._map.values()) {\r\n            yield* bucket;\r\n        }\r\n    }\r\n    *entries() {\r\n        for (const bucket of this._map.values()) {\r\n            for (const value of bucket) {\r\n                yield [value, value];\r\n            }\r\n        }\r\n    }\r\n    clear() {\r\n        this._map.clear();\r\n        this._size = 0;\r\n    }\r\n    get size() {\r\n        return this._size;\r\n    }\r\n    toString() {\r\n        return '{' + Array.from(this.values()).join(', ') + '}';\r\n    }\r\n}\r\nclass Pair {\r\n    constructor(left, right) {\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n    hashCode() {\r\n        return this.left.hashCode() * 31 + this.right.hashCode();\r\n    }\r\n    equals(other) {\r\n        return this == other || Object.getPrototypeOf(other) == Pair.prototype && this.left.equals(other.left) && this.right.equals(other.right);\r\n    }\r\n    toString() {\r\n        return '(' + this.left.toString() + ', ' + this.right.toString() + ')';\r\n    }\r\n    toSource() {\r\n        return 'new Pair(' + this.left.toSource() + ', ' + this.right.toSource() + ')';\r\n    }\r\n}\n\nexport { JavaMap, JavaSet, Pair };\n//# sourceMappingURL=bundle.module.js.map\n","import { JavaMap } from 'javasetmap.ts';\n\nclass Vector {\r\n    constructor(v) {\r\n        this.v = v;\r\n        assertInst(Float64Array, v);\r\n    }\r\n    static fromFunction(dims, f) {\r\n        assertNumbers(dims);\r\n        const e = new Float64Array(dims);\r\n        let i = dims;\r\n        while (i--) {\r\n            e[i] = f(i);\r\n        }\r\n        return new Vector(e);\r\n    }\r\n    static random(dims) {\r\n        return Vector.fromFunction(dims, (i) => Math.random());\r\n    }\r\n    static from(...args) {\r\n        assert(args[0] instanceof Float64Array || args.every(a => 'number' == typeof a), 'args[0] instanceof Float64Array || args.every(a => \"number\" == typeof a)');\r\n        return new Vector(args[0] instanceof Float64Array ? args[0] : Float64Array.from(args));\r\n    }\r\n    static Zero(dims) {\r\n        assertNumbers(dims);\r\n        let i = 0;\r\n        const n = new Float64Array(dims);\r\n        while (i--) {\r\n            n[i] = 0;\r\n        }\r\n        return new Vector(n);\r\n    }\r\n    static Unit(dims, dir) {\r\n        assertNumbers(dims, dir);\r\n        let i = 0;\r\n        const n = new Float64Array(dims);\r\n        while (i--) {\r\n            n[i] = +(i == dir); // +true === 1, +false === 0\r\n        }\r\n        return new Vector(n);\r\n    }\r\n    [Symbol.iterator]() {\r\n        return this.v[Symbol.iterator]();\r\n    }\r\n    dim() {\r\n        return this.v.length;\r\n    }\r\n    e(index) {\r\n        if (0 > index || index >= this.v.length) {\r\n            throw new Error('array index out of bounds');\r\n        }\r\n        return this.v[index];\r\n    }\r\n    plus(vector) {\r\n        const u = this.v, v = vector.v;\r\n        const n = new Float64Array(u.length);\r\n        let i = u.length;\r\n        while (i--) {\r\n            n[i] = u[i] + v[i];\r\n        }\r\n        return new Vector(n);\r\n    }\r\n    minus(vector) {\r\n        const u = this.v, v = vector.v;\r\n        const n = new Float64Array(u.length);\r\n        let i = u.length;\r\n        while (i--) {\r\n            n[i] = u[i] - v[i];\r\n        }\r\n        return new Vector(n);\r\n    }\r\n    times(factor) {\r\n        const u = this.v;\r\n        const n = new Float64Array(u.length);\r\n        let i = u.length;\r\n        while (i--) {\r\n            n[i] = u[i] * factor;\r\n        }\r\n        return new Vector(n);\r\n    }\r\n    div(val) {\r\n        const u = this.v;\r\n        const n = new Float64Array(u.length);\r\n        let i = u.length;\r\n        while (i--) {\r\n            n[i] = u[i] / val;\r\n        }\r\n        return new Vector(n);\r\n    }\r\n    dot(vector) {\r\n        assert(this.dim == vector.dim, 'passed vector must have the same dim');\r\n        let result = 0;\r\n        const u = this.v, v = vector.v;\r\n        let i = u.length;\r\n        while (i--) {\r\n            result += u[i] * v[i];\r\n        }\r\n        return result;\r\n    }\r\n    cross(vector) {\r\n        assertInst(Vector, vector);\r\n        const n = new Float64Array(3);\r\n        n[0] = this.v[1] * vector.v[2] - this.v[2] * vector.v[1];\r\n        n[1] = this.v[2] * vector.v[0] - this.v[0] * vector.v[2];\r\n        n[2] = this.v[0] * vector.v[1] - this.v[1] * vector.v[0];\r\n        return new Vector(n);\r\n    }\r\n    schur(vector) {\r\n        assertInst(Vector, vector);\r\n        const u = this.v, v = vector.v;\r\n        const n = new Float64Array(u.length);\r\n        let i = u.length;\r\n        while (i--) {\r\n            n[i] = u[i] * v[i];\r\n        }\r\n        return new Vector(n);\r\n    }\r\n    equals(obj) {\r\n        if (obj === this)\r\n            return true;\r\n        if (obj.constructor !== Vector)\r\n            return false;\r\n        if (this.v.length != obj.v.length)\r\n            return false;\r\n        let i = this.v.length;\r\n        while (i--) {\r\n            if (!eq(this.v[i], obj.v[i]))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    map(f) {\r\n        return new Vector(this.v.map(f));\r\n    }\r\n    toString(roundFunction) {\r\n        roundFunction = roundFunction || ((v) => +v.toFixed(6));\r\n        return 'Vector(' + this.v.map(roundFunction).join(', ') + ')';\r\n    }\r\n    /*\r\n     get x() {\r\n     return this.v[0]\r\n     },\r\n     get y() {\r\n     return this.v[1]\r\n     },\r\n     get z() {\r\n     return this.v[2]\r\n     },\r\n     get w() {\r\n     return this.v[3]\r\n     },\r\n     */\r\n    angleTo(vector) {\r\n        assertInst(Vector, vector);\r\n        assert(!this.isZero(), '!this.likeO()');\r\n        assert(!vector.isZero(), '!vector.likeO()');\r\n        return Math.acos(this.dot(vector) / this.length() / vector.length());\r\n    }\r\n    /**\r\n     Returns true iff this is parallel to vector, using equals\r\n     Throw a DebugError\r\n     if vector is not a Vector or\r\n     if this has a length of 0 or\r\n     if vector has a length of 0\r\n     */\r\n    isParallelTo(vector) {\r\n        assertInst(Vector, vector);\r\n        assert(!this.isZero(), '!this.likeO()');\r\n        assert(!vector.isZero(), '!vector.likeO()');\r\n        // a . b takes on values of +|a|*|b| (vectors same direction) to -|a|*|b| (opposite direction)\r\n        // in both cases the vectors are paralle, so check if abs(a . b) == |a|*|b|\r\n        return eq(Math.sqrt(this.lengthSquared() * vector.lengthSquared()), Math.abs(this.dot(vector)));\r\n    }\r\n    isPerpendicularTo(vector) {\r\n        assertInst(Vector, vector);\r\n        assert(!this.isZero(), '!this.likeO()');\r\n        assert(!vector.isZero(), '!vector.likeO()');\r\n        return eq0(this.dot(vector));\r\n    }\r\n    /**\r\n     Returns true iff the length of this vector is 0, as returned by NLA.isZero.\r\n     Definition: Vector.prototype.isZero = () => NLA.isZero(this.length())\r\n     */\r\n    isZero() {\r\n        return eq0(this.length());\r\n    }\r\n    // Returns a new unit Vector (.length() === 1) with the same direction as this vector. Throws a\r\n    /*/ Returns the length of this Vector, i.e. the euclidian norm.*/\r\n    length() {\r\n        return Math.hypot.apply(undefined, this.v);\r\n        //return Math.sqrt(this.lengthSquared())\r\n    }\r\n    lengthSquared() {\r\n        let result = 0;\r\n        const u = this.v;\r\n        let i = u.length;\r\n        while (i--) {\r\n            result += u[i] * u[i];\r\n        }\r\n        return result;\r\n    }\r\n    // NLA_DEBUGError if this has a length of 0.\r\n    normalized() {\r\n        const length = this.length();\r\n        if (eq0(length)) {\r\n            throw new Error('cannot normalize zero vector');\r\n        }\r\n        return this.div(this.length());\r\n    }\r\n    asRowMatrix() {\r\n        return new Matrix(this.v.length, 1, this.v);\r\n    }\r\n    asColMatrix() {\r\n        return new Matrix(1, this.v.length, this.v);\r\n    }\r\n    /**\r\n     Returns a new Vector which is the projection of this vector onto the passed vector.\r\n     Examples\r\n     NLA.V(3, 4).projectedOn(NLA.V(1, 0)) // returns NLA.V(3, 0)\r\n     NLA.V(3, 4).projectedOn(NLA.V(2, 0)) // returns NLA.V(3, 0)\r\n     NLA.V(3, 4).projectedOn(NLA.V(-1, 0)) // returns NLA.V(-3, 0)\r\n     NLA.V(3, 4).projectedOn(NLA.V(0, 1)) // returns NLA.V(0, 4)\r\n     NLA.V(3, 4).projectedOn(NLA.V(1, 1)) // returns\r\n     */\r\n    projectedOn(b) {\r\n        assertInst(Vector, b);\r\n        // https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2\r\n        return b.times(this.dot(b) / b.dot(b));\r\n    }\r\n    rejectedOn(b) {\r\n        assertInst(Vector, b);\r\n        // https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2\r\n        return this.minus(b.times(this.dot(b) / b.dot(b)));\r\n    }\r\n    /**\r\n     Returns true iff the length() of this vector is equal to 'length', using equals\r\n     E.g. NLA.V(3, 4).hasLength(5) === true\r\n     NLA.V(1, 1).hasLength(1) === false\r\n     */\r\n    hasLength(length) {\r\n        assertNumbers(length);\r\n        return eq(length, this.length());\r\n    }\r\n    V3() {\r\n        //assert(this.dim() == 3)\r\n        return new V3(this.v[0], this.v[1], this.v[2]);\r\n    }\r\n}\n\nclass Matrix {\r\n    constructor(width, height, m) {\r\n        assert(width * height == m.length, 'width * height == m.length', width, height, m.length);\r\n        this.m = m;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n    static random(width, height) {\r\n        assertNumbers(width, height);\r\n        return Matrix.fromFunction(width, height, (i, j) => Math.random());\r\n    }\r\n    static fromFunction(width, height, f) {\r\n        assertNumbers(width, height);\r\n        const m = new Float64Array(height * width);\r\n        let elIndex = height * width;\r\n        while (elIndex--) {\r\n            m[elIndex] = f(Math.floor(elIndex / width), elIndex % width, elIndex);\r\n        }\r\n        return new Matrix(width, height, m);\r\n    }\r\n    static identityN(dim) {\r\n        assertNumbers(dim);\r\n        const m = new Float64Array(dim * dim);\r\n        // Float64Arrays are init to 0\r\n        let elIndex = dim * (dim + 1);\r\n        while (elIndex) {\r\n            elIndex -= (dim + 1);\r\n            m[elIndex] = 1;\r\n        }\r\n        return new Matrix(dim, dim, m);\r\n    }\r\n    static permutation(dim, i, k) {\r\n        assertNumbers(dim, i, k);\r\n        const m = new Float64Array(dim * dim);\r\n        // Float64Array are init to 0\r\n        let elIndex = dim * (dim + 1);\r\n        while (elIndex) {\r\n            elIndex -= (dim + 1);\r\n            m[elIndex] = 1;\r\n        }\r\n        m[i * dim + i] = 0;\r\n        m[k * dim + k] = 0;\r\n        m[i * dim + k] = 1;\r\n        m[k * dim + i] = 1;\r\n        return new Matrix(dim, dim, m);\r\n    }\r\n    static fromRowArrays(...args) {\r\n        return Matrix.fromRowArrays2(args);\r\n    }\r\n    static fromRowArrays2(arrays) {\r\n        if (0 == arrays.length) {\r\n            throw new Error('cannot have 0 vector');\r\n        }\r\n        const height = arrays.length;\r\n        const width = arrays[0].length;\r\n        const m = new Float64Array(height * width);\r\n        arrayCopy(arrays[0], 0, m, 0, width);\r\n        for (let rowIndex = 1; rowIndex < height; rowIndex++) {\r\n            if (arrays[rowIndex].length != width) {\r\n                throw new Error('all row arrays must be the same length');\r\n            }\r\n            arrayCopy(arrays[rowIndex], 0, m, rowIndex * width, width);\r\n        }\r\n        return new Matrix(width, height, m);\r\n    }\r\n    static fromColVectors(colVectors) {\r\n        return Matrix.fromColArrays(colVectors.map((v) => v.v));\r\n    }\r\n    static forWidthHeight(width, height) {\r\n        return new Matrix(width, height, new Float64Array(width * height));\r\n    }\r\n    static fromColArrays(colArrays) {\r\n        if (0 == colArrays.length) {\r\n            throw new Error('cannot have 0 vector');\r\n        }\r\n        const width = colArrays.length;\r\n        const height = colArrays[0].length;\r\n        const m = new Float64Array(height * width);\r\n        arrayCopyStep(colArrays[0], 0, 1, m, 0, width, height);\r\n        for (let colIndex = 1; colIndex < width; colIndex++) {\r\n            if (colArrays[colIndex].length != height) {\r\n                throw new Error('all col arrays must be the same length');\r\n            }\r\n            arrayCopyStep(colArrays[colIndex], 0, 1, m, colIndex, width, height);\r\n        }\r\n        return new Matrix(width, height, m);\r\n    }\r\n    /**\r\n     * Numerically calculate all the partial derivatives of f at x0.\r\n     *\r\n     *\r\n     * @param f\r\n     * @param x0\r\n     * @param fx0 f(x0), pass it if you have it already\r\n     * @param EPSILON\r\n     */\r\n    static jacobi(f, x0, fx0 = f(x0), EPSILON = 1e-6) {\r\n        const jacobi = Matrix.forWidthHeight(x0.length, fx0.length);\r\n        for (let colIndex = 0; colIndex < x0.length; colIndex++) {\r\n            x0[colIndex] += EPSILON;\r\n            const fx = f(x0);\r\n            for (let rowIndex = 0; rowIndex < fx0.length; rowIndex++) {\r\n                const value = (fx[rowIndex] - fx0[rowIndex]) / EPSILON;\r\n                jacobi.setEl(rowIndex, colIndex, value);\r\n            }\r\n            x0[colIndex] -= EPSILON;\r\n        }\r\n        return jacobi;\r\n    }\r\n    e(rowIndex, colIndex) {\r\n        assertNumbers(rowIndex, colIndex);\r\n        if (NLA_DEBUG && (rowIndex >= this.height || colIndex >= this.width)) {\r\n            throw new Error('index ' + rowIndex + ', ' + colIndex + ' is out of bounds (' + this.width + ' x ' + this.height + ')');\r\n        }\r\n        return this.m[rowIndex * this.width + colIndex];\r\n    }\r\n    setEl(rowIndex, colIndex, val) {\r\n        assertNumbers(rowIndex, colIndex, val);\r\n        assert(0 <= rowIndex && rowIndex < this.height, 'rowIndex out of bounds ' + rowIndex);\r\n        assert(0 <= colIndex && colIndex < this.width, 'colIndex out of bounds ' + colIndex);\r\n        this.m[rowIndex * this.width + colIndex] = val;\r\n    }\r\n    plus(m) {\r\n        assert(this.width == m.width);\r\n        assert(this.height == m.height);\r\n        const r = this.new();\r\n        let i = this.m.length;\r\n        while (i--)\r\n            r.m[i] = this.m[i] + m.m[i];\r\n        return r;\r\n    }\r\n    minus(m) {\r\n        assert(this.width == m.width);\r\n        assert(this.height == m.height);\r\n        const r = this.new();\r\n        let i = this.m.length;\r\n        while (i--)\r\n            r.m[i] = this.m[i] - m.m[i];\r\n        return r;\r\n    }\r\n    scale(factor) {\r\n        const r = this.new();\r\n        let i = this.m.length;\r\n        while (i--)\r\n            r.m[i] = this.m[i] * factor;\r\n        return r;\r\n    }\r\n    divScalar(scalar) {\r\n        const r = this.new();\r\n        let i = this.m.length;\r\n        while (i--)\r\n            r.m[i] = this.m[i] / scalar;\r\n        return r;\r\n    }\r\n    new() {\r\n        return new Matrix(this.width, this.height, new Float64Array(this.width * this.height));\r\n    }\r\n    toString(f, colNames, rowNames) {\r\n        f = f || ((v) => v.toFixed(6));\r\n        assert(typeof f(0) == 'string', '' + typeof f(0));\r\n        assert(!colNames || colNames.length == this.width);\r\n        assert(!rowNames || rowNames.length == this.height);\r\n        const rounded = Array.from(this.m).map(f);\r\n        const rows = arrayFromFunction(this.height, (rowIndex) => rounded.slice(rowIndex * this.width, (rowIndex + 1) * this.width)); // select matrix row\r\n        if (colNames) {\r\n            rows.unshift(Array.from(colNames));\r\n        }\r\n        if (rowNames) {\r\n            rows.forEach((row, rowIndex) => row.unshift(rowNames[rowIndex - (colNames ? 1 : 0)] || ''));\r\n        }\r\n        const colWidths = arrayFromFunction(this.width, (colIndex) => rows.map(row => row[colIndex].length).max());\r\n        return rows.map((row, rowIndex) => row.map((x, colIndex) => {\r\n            // pad numbers with spaces to col width\r\n            const padder = rowIndex == 0 && colNames || colIndex == 0 && rowNames\r\n                ? String.prototype.padEnd\r\n                : String.prototype.padStart;\r\n            return padder.call(x, colWidths[colIndex]);\r\n        }).join('  ')).map(x => x + '\\n').join(''); // join rows\r\n    }\r\n    row(rowIndex) {\r\n        const v = new Float64Array(this.width);\r\n        arrayCopy(this.m, rowIndex * this.width, v, 0, this.width);\r\n        return new Vector(v);\r\n    }\r\n    col(colIndex) {\r\n        const v = new Float64Array(this.height);\r\n        arrayCopyStep(this.m, colIndex, this.width, v, 0, 1, this.height);\r\n        return new Vector(v);\r\n    }\r\n    dim() {\r\n        return { width: this.width, height: this.height };\r\n    }\r\n    dimString() {\r\n        return this.width + 'x' + this.height;\r\n    }\r\n    equals(obj) {\r\n        if (obj.constructor != this.constructor)\r\n            return false;\r\n        if (this.width != obj.width || this.height != obj.height)\r\n            return false;\r\n        let elIndex = this.m.length;\r\n        while (elIndex--) {\r\n            if (this.m[elIndex] != obj.m[elIndex])\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    equalsMatrix(matrix, precision) {\r\n        precision = precision || NLA_PRECISION;\r\n        if (!(matrix instanceof Matrix))\r\n            throw new Error('not a matrix');\r\n        if (this.width != matrix.width || this.height != matrix.height)\r\n            return false;\r\n        let elIndex = this.m.length;\r\n        while (elIndex--) {\r\n            if (Math.abs(this.m[elIndex] - matrix.m[elIndex]) >= precision)\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    hashCode() {\r\n        let result = 0;\r\n        let elIndex = this.m.length;\r\n        while (elIndex--) {\r\n            result = result * 31 + floatHashCode(this.m[elIndex]);\r\n        }\r\n        return result;\r\n    }\r\n    // todo rename\r\n    isZero() {\r\n        let elIndex = this.m.length;\r\n        while (elIndex--) {\r\n            if (!eq0(this.m[elIndex])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    isOrthogonal() {\r\n        return this.isSquare() && this.transposed().times(this).equalsMatrix(Matrix.identityN(this.width));\r\n    }\r\n    /**\r\n     * Returns L, U, P such that L * U == P * this\r\n     */\r\n    luDecomposition() {\r\n        assertf(() => this.isSquare(), this.dim().toSource());\r\n        const dim = this.width;\r\n        const uRowArrays = this.asRowArrays(Float64Array);\r\n        const lRowArrays = arrayFromFunction(dim, (row) => new Float64Array(dim));\r\n        const pRowArrays = Matrix.identityN(dim).asRowArrays(Float64Array);\r\n        let currentRowIndex = 0;\r\n        for (let colIndex = 0; colIndex < dim; colIndex++) {\r\n            // find largest value in colIndex\r\n            let maxAbsValue = 0, pivotRowIndex = -1, numberOfNonZeroRows = 0;\r\n            for (let rowIndex = currentRowIndex; rowIndex < dim; rowIndex++) {\r\n                const el = uRowArrays[rowIndex][colIndex];\r\n                numberOfNonZeroRows += +(0 != el);\r\n                if (Math.abs(el) > maxAbsValue) {\r\n                    maxAbsValue = Math.abs(el);\r\n                    pivotRowIndex = rowIndex;\r\n                }\r\n            }\r\n            // TODO: check with isZero\r\n            if (0 == maxAbsValue) {\r\n                // column contains only zeros\r\n                continue;\r\n            }\r\n            assert(-1 !== pivotRowIndex);\r\n            // swap rows\r\n            arraySwap(uRowArrays, currentRowIndex, pivotRowIndex);\r\n            arraySwap(lRowArrays, currentRowIndex, pivotRowIndex);\r\n            arraySwap(pRowArrays, currentRowIndex, pivotRowIndex);\r\n            lRowArrays[colIndex][colIndex] = 1;\r\n            if (1 < numberOfNonZeroRows) {\r\n                // subtract pivot (now current) row from all below it\r\n                for (let rowIndex = currentRowIndex + 1; rowIndex < dim; rowIndex++) {\r\n                    const l = uRowArrays[rowIndex][colIndex] / uRowArrays[currentRowIndex][colIndex];\r\n                    lRowArrays[rowIndex][colIndex] = l;\r\n                    // subtract pivot row * l from row 'rowIndex'\r\n                    for (let colIndex2 = colIndex; colIndex2 < dim; colIndex2++) {\r\n                        uRowArrays[rowIndex][colIndex2] -= l * uRowArrays[currentRowIndex][colIndex2];\r\n                    }\r\n                }\r\n            }\r\n            currentRowIndex++; // this doesn't increase if pivot was zero\r\n        }\r\n        return {\r\n            L: Matrix.fromRowArrays2(lRowArrays),\r\n            U: Matrix.fromRowArrays2(uRowArrays),\r\n            P: Matrix.fromRowArrays2(pRowArrays),\r\n        };\r\n    }\r\n    gauss() {\r\n        const width = this.width, height = this.height;\r\n        const uRowArrays = this.asRowArrays(Float64Array);\r\n        const lRowArrays = arrayFromFunction(height, (row) => new Float64Array(width));\r\n        const pRowArrays = Matrix.identityN(height).asRowArrays(Float64Array);\r\n        let currentRowIndex = 0;\r\n        for (let colIndex = 0; colIndex < width; colIndex++) {\r\n            // console.log('currentRowIndex', currentRowIndex)\t// find largest value in colIndex\r\n            let maxAbsValue = 0, pivotRowIndex = -1, numberOfNonZeroRows = 0;\r\n            for (let rowIndex = currentRowIndex; rowIndex < height; rowIndex++) {\r\n                const el = uRowArrays[rowIndex][colIndex];\r\n                numberOfNonZeroRows += +(0 != el);\r\n                if (Math.abs(el) > maxAbsValue) {\r\n                    maxAbsValue = Math.abs(el);\r\n                    pivotRowIndex = rowIndex;\r\n                }\r\n            }\r\n            // TODO: check with isZero\r\n            if (0 == maxAbsValue) {\r\n                // column contains only zeros\r\n                continue;\r\n            }\r\n            assert(-1 !== pivotRowIndex);\r\n            // swap rows\r\n            arraySwap(uRowArrays, currentRowIndex, pivotRowIndex);\r\n            arraySwap(lRowArrays, currentRowIndex, pivotRowIndex);\r\n            arraySwap(pRowArrays, currentRowIndex, pivotRowIndex);\r\n            lRowArrays[currentRowIndex][colIndex] = 1;\r\n            if (1 < numberOfNonZeroRows) {\r\n                // subtract pivot (now current) row from all below it\r\n                for (let rowIndex = currentRowIndex + 1; rowIndex < height; rowIndex++) {\r\n                    const l = uRowArrays[rowIndex][colIndex] / uRowArrays[currentRowIndex][colIndex];\r\n                    lRowArrays[rowIndex][colIndex] = l;\r\n                    // subtract pivot row * l from row 'rowIndex'\r\n                    for (let colIndex2 = colIndex; colIndex2 < width; colIndex2++) {\r\n                        uRowArrays[rowIndex][colIndex2] -= l * uRowArrays[currentRowIndex][colIndex2];\r\n                    }\r\n                }\r\n            }\r\n            currentRowIndex++; // this doesn't increase if pivot was zero\r\n        }\r\n        return {\r\n            L: Matrix.fromRowArrays2(lRowArrays),\r\n            U: Matrix.fromRowArrays2(uRowArrays),\r\n            P: Matrix.fromRowArrays2(pRowArrays),\r\n        };\r\n    }\r\n    qrDecompositionGivensRotation() {\r\n        function matrixForCS(dim, i, k, c, s) {\r\n            const m = Matrix.identityN(dim);\r\n            m.setEl(i, i, c);\r\n            m.setEl(k, k, c);\r\n            m.setEl(i, k, s);\r\n            m.setEl(k, i, -s);\r\n            return m;\r\n        }\r\n        let qTransposed = Matrix.identityN(this.height);\r\n        for (let colIndex = 0; colIndex < this.width; colIndex++) {\r\n            // find largest value in colIndex\r\n            for (let rowIndex = colIndex + 1; rowIndex < this.height; rowIndex++) {\r\n                //console.log('row ', rowIndex, 'col ', colIndex)\r\n                const xi = this.e(colIndex, colIndex);\r\n                const xk = this.e(rowIndex, colIndex);\r\n                if (xk == 0) {\r\n                    continue;\r\n                }\r\n                const r = Math.sqrt(xi * xi + xk * xk);\r\n                const c = xi / r;\r\n                const s = xk / r;\r\n                // apply transformation on every column:\r\n                for (let col2 = colIndex; col2 < this.width; col2++) {\r\n                    const x1 = this.e(colIndex, col2) * c + this.e(rowIndex, col2) * s;\r\n                    const x2 = this.e(rowIndex, col2) * c - this.e(colIndex, col2) * s;\r\n                    this.setEl(colIndex, col2, x1);\r\n                    this.setEl(rowIndex, col2, x2);\r\n                }\r\n                //console.log('r ', r, 'c ', c, 's ', s, 'sigma', sigma(c, s))\r\n                //console.log(this.toString(),'cs\\n', matrixForCS(this.height, colIndex, rowIndex, c, s).toString())\r\n                qTransposed = matrixForCS(this.height, colIndex, rowIndex, c, s).times(qTransposed);\r\n            }\r\n        }\r\n        //console.log(qTransposed.transposed().toString(), this.toString(),\r\n        // qTransposed.transposed().times(this).toString())\r\n        return { Q: qTransposed.transposed(), R: this };\r\n    }\r\n    isPermutation() {\r\n        if (!this.isSquare())\r\n            return false;\r\n        if (this.m.some((value) => !eq0(value) && !eq(1, value)))\r\n            return false;\r\n        const rows = this.asRowArrays(Array);\r\n        if (rows.some((row) => row.filter((value) => eq(1, value)).length != 1))\r\n            return false;\r\n        const cols = this.asColArrays(Array);\r\n        if (cols.some((col) => col.filter((value) => eq(1, value)).length != 1))\r\n            return false;\r\n        return true;\r\n    }\r\n    isDiagonal(precision) {\r\n        let i = this.m.length;\r\n        while (i--) {\r\n            if (0 !== i % (this.width + 1) && !eq0(this.m[i]))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    isIdentity(precision) {\r\n        return this.isLowerUnitriangular(precision) && this.isUpperTriangular(precision);\r\n    }\r\n    isUpperTriangular(precision) {\r\n        precision = 'number' == typeof precision ? precision : NLA_PRECISION;\r\n        if (!this.isSquare())\r\n            return false;\r\n        for (let rowIndex = 1; rowIndex < this.height; rowIndex++) {\r\n            for (let colIndex = 0; colIndex < rowIndex; colIndex++) {\r\n                if (!eq0(this.m[rowIndex * this.width + colIndex], precision)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Returns x, so that this * x = b\r\n     * More efficient than calculating the inverse for few (~ <= this.height) values\r\n     */\r\n    solveLinearSystem(b) {\r\n        const lup = this.luDecomposition();\r\n        // console.log(lup.L.toString())\r\n        // console.log(lup.U.toString())\r\n        // console.log(lup.P.toString())\r\n        const y = lup.L.solveForwards(lup.P.timesVector(b));\r\n        const x = lup.U.solveBackwards(y);\r\n        return x;\r\n    }\r\n    isLowerUnitriangular(precision) {\r\n        precision = 'number' == typeof precision ? precision : NLA_PRECISION;\r\n        if (!this.isSquare())\r\n            return false;\r\n        for (let rowIndex = 0; rowIndex < this.height - 1; rowIndex++) {\r\n            for (let colIndex = rowIndex; colIndex < this.width; colIndex++) {\r\n                const el = this.m[rowIndex * this.width + colIndex];\r\n                if (rowIndex == colIndex ? !eq(1, el, precision) : !eq0(el, precision)) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    isLowerTriangular() {\r\n        if (!this.isSquare())\r\n            return false;\r\n        for (let rowIndex = 0; rowIndex < this.height - 1; rowIndex++) {\r\n            for (let colIndex = rowIndex + 1; colIndex < this.width; colIndex++) {\r\n                if (!eq0(this.m[rowIndex * this.width + colIndex])) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    solveBackwards(x) {\r\n        assertVectors(x);\r\n        assert(this.height == x.dim(), 'this.height == x.dim()');\r\n        assert(this.isUpperTriangular(), 'this.isUpperTriangular()\\n' + this.str);\r\n        const v = new Float64Array(this.width);\r\n        let rowIndex = this.height;\r\n        while (rowIndex--) {\r\n            let temp = x.v[rowIndex];\r\n            for (let colIndex = rowIndex + 1; colIndex < this.width; colIndex++) {\r\n                temp -= v[colIndex] * this.e(rowIndex, colIndex);\r\n            }\r\n            v[rowIndex] = temp / this.e(rowIndex, rowIndex);\r\n        }\r\n        return new Vector(v);\r\n    }\r\n    solveBackwardsMatrix(matrix) {\r\n        const colVectors = new Array(matrix.width);\r\n        let i = matrix.width;\r\n        while (i--) {\r\n            colVectors[i] = this.solveBackwards(matrix.col(i));\r\n        }\r\n        return Matrix.fromColVectors(colVectors);\r\n    }\r\n    solveForwardsMatrix(matrix) {\r\n        const colVectors = new Array(matrix.width);\r\n        let i = matrix.width;\r\n        while (i--) {\r\n            colVectors[i] = this.solveForwards(matrix.col(i));\r\n        }\r\n        return Matrix.fromColVectors(colVectors);\r\n    }\r\n    solveForwards(x) {\r\n        assertVectors(x);\r\n        assert(this.height == x.dim(), 'this.height == x.dim()');\r\n        assertf(() => this.isLowerTriangular(), this.toString());\r\n        const v = new Float64Array(this.width);\r\n        for (let rowIndex = 0; rowIndex < this.height; rowIndex++) {\r\n            let temp = x.v[rowIndex];\r\n            for (let colIndex = 0; colIndex < rowIndex; colIndex++) {\r\n                temp -= v[colIndex] * this.e(rowIndex, colIndex);\r\n            }\r\n            v[rowIndex] = temp / this.e(rowIndex, rowIndex);\r\n        }\r\n        return new Vector(v);\r\n    }\r\n    /**\r\n     * Calculates rank of matrix.\r\n     * Number of linearly independant row/column vectors.\r\n     * Is equal to the unmber of dimensions the image of the affine transformation represented this matrix has.\r\n     */\r\n    rank() {\r\n        const U = this.gauss().U;\r\n        //console.log(R.toString())\r\n        let rowIndex = this.height;\r\n        while (rowIndex-- && U.row(rowIndex).isZero()) {\r\n            console.log('RANK' + U.row(rowIndex).toString() + U.row(rowIndex).isZero());\r\n        }\r\n        return rowIndex + 1;\r\n    }\r\n    rowsIndependent() {\r\n        return this.height == this.rank();\r\n    }\r\n    colsIndependent() {\r\n        return this.width == this.rank();\r\n    }\r\n    asRowArrays(arrayConstructor) {\r\n        arrayConstructor = arrayConstructor || Float64Array;\r\n        let rowIndex = this.height;\r\n        const result = new Array(this.height);\r\n        while (rowIndex--) {\r\n            result[rowIndex] = this.rowArray(rowIndex, arrayConstructor);\r\n        }\r\n        return result;\r\n    }\r\n    asColArrays(arrayConstructor) {\r\n        arrayConstructor = arrayConstructor || Float64Array;\r\n        let colIndex = this.width;\r\n        const result = new Array(this.width);\r\n        while (colIndex--) {\r\n            result[colIndex] = this.colArray(colIndex, arrayConstructor);\r\n        }\r\n        return result;\r\n    }\r\n    rowArray(rowIndex, arrayConstructor) {\r\n        arrayConstructor = arrayConstructor || Float64Array;\r\n        const result = new arrayConstructor(this.width);\r\n        arrayCopy(this.m, rowIndex * this.width, result, 0, this.width);\r\n        return result;\r\n    }\r\n    colArray(colIndex, arrayConstructor) {\r\n        arrayConstructor = arrayConstructor || Float64Array;\r\n        const result = new arrayConstructor(this.width);\r\n        arrayCopyStep(this.m, colIndex, this.height, result, 0, 1, this.height);\r\n        return result;\r\n    }\r\n    subMatrix(firstColIndex, subWidth, firstRowIndex, subHeight) {\r\n        assert(firstColIndex + subWidth > this.width || firstRowIndex + subHeight > this.height);\r\n        const m = new Float64Array(this.height);\r\n        arrayCopyBlocks(this.m, firstColIndex, this.width, m, 0, subWidth, subHeight, subWidth);\r\n        return new Matrix(subWidth, subHeight, m);\r\n    }\r\n    map(fn) {\r\n        return new Matrix(this.width, this.height, this.m.map(fn));\r\n    }\r\n    dimEquals(matrix) {\r\n        assertInst(Matrix, matrix);\r\n        return this.width == matrix.width && this.height == matrix.height;\r\n    }\r\n    inversed() {\r\n        const lup = this.luDecomposition();\r\n        const y = lup.L.solveForwardsMatrix(lup.P);\r\n        console.log(y);\r\n        const inverse = lup.U.solveBackwardsMatrix(y);\r\n        return inverse;\r\n    }\r\n    inversed3() {\r\n        assertf(() => 3 == this.width && 3 == this.height);\r\n        const result = Matrix.forWidthHeight(3, 3), m = this.m, r = result.m;\r\n        r[0] = m[4] * m[8] - m[5] * m[7];\r\n        r[1] = -m[1] * m[8] + m[2] * m[7];\r\n        r[2] = m[1] * m[5] - m[2] * m[4];\r\n        r[3] = -m[3] * m[8] + m[5] * m[6];\r\n        r[4] = m[0] * m[8] - m[2] * m[6];\r\n        r[5] = -m[0] * m[5] + m[2] * m[3];\r\n        r[6] = m[3] * m[7] - m[4] * m[6];\r\n        r[7] = -m[0] * m[7] + m[1] * m[6];\r\n        r[8] = m[0] * m[4] - m[1] * m[3];\r\n        const det = m[0] * r[0] + m[1] * r[3] + m[2] * r[6];\r\n        let i = 9;\r\n        while (i--) {\r\n            r[i] /= det;\r\n        }\r\n        return result;\r\n    }\r\n    inversed2() {\r\n        assertf(() => 2 == this.width && 2 == this.height);\r\n        const result = Matrix.forWidthHeight(2, 2), m = this.m, r = result.m;\r\n        const det = m[0] * m[3] - m[1] * r[2];\r\n        r[0] = m[3] / det;\r\n        r[1] = -m[2] / det;\r\n        r[2] = -m[1] / det;\r\n        r[3] = m[0] / det;\r\n        return result;\r\n    }\r\n    canMultiply(matrix) {\r\n        assertInst(Matrix, matrix);\r\n        return this.width == matrix.height;\r\n    }\r\n    times(matrix) {\r\n        assertInst(Matrix, matrix);\r\n        assert(this.canMultiply(matrix), `Cannot multiply this {this.dimString()} by matrix {matrix.dimString()}`);\r\n        const nWidth = matrix.width, nHeight = this.height, n = this.width;\r\n        const nM = new Float64Array(nWidth * nHeight);\r\n        let nRowIndex = nHeight;\r\n        while (nRowIndex--) {\r\n            let nColIndex = nWidth;\r\n            while (nColIndex--) {\r\n                let result = 0;\r\n                let i = n;\r\n                while (i--) {\r\n                    result += this.m[nRowIndex * n + i] * matrix.m[i * nWidth + nColIndex];\r\n                }\r\n                nM[nRowIndex * nWidth + nColIndex] = result;\r\n            }\r\n        }\r\n        return new Matrix(nWidth, nHeight, nM);\r\n    }\r\n    timesVector(v) {\r\n        assertVectors(v);\r\n        assert(this.width == v.dim());\r\n        const nHeight = this.height, n = this.width;\r\n        const nM = new Float64Array(nHeight);\r\n        let nRowIndex = nHeight;\r\n        while (nRowIndex--) {\r\n            let result = 0;\r\n            let i = n;\r\n            while (i--) {\r\n                result += this.m[nRowIndex * n + i] * v.v[i];\r\n            }\r\n            nM[nRowIndex] = result;\r\n        }\r\n        return new Vector(nM);\r\n    }\r\n    transposed() {\r\n        const tWidth = this.height, tHeight = this.width;\r\n        const tM = new Float64Array(tWidth * tHeight);\r\n        let tRowIndex = tHeight;\r\n        while (tRowIndex--) {\r\n            let tColIndex = tWidth;\r\n            while (tColIndex--) {\r\n                tM[tRowIndex * tWidth + tColIndex] = this.m[tColIndex * tHeight + tRowIndex];\r\n            }\r\n        }\r\n        return new Matrix(tWidth, tHeight, tM);\r\n    }\r\n    /**\r\n     * In-place transpose.\r\n     */\r\n    transpose() {\r\n        const h = this.height, w = this.width, tM = this.m;\r\n        let tRowIndex = h;\r\n        while (tRowIndex--) {\r\n            let tColIndex = Math.min(tRowIndex, w);\r\n            while (tColIndex--) {\r\n                console.log('col', tColIndex, 'row', tRowIndex);\r\n                const temp = tM[tRowIndex * w + tColIndex];\r\n                tM[tRowIndex * w + tColIndex] = tM[tColIndex * h + tRowIndex];\r\n                tM[tColIndex * h + tRowIndex] = temp;\r\n            }\r\n        }\r\n        this.width = h;\r\n        this.height = w;\r\n    }\r\n    isSquare() {\r\n        return this.height == this.width;\r\n    }\r\n    diagonal() {\r\n        if (!this.isSquare()) {\r\n            throw new Error('!!');\r\n        }\r\n        const v = new Float64Array(this.width);\r\n        let elIndex = this.width * (this.width + 1);\r\n        let vIndex = this.width;\r\n        while (vIndex--) {\r\n            elIndex -= this.width + 1;\r\n            v[vIndex] = this.m[elIndex];\r\n        }\r\n        return new Vector(v);\r\n    }\r\n    maxEl() {\r\n        return Math.max.apply(undefined, this.m);\r\n    }\r\n    minEl() {\r\n        return Math.min.apply(undefined, this.m);\r\n    }\r\n    maxAbsColSum() {\r\n        let result = 0;\r\n        let colIndex = this.width;\r\n        while (colIndex--) {\r\n            let absSum = 0;\r\n            let rowIndex = this.height;\r\n            while (rowIndex--) {\r\n                absSum += Math.abs(this.m[rowIndex * this.width + colIndex]);\r\n            }\r\n            result = Math.max(result, absSum);\r\n        }\r\n        return result;\r\n    }\r\n    maxAbsRowSum() {\r\n        let result = 0;\r\n        let rowIndex = this.height;\r\n        while (rowIndex--) {\r\n            let absSum = 0;\r\n            let colIndex = this.width;\r\n            while (colIndex--) {\r\n                absSum += Math.abs(this.m[rowIndex * this.width + colIndex]);\r\n            }\r\n            result = Math.max(result, absSum);\r\n        }\r\n        return result;\r\n    }\r\n    getTriangularDeterminant() {\r\n        assert(this.isUpperTriangular() || this.isLowerTriangular(), 'not a triangular matrix');\r\n        let product = 1;\r\n        let elIndex = this.width * (this.width + 1);\r\n        while (elIndex) {\r\n            elIndex -= this.width + 1;\r\n            product *= this.m[elIndex];\r\n        }\r\n        return product;\r\n    }\r\n    /**\r\n     * Calculates the determinant by first calculating the LU decomposition. If you already have that, use\r\n     * U.getTriangularDeterminant()\r\n     */\r\n    getDeterminant() {\r\n        // PA = LU\r\n        // det(A) * det(B) = det(A * B)\r\n        // det(P) == 1 (permutation matrix)\r\n        // det(L) == 1 (main diagonal is 1s\r\n        // =>  det(A) == det(U)\r\n        return this.luDecomposition().U.getTriangularDeterminant();\r\n    }\r\n    hasFullRank() {\r\n        return Math.min(this.width, this.height) == this.rank();\r\n    }\r\n    permutationAsIndexMap() {\r\n        assertf(() => this.isPermutation());\r\n        const result = new Array(this.height);\r\n        let i = this.height;\r\n        while (i--) {\r\n            const searchIndexStart = i * this.width;\r\n            let searchIndex = searchIndexStart;\r\n            while (this.m[searchIndex] < 0.5)\r\n                searchIndex++;\r\n            result[i] = searchIndex - searchIndexStart;\r\n        }\r\n        return result;\r\n    }\r\n    getDependentRowIndexes(gauss = this.gauss()) {\r\n        const { L, U, P } = gauss;\r\n        const dependents = new Array(this.height);\r\n        let uRowIndex = this.height;\r\n        while (uRowIndex--) {\r\n            const uRow = U.row(uRowIndex);\r\n            if (uRow.length() < NLA_PRECISION) {\r\n                dependents[uRowIndex] = true;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        let lRowIndex = this.height;\r\n        while (lRowIndex--) {\r\n            if (dependents[lRowIndex]) {\r\n                let lColIndex = Math.min(lRowIndex, this.width);\r\n                while (lColIndex--) {\r\n                    if (0 !== L.e(lRowIndex, lColIndex)) {\r\n                        dependents[lColIndex] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        console.log('m\\n', this.toString(x => '' + x));\r\n        console.log('L\\n', L.toString(x => '' + x));\r\n        console.log('U\\n', U.toString(x => '' + x));\r\n        console.log('P\\n', P.toString(x => '' + x));\r\n        const indexMap = P.permutationAsIndexMap();\r\n        const dependentRowIndexes = dependents.map((b, index) => b && indexMap[index]).filter(x => x != undefined);\r\n        return dependentRowIndexes;\r\n    }\r\n}\n\nconst { abs, PI, sign } = Math;\r\nconst TAU = 2 * PI;\r\n/** @define {boolean} */\r\nconst NLA_DEBUG = true;\r\nconst NLA_PRECISION = 1 / (1 << 26);\r\nconsole.log('NLA_PRECISION', NLA_PRECISION);\r\nconsole.log('NLA_DEBUG', NLA_DEBUG);\r\nlet oldConsole = undefined;\r\nfunction disableConsole() {\r\n    oldConsole = console.log;\r\n    console.log = function () { };\r\n}\r\nfunction enableConsole() {\r\n    if (oldConsole) {\r\n        console.log = oldConsole;\r\n    }\r\n}\r\nfunction hasConstructor(instance, cons) {\r\n    return instance.constructor == cons;\r\n}\r\nfunction getIntervals(ts, min, max) {\r\n    ts.sort((a, b) => a - b);\r\n    if (!eq(ts[0], min)) {\r\n        ts.splice(0, 0, min);\r\n    }\r\n    if (!eq(ts.last, max)) {\r\n        ts.push(max);\r\n    }\r\n    return arrayFromFunction(ts.length - 1, i => [ts[i], ts[i + 1]]);\r\n}\r\nfunction assertVectors(...vectors) {\r\n    if (NLA_DEBUG) {\r\n        for (let i = 0; i < arguments.length; i++) {\r\n            if (!(arguments[i] instanceof V3 || arguments[i] instanceof Vector)) {\r\n                throw new Error('assertVectors arguments[' + (i) + '] is not a vector. ' + typeof arguments[i] + ' == typeof ' + arguments[i]);\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction assertInst(what, ...objs) {\r\n    if (NLA_DEBUG) {\r\n        for (let i = 0; i < objs.length; i++) {\r\n            if (!(objs[i] instanceof what)) {\r\n                throw new Error('assertInst objs[' + (i) + '] is not a ' + what.prototype.name + '. ' + objs[i].constructor.name + objs[i]);\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction assertNumbers(...numbers) {\r\n    if (NLA_DEBUG) {\r\n        for (let i = 0; i < numbers.length; i++) {\r\n            if ('number' !== typeof numbers[i]) {\r\n                throw new Error('assertNumbers arguments[' + (i) + '] is not a number. ' + typeof numbers[i] + ' == typeof ' + numbers[i]);\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction assert(value, ...messages) {\r\n    if (NLA_DEBUG && !value) {\r\n        throw new Error('assert failed: '\r\n            + messages.map(message => ('function' === typeof message ? message() : message || '')).join('\\n'));\r\n    }\r\n    return true;\r\n}\r\nfunction assertNever(value) {\r\n    throw new Error();\r\n}\r\nfunction assertf(f, ...messages) {\r\n    if (!f()) {\r\n        throw new Error('assertf failed: ' + f.toString()\r\n            + messages.map(message => ('function' === typeof message ? message() : message || '')).join('\\n'));\r\n    }\r\n}\r\nfunction lerp(a, b, t) {\r\n    return a * (1 - t) + b * t;\r\n}\r\nconst originalNumberToString = Number.prototype.toString;\r\nNumber.prototype.toString = function (radix) {\r\n    if (PI == this) {\r\n        return 'PI';\r\n    }\r\n    return originalNumberToString.call(this, radix);\r\n};\r\nconst eq0 = (x, EPS = NLA_PRECISION) => Math.abs(x) <= EPS;\r\nconst eq = (x, y, EPS = NLA_PRECISION) => Math.abs(x - y) <= EPS;\r\nconst lt = (x, y, EPS = NLA_PRECISION) => x - y < -EPS;\r\nconst gt = (x, y, EPS = NLA_PRECISION) => y - x < -EPS;\r\nconst le = (x, y, EPS = NLA_PRECISION) => x - y <= EPS;\r\nconst ge = (x, y, EPS = NLA_PRECISION) => y - x <= EPS;\r\nconst eqAngle = (x, y) => zeroAngle(x - y);\r\nconst zeroAngle = (x) => ((x % (2 * Math.PI)) + 2 * Math.PI + NLA_PRECISION) % (2 * Math.PI) < 2 * NLA_PRECISION;\r\nconst snap = (x, to) => Math.abs(x - to) <= NLA_PRECISION ? to : x;\r\nconst snap2 = (x, ...to) => to.reduce((x, to) => Math.abs(x - to) <= NLA_PRECISION\r\n    ? to\r\n    : x, x);\r\nconst snapEPS = (x, EPS, ...to) => to.reduce((x, to) => Math.abs(x - to) <= EPS\r\n    ? to\r\n    : x, x);\r\nconst snap0 = (x, EPS = NLA_PRECISION) => Math.abs(x) <= EPS ? 0 : x;\r\nconst canonAngle = (x) => ((x % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);\r\n/** @deprecated */ const eq02 = eq0;\r\n/** @deprecated */ const eq2 = eq;\r\n/**\r\n * Decimal adjustment of a number.\r\n *\r\n * @param f  The type of adjustment.\r\n * @param value The number.\r\n * @param exp The exponent (the 10 logarithm of the adjustment base).\r\n * @returns The adjusted value.\r\n */\r\nfunction decimalAdjust(f, value, exp) {\r\n    // If the exp is undefined or zero...\r\n    if (typeof exp === 'undefined' || +exp === 0) {\r\n        return f(value);\r\n    }\r\n    value = +value;\r\n    exp = +exp;\r\n    // If the value is not a number or the exp is not an integer...\r\n    if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {\r\n        return NaN;\r\n    }\r\n    // Shift\r\n    let vs = value.toString().split('e');\r\n    value = f(+(vs[0] + 'e' + (vs[1] ? (+vs[1] - exp) : -exp)));\r\n    // Shift back\r\n    vs = value.toString().split('e');\r\n    return +(vs[0] + 'e' + (vs[1] ? (+vs[1] + exp) : exp));\r\n}\r\nconst round10 = decimalAdjust.bind(undefined, Math.round);\r\nconst floor10 = decimalAdjust.bind(undefined, Math.floor);\r\nconst ceil10 = decimalAdjust.bind(undefined, Math.ceil);\r\nconst GOLDEN_RATIO = (1 + Math.sqrt(5)) / 2;\r\nfunction repeatString(count, str) {\r\n    if (count == 0) {\r\n        return '';\r\n    }\r\n    count *= str.length;\r\n    const halfCharLength = count / 2;\r\n    let result = str;\r\n    // double the input until it is long enough.\r\n    while (result.length <= halfCharLength) {\r\n        result += result;\r\n    }\r\n    // use substring to hit the precise length target without\r\n    // using extra memory\r\n    return result + result.substring(0, count - result.length);\r\n}\r\nfunction mod(a, b) {\r\n    return ((a % b) + b) % b;\r\n}\r\nfunction arraySwap(arr, i, j) {\r\n    const temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n}\r\nfunction arrayCopy(src, sstart, dst, dstart, length) {\r\n    dstart += length;\r\n    length += sstart;\r\n    while (length-- > sstart) {\r\n        dst[--dstart] = src[length];\r\n    }\r\n}\r\nfunction clamp(val, min, max) {\r\n    assertNumbers(val, min, max);\r\n    return Math.max(min, Math.min(max, val));\r\n}\r\nfunction between(val, min, max) {\r\n    return min <= val && val <= max;\r\n}\r\nfunction fuzzyBetween(val, min, max) {\r\n    return le(min, val) && le(val, max);\r\n}\r\nfunction randomColor() {\r\n    return Math.floor(Math.random() * 0x1000000);\r\n}\r\nfunction mapPush(map, key, val) {\r\n    const array = map.get(key);\r\n    if (array) {\r\n        array.push(val);\r\n    }\r\n    else {\r\n        map.set(key, [val]);\r\n    }\r\n}\r\nfunction arrayCopyStep(src, sstart, sstep, dst, dstart, dstep, count) {\r\n    let srcIndex = sstart + count * sstep;\r\n    let dIndex = dstart + count * dstep;\r\n    while (srcIndex > sstart) {\r\n        dst[dIndex -= dstep] = src[srcIndex -= sstep];\r\n    }\r\n}\r\nfunction arrayCopyBlocks(src, sstart, sstep, dst, dstart, dstep, blockSize, blockCount) {\r\n    for (let i = 0; i < blockCount; i++) {\r\n        arrayCopy(src, sstart + sstep * i, dst, dstart + dstep * i, blockSize);\r\n    }\r\n}\r\nfunction arrayRange(startInclusive, endExclusive, step = 1) {\r\n    assertNumbers(startInclusive, step);\r\n    //console.log(Math.ceil((endExclusive - startInclusive) / step))\r\n    const arrLength = Math.ceil((endExclusive - startInclusive) / step);\r\n    const result = new Array(arrLength); // '- startInclusive' so that chunk in the last row will also be selected, even\r\n    // if the row is not complete\r\n    for (let i = startInclusive, index = 0; index < arrLength; i += step, index++) {\r\n        result[index] = i;\r\n    }\r\n    return result;\r\n}\r\nfunction arrayFromFunction(length, f) {\r\n    assertNumbers(length);\r\n    assert('function' == typeof f);\r\n    const a = new Array(length);\r\n    let elIndex = length;\r\n    while (elIndex--) {\r\n        a[elIndex] = f(elIndex);\r\n    }\r\n    return a;\r\n}\r\nfunction fuzzyUniques(vals) {\r\n    const round = (val) => Math.floor(val * (1 << 26)) / (1 << 26);\r\n    const map = new Map();\r\n    for (let i = 0; i < vals.length; i++) {\r\n        const val = vals[i], roundVal = round(val);\r\n        let key;\r\n        if (!map.has(roundVal)\r\n            && !((key = map.get(roundVal - 1 / (1 << 26))) && eq(key, val))\r\n            && !((key = map.get(roundVal + 1 / (1 << 26))) && eq(key, val))) {\r\n            map.set(roundVal, val);\r\n        }\r\n    }\r\n    return Array.from(map.values());\r\n}\r\nfunction fuzzyUniquesF(vals, f) {\r\n    const round = (val) => Math.floor(val * (1 << 26)) / (1 << 26);\r\n    const map = new Map();\r\n    for (let i = 0; i < vals.length; i++) {\r\n        const val = vals[i], roundVal = round(f(val));\r\n        let key;\r\n        if (!map.has(roundVal)\r\n            && !((key = map.get(roundVal - 1 / (1 << 26))) && eq(key, f(val)))\r\n            && !((key = map.get(roundVal + 1 / (1 << 26))) && eq(key, f(val)))) {\r\n            map.set(roundVal, val);\r\n        }\r\n    }\r\n    return Array.from(map.values());\r\n}\r\nfunction addOwnProperties(target, props) {\r\n    Object.getOwnPropertyNames(props).forEach(key => {\r\n        //console.log(props, key)\r\n        if (target.hasOwnProperty(key)) {\r\n            console.warn('target ', target, ' already has property ', key, target[key]);\r\n        }\r\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(props, key));\r\n    });\r\n}\r\n//function defineClass(name, parent, constructor, props, statics) {\r\n//\tassertf(() => 'function' == typeof constructor, 'function' == typeof constructor)\r\n//\tconstructor.prototype = defineObject(parent && parent.prototype, props)\r\n//\tconstructor.prototype.constructor = constructor\r\n//\tObject.defineProperty(constructor.prototype, 'name', {value: name})\r\n//\tstatics && addOwnProperties(constructor, statics)\r\n//\treturn constructor\r\n//}\r\nlet defaultRoundFunction = (x) => x; // Math.round10(x, -4)\r\nfunction forceFinite(val) {\r\n    const valNum = parseFloat(val.replace(',', '.').replace(/^[^0-9,\\.\\-]/, ''));\r\n    return Number.isFinite(valNum) ? valNum : 0;\r\n}\r\nconst MINUS = (a, b) => a - b;\r\nfunction floatHashCode(f) {\r\n    return ~~(f * (1 << 28));\r\n}\r\n/**\r\n * combinations(2) will generate\r\n * [0,0] [0,1] [1,1] [0,2] [1,2] [2,2]\r\n */\r\nfunction* combinations(n) {\r\n    for (let i = 0; i < n; i++) {\r\n        for (let j = i; j < n; j++) {\r\n            yield { i: i, j: j };\r\n        }\r\n    }\r\n}\r\n/* The arithmetic-geometric mean of two non-negative numbers */\r\nfunction arithmeticGeometricMean(x, y) {\r\n    assertf(() => lt(0, x));\r\n    assertf(() => lt(0, y));\r\n    let a = x, g = y;\r\n    let i = 30;\r\n    while (i-- && a != g) {\r\n        [a, g] = [(a + g) / 2, Math.sqrt(a * g)];\r\n    }\r\n    assert(i != -1);\r\n    return a;\r\n}\r\n/**\r\n * incomplete elliptic integral of the first kind\r\n * EllipticF(phi, k2) = INT[0; phi] 1 / sqrt(1 - k2 * sin²(phi)) dphi\r\n */\r\nfunction EllipticF(phi, k2) {\r\n    return gaussLegendreQuadrature24(phi => Math.pow(1 - k2 * Math.pow(Math.sin(phi), 2), -0.5), 0, phi);\r\n}\r\n/**\r\n * incomplete elliptic integral of the second kind\r\n * EllipticE(phi, k2) = INT[0; phi] sqrt(1 - k2 * sin²(phi)) dphi\r\n */\r\nfunction EllipticE(phi, k2) {\r\n    return gaussLegendreQuadrature24(phi => Math.pow(1 - k2 * Math.pow(Math.sin(phi), 2), 0.5), 0, phi);\r\n}\r\nconst DEG = .017453292519943295;\r\nfunction rad2deg(rad) {\r\n    //  discuss at: http://phpjs.org/functions/deg2rad/\r\n    // original by: Enrique Gonzalez\r\n    // improved by: Thomas Grainger (http://graingert.co.uk)\r\n    //   example 1: deg2rad(45)\r\n    //   returns 1: 0.7853981633974483\r\n    return rad / DEG;\r\n}\r\n/**\r\n * numberToStr(2/3) == '0.6p'\r\n * numberToStr(7/12) == '0.583p'\r\n * numberToStr(2/7) == '0.285714pppppp'\r\n * numberToStr(NLA_PRECISION) == '0+'\r\n * numberToStr(-NLA_PRECISION) == '0-'\r\n * numberToStr(2-NLA_PRECISION) == '2-'\r\n * numberToStr(0) == '0='\r\n *\r\n */\r\nfunction numberToStr(value, length) {\r\n    let minAbsDiff = Infinity, closestValue = undefined, closestValueStr = undefined;\r\n    function test(testValue, testValueStr) {\r\n        const absDiff = Math.abs(testValue - value);\r\n        console.log(testValue, testValueStr, absDiff);\r\n        if (absDiff < minAbsDiff) {\r\n            minAbsDiff = absDiff;\r\n            closestValue = testValue;\r\n            closestValueStr = testValueStr;\r\n        }\r\n        return 0 == absDiff;\r\n    }\r\n    function overline(str) {\r\n        return str.split('').map(c => c + '\\u0304').join('');\r\n    }\r\n    if (test(parseFloat(value.toFixed(length)), value.toFixed(length)))\r\n        return closestValueStr + '=';\r\n    const valueStr = '' + value;\r\n    const toDecimal = valueStr.substr(0, valueStr.indexOf('.') + 1);\r\n    const decimals = valueStr.substr(valueStr.indexOf('.') + 1);\r\n    for (let startPos = 0; startPos < length; startPos++) {\r\n        for (let endPos = startPos + 1; endPos <= length; endPos++) {\r\n            const prefixDecimals = decimals.substr(0, startPos);\r\n            const period = decimals.substr(startPos, endPos);\r\n            const testValue = parseFloat(toDecimal + prefixDecimals + repeatString(Math.ceil((17 - startPos) / period.length), period));\r\n            if (test(testValue, toDecimal + prefixDecimals + overline(period)))\r\n                return closestValueStr + '=';\r\n        }\r\n    }\r\n    return closestValueStr + (closestValue < value ? '-' : '+');\r\n}\r\nfunction time(f) {\r\n    const start = performance.now();\r\n    f();\r\n    return performance.now() - start;\r\n}\r\nObject.map = function (o, f, context = undefined) {\r\n    const result = {};\r\n    for (const key in o) {\r\n        result[key] = f.call(context, o[key], key, o);\r\n    }\r\n    return result;\r\n};\r\nArray.prototype.emod = function (i) {\r\n    return this[i % this.length];\r\n};\r\nArray.prototype.sliceStep = function (start, end, step, chunkSize = 1) {\r\n    assertNumbers(start, step);\r\n    start < 0 && (start = this.length + start);\r\n    end <= 0 && (end = this.length + end);\r\n    const resultLength = Math.ceil((end - start) / step);\r\n    const result = new Array(resultLength); // '- start' so that chunk in the last row\r\n    // will also be selected, even if the row is\r\n    // not complete\r\n    let index = 0;\r\n    for (let i = start; i < end; i += step) {\r\n        for (let j = i; j < Math.min(i + chunkSize, end); j++) {\r\n            result[index++] = this[j];\r\n        }\r\n    }\r\n    assert(resultLength == index);\r\n    return result;\r\n};\r\nArray.prototype.equals = function (obj) {\r\n    if (this === obj)\r\n        return true;\r\n    if (Object.getPrototypeOf(obj) !== Array.prototype)\r\n        return false;\r\n    if (this.length !== obj.length)\r\n        return false;\r\n    for (let i = 0; i < this.length; i++) {\r\n        if (!this[i].equals(obj[i]))\r\n            return false;\r\n    }\r\n    return true;\r\n};\r\nArray.prototype.hashCode = function () {\r\n    let hashCode = 0;\r\n    for (let i = 0; i < this.length; i++) {\r\n        hashCode = hashCode * 31 + this[i].hashCode() | 0;\r\n    }\r\n    return hashCode | 0;\r\n};\r\nArray.prototype.mapFilter = function (f) {\r\n    const length = this.length, result = [];\r\n    for (let i = 0; i < length; i++) {\r\n        if (i in this) {\r\n            const val = f(this[i], i, this);\r\n            if (val) {\r\n                result.push(val);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n};\r\nArray.prototype.flatMap = function (f) {\r\n    return Array.prototype.concat.apply([], this.map(f));\r\n};\r\nArray.prototype.clear = function (...newItems) {\r\n    return this.splice(0, this.length, ...newItems);\r\n};\r\n/**\r\n *\r\n * @returns Array.prototype.concat.apply([], this)\r\n */\r\nArray.prototype.concatenated = function () {\r\n    return Array.prototype.concat.apply([], this);\r\n};\r\nArray.prototype.min = function () {\r\n    let i = this.length, max = Infinity;\r\n    while (i--) {\r\n        const val = this[i];\r\n        if (max > val)\r\n            max = val;\r\n    }\r\n    return max;\r\n};\r\nArray.prototype.max = function () {\r\n    // faster and no limit on array size, see https://jsperf.com/math-max-apply-vs-loop/2\r\n    let i = this.length, max = -Infinity;\r\n    while (i--) {\r\n        const val = this[i];\r\n        if (max < val)\r\n            max = val;\r\n    }\r\n    return max;\r\n};\r\nArray.prototype.indexWithMax = function (f) {\r\n    if (this.length == 0) {\r\n        return -1;\r\n    }\r\n    let i = this.length, result = -1, maxVal = -Infinity;\r\n    while (i--) {\r\n        const val = f(this[i], i, this);\r\n        if (val > maxVal) {\r\n            maxVal = val;\r\n            result = i;\r\n        }\r\n    }\r\n    return result;\r\n};\r\nArray.prototype.withMax = function (f) {\r\n    let i = this.length, result = undefined, maxVal = -Infinity;\r\n    while (i--) {\r\n        const el = this[i], val = f(el, i, this);\r\n        if (val > maxVal) {\r\n            maxVal = val;\r\n            result = el;\r\n        }\r\n    }\r\n    return result;\r\n};\r\n/**\r\n Returns the sum of the absolute values of the components of this vector.\r\n E.g. V(1, -2, 3) === abs(1) + abs(-2) + abs(3) === 1 + 2 + 3 === 6\r\n */\r\nArray.prototype.absSum = function () {\r\n    let i = this.length;\r\n    let result = 0;\r\n    while (i--) {\r\n        result += Math.abs(this[i]);\r\n    }\r\n    return result;\r\n};\r\nArray.prototype.sum = function () {\r\n    let i = this.length;\r\n    let result = 0;\r\n    while (i--) {\r\n        result += this[i];\r\n    }\r\n    return result;\r\n};\r\nArray.prototype.sumInPlaceTree = function () {\r\n    if (0 == this.length)\r\n        return 0;\r\n    let l = this.length;\r\n    while (l != 1) {\r\n        const lHalfFloor = Math.floor(l / 2);\r\n        const lHalfCeil = Math.ceil(l / 2);\r\n        for (let i = 0; i < lHalfFloor; i++) {\r\n            this[i] += this[i + lHalfCeil];\r\n        }\r\n        l = lHalfCeil;\r\n    }\r\n    return this[0];\r\n};\r\nArray.prototype.isEmpty = function () {\r\n    return 0 == this.length;\r\n};\r\nArray.prototype.unique = function () {\r\n    const uniqueSet = new Set(this);\r\n    return Array.from(uniqueSet);\r\n};\r\nArray.prototype.remove = function (o) {\r\n    const index = this.indexOf(o);\r\n    if (index != -1) {\r\n        this.splice(index, 1);\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\nArray.prototype.removeIndex = function (i) {\r\n    const result = this[i];\r\n    this.splice(i, 1);\r\n    return result;\r\n};\r\nArray.prototype.bagRemoveIndex = function (i) {\r\n    const result = this[i];\r\n    if (i == this.length - 1) {\r\n        this.pop();\r\n    }\r\n    else {\r\n        this[i] = this.pop();\r\n    }\r\n    return result;\r\n};\r\nArray.prototype.removeMatch = function (matcher) {\r\n    const index = this.findIndex(matcher);\r\n    if (-1 != index) {\r\n        return this.removeIndex(index);\r\n    }\r\n};\r\nArray.prototype.removeAll = function (o) {\r\n    let i = o.length;\r\n    while (i--) {\r\n        this.remove(o[i]);\r\n    }\r\n};\r\nArray.prototype.toggle = function (o) {\r\n    const index = this.indexOf(o);\r\n    if (index != -1) {\r\n        this.splice(index, 1);\r\n        return false;\r\n    }\r\n    else {\r\n        this.push(o);\r\n        return true;\r\n    }\r\n};\r\nArray.prototype.bagToggle = function (o) {\r\n    const index = this.indexOf(o);\r\n    if (index != -1) {\r\n        this.bagRemoveIndex(index);\r\n        return false;\r\n    }\r\n    else {\r\n        this.push(o);\r\n        return true;\r\n    }\r\n};\r\nArray.prototype.binaryIndexOf = function (searchElement, cmp = (a, b) => a - b) {\r\n    let minIndex = 0;\r\n    let maxIndex = this.length - 1;\r\n    let currentIndex;\r\n    let currentElement;\r\n    while (minIndex <= maxIndex) {\r\n        currentIndex = (minIndex + maxIndex) / 2 | 0;\r\n        currentElement = this[currentIndex];\r\n        if (cmp(currentElement, searchElement) < 0) {\r\n            minIndex = currentIndex + 1;\r\n        }\r\n        else if (cmp(currentElement, searchElement) > 0) {\r\n            maxIndex = currentIndex - 1;\r\n        }\r\n        else {\r\n            return currentIndex;\r\n        }\r\n    }\r\n    return -minIndex - 1;\r\n};\r\nArray.prototype.binaryInsert = function (el, cmp = MINUS) {\r\n    let minIndex = 0;\r\n    let maxIndex = this.length;\r\n    let currentIndex;\r\n    let currentElement;\r\n    while (minIndex < maxIndex) {\r\n        currentIndex = ~~((minIndex + maxIndex) / 2);\r\n        currentElement = this[currentIndex];\r\n        if (cmp(currentElement, el) < 0) {\r\n            minIndex = currentIndex + 1;\r\n        }\r\n        else {\r\n            maxIndex = currentIndex;\r\n        }\r\n    }\r\n    this.splice(minIndex, 0, el);\r\n};\r\nObject.defineProperty(Array.prototype, 'last', {\r\n    get() {\r\n        return this[this.length - 1];\r\n    },\r\n    set(val) {\r\n        this[this.length - 1] = val;\r\n    },\r\n});\r\nString.prototype.capitalizeFirstLetter = function () {\r\n    return this.charAt(0).toUpperCase() + this.slice(1);\r\n};\r\nString.prototype.equals = function (x) {\r\n    return this == x;\r\n};\r\nfunction SCE(o) {\r\n    switch (typeof o) {\r\n        case 'undefined':\r\n            return 'undefined';\r\n        case 'function':\r\n            return o.toString();\r\n        case 'number':\r\n            return '' + o;\r\n        case 'string':\r\n            return JSON.stringify(o);\r\n        case 'object':\r\n            if (null == o) {\r\n                return 'null';\r\n            }\r\n            else {\r\n                return o.sce;\r\n            }\r\n        default:\r\n            throw new Error();\r\n    }\r\n}\r\nfunction STR(o) {\r\n    return o.str;\r\n}\r\nObject.defineProperty(Object.prototype, 'sce', { get: function () { return this.toSource(); } });\r\nObject.defineProperty(Object.prototype, 'str', { get: function () { return this.toString(); } });\r\nif (!Object.prototype.toSource) {\r\n    Object.defineProperty(Object.prototype, 'toSource', { value: function () { return JSON.stringify(this, SCE); } });\r\n}\r\n//const NLA = {}\r\n//for (let key in ARRAY_UTILITIES) {\r\n//    const nlaName = 'array' + key.capitalizeFirstLetter()\r\n//    assert(!NLA[nlaName])\r\n//    NLA[nlaName] = (arr, ...rest) => ARRAY_UTILITIES[key].apply(arr, rest)\r\n//}\r\nfunction isCCW(vertices, normal) {\r\n    const dsa = doubleSignedArea(vertices, normal);\r\n    assert(0 != dsa);\r\n    return dsa < 0;\r\n}\r\nfunction doubleSignedArea(vertices, normal) {\r\n    assert(!normal.likeO(), '!normal.likeO()');\r\n    const absMaxDim = normal.maxAbsDim();\r\n    // order is important, coord0 and coord1 must be set so that coord0, coord1 and maxDim span a right-hand coordinate\r\n    // system var [coord0, coord1] = [['y', 'z'], ['z', 'x'], ['x', 'y']][maxAbsDim]\r\n    const doubleSignedArea = vertices.map((v0, i, vertices) => {\r\n        const v1 = vertices[(i + 1) % vertices.length];\r\n        //return (v1[coord0] - v0[coord0]) * (v1[coord1] + v0[coord1])\r\n        switch (absMaxDim) {\r\n            case 0:\r\n                return (v1.y - v0.y) * (v1.z + v0.z);\r\n            case 1:\r\n                return (v1.z - v0.z) * (v1.x + v0.x);\r\n            case 2:\r\n                return (v1.x - v0.x) * (v1.y + v0.y);\r\n        }\r\n    }).reduce((a, b) => a + b);\r\n    return snap(doubleSignedArea * Math.sign(normal.e(absMaxDim)), 0);\r\n}\r\n/**\r\n * solves x² + px + q = 0\r\n */\r\nfunction pqFormula(p, q) {\r\n    // 4 times the discriminant:in\r\n    const discriminantX4 = p * p / 4 - q;\r\n    if (discriminantX4 < -NLA_PRECISION) {\r\n        return [];\r\n    }\r\n    else if (discriminantX4 <= NLA_PRECISION) {\r\n        return [-p / 2];\r\n    }\r\n    else {\r\n        const root = Math.sqrt(discriminantX4);\r\n        return [-p / 2 - root, -p / 2 + root];\r\n    }\r\n}\r\n/**\r\n * from pomax' library\r\n * solves ax³ + bx² + cx + d = 0\r\n * This function from pomax' utils\r\n * @returns 0-3 roots\r\n */\r\nfunction solveCubicReal2(a, b, c, d) {\r\n    if (eq0(a)) {\r\n        if (eq0(b)) {\r\n            return [-d / c];\r\n        }\r\n        else {\r\n            return pqFormula(c / b, d / b);\r\n        }\r\n    }\r\n    const divisor = a;\r\n    a = b / divisor;\r\n    b = c / divisor;\r\n    c = d / divisor;\r\n    const p = (3 * b - a * a) / 3, pDiv3 = p / 3, pDiv3Pow3 = pDiv3 * pDiv3 * pDiv3, q = (2 * a * a * a - 9 * a * b + 27 * c) / 27, qDiv2 = q / 2, discriminant = qDiv2 * qDiv2 + pDiv3Pow3;\r\n    // 18abcd - 4b³d + b²c² - 4ac³ - 27a²d²\r\n    if (discriminant < -NLA_PRECISION / 8) {\r\n        const r = Math.sqrt(-pDiv3Pow3), t = -q / (2 * r), cosphi = t < -1 ? -1 : t > 1 ? 1 : t, // clamp t to [-1;1]\r\n        phi = Math.acos(cosphi), t1 = 2 * Math.cbrt(r);\r\n        const x1 = t1 * Math.cos(phi / 3) - a / 3;\r\n        const x2 = t1 * Math.cos((phi + 2 * Math.PI) / 3) - a / 3;\r\n        const x3 = t1 * Math.cos((phi + 4 * Math.PI) / 3) - a / 3;\r\n        return [x1, x2, x3];\r\n    }\r\n    else if (discriminant <= NLA_PRECISION / 8) {\r\n        if (0 == qDiv2) {\r\n            // TODO: compare with likeO?\r\n            return [-a / 3];\r\n        }\r\n        const u1 = qDiv2 < 0 ? Math.cbrt(-qDiv2) : -Math.cbrt(qDiv2);\r\n        const x1 = 2 * u1 - a / 3;\r\n        const x2 = -u1 - a / 3;\r\n        return [x1, x2];\r\n    }\r\n    else {\r\n        const sd = Math.sqrt(discriminant);\r\n        const u1 = Math.cbrt(-qDiv2 + sd);\r\n        const v1 = Math.cbrt(qDiv2 + sd);\r\n        return [u1 - v1 - a / 3];\r\n    }\r\n}\r\nfunction checkDerivate(f, df, a, b, maxFaults = 0) {\r\n    const eps = 1e-4;\r\n    let faults = 0;\r\n    for (let t = a; t < b; t += (b - a) / 100) {\r\n        const dfdt = df(t);\r\n        const df2 = (f(t + eps) - f(t)) / eps;\r\n        assert((faults += +!eq2(df2, dfdt, 0.1)) <= maxFaults, `df2 == ${df2} != ${df(t)} = df(t)`);\r\n    }\r\n}\r\nfunction getRoots(f, a, b, stepSize, df) {\r\n    const results = [];\r\n    for (let startT = a; startT <= b; startT += stepSize) {\r\n        const dt = stepSize * abs(df(startT));\r\n        if (abs(f(startT)) <= dt) {\r\n            //const t = newtonIterate1d(f, startT, 16)\r\n            let t = newtonIterateWithDerivative(f, startT, 16, df);\r\n            if (!eq0(f(t)) || eq0(df(t))) {\r\n                t = newtonIterate1d(df, startT, 16);\r\n                //if (f(a) * f(b) < 0) {\r\n                //    t = bisect(f, a, b, 16)\r\n                //} else if (df(a) * df(b) < 0) {\r\n                //    t = bisect(df, a, b, 16)\r\n                //}\r\n            }\r\n            if (eq0(f(t)) && !results.some(r => eq(r, t))) {\r\n                results.push(t);\r\n            }\r\n        }\r\n    }\r\n    return results;\r\n}\r\n//addOwnProperties(Array.prototype, ARRAY_UTILITIES)\r\nfunction bisect(f, a, b, steps) {\r\n    assert(a < b);\r\n    let fA = f(a), fB = f(b);\r\n    while (steps--) {\r\n        const c = (b + a) / 2;\r\n        const fC = f(c);\r\n        if (sign(fA) == sign(fC)) {\r\n            a = c;\r\n            fA = fC;\r\n        }\r\n        else {\r\n            b = c;\r\n            fB = fC;\r\n        }\r\n    }\r\n    assert(a <= (b + a) / 2);\r\n    assert(b >= (b + a) / 2);\r\n    return (b - a) / 2;\r\n}\r\nfunction newtonIterate(f, x, steps = 4, EPSILON) {\r\n    EPSILON = EPSILON || 1e-8;\r\n    for (let i = 0; i < steps; i++) {\r\n        const fx = f(x);\r\n        const dfdx = Matrix.jacobi(f, x, fx, EPSILON);\r\n        assert(!dfdx.isZero());\r\n        const dx = dfdx.solveLinearSystem(new Vector(new Float64Array(fx))).v;\r\n        assert(!isNaN(dx[0]));\r\n        //console.log('fx / dfdx', fx / dfdx)\r\n        for (let j = 0; j < x.length; j++)\r\n            x[j] -= dx[j];\r\n    }\r\n    return x;\r\n}\r\nfunction newtonIterate1d(f, xStart, steps = 8, EPSILON = 1e-8) {\r\n    let x = xStart;\r\n    for (let i = 0; i < steps; i++) {\r\n        const fx = f(x);\r\n        const dfdx = (f(x + EPSILON) - fx) / EPSILON;\r\n        //console.log('fx / dfdx', fx / dfdx)\r\n        x = x - fx / dfdx;\r\n    }\r\n    return x;\r\n}\r\nfunction newtonIterateWithDerivative(f, xStart, steps = 4, df) {\r\n    let x = xStart;\r\n    for (let i = 0; i < steps; i++) {\r\n        const fx = f(x);\r\n        const dfdx = df(x);\r\n        if (isNaN(fx) || isNaN(dfdx)) {\r\n            console.log();\r\n            //console.log('fx / dfdx', fx / dfdx)\r\n        }\r\n        x = x - fx / dfdx;\r\n        if (isNaN(fx)) {\r\n            console.log();\r\n            //console.log('fx / dfdx', fx / dfdx)\r\n        }\r\n    }\r\n    return x;\r\n}\r\nfunction newtonIterateSmart(f, xStart, steps = 4, df, mindf = 1e-6) {\r\n    let x = xStart;\r\n    for (let i = 0; i < steps; i++) {\r\n        const fx = f(x);\r\n        const dfdx = df(x);\r\n        if (abs(dfdx) < mindf && abs(fx) < mindf) {\r\n            return newtonIterate1d(df, x);\r\n        }\r\n        if (isNaN(fx) || isNaN(dfdx)) {\r\n            console.log();\r\n            //console.log('fx / dfdx', fx / dfdx)\r\n        }\r\n        x = x - fx / dfdx;\r\n        if (isNaN(fx)) {\r\n            console.log();\r\n            //console.log('fx / dfdx', fx / dfdx)\r\n        }\r\n    }\r\n    return x;\r\n}\r\nfunction newtonIterate2d(f1, f2, sStart, tStart, steps) {\r\n    const EPSILON = 1e-6;\r\n    steps = steps || 4;\r\n    let s = sStart, t = tStart, f1ts, f2ts;\r\n    do {\r\n        /*\r\n         | a b |-1                   |  d -b |\r\n         | c d |   = 1 / (ad - bc) * | -c  a |\r\n         */\r\n        f1ts = f1(s, t);\r\n        f2ts = f2(s, t);\r\n        /*\r\n         let df1s = (f1(s + EPSILON, t) - f1ts) / EPSILON, df1t = (f1(s, t + EPSILON) - f1ts) / EPSILON,\r\n         df2s = (f2(s + EPSILON, t) - f2ts) / EPSILON, df2t = (f2(s, t + EPSILON) - f2ts) / EPSILON\r\n         let det = df1s * df2t - df1t * df2s\r\n         s = s - ( df2t * f1ts - df1t * f2ts) / det\r\n         t = t - (-df2s * f1ts + df1s * f2ts) / det\r\n         */\r\n        // TODO: is this even more accurate?\r\n        const df1s = (f1(s + EPSILON, t) - f1ts), df1t = (f1(s, t + EPSILON) - f1ts), df2s = (f2(s + EPSILON, t) - f2ts), df2t = (f2(s, t + EPSILON) - f2ts);\r\n        const det = (df1s * df2t - df1t * df2s) / EPSILON;\r\n        const ds = (df2t * f1ts - df1t * f2ts) / det;\r\n        const dt = (-df2s * f1ts + df1s * f2ts) / det;\r\n        s -= ds;\r\n        t -= dt;\r\n    } while (--steps && f1ts * f1ts + f2ts * f2ts > NLA_PRECISION);\r\n    if (!steps) {\r\n        //console.log(f1ts * f1ts + f2ts * f2ts)\r\n        return undefined;\r\n    }\r\n    return new V3(s, t, 0);\r\n}\r\nfunction newtonIterate2dWithDerivatives(f, g, sStart, tStart, steps, dfds, dfdt, dgds, dgdt) {\r\n    steps = steps || 4;\r\n    let s = sStart, t = tStart;\r\n    let f1ts, f2ts;\r\n    do {\r\n        /*\r\n         | a b |-1                   |  d -b |\r\n         | c d |   = 1 / (ad - bc) * | -c  a |\r\n         */\r\n        f1ts = f(s, t);\r\n        f2ts = g(s, t);\r\n        const df1s = dfds(s, t), df1t = dfdt(s, t), df2s = dgds(s, t), df2t = dgdt(s, t);\r\n        // TODO: is this even more accurate?\r\n        const det = df1s * df2t - df1t * df2s;\r\n        const ds = (df2t * f1ts - df1t * f2ts) / det;\r\n        const dt = (-df2s * f1ts + df1s * f2ts) / det;\r\n        s -= ds;\r\n        t -= dt;\r\n    } while (--steps && f1ts * f1ts + f2ts * f2ts > NLA_PRECISION / 32);\r\n    if (!steps) {\r\n        //console.log(f1ts * f1ts + f2ts * f2ts)\r\n        return undefined;\r\n    }\r\n    return V(s, t, 0);\r\n}\r\nconst gaussLegendre24Xs = [\r\n    -0.0640568928626056260850430826247450385909,\r\n    0.0640568928626056260850430826247450385909,\r\n    -0.1911188674736163091586398207570696318404,\r\n    0.1911188674736163091586398207570696318404,\r\n    -0.3150426796961633743867932913198102407864,\r\n    0.3150426796961633743867932913198102407864,\r\n    -0.4337935076260451384870842319133497124524,\r\n    0.4337935076260451384870842319133497124524,\r\n    -0.5454214713888395356583756172183723700107,\r\n    0.5454214713888395356583756172183723700107,\r\n    -0.6480936519369755692524957869107476266696,\r\n    0.6480936519369755692524957869107476266696,\r\n    -0.7401241915785543642438281030999784255232,\r\n    0.7401241915785543642438281030999784255232,\r\n    -0.8200019859739029219539498726697452080761,\r\n    0.8200019859739029219539498726697452080761,\r\n    -0.8864155270044010342131543419821967550873,\r\n    0.8864155270044010342131543419821967550873,\r\n    -0.9382745520027327585236490017087214496548,\r\n    0.9382745520027327585236490017087214496548,\r\n    -0.9747285559713094981983919930081690617411,\r\n    0.9747285559713094981983919930081690617411,\r\n    -0.9951872199970213601799974097007368118745,\r\n    0.9951872199970213601799974097007368118745,\r\n];\r\nconst gaussLegendre24Weights = [\r\n    0.1279381953467521569740561652246953718517,\r\n    0.1279381953467521569740561652246953718517,\r\n    0.1258374563468282961213753825111836887264,\r\n    0.1258374563468282961213753825111836887264,\r\n    0.1216704729278033912044631534762624256070,\r\n    0.1216704729278033912044631534762624256070,\r\n    0.1155056680537256013533444839067835598622,\r\n    0.1155056680537256013533444839067835598622,\r\n    0.1074442701159656347825773424466062227946,\r\n    0.1074442701159656347825773424466062227946,\r\n    0.0976186521041138882698806644642471544279,\r\n    0.0976186521041138882698806644642471544279,\r\n    0.0861901615319532759171852029837426671850,\r\n    0.0861901615319532759171852029837426671850,\r\n    0.0733464814110803057340336152531165181193,\r\n    0.0733464814110803057340336152531165181193,\r\n    0.0592985849154367807463677585001085845412,\r\n    0.0592985849154367807463677585001085845412,\r\n    0.0442774388174198061686027482113382288593,\r\n    0.0442774388174198061686027482113382288593,\r\n    0.0285313886289336631813078159518782864491,\r\n    0.0285313886289336631813078159518782864491,\r\n    0.0123412297999871995468056670700372915759,\r\n    0.0123412297999871995468056670700372915759,\r\n];\r\nfunction gaussLegendreQuadrature24(f, startT, endT) {\r\n    //let result = 0\r\n    //for (let i = 0; i < gaussLegendre24Xs.length; i++) {\r\n    //\t// gauss-legendre goes from -1 to 1, so we need to scale\r\n    //\tlet t = startT + (gaussLegendre24Xs[i] + 1) / 2 * (endT - startT)\r\n    //\tresult += gaussLegendre24Weights[i] * f(t)\r\n    //}\r\n    //const result = NLA\r\n    //\t\t.arrayFromFunction(24, i => startT + (gaussLegendre24Xs[i] + 1) / 2 * (endT - startT))\r\n    //\t\t.map((t, i) => gaussLegendre24Weights[i] * f(t))\r\n    //\t\t.sumInPlaceTree()\r\n    //99.54182500782605\r\n    //99.54182500782602\r\n    // again, [-1,1], so div by 2\r\n    //return result // 2 * (endT - startT)\r\n    return glq24_11(t => f(startT + (t + 1) / 2 * (endT - startT))) / 2 * (endT - startT);\r\n}\r\nfunction glq24_11(f) {\r\n    return arrayFromFunction(24, i => gaussLegendre24Weights[i] * f(gaussLegendre24Xs[i])).sumInPlaceTree();\r\n}\r\nfunction glqInSteps(f, startT, endT, steps) {\r\n    const dt = (endT - startT) / steps;\r\n    return arrayFromFunction(steps, i => glq24_11(t => f(startT + dt * i + (t + 1) / 2 * dt))).sumInPlaceTree() / 2 * dt;\r\n}\r\nfunction midpointRuleQuadrature(f, startT, endT, steps = 32) {\r\n    const dt = (endT - startT) / steps;\r\n    return arrayFromFunction(steps, i => startT + dt / 2 + dt * i).map(f).sumInPlaceTree() * dt;\r\n}\r\nfunction callsce(name, ...params) {\r\n    return name + '(' + params.map(SCE).join(',') + ')';\r\n}\n\n/**\r\n * Immutable 3d-vector/point.\r\n */\r\nclass V3 {\r\n    constructor(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        assertNumbers(x, y, z);\r\n    }\r\n    static random() {\r\n        return new V3(Math.random(), Math.random(), Math.random());\r\n    }\r\n    static parallel(a, b) {\r\n        return a.dot(b) - a.length() * b.length();\r\n    }\r\n    /**\r\n     * See http://math.stackexchange.com/questions/44689/how-to-find-a-random-axis-or-unit-vector-in-3d\r\n     * @returns A random point on the unit sphere with uniform distribution across the surface.\r\n     */\r\n    static randomUnit() {\r\n        const zRotation = Math.random() * 2 * Math.PI;\r\n        const z = Math.random() * 2 - 1;\r\n        const zRadius = Math.sqrt(1 - Math.pow(z, 2));\r\n        return new V3(zRadius * Math.cos(zRotation), zRadius * Math.sin(zRotation), z);\r\n    }\r\n    //noinspection JSUnusedLocalSymbols\r\n    /**\r\n     * Documentation stub. You want {@see V3#sphere}\r\n     */\r\n    static fromAngles(theta, phi) {\r\n        throw new Error();\r\n    }\r\n    static fromFunction(f) {\r\n        return new V3(f(0), f(1), f(2));\r\n    }\r\n    static min(a, b) {\r\n        return new V3(Math.min(a.x, b.x), Math.min(a.y, b.y), Math.min(a.z, b.z));\r\n    }\r\n    static max(a, b) {\r\n        return new V3(Math.max(a.x, b.x), Math.max(a.y, b.y), Math.max(a.z, b.z));\r\n    }\r\n    static lerp(a, b, fraction) {\r\n        return b.minus(a).times(fraction).plus(a);\r\n    }\r\n    static fromArray(a) {\r\n        return new V3(a[0], a[1], a[2]);\r\n    }\r\n    static angleBetween(a, b) {\r\n        return a.angleTo(b);\r\n    }\r\n    static zip(f, ...args) {\r\n        assert(f instanceof Function);\r\n        return new V3(f.apply(undefined, args.map(x => x.x)), f.apply(undefined, args.map(x => x.y)), f.apply(undefined, args.map(x => x.z)));\r\n    }\r\n    static normalOnPoints(a, b, c) {\r\n        assertVectors(a, b, c);\r\n        return a.to(b).cross(a.to(c));\r\n    }\r\n    static add(...vs) {\r\n        assertVectors.apply(undefined, vs);\r\n        let x = 0, y = 0, z = 0;\r\n        let i = vs.length;\r\n        while (i--) {\r\n            x += vs[i].x;\r\n            y += vs[i].y;\r\n            z += vs[i].z;\r\n        }\r\n        return new V3(x, y, z);\r\n    }\r\n    static sub(...vs) {\r\n        assertVectors.apply(undefined, vs);\r\n        let x = vs[0].x, y = vs[0].y, z = vs[0].z;\r\n        let i = vs.length;\r\n        while (i--) {\r\n            x -= vs[i].x;\r\n            y -= vs[i].y;\r\n            z -= vs[i].z;\r\n        }\r\n        return new V3(x, y, z);\r\n    }\r\n    /**\r\n     * Pack an array of V3s into an array of numbers (Float32Array by default).\r\n     *\r\n     * @param v3arr source array\r\n     * @param dest destination array. If provided, must be large enough to fit v3count items.\r\n     * @param srcStart starting index in source array\r\n     * @param destStart starting index in destination array\r\n     * @param v3count Number of V3s to copy.\r\n     * @returns Packed array.\r\n     */\r\n    static pack(v3arr, dest, srcStart = 0, destStart = 0, v3count = v3arr.length - srcStart) {\r\n        //assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')\r\n        const result = dest || new Float32Array(3 * v3count); // TODO\r\n        assert(result.length - destStart >= v3count * 3, 'dest.length - destStart >= v3count * 3');\r\n        let i = v3count, srcIndex = srcStart, destIndex = destStart;\r\n        while (i--) {\r\n            const v = v3arr[srcIndex++];\r\n            result[destIndex++] = v.x;\r\n            result[destIndex++] = v.y;\r\n            result[destIndex++] = v.z;\r\n        }\r\n        return result;\r\n    }\r\n    static unpack(packedArray, dest, srcStart = 0, destStart = 0, v3count = (packedArray.length - srcStart) / 3) {\r\n        //assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')\r\n        const result = dest || new Array(v3count);\r\n        assert(result.length - destStart >= v3count, 'dest.length - destStart >= v3count');\r\n        let i = v3count, srcIndex = srcStart, destIndex = destStart;\r\n        while (i--) {\r\n            result[destIndex++] = new V3(packedArray[srcIndex++], packedArray[srcIndex++], packedArray[srcIndex++]);\r\n        }\r\n        return result;\r\n    }\r\n    static packXY(v3arr, dest, srcStart = 0, destStart = 0, v3count = v3arr.length - srcStart) {\r\n        //assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')\r\n        const result = dest || new Float32Array(2 * v3count);\r\n        assert(result.length - destStart >= v3count, 'dest.length - destStart >= v3count');\r\n        let i = v3count, srcIndex = srcStart, destIndex = destStart;\r\n        while (i--) {\r\n            const v = v3arr[srcIndex++];\r\n            result[destIndex++] = v.x;\r\n            result[destIndex++] = v.y;\r\n        }\r\n        return result;\r\n    }\r\n    static unpackXY(src, dest, srcStart = 0, destStart = 0, v3count = Math.min(src.length / 2, dest && dest.length || Infinity) - destStart) {\r\n        //assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')\r\n        dest = dest || new Array(v3count);\r\n        assert(dest.length - destStart >= v3count, 'dest.length - destStart >= v3count');\r\n        assert(src.length - srcStart >= v3count * 2, 'dest.length - destStart >= v3count');\r\n        let i = v3count, srcIndex = srcStart, destIndex = destStart;\r\n        while (i--) {\r\n            dest[destIndex++] = new V3(src[srcIndex++], src[srcIndex++], 0);\r\n        }\r\n        return dest;\r\n    }\r\n    static perturbed(v, delta) {\r\n        return v.perturbed(delta);\r\n    }\r\n    static polar(radius, phi, z = 0) {\r\n        return new V3(radius * Math.cos(phi), radius * Math.sin(phi), z);\r\n    }\r\n    /**\r\n     *\r\n     * @param longitude angle in XY plane\r\n     * @param latitude \"height\"/z dir angle\r\n     */\r\n    static sphere(longitude, latitude, length = 1) {\r\n        return new V3(length * Math.cos(latitude) * Math.cos(longitude), length * Math.cos(latitude) * Math.sin(longitude), length * Math.sin(latitude));\r\n    }\r\n    static inverseLerp(a, b, x) {\r\n        const ab = a.to(b);\r\n        return a.to(x).dot(ab) / ab.squared();\r\n    }\r\n    perturbed(delta = NLA_PRECISION * 0.8) {\r\n        return this.map(x => x + (Math.random() - 0.5) * delta);\r\n    }\r\n    *[Symbol.iterator]() {\r\n        yield this.x;\r\n        yield this.y;\r\n        yield this.z;\r\n    }\r\n    e(index) {\r\n        assert(index >= 0 && index < 3);\r\n        return 0 == index ? this.x : (1 == index ? this.y : this.z);\r\n    }\r\n    negated() {\r\n        return new V3(-this.x, -this.y, -this.z);\r\n    }\r\n    abs() {\r\n        return new V3(Math.abs(this.x), Math.abs(this.y), Math.abs(this.z));\r\n    }\r\n    plus(a) {\r\n        assertVectors(a);\r\n        return new V3(this.x + a.x, this.y + a.y, this.z + a.z);\r\n    }\r\n    /**\r\n     * Hadarmard product (or Schur product)\r\n     * Element-wise multiplication of two vectors.\r\n     * @see https://en.wikipedia.org/wiki/Hadamard_product_(matrices)\r\n     *\r\n     */\r\n    schur(a) {\r\n        return new V3(this.x * a.x, this.y * a.y, this.z * a.z);\r\n    }\r\n    /**\r\n     * Element-wise division.\r\n     */\r\n    divv(a) {\r\n        return new V3(this.x / a.x, this.y / a.y, this.z / a.z);\r\n    }\r\n    /**\r\n     * See also {@link to} which is a.minus(this)\r\n     */\r\n    minus(a) {\r\n        assertVectors(a);\r\n        return new V3(this.x - a.x, this.y - a.y, this.z - a.z);\r\n    }\r\n    to(a) {\r\n        assertVectors(a);\r\n        return a.minus(this);\r\n    }\r\n    times(factor) {\r\n        assertNumbers(factor);\r\n        return new V3(this.x * factor, this.y * factor, this.z * factor);\r\n    }\r\n    div(a) {\r\n        assertNumbers(a);\r\n        return new V3(this.x / a, this.y / a, this.z / a);\r\n    }\r\n    /**\r\n     * Dot product.\r\n     * @see https://en.wikipedia.org/wiki/Dot_product\r\n     */\r\n    dot(a) {\r\n        assertInst(V3, a);\r\n        return this.x * a.x + this.y * a.y + this.z * a.z;\r\n    }\r\n    /**\r\n     * Linearly interpolate\r\n     */\r\n    lerp(b, t) {\r\n        assertVectors(b);\r\n        assertNumbers(t);\r\n        return this.plus(b.minus(this).times(t));\r\n    }\r\n    squared() {\r\n        return this.dot(this);\r\n    }\r\n    distanceTo(a) {\r\n        assertVectors(a);\r\n        //return this.minus(a).length()\r\n        return Math.hypot(this.x - a.x, this.y - a.y, this.z - a.z);\r\n    }\r\n    distanceToSquared(a) {\r\n        assertVectors(a);\r\n        return this.minus(a).squared();\r\n    }\r\n    ///**\r\n    // * See also {@see #setTo} for the individual\r\n    // *\r\n    // * @param v\r\n    // */\r\n    //assign(v) {\r\n    //\tassertVectors(v)\r\n    //\tthis.x = v.x\r\n    //\tthis.y = v.y\r\n    //\tthis.z = v.z\r\n    //}\r\n    //\r\n    ///**\r\n    // * See also {@see #assign} for the V3 version\r\n    // *\r\n    // * @param x\r\n    // * @param y\r\n    // * @param z\r\n    // */\r\n    //setTo(x, y, z = 0) {\r\n    //\tthis.x = x\r\n    //\tthis.y = y\r\n    //\tthis.z = z\r\n    //}\r\n    toSource() {\r\n        return V3.NAMEMAP.get(this) || this.toString();\r\n    }\r\n    nonParallelVector() {\r\n        const abs = this.abs();\r\n        if ((abs.x <= abs.y) && (abs.x <= abs.z)) {\r\n            return V3.X;\r\n        }\r\n        else if ((abs.y <= abs.x) && (abs.y <= abs.z)) {\r\n            return V3.Y;\r\n        }\r\n        else {\r\n            return V3.Z;\r\n        }\r\n    }\r\n    slerp(b, t) {\r\n        assertVectors(b);\r\n        assertNumbers(t);\r\n        const sin = Math.sin;\r\n        const omega = this.angleTo(b);\r\n        return this.times(sin((1 - t) * omega) / sin(omega)).plus(b.times(sin(t * omega) / sin(omega)));\r\n    }\r\n    min(b) {\r\n        return new V3(Math.min(this.x, b.x), Math.min(this.y, b.y), Math.min(this.z, b.z));\r\n    }\r\n    max(b) {\r\n        return new V3(Math.max(this.x, b.x), Math.max(this.y, b.y), Math.max(this.z, b.z));\r\n    }\r\n    equals(v) {\r\n        return this == v || this.x == v.x && this.y == v.y && this.z == v.z;\r\n    }\r\n    /**\r\n     *\r\n     * The cross product is defined as:\r\n     * a x b = |a| * |b| * sin(phi) * n\r\n     * where |.| is the euclidean norm, phi is the angle between the vectors\r\n     * and n is a unit vector perpendicular to both a and b.\r\n     *\r\n     * The cross product is zero for parallel vectors.\r\n     * @see https://en.wikipedia.org/wiki/Cross_product\r\n     */\r\n    cross(v) {\r\n        return new V3(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x);\r\n    }\r\n    //noinspection JSMethodCanBeStatic\r\n    /**\r\n     * Documentation stub. You want {@link unit}\r\n     */\r\n    normalized() { throw new Error('documentation stub. use .unit()'); }\r\n    minElement() {\r\n        return Math.min(this.x, this.y, this.z);\r\n    }\r\n    maxElement() {\r\n        return Math.max(this.x, this.y, this.z);\r\n    }\r\n    toArray(n = 3) {\r\n        return [this.x, this.y, this.z].slice(0, n);\r\n    }\r\n    /**\r\n     * Get a perpendicular vector.\r\n     * For vectors in the XY-Plane, returns vector rotated 90° CCW.\r\n     */\r\n    getPerpendicular() {\r\n        if (eq0(this.x) && eq0(this.y)) {\r\n            if (eq0(this.z)) {\r\n                throw new Error('zero vector');\r\n            }\r\n            // v is Vector(0, 0, v.z)\r\n            return V3.Y;\r\n        }\r\n        return new V3(-this.y, this.x, 0);\r\n    }\r\n    //noinspection JSMethodCanBeStatic\r\n    dim() {\r\n        return 3;\r\n    }\r\n    els() {\r\n        return [this.x, this.y, this.z];\r\n    }\r\n    angleXY() {\r\n        return Math.atan2(this.y, this.x);\r\n    }\r\n    lengthXY() {\r\n        return Math.hypot(this.x, this.y);\r\n        //return Math.sqrt(this.x * this.x + this.y * this.y)\r\n    }\r\n    squaredXY() {\r\n        return this.x * this.x + this.y * this.y;\r\n    }\r\n    xy() {\r\n        return new V3(this.x, this.y, 0);\r\n    }\r\n    /**\r\n     * Transform this vector element-wise by way of function f. Returns V3(f(x), f(y), f(z))\r\n     * @param f function to apply to elements (number -> number)\r\n     */\r\n    map(f) {\r\n        return new V3(f(this.x, 'x'), f(this.y, 'y'), f(this.z, 'z'));\r\n    }\r\n    toString(roundFunction) {\r\n        roundFunction = roundFunction || defaultRoundFunction;\r\n        return V3.NAMEMAP.get(this) ||\r\n            'V(' + [this.x, this.y, this.z].map(roundFunction).join(', ') + ')'; //+ this.id\r\n    }\r\n    angleTo(b) {\r\n        assert(1 == arguments.length);\r\n        assertVectors(b);\r\n        assert(!this.likeO());\r\n        assert(!b.likeO());\r\n        return Math.acos(Math.min(1, this.dot(b) / this.length() / b.length()));\r\n    }\r\n    /**\r\n     *\r\n     * phi = angle between A and B\r\n     * alpha = angle between n and normal1\r\n     *\r\n     * A . B = ||A|| * ||B|| * cos(phi)\r\n     * A x B = ||A|| * ||B|| * sin(phi) * n (n = unit vector perpendicular)\r\n     * (A x B) . normal1 = ||A|| * ||B|| * sin(phi) * cos(alpha)\r\n     */\r\n    angleRelativeNormal(vector, normal1) {\r\n        assertf(() => 2 == arguments.length);\r\n        assertVectors(vector, normal1);\r\n        assertf(() => normal1.hasLength(1));\r\n        //assert(vector.isPerpendicularTo(normal1), 'vector.isPerpendicularTo(normal1)' + vector.sce + normal1.sce)\r\n        //assert(this.isPerpendicularTo(normal1), 'this.isPerpendicularTo(normal1)' + this.dot(vector)) //\r\n        // -0.000053600770598683675\r\n        return Math.atan2(this.cross(vector).dot(normal1), this.dot(vector));\r\n    }\r\n    /**\r\n     Returns true iff this is parallel to vector, i.e. this * s == vector, where s is a pos or neg number, using equals\r\n     Throw a DebugError\r\n     if vector is not a Vector or\r\n     if this has a length of 0 or\r\n     if vector has a length of 0\r\n     */\r\n    isParallelTo(vector) {\r\n        assertVectors(vector);\r\n        assert(!this.likeO());\r\n        assert(!vector.likeO());\r\n        // a . b takes on values of +|a|*|b| (vectors same direction) to -|a|*|b| (opposite direction)\r\n        // in both cases the vectors are parallel, so check if abs(a . b) == |a|*|b|\r\n        const dot = this.dot(vector);\r\n        return eq(this.squared() * vector.squared(), dot * dot);\r\n    }\r\n    isPerpendicularTo(vector) {\r\n        assertVectors(vector);\r\n        assert(!this.likeO(), '!this.likeO()');\r\n        assert(!vector.likeO(), '!vector.likeO()');\r\n        return eq0(this.dot(vector));\r\n    }\r\n    isReverseDirTo(other) {\r\n        assertVectors(other);\r\n        assert(!this.likeO());\r\n        assert(!other.likeO());\r\n        // a . b takes on values of +|a|*|b| (vectors same direction) to -|a|*|b| (opposite direction)\r\n        // in both cases the vectors are parallel, so check if abs(a . b) == |a|*|b|\r\n        const dot = this.dot(other);\r\n        return eq(Math.sqrt(this.squared() * other.squared()), dot);\r\n    }\r\n    /**\r\n     * Returns the length of this Vector, i.e. the euclidean norm.\r\n     *\r\n     * Note that the partial derivatives of the euclidean norm at point x are equal to the\r\n     * components of the unit vector x.\r\n     */\r\n    length() {\r\n        return Math.hypot(this.x, this.y, this.z);\r\n        //return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)\r\n    }\r\n    /**\r\n     * Definition: V3.likeO == V3.like(V3.O)\r\n     */\r\n    likeO() {\r\n        return this.like(V3.O);\r\n    }\r\n    like(obj) {\r\n        if (obj === this)\r\n            return true;\r\n        if (!(obj instanceof V3))\r\n            return false;\r\n        return eq(this.x, obj.x) && eq(this.y, obj.y) && eq(this.z, obj.z);\r\n    }\r\n    /**\r\n     * equivalent to this.like(v) || this.negated().like(v)\r\n     */\r\n    likeOrReversed(v) {\r\n        return eq(Math.abs(this.dot(v)), Math.sqrt(this.squared() * v.squared()));\r\n    }\r\n    /**\r\n     * Returns a new unit Vector (.length() === 1) with the same direction as this vector. Throws a\r\n     * DebugError if this has a length of 0.\r\n     */\r\n    unit() {\r\n        assert(!this.likeO(), 'cannot normalize zero vector');\r\n        return this.div(this.length());\r\n    }\r\n    /**\r\n     * Returns a new V3 equal to this scaled so that its length is equal to newLength.\r\n     *\r\n     * Passing a negative newLength will flip the vector.\r\n     */\r\n    toLength(newLength) {\r\n        assertNumbers(newLength);\r\n        return this.times(newLength / this.length());\r\n    }\r\n    /**\r\n     Returns a new Vector which is the projection of this vector onto the passed vector.\r\n     Examples\r\n     V(3, 4).projectedOn(V(1, 0)) // returns V(3, 0)\r\n     V(3, 4).projectedOn(V(2, 0)) // returns V(3, 0)\r\n     V(3, 4).projectedOn(V(-1, 0)) // returns V(-3, 0)\r\n     V(3, 4).projectedOn(V(0, 1)) // returns V(0, 4)\r\n     V(3, 4).projectedOn(V(1, 1)) // returns\r\n     */\r\n    projectedOn(b) {\r\n        assertVectors(b);\r\n        // https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2\r\n        return b.times(this.dot(b) / b.dot(b));\r\n    }\r\n    rejectedFrom(b) {\r\n        assertVectors(b);\r\n        // https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2\r\n        return this.minus(b.times(this.dot(b) / b.dot(b)));\r\n    }\r\n    rejectedFrom1(b1) {\r\n        assertVectors(b1);\r\n        assert(b1.hasLength(1));\r\n        // https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2\r\n        return this.minus(b1.times(this.dot(b1)));\r\n    }\r\n    /**\r\n     * Returns the length of this vector rejected from the unit vector b.\r\n     *\r\n     *       /|\r\n     * this / |    ^\r\n     *     /__|    | b\r\n     *      r\r\n     *  Returns length of r (r === this.rejectedFrom(b))\r\n     */\r\n    rejectedLength(b) {\r\n        assertVectors(b);\r\n        return Math.sqrt(this.dot(this) - Math.pow(this.dot(b), 2) / b.dot(b));\r\n    }\r\n    /**\r\n     * Returns the length of this vector rejected from the unit vector b1.\r\n     *\r\n     *       /|\r\n     * this / |    ^\r\n     *     /__|    | b1\r\n     *      r\r\n     *  Returns length of r (r === this.rejectedFrom(b1))\r\n     */\r\n    rejected1Length(b1) {\r\n        assertVectors(b1);\r\n        assert(b1.hasLength(1));\r\n        return Math.sqrt(this.dot(this) - Math.pow(this.dot(b1), 2));\r\n    }\r\n    /**\r\n     Returns true iff the length() of this vector is equal to 'length', using eq\r\n     E.g. V(3, 4).hasLength(5) === true\r\n     V(1, 1).hasLength(1) === false\r\n     */\r\n    hasLength(length) {\r\n        assertNumbers(length);\r\n        return eq(length, this.length());\r\n    }\r\n    /**\r\n     Returns the sum of the absolute values of the components of this vector.\r\n     E.g. V(1, -2, 3) === abs(1) + abs(-2) + abs(3) === 1 + 2 + 3 === 6\r\n     */\r\n    absSum() {\r\n        return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\r\n    }\r\n    /**\r\n     * returns max(|x|, |y|, |z|)\r\n     */\r\n    maxAbsElement() {\r\n        return Math.max(Math.abs(this.x), Math.abs(this.y), Math.abs(this.z));\r\n    }\r\n    /**\r\n     * returns min(|x|, |y|, |z|)\r\n     */\r\n    minAbsElement() {\r\n        return Math.min(Math.abs(this.x), Math.abs(this.y), Math.min(this.z));\r\n    }\r\n    maxAbsDim() {\r\n        const xAbs = Math.abs(this.x), yAbs = Math.abs(this.y), zAbs = Math.abs(this.z);\r\n        return xAbs >= yAbs ? (xAbs >= zAbs ? 0 : 2) : (yAbs >= zAbs ? 1 : 2);\r\n    }\r\n    minAbsDim() {\r\n        const xAbs = Math.abs(this.x), yAbs = Math.abs(this.y), zAbs = Math.abs(this.z);\r\n        return xAbs < yAbs ? (xAbs < zAbs ? 0 : 2) : (yAbs < zAbs ? 1 : 2);\r\n    }\r\n    withElement(dim, el) {\r\n        assert(['x', 'y', 'z'].includes(dim), '' + dim);\r\n        assertNumbers(el);\r\n        if ('x' == dim) {\r\n            return new V3(el, this.y, this.z);\r\n        }\r\n        if ('y' == dim) {\r\n            return new V3(this.x, el, this.z);\r\n        }\r\n        return new V3(this.x, this.y, el);\r\n    }\r\n    hashCode() {\r\n        function floatHashCode$$1(f) {\r\n            return ~~(f * (1 << 28));\r\n        }\r\n        return ~~((floatHashCode$$1(this.x) * 31 + floatHashCode$$1(this.y)) * 31 + floatHashCode$$1(this.z));\r\n    }\r\n    hashCodes() {\r\n        //function floatHashCode(f) {\r\n        //\treturn ~~(f * (1 << 28))\r\n        //}\r\n        // compare hashCode.floatHashCode\r\n        // the following ops are equivalent to\r\n        // floatHashCode((el - NLA_PRECISION) % (2 * NLA_PRECISION))\r\n        // this results in the hashCode for the (out of 8 possible) cube with the lowest hashCode\r\n        // the other 7 can be calculated by adding constants\r\n        const xHC = ~~(this.x * (1 << 28) - 0.5), yHC = ~~(this.y * (1 << 28) - 0.5), zHC = ~~(this.z * (1 << 28) - 0.5), hc = ~~((xHC * 31 + yHC) * 31 + zHC);\r\n        return [\r\n            ~~(hc),\r\n            ~~(hc + 961),\r\n            ~~(hc + 31),\r\n            ~~(hc + 31 + 961),\r\n            ~~(hc + 1),\r\n            ~~(hc + 1 + 961),\r\n            ~~(hc + 1 + 31),\r\n            ~~(hc + 1 + 31 + 961),\r\n        ];\r\n    }\r\n    //static areDisjoint(it: Iterable<V3>): boolean {\r\n    //\tconst vSet = new CustomSet\r\n    //\tfor (const v of it) {\r\n    //\t\tif (!v.equals(vSet.canonicalizeLike(v))) {\r\n    //\t\t\t// like value already in set\r\n    //\t\t\treturn false\r\n    //\t\t}\r\n    //\t}\r\n    //\treturn true\r\n    //}\r\n    compareTo(other) {\r\n        if (this.x != other.x) {\r\n            return this.x - other.x;\r\n        }\r\n        else if (this.y != other.y) {\r\n            return this.y - other.y;\r\n        }\r\n        else {\r\n            return this.z - other.z;\r\n        }\r\n    }\r\n    compareTo2(other, eps = NLA_PRECISION) {\r\n        if (!eq2(this.x, other.x, eps)) {\r\n            return this.x - other.x;\r\n        }\r\n        else if (!eq2(this.y, other.y, eps)) {\r\n            return this.y - other.y;\r\n        }\r\n        else if (!eq2(this.z, other.z, eps)) {\r\n            return this.z - other.z;\r\n        }\r\n        else {\r\n            return 0;\r\n        }\r\n    }\r\n    toAngles() {\r\n        return {\r\n            theta: Math.atan2(this.y, this.x),\r\n            phi: Math.asin(this.z / this.length()),\r\n        };\r\n    }\r\n}\r\nV3.O = new V3(0, 0, 0);\r\nV3.X = new V3(1, 0, 0);\r\nV3.Y = new V3(0, 1, 0);\r\nV3.Z = new V3(0, 0, 1);\r\nV3.XY = new V3(1, 1, 0);\r\nV3.XYZ = new V3(1, 1, 1);\r\nV3.INF = new V3(Infinity, Infinity, Infinity);\r\nV3.UNITS = [V3.X, V3.Y, V3.Z];\r\nV3.NAMEMAP = new JavaMap()\r\n    .set(V3.O, 'V3.O')\r\n    .set(V3.X, 'V3.X')\r\n    .set(V3.Y, 'V3.Y')\r\n    .set(V3.Z, 'V3.Z')\r\n    .set(V3.XYZ, 'V3.XYZ')\r\n    .set(V3.INF, 'V3.INF');\r\n/**\r\n * Utility method for creating V3s\r\n *\r\n * Example usage:\r\n *\r\n *     V(1, 2, 3)\r\n *     V([1, 2, 3])\r\n *     V({ x: 1, y: 2, z: 3 })\r\n *     V(1, 2) * assumes z=0\r\n *     V([1, 2]) // assumes z=0\r\n *\r\n */\r\nfunction V(a, b, c) {\r\n    if (arguments.length == 3) {\r\n        return new V3(parseFloat(a), parseFloat(b), parseFloat(c));\r\n    }\r\n    else if (arguments.length == 2) {\r\n        return new V3(parseFloat(a), parseFloat(b), 0);\r\n    }\r\n    else if (arguments.length == 1) {\r\n        if (typeof (a) == 'object') {\r\n            if (a instanceof V3) {\r\n                // immutable, so\r\n                return a;\r\n            }\r\n            else if (a instanceof Array || a instanceof Float32Array || a instanceof Float64Array) {\r\n                if (2 == a.length) {\r\n                    return new V3(parseFloat(a[0]), parseFloat(a[1]), 0);\r\n                }\r\n                else if (3 == a.length) {\r\n                    return new V3(parseFloat(a[0]), parseFloat(a[1]), parseFloat(a[2]));\r\n                }\r\n            }\r\n            else if (('x' in a) && ('y' in a)) {\r\n                return new V3(parseFloat(a.x), parseFloat(a.y), 'z' in a ? parseFloat(a.z) : 0);\r\n            }\r\n        }\r\n    }\r\n    throw new Error('invalid arguments' + arguments);\r\n}\n\nconst P3YZ = { normal1: V3.X, w: 0 };\r\nconst P3ZX = { normal1: V3.Y, w: 0 };\r\nconst P3XY = { normal1: V3.Z, w: 0 };\r\nclass Transformable {\r\n    mirror(plane) {\r\n        return this.transform(M4.mirror(plane));\r\n    }\r\n    mirroredX() {\r\n        return this.mirror(P3YZ);\r\n    }\r\n    mirrorY() {\r\n        return this.mirror(P3ZX);\r\n    }\r\n    mirrorZ() {\r\n        return this.mirror(P3XY);\r\n    }\r\n    project(plane) {\r\n        return this.transform(M4.project(plane));\r\n    }\r\n    projectXY() {\r\n        return this.transform(M4.project(P3XY));\r\n    }\r\n    projectYZ() {\r\n        return this.transform(M4.project(P3YZ));\r\n    }\r\n    projectZX() {\r\n        return this.transform(M4.project(P3ZX));\r\n    }\r\n    translate(...args) {\r\n        return this.transform(M4.translate.apply(undefined, args), callsce.call(undefined, '.translate', ...args));\r\n    }\r\n    scale(...args) {\r\n        return this.transform(M4.scale.apply(undefined, args), callsce.call(undefined, '.scale', ...args));\r\n    }\r\n    rotateX(radians) {\r\n        return this.transform(M4.rotateX(radians), `.rotateX(${radians})`);\r\n    }\r\n    rotateY(radians) {\r\n        return this.transform(M4.rotateY(radians), `.rotateY(${radians})`);\r\n    }\r\n    rotateZ(radians) {\r\n        return this.transform(M4.rotateZ(radians), `.rotateZ(${radians})`);\r\n    }\r\n    rotate(rotationCenter, rotationAxis, radians) {\r\n        return this.transform(M4.rotateLine(rotationCenter, rotationAxis, radians), callsce('.rotate', rotationCenter, rotationAxis, radians));\r\n    }\r\n    rotateAB(from, to) {\r\n        return this.transform(M4.rotateAB(from, to), callsce('.rotateAB', from, to));\r\n    }\r\n    eulerZXZ(alpha, beta, gamma) {\r\n        throw new Error();\r\n        //return this.transform(M4.eulerZXZ(alpha, beta, gamma))\r\n    }\r\n    shearX(y, z) {\r\n        return this.transform(new M4([\r\n            1, y, z, 0,\r\n            0, 1, 0, 0,\r\n            0, 0, 1, 0,\r\n            0, 0, 0, 1\r\n        ]));\r\n    }\r\n    foo() {\r\n        return this.transform(M4.FOO);\r\n    }\r\n    bar() {\r\n        return this.transform(M4.BAR);\r\n    }\r\n    visit(visitor, ...args) {\r\n        let proto = Object.getPrototypeOf(this);\r\n        // walk up the prototype chain until we find a defined function in o\r\n        while (!visitor.hasOwnProperty(proto.constructor.name) && proto !== Transformable.prototype) {\r\n            proto = Object.getPrototypeOf(proto);\r\n        }\r\n        if (visitor.hasOwnProperty(proto.constructor.name)) {\r\n            return visitor[proto.constructor.name].apply(this, args);\r\n        }\r\n        else {\r\n            throw new Error('No implementation for ' + this.constructor.name);\r\n        }\r\n    }\r\n}\n\nconst { PI: PI$1, abs: abs$1 } = Math;\r\nclass M4 extends Matrix {\r\n    /**\r\n     * Takes 16 arguments in row-major order, which can be passed individually, as a list, or even as\r\n     * four lists, one for each row. If the arguments are omitted then the identity matrix is constructed instead.\r\n     */\r\n    constructor(...var_args) {\r\n        let m;\r\n        if (0 == arguments.length) {\r\n            m = new Float64Array(16);\r\n        }\r\n        else {\r\n            const flattened = Array.prototype.concat.apply([], arguments);\r\n            assert(flattened.length == 16, 'flattened.length == 16' + flattened.length);\r\n            m = new Float64Array(flattened);\r\n        }\r\n        super(4, 4, m);\r\n    }\r\n    get X() {\r\n        return this.transformVector(V3.X);\r\n    }\r\n    get Y() {\r\n        return this.transformVector(V3.Y);\r\n    }\r\n    get Z() {\r\n        return this.transformVector(V3.Z);\r\n    }\r\n    get O() {\r\n        return this.transformPoint(V3.O);\r\n    }\r\n    /**\r\n     * Returns the matrix that when multiplied with `matrix` results in the\r\n     * identity matrix. You can optionally pass an existing matrix in `result`\r\n     * to avoid allocating a new matrix. This implementation is from the Mesa\r\n     * OpenGL function `__gluInvertMatrixd()` found in `project.c`.\r\n     */\r\n    static inverse(matrix, result) {\r\n        assertInst(M4, matrix);\r\n        !result || assertInst(M4, result);\r\n        assert(matrix != result, 'matrix != result');\r\n        result = result || new M4();\r\n        const m = matrix.m, r = result.m;\r\n        // first compute transposed cofactor matrix:\r\n        // cofactor of an element is the determinant of the 3x3 matrix gained by removing the column and row belonging\r\n        // to the element\r\n        r[0] = m[5] * m[10] * m[15] - m[5] * m[14] * m[11] - m[6] * m[9] * m[15] + m[6] * m[13] * m[11] + m[7] * m[9] * m[14] - m[7] * m[13] * m[10];\r\n        r[1] = -m[1] * m[10] * m[15] + m[1] * m[14] * m[11] + m[2] * m[9] * m[15] - m[2] * m[13] * m[11] - m[3] * m[9] * m[14] + m[3] * m[13] * m[10];\r\n        r[2] = m[1] * m[6] * m[15] - m[1] * m[14] * m[7] - m[2] * m[5] * m[15] + m[2] * m[13] * m[7] + m[3] * m[5] * m[14] - m[3] * m[13] * m[6];\r\n        r[3] = -m[1] * m[6] * m[11] + m[1] * m[10] * m[7] + m[2] * m[5] * m[11] - m[2] * m[9] * m[7] - m[3] * m[5] * m[10] + m[3] * m[9] * m[6];\r\n        r[4] = -m[4] * m[10] * m[15] + m[4] * m[14] * m[11] + m[6] * m[8] * m[15] - m[6] * m[12] * m[11] - m[7] * m[8] * m[14] + m[7] * m[12] * m[10];\r\n        r[5] = m[0] * m[10] * m[15] - m[0] * m[14] * m[11] - m[2] * m[8] * m[15] + m[2] * m[12] * m[11] + m[3] * m[8] * m[14] - m[3] * m[12] * m[10];\r\n        r[6] = -m[0] * m[6] * m[15] + m[0] * m[14] * m[7] + m[2] * m[4] * m[15] - m[2] * m[12] * m[7] - m[3] * m[4] * m[14] + m[3] * m[12] * m[6];\r\n        r[7] = m[0] * m[6] * m[11] - m[0] * m[10] * m[7] - m[2] * m[4] * m[11] + m[2] * m[8] * m[7] + m[3] * m[4] * m[10] - m[3] * m[8] * m[6];\r\n        r[8] = m[4] * m[9] * m[15] - m[4] * m[13] * m[11] - m[5] * m[8] * m[15] + m[5] * m[12] * m[11] + m[7] * m[8] * m[13] - m[7] * m[12] * m[9];\r\n        r[9] = -m[0] * m[9] * m[15] + m[0] * m[13] * m[11] + m[1] * m[8] * m[15] - m[1] * m[12] * m[11] - m[3] * m[8] * m[13] + m[3] * m[12] * m[9];\r\n        r[10] = m[0] * m[5] * m[15] - m[0] * m[13] * m[7] - m[1] * m[4] * m[15] + m[1] * m[12] * m[7] + m[3] * m[4] * m[13] - m[3] * m[12] * m[5];\r\n        r[11] = -m[0] * m[5] * m[11] + m[0] * m[9] * m[7] + m[1] * m[4] * m[11] - m[1] * m[8] * m[7] - m[3] * m[4] * m[9] + m[3] * m[8] * m[5];\r\n        r[12] = -m[4] * m[9] * m[14] + m[4] * m[13] * m[10] + m[5] * m[8] * m[14] - m[5] * m[12] * m[10] - m[6] * m[8] * m[13] + m[6] * m[12] * m[9];\r\n        r[13] = m[0] * m[9] * m[14] - m[0] * m[13] * m[10] - m[1] * m[8] * m[14] + m[1] * m[12] * m[10] + m[2] * m[8] * m[13] - m[2] * m[12] * m[9];\r\n        r[14] = -m[0] * m[5] * m[14] + m[0] * m[13] * m[6] + m[1] * m[4] * m[14] - m[1] * m[12] * m[6] - m[2] * m[4] * m[13] + m[2] * m[12] * m[5];\r\n        r[15] = m[0] * m[5] * m[10] - m[0] * m[9] * m[6] - m[1] * m[4] * m[10] + m[1] * m[8] * m[6] + m[2] * m[4] * m[9] - m[2] * m[8] * m[5];\r\n        // calculate determinant using laplace expansion (cf https://en.wikipedia.org/wiki/Laplace_expansion),\r\n        // as we already have the cofactors. We multiply a column by a row as the cofactor matrix is transposed.\r\n        const det = m[0] * r[0] + m[1] * r[4] + m[2] * r[8] + m[3] * r[12];\r\n        // assert(!isZero(det), 'det may not be zero, i.e. the matrix is not invertible')\r\n        let i = 16;\r\n        while (i--) {\r\n            r[i] /= det;\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * Returns `matrix`, exchanging columns for rows. You can optionally pass an\r\n     * existing matrix in `result` to avoid allocating a new matrix.\r\n     */\r\n    static transpose(matrix, result) {\r\n        assertInst(M4, matrix);\r\n        !result || assertInst(M4, result);\r\n        assert(matrix != result, 'matrix != result');\r\n        result = result || new M4();\r\n        const m = matrix.m, r = result.m;\r\n        r[0] = m[0];\r\n        r[1] = m[4];\r\n        r[2] = m[8];\r\n        r[3] = m[12];\r\n        r[4] = m[1];\r\n        r[5] = m[5];\r\n        r[6] = m[9];\r\n        r[7] = m[13];\r\n        r[8] = m[2];\r\n        r[9] = m[6];\r\n        r[10] = m[10];\r\n        r[11] = m[14];\r\n        r[12] = m[3];\r\n        r[13] = m[7];\r\n        r[14] = m[11];\r\n        r[15] = m[15];\r\n        return result;\r\n    }\r\n    /**\r\n     * Returns the concatenation of the transforms for `left` and `right`.\r\n     */\r\n    static multiply(left, right, result) {\r\n        assertInst(M4, left, right);\r\n        !result || assertInst(M4, result);\r\n        assert(left != result, 'left != result');\r\n        assert(right != result, 'right != result');\r\n        result = result || new M4();\r\n        const a = left.m, b = right.m, r = result.m;\r\n        r[0] = a[0] * b[0] + a[1] * b[4] + (a[2] * b[8] + a[3] * b[12]);\r\n        r[1] = a[0] * b[1] + a[1] * b[5] + (a[2] * b[9] + a[3] * b[13]);\r\n        r[2] = a[0] * b[2] + a[1] * b[6] + (a[2] * b[10] + a[3] * b[14]);\r\n        r[3] = a[0] * b[3] + a[1] * b[7] + (a[2] * b[11] + a[3] * b[15]);\r\n        r[4] = a[4] * b[0] + a[5] * b[4] + (a[6] * b[8] + a[7] * b[12]);\r\n        r[5] = a[4] * b[1] + a[5] * b[5] + (a[6] * b[9] + a[7] * b[13]);\r\n        r[6] = a[4] * b[2] + a[5] * b[6] + (a[6] * b[10] + a[7] * b[14]);\r\n        r[7] = a[4] * b[3] + a[5] * b[7] + (a[6] * b[11] + a[7] * b[15]);\r\n        r[8] = a[8] * b[0] + a[9] * b[4] + (a[10] * b[8] + a[11] * b[12]);\r\n        r[9] = a[8] * b[1] + a[9] * b[5] + (a[10] * b[9] + a[11] * b[13]);\r\n        r[10] = a[8] * b[2] + a[9] * b[6] + (a[10] * b[10] + a[11] * b[14]);\r\n        r[11] = a[8] * b[3] + a[9] * b[7] + (a[10] * b[11] + a[11] * b[15]);\r\n        r[12] = a[12] * b[0] + a[13] * b[4] + (a[14] * b[8] + a[15] * b[12]);\r\n        r[13] = a[12] * b[1] + a[13] * b[5] + (a[14] * b[9] + a[15] * b[13]);\r\n        r[14] = a[12] * b[2] + a[13] * b[6] + (a[14] * b[10] + a[15] * b[14]);\r\n        r[15] = a[12] * b[3] + a[13] * b[7] + (a[14] * b[11] + a[15] * b[15]);\r\n        return result;\r\n    }\r\n    static copy(src, result = new M4()) {\r\n        assertInst(M4, src, result);\r\n        assert(result != src, 'result != src');\r\n        const s = src.m, d = result.m;\r\n        let i = 16;\r\n        while (i--) {\r\n            d[i] = s[i];\r\n        }\r\n        return result;\r\n    }\r\n    static forSys(e0, e1, e2 = e0.cross(e1), origin = V3.O) {\r\n        assertVectors(e0, e1, e2, origin);\r\n        return new M4(e0.x, e1.x, e2.x, origin.x, e0.y, e1.y, e2.y, origin.y, e0.z, e1.z, e2.z, origin.z, 0, 0, 0, 1);\r\n    }\r\n    static forRows(n0, n1, n2, n3 = V3.O) {\r\n        assertVectors(n0, n1, n2, n3);\r\n        return new M4(n0.x, n0.y, n0.z, 0, n1.x, n1.y, n1.z, 0, n2.x, n2.y, n2.z, 0, n3.x, n3.y, n3.z, 1);\r\n    }\r\n    /**\r\n     * Returns an identity matrix. You can optionally pass an existing matrix in `result` to avoid allocating a new\r\n     * matrix. This emulates the OpenGL function `glLoadIdentity()`\r\n     *\r\n     * Unless initializing a matrix to be modified, use M4.IDENTITY\r\n     */\r\n    static identity(result = new M4()) {\r\n        assertInst(M4, result);\r\n        const m = result.m;\r\n        m[0] = m[5] = m[10] = m[15] = 1;\r\n        m[1] = m[2] = m[3] = m[4] = m[6] = m[7] = m[8] = m[9] = m[11] = m[12] = m[13] = m[14] = 0;\r\n        return result;\r\n    }\r\n    /**\r\n     * Creates a new M4 initialized by a user defined callback function\r\n     *\r\n     * @param f signature: (elRow, elCol, elIndex) =>\r\n     *     el, where elIndex is the row-major index, i.e. eLindex == elRow * 4 + elCol\r\n     * @param result\r\n     */\r\n    static fromFunction4(f, result = new M4()) {\r\n        assert(typeof f == 'function');\r\n        assertInst(M4, result);\r\n        const m = result.m;\r\n        let i = 16;\r\n        while (i--) {\r\n            m[i] = f(Math.floor(i / 4), i % 4, i);\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     ### GL.Matrix.perspective(fov, aspect, near, far[, result])\r\n\r\n     */\r\n    /**\r\n     * ## hjghfhg jhg hjg jhkg jhg jkh jhg jh gjh {@see V3.O}\r\n     * {@see perspectiveRad}\r\n     * perspectiveRad\r\n     * ```\r\n     *  test ```\r\n     * @param fovDegrees in degrees\r\n     * @param aspect aspect ratio = width/height of viewport\r\n     */\r\n    static perspective(fovDegrees, aspect, near, far, result = new M4()) {\r\n        return M4.perspectiveRad(fovDegrees * DEG, aspect, near, far, result);\r\n    }\r\n    static perspectiveRad(fov, aspect, near, far, result = new M4()) {\r\n        assertInst(M4, result);\r\n        assertNumbers(fov, aspect, near, far);\r\n        const y = Math.tan(fov / 2) * near;\r\n        const x = y * aspect;\r\n        return M4.frustum(-x, x, -y, y, near, far, result);\r\n    }\r\n    // the OpenGL function `glFrustum()`.\r\n    static frustum(left, right, bottom, top, near, far, result) {\r\n        assertNumbers(left, right, bottom, top, near, far);\r\n        assert(0 < near, '0 < near');\r\n        assert(near < far, 'near < far');\r\n        !result || assertInst(M4, result);\r\n        result = result || new M4();\r\n        const m = result.m;\r\n        m[0] = 2 * near / (right - left);\r\n        m[1] = 0;\r\n        m[2] = (right + left) / (right - left);\r\n        m[3] = 0;\r\n        m[4] = 0;\r\n        m[5] = 2 * near / (top - bottom);\r\n        m[6] = (top + bottom) / (top - bottom);\r\n        m[7] = 0;\r\n        m[8] = 0;\r\n        m[9] = 0;\r\n        m[10] = -(far + near) / (far - near);\r\n        m[11] = -2 * far * near / (far - near);\r\n        m[12] = 0;\r\n        m[13] = 0;\r\n        m[14] = -1;\r\n        m[15] = 0;\r\n        return result;\r\n    }\r\n    /**\r\n     * Returns a new M4 representing the a projection through/towards a point onto a plane.\r\n     */\r\n    static projectPlanePoint(p, plane, result = new M4()) {\r\n        assertVectors(p, plane.normal1);\r\n        assertInst(M4, result);\r\n        const m = result.m;\r\n        const n = plane.normal1, w = plane.w;\r\n        const np = n.dot(p);\r\n        m[0] = p.x * n.x + w - np;\r\n        m[1] = p.x * n.y;\r\n        m[2] = p.x * n.z;\r\n        m[3] = -w * p.x;\r\n        m[4] = p.y * n.x;\r\n        m[5] = p.y * n.y + w - np;\r\n        m[6] = p.y * n.z;\r\n        m[7] = -w * p.y;\r\n        m[8] = p.z * n.x;\r\n        m[9] = p.z * n.y;\r\n        m[10] = p.z * n.z + w - np;\r\n        m[11] = -w * p.z;\r\n        m[12] = n.x;\r\n        m[13] = n.y;\r\n        m[14] = n.z;\r\n        m[15] = -np;\r\n        return result;\r\n    }\r\n    /**\r\n     * Orthographic/orthogonal projection. Transforms the cuboid with the dimensions X: [left right] Y: [bottom, top]\r\n     * Z: [near far] to the cuboid X: [-1 1] Y [-1 1] Z [-1, 1]\r\n     */\r\n    static ortho(left, right, bottom, top, near, far, result = new M4()) {\r\n        assertNumbers(left, right, bottom, top, near, far);\r\n        assertInst(M4, result);\r\n        const m = result.m;\r\n        m[0] = 2 / (right - left);\r\n        m[1] = 0;\r\n        m[2] = 0;\r\n        m[3] = -(right + left) / (right - left);\r\n        m[4] = 0;\r\n        m[5] = 2 / (top - bottom);\r\n        m[6] = 0;\r\n        m[7] = -(top + bottom) / (top - bottom);\r\n        m[8] = 0;\r\n        m[9] = 0;\r\n        m[10] = -2 / (far - near);\r\n        m[11] = -(far + near) / (far - near);\r\n        m[12] = 0;\r\n        m[13] = 0;\r\n        m[14] = 0;\r\n        m[15] = 1;\r\n        return result;\r\n    }\r\n    static scale(...args) {\r\n        let x, y, z, result;\r\n        if (args[0] instanceof V3) {\r\n            assert(args.length <= 2);\r\n            ({ x, y, z } = args[0]);\r\n            result = args[1];\r\n        }\r\n        else if ('number' != typeof args[1]) {\r\n            x = y = z = args[0];\r\n            result = args[1];\r\n        }\r\n        else {\r\n            assert(args.length <= 4);\r\n            x = args[0];\r\n            y = args[1];\r\n            z = undefined != args[2] ? args[2] : 1;\r\n            result = args[3];\r\n        }\r\n        undefined == result && (result = new M4());\r\n        assertInst(M4, result);\r\n        assertNumbers(x, y, z);\r\n        const m = result.m;\r\n        m[0] = x;\r\n        m[1] = 0;\r\n        m[2] = 0;\r\n        m[3] = 0;\r\n        m[4] = 0;\r\n        m[5] = y;\r\n        m[6] = 0;\r\n        m[7] = 0;\r\n        m[8] = 0;\r\n        m[9] = 0;\r\n        m[10] = z;\r\n        m[11] = 0;\r\n        m[12] = 0;\r\n        m[13] = 0;\r\n        m[14] = 0;\r\n        m[15] = 1;\r\n        return result;\r\n    }\r\n    static translate(...args) {\r\n        let x, y, z, result;\r\n        if (args[0] instanceof V3) {\r\n            assert(args.length <= 2);\r\n            ({ x, y, z } = args[0]);\r\n            result = args[1];\r\n        }\r\n        else {\r\n            assert(args.length <= 4);\r\n            x = args[0];\r\n            y = undefined != args[1] ? args[1] : 0;\r\n            z = undefined != args[2] ? args[2] : 0;\r\n            result = args[3];\r\n        }\r\n        undefined == result && (result = new M4());\r\n        assertInst(M4, result);\r\n        assertNumbers(x, y, z);\r\n        const m = result.m;\r\n        m[0] = 1;\r\n        m[1] = 0;\r\n        m[2] = 0;\r\n        m[3] = x;\r\n        m[4] = 0;\r\n        m[5] = 1;\r\n        m[6] = 0;\r\n        m[7] = y;\r\n        m[8] = 0;\r\n        m[9] = 0;\r\n        m[10] = 1;\r\n        m[11] = z;\r\n        m[12] = 0;\r\n        m[13] = 0;\r\n        m[14] = 0;\r\n        m[15] = 1;\r\n        return result;\r\n    }\r\n    /**\r\n     * Returns a matrix that rotates by `a` degrees around the vector (x, y, z). You can optionally pass an existing\r\n     * matrix in `result` to avoid allocating a new matrix. This emulates the OpenGL function `glRotate()`.\r\n     */\r\n    //static rotation(radians: raddd, x: number, y: number, z: number, result?: M4): M4\r\n    static rotate(radians, v, result) {\r\n        undefined == result && (result = new M4());\r\n        assertInst(M4, result);\r\n        let { x, y, z } = v;\r\n        assert(!new V3(x, y, z).likeO(), '!V(x, y, z).likeO()');\r\n        const m = result.m;\r\n        const d = Math.sqrt(x * x + y * y + z * z);\r\n        x /= d;\r\n        y /= d;\r\n        z /= d;\r\n        const cos = Math.cos(radians), sin = Math.sin(radians), t = 1 - cos;\r\n        m[0] = x * x * t + cos;\r\n        m[1] = x * y * t - z * sin;\r\n        m[2] = x * z * t + y * sin;\r\n        m[3] = 0;\r\n        m[4] = y * x * t + z * sin;\r\n        m[5] = y * y * t + cos;\r\n        m[6] = y * z * t - x * sin;\r\n        m[7] = 0;\r\n        m[8] = z * x * t - y * sin;\r\n        m[9] = z * y * t + x * sin;\r\n        m[10] = z * z * t + cos;\r\n        m[11] = 0;\r\n        m[12] = 0;\r\n        m[13] = 0;\r\n        m[14] = 0;\r\n        m[15] = 1;\r\n        return result;\r\n    }\r\n    /**\r\n     * Returns a matrix that puts the camera at the eye point `ex, ey, ez` looking\r\n     * toward the center point `cx, cy, cz` with an up direction of `ux, uy, uz`.\r\n     * You can optionally pass an existing matrix in `result` to avoid allocating\r\n     * a new matrix. This emulates the OpenGL function `gluLookAt()`.\r\n     */\r\n    static lookAt(eye, focus, up, result) {\r\n        assert(3 == arguments.length || 4 == arguments.length, '3 == arguments.length || 4 == arguments.length');\r\n        assertVectors(eye, focus, up);\r\n        !result || assertInst(M4, result);\r\n        result = result || new M4();\r\n        const m = result.m;\r\n        const f = eye.minus(focus).unit();\r\n        const s = up.cross(f).unit();\r\n        const t = f.cross(s).unit();\r\n        m[0] = s.x;\r\n        m[1] = s.y;\r\n        m[2] = s.z;\r\n        m[3] = -s.dot(eye);\r\n        m[4] = t.x;\r\n        m[5] = t.y;\r\n        m[6] = t.z;\r\n        m[7] = -t.dot(eye);\r\n        m[8] = f.x;\r\n        m[9] = f.y;\r\n        m[10] = f.z;\r\n        m[11] = -f.dot(eye);\r\n        m[12] = 0;\r\n        m[13] = 0;\r\n        m[14] = 0;\r\n        m[15] = 1;\r\n        return result;\r\n    }\r\n    /**\r\n     * Create a rotation matrix for rotating around the X axis\r\n     */\r\n    static rotateX(radians) {\r\n        assertNumbers(radians);\r\n        const sin = Math.sin(radians), cos = Math.cos(radians);\r\n        const els = [\r\n            1, 0, 0, 0, 0, cos, -sin, 0, 0, sin, cos, 0, 0, 0, 0, 1,\r\n        ];\r\n        return new M4(els);\r\n    }\r\n    /**\r\n     * Create a rotation matrix for rotating around the Y axis\r\n     */\r\n    static rotateY(radians) {\r\n        const sin = Math.sin(radians), cos = Math.cos(radians);\r\n        const els = [\r\n            cos, 0, sin, 0, 0, 1, 0, 0, -sin, 0, cos, 0, 0, 0, 0, 1,\r\n        ];\r\n        return new M4(els);\r\n    }\r\n    /**\r\n     * Create a rotation matrix for rotating around the Z axis\r\n     */\r\n    static rotateZ(radians) {\r\n        const sin = Math.sin(radians), cos = Math.cos(radians);\r\n        const els = [\r\n            cos, -sin, 0, 0, sin, cos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,\r\n        ];\r\n        return new M4(els);\r\n    }\r\n    /**\r\n     * New rotation matrix such that result.transformVector(a).isParallelTo(b) through smallest rotation.\r\n     * Performs no scaling.\r\n     */\r\n    static rotateAB(a, b, result) {\r\n        // see http://inside.mines.edu/fs_home/gmurray/ArbitraryAxisRotation/\r\n        assertVectors(a, b);\r\n        !result || assertInst(M4, result);\r\n        const rotationAxis = a.cross(b), rotationAxisLength = rotationAxis.length();\r\n        if (eq0(rotationAxisLength)) {\r\n            return M4.identity(result);\r\n        }\r\n        const radians = Math.atan2(rotationAxisLength, a.dot(b));\r\n        return M4.rotateLine(V3.O, rotationAxis, radians, result);\r\n    }\r\n    /**\r\n     * Matrix for rotation about arbitrary line defined by an anchor point and direction.\r\n     * rotationAxis does not need to be unit\r\n     */\r\n    static rotateLine(rotationAnchor, rotationAxis, radians, result) {\r\n        // see http://inside.mines.edu/fs_home/gmurray/ArbitraryAxisRotation/\r\n        assertVectors(rotationAnchor, rotationAxis);\r\n        assertNumbers(radians);\r\n        !result || assertInst(M4, result);\r\n        result = result || new M4();\r\n        rotationAxis = rotationAxis.unit();\r\n        const ax = rotationAnchor.x, ay = rotationAnchor.y, az = rotationAnchor.z, dx = rotationAxis.x, dy = rotationAxis.y, dz = rotationAxis.z;\r\n        const m = result.m, cos = Math.cos(radians), sin = Math.sin(radians);\r\n        m[0] = dx * dx + (dy * dy + dz * dz) * cos;\r\n        m[1] = dx * dy * (1 - cos) - dz * sin;\r\n        m[2] = dx * dz * (1 - cos) + dy * sin;\r\n        m[3] = (ax * (dy * dy + dz * dz) - dx * (ay * dy + az * dz)) * (1 - cos) + (ay * dz - az * dy) * sin;\r\n        m[4] = dx * dy * (1 - cos) + dz * sin;\r\n        m[5] = dy * dy + (dx * dx + dz * dz) * cos;\r\n        m[6] = dy * dz * (1 - cos) - dx * sin;\r\n        m[7] = (ay * (dx * dx + dz * dz) - dy * (ax * dx + az * dz)) * (1 - cos) + (az * dx - ax * dz) * sin;\r\n        m[8] = dx * dz * (1 - cos) - dy * sin;\r\n        m[9] = dy * dz * (1 - cos) + dx * sin;\r\n        m[10] = dz * dz + (dx * dx + dy * dy) * cos;\r\n        m[11] = (az * (dx * dx + dy * dy) - dz * (ax * dx + ay * dy)) * (1 - cos) + (ax * dy - ay * dx) * sin;\r\n        m[12] = 0;\r\n        m[13] = 0;\r\n        m[14] = 0;\r\n        m[15] = 1;\r\n        return result;\r\n    }\r\n    /**\r\n     * Create an affine matrix for mirroring into an arbitrary plane:\r\n     */\r\n    static mirror(plane, result = new M4()) {\r\n        assertVectors(plane.normal1);\r\n        assertInst(M4, result);\r\n        const [nx, ny, nz] = plane.normal1;\r\n        const w = plane.w;\r\n        const m = result.m;\r\n        m[0] = 1.0 - 2.0 * nx * nx;\r\n        m[1] = -2.0 * ny * nx;\r\n        m[2] = -2.0 * nz * nx;\r\n        m[3] = 2.0 * nx * w;\r\n        m[4] = -2.0 * nx * ny;\r\n        m[5] = 1.0 - 2.0 * ny * ny;\r\n        m[6] = -2.0 * nz * ny;\r\n        m[7] = 2.0 * ny * w;\r\n        m[8] = -2.0 * nx * nz;\r\n        m[9] = -2.0 * ny * nz;\r\n        m[10] = 1.0 - 2.0 * nz * nz;\r\n        m[11] = 2.0 * nz * w;\r\n        m[12] = 0;\r\n        m[13] = 0;\r\n        m[14] = 0;\r\n        m[15] = 1;\r\n        return result;\r\n    }\r\n    /**\r\n     *\r\n     * @param plane\r\n     * @param dir Projection direction. Optional, if not specified plane normal1 will be used.\r\n     * @param result {@see M4}\r\n     */\r\n    static project(plane, dir = plane.normal1, result = new M4()) {\r\n        // TODO: doc\r\n        /**\r\n         * plane.normal1 DOT (p + lambda * dir) = w (1)\r\n         * extract lambda:\r\n         * plane.normal1 DOT p + lambda * plane.normal1 DOT dir = w\r\n         * lambda = (w - plane.normal1 DOT p) / plane.normal1 DOT dir\r\n         * result = p + lambda * dir\r\n         * result = p + dir * (w - plane.normal1 DOT p) / plane.normal1 DOT dir\r\n         * result =  w * dir / (plane.normal1 DOT dir) + p - plane.normal1 DOT p * dir / (plane.normal1 DOT dir) *\r\n         *\r\n\r\n         a + d * (w - n . a) / (nd)\r\n         a + dw - d * na\r\n         */\r\n        assertVectors(dir, plane.normal1);\r\n        assertInst(M4, result);\r\n        const w = plane.w;\r\n        const m = result.m;\r\n        const nd = plane.normal1.dot(dir);\r\n        const { x: nx, y: ny, z: nz } = plane.normal1;\r\n        const { x: dx, y: dy, z: dz } = dir.div(nd);\r\n        /*\r\n         rejectedFrom: return this.minus(b.times(this.dot(b) / b.dot(b)))\r\n         return M4.forSys(\r\n         V3.X.rejectedFrom(plane.normal1),\r\n         V3.Y.rejectedFrom(plane.normal1),\r\n         V3.Z.rejectedFrom(plane.normal1),\r\n         plane.anchor,\r\n         result\r\n         )\r\n         */\r\n        m[0] = 1.0 - nx * dx;\r\n        m[1] = -ny * dx;\r\n        m[2] = -nz * dx;\r\n        m[3] = dx * w;\r\n        m[4] = -nx * dy;\r\n        m[5] = 1.0 - ny * dy;\r\n        m[6] = -nz * dy;\r\n        m[7] = dy * w;\r\n        m[8] = -nx * dz;\r\n        m[9] = -ny * dz;\r\n        m[10] = 1.0 - nz * dz;\r\n        m[11] = dz * w;\r\n        m[12] = 0;\r\n        m[13] = 0;\r\n        m[14] = 0;\r\n        m[15] = 1;\r\n        return result;\r\n    }\r\n    static lineProjection(line, result = new M4()) {\r\n        assertVectors(line.anchor, line.dir1);\r\n        assertInst(M4, result);\r\n        const ax = line.anchor.x, ay = line.anchor.y, az = line.anchor.z;\r\n        const dx = line.dir1.x, dy = line.dir1.y, dz = line.dir1.z;\r\n        const m = result.m;\r\n        /*\r\n         projectedOn: return b.times(this.dot(b) / b.dot(b))\r\n         */\r\n        m[0] = dx * dx;\r\n        m[1] = dx * dy;\r\n        m[2] = dx * dz;\r\n        m[3] = ax;\r\n        m[4] = dy * dx;\r\n        m[5] = dy * dy;\r\n        m[6] = dy * dz;\r\n        m[7] = ay;\r\n        m[8] = dz * dx;\r\n        m[9] = dz * dy;\r\n        m[10] = dz * dz;\r\n        m[11] = az;\r\n        m[12] = 0;\r\n        m[13] = 0;\r\n        m[14] = 0;\r\n        m[15] = 1;\r\n        return result;\r\n    }\r\n    /**\r\n     Returns a perspective transform matrix, which makes far away objects appear smaller than nearby objects. The `aspect` argument should be the width divided by the height of your viewport and `fov` is the top-to-bottom angle of the field of view in degrees. You can optionally pass an existing matrix in `result` to avoid allocating a new matrix. This emulates the OpenGL function `gluPerspective()`.\r\n     */\r\n    static multiplyMultiple(...m4s) {\r\n        if (0 == m4s.length)\r\n            return M4.identity();\r\n        let temp = M4.identity(), result = m4s[0].copy();\r\n        for (let i = 1; i < m4s.length; i++) {\r\n            M4.multiply(result, m4s[i], temp);\r\n            {\r\n                [temp, result] = [result, temp];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    static pointInversion(p, result = new M4()) {\r\n        assertVectors(p);\r\n        assertInst(M4, result);\r\n        const m = result.m;\r\n        m[0] = -1;\r\n        m[1] = 0;\r\n        m[2] = 0;\r\n        m[3] = 2 * p.x;\r\n        m[4] = 0;\r\n        m[5] = -1;\r\n        m[6] = 0;\r\n        m[7] = 2 * p.y;\r\n        m[8] = 0;\r\n        m[9] = 0;\r\n        m[10] = -1;\r\n        m[11] = 2 * p.z;\r\n        m[12] = 0;\r\n        m[13] = 0;\r\n        m[14] = 0;\r\n        m[15] = 1;\r\n        return result;\r\n    }\r\n    // ### GL.Matrix.frustum(left, right, bottom, top, near, far[, result])\r\n    //\r\n    // Sets up a viewing frustum, which is shaped like a truncated pyramid with the\r\n    // camera where the point of the pyramid would be. You can optionally pass an\r\n    // existing matrix in `result` to avoid allocating a new matrix. This emulates\r\n    /**\r\n     * Returns a new M4 which is equal to the inverse of this.\r\n     */\r\n    inversed() {\r\n        return M4.inverse(this);\r\n    }\r\n    /**\r\n     * Matrix trace is defined as the sum of the elements of the main diagonal.\r\n     */\r\n    trace() {\r\n        return this.m[0] + this.m[5] + this.m[10] + this.m[15];\r\n    }\r\n    as3x3() {\r\n        const result = M4.copy(this), m = result.m;\r\n        m[3] = m[7] = m[11] = m[12] = m[13] = m[14] = 0;\r\n        m[15] = 1;\r\n        return result;\r\n    }\r\n    transform(m4) {\r\n        return m4.times(this);\r\n    }\r\n    realEigenValues3() {\r\n        const m = this.m;\r\n        assert(0 == m[12] && 0 == m[13] && 0 == m[14]);\r\n        // determinant of (this - λI):\r\n        // | a-λ  b   c  |\r\n        // |  d  e-λ  f  | = -λ^3 + λ^2 (a+e+i) + λ (-a e-a i+b d+c g-e i+f h) + a(ei - fh) - b(di - fg) + c(dh - eg)\r\n        // |  g   h  i-λ |\r\n        const [a, b, c, , d, e, f, , g, h, i] = m;\r\n        // det(this - λI) = -λ^3 +λ^2 (a+e+i) + λ (-a e-a i-b d+c g-e i+f h)+ (a e i-a f h-b d i+b f g+c d h-c e g)\r\n        const s = -1;\r\n        const t = a + e + i; // equivalent to trace of matrix\r\n        const u = -a * e - a * i + b * d + c * g - e * i + f * h; // equivalent to 1/2 (trace(this²) - trace²(A))\r\n        const w = a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g); // equivalent to matrix determinant\r\n        console.log(s, t, u, w);\r\n        return solveCubicReal2(s, t, u, w);\r\n    }\r\n    realEigenVectors3() {\r\n        const eigenValues = this.realEigenValues3();\r\n        const this3x3 = this.times(M4.IDENTITY3);\r\n        console.log(this.toString());\r\n        console.log(this3x3.toString());\r\n        let mats = eigenValues.map(ev => M4.IDENTITY3.scale(-ev).plus(this3x3));\r\n        console.log(mats.map(m => m.determinant3()));\r\n        console.log(mats.map(m => '' + m.toString(v => '' + v)).join('\\n\\n'));\r\n        console.log(mats.map(m => '' + m.gauss().U.toString(v => '' + v)).join('\\n\\n'));\r\n        console.log('mats.map(m=>m.rank())', mats.map(m => m.rank()));\r\n        if (1 == eigenValues.length) {\r\n            console.log(mats[0].toString());\r\n            assertf(() => 0 == mats[0].rank());\r\n            // col vectors\r\n            return arrayFromFunction(3, col => new V3(this.m[col], this.m[4 + col], this.m[8 + col]));\r\n        }\r\n        if (2 == eigenValues.length) {\r\n            // one matrix should have rank 1, the other rank 2\r\n            if (1 == mats[0].rank()) {\r\n                mats = [mats[1], mats[0]];\r\n            }\r\n            assertf(() => 2 == mats[0].rank());\r\n            assertf(() => 1 == mats[1].rank());\r\n            // mat[0] has rank 2, mat[1] has rank 1\r\n            const gauss0 = mats[0].gauss().U;\r\n            const eigenVector0 = gauss0.row(0).cross(gauss0.row(1)).V3().unit();\r\n            const planeNormal = mats[1].gauss().U.row(0).V3();\r\n            const eigenVector1 = planeNormal.getPerpendicular().unit();\r\n            const eigenVector2 = eigenVector0.cross(eigenVector1).rejectedFrom(planeNormal);\r\n            return [eigenVector0, eigenVector1, eigenVector2];\r\n        }\r\n        if (3 == eigenValues.length) {\r\n            mats.forEach((mat, i) => assert(2 == mat.rank(), i + ': ' + mat.rank()));\r\n            // the (A - lambda I) matrices map to a plane. This means, that there is an entire line in R³ which maps to\r\n            // the point V3.O\r\n            return mats.map(mat => {\r\n                const gauss = mat.gauss().U;\r\n                return gauss.row(0).cross(gauss.row(1)).V3().unit();\r\n            });\r\n        }\r\n        throw new Error('there cannot be more than 3 eigen values');\r\n    }\r\n    /**\r\n     * U * SIGMA * VSTAR = this\r\n     * U and VSTAR are orthogonal matrices\r\n     * SIGMA is a diagonal matrix\r\n     */\r\n    svd3() {\r\n        function matrixForCS(i, k, c, s) {\r\n            const m = M4.identity();\r\n            m.setEl(i, i, c);\r\n            m.setEl(k, k, c);\r\n            m.setEl(i, k, s);\r\n            m.setEl(k, i, -s);\r\n            return m;\r\n        }\r\n        const A = this.as3x3();\r\n        let S = A.transposed().times(A), V$$1 = M4.identity();\r\n        console.log(S.str);\r\n        for (let it = 0; it < 16; it++) {\r\n            console.log('blahg\\n', V$$1.times(S).times(V$$1.transposed()).str);\r\n            assert(V$$1.times(S).times(V$$1.transposed()).likeM4(A.transposed().times(A)), V$$1.times(S).times(V$$1.transposed()).str, A.transposed().times(A).str);\r\n            let maxOffDiagonal = 0, maxOffDiagonalIndex = 1, j = 10;\r\n            while (j--) {\r\n                const val = Math.abs(S.m[j]);\r\n                if (j % 4 != Math.floor(j / 4) && val > maxOffDiagonal) {\r\n                    maxOffDiagonal = val;\r\n                    maxOffDiagonalIndex = j;\r\n                }\r\n            }\r\n            const i = Math.floor(maxOffDiagonalIndex / 4), k = maxOffDiagonalIndex % 4;\r\n            const a_ii = S.m[5 * i], a_kk = S.m[5 * k], a_ik = S.m[maxOffDiagonalIndex];\r\n            const phi = a_ii === a_kk ? PI$1 / 4 : Math.atan(2 * a_ik / (a_ii - a_kk)) / 2;\r\n            console.log(maxOffDiagonalIndex, i, k, 'phi', phi);\r\n            const cos = Math.cos(phi), sin = Math.sin(phi);\r\n            const givensRotation = matrixForCS(i, k, cos, -sin);\r\n            assert(givensRotation.transposed().times(givensRotation).likeIdentity());\r\n            console.log(givensRotation.str);\r\n            V$$1 = V$$1.times(givensRotation);\r\n            S = M4.multiplyMultiple(givensRotation.transposed(), S, givensRotation);\r\n            console.log(S.str);\r\n        }\r\n        const sigma = S.map((el, elIndex) => elIndex % 5 == 0 ? Math.sqrt(el) : 0);\r\n        return {\r\n            U: M4.multiplyMultiple(A, V$$1, sigma.map((el, elIndex) => elIndex % 5 == 0 ? 1 / el : 0)),\r\n            SIGMA: sigma,\r\n            VSTAR: V$$1.transposed(),\r\n        };\r\n    }\r\n    map(fn) {\r\n        return M4.fromFunction4((x, y, i) => fn(this.m[i], i, this.m));\r\n    }\r\n    likeM4(m4) {\r\n        assertInst(M4, m4);\r\n        return this.m.every((el, index) => eq(el, m4.m[index]));\r\n    }\r\n    /**\r\n     * Returns a new M4 equal to the transpose of this.\r\n     */\r\n    transposed() {\r\n        return M4.transpose(this);\r\n    }\r\n    /**\r\n     * Returns a new M4 which equal to (this * matrix) (in that order)\r\n     */\r\n    times(matrix) {\r\n        return M4.multiply(this, matrix);\r\n    }\r\n    /**\r\n     * Transforms the vector as a point with a w coordinate of 1. This means translations will have an effect, for\r\n     * example.\r\n     */\r\n    transformPoint(v) {\r\n        assertVectors(v);\r\n        const m = this.m;\r\n        const vx = v.x, vy = v.y, vz = v.z, vw = 1;\r\n        const x = vx * m[0] + vy * m[1] + vz * m[2] + vw * m[3];\r\n        const y = vx * m[4] + vy * m[5] + vz * m[6] + vw * m[7];\r\n        const z = vx * m[8] + vy * m[9] + vz * m[10] + vw * m[11];\r\n        const w = vx * m[12] + vy * m[13] + vz * m[14] + vw * m[15];\r\n        // scale such that fourth element becomes 1:\r\n        return new V3(x / w, y / w, z / w);\r\n    }\r\n    /**\r\n     * Transforms the vector as a vector with a w coordinate of 0. This means translations will have no effect, for\r\n     * example. Will throw an exception if the calculated w component != 0. This occurs for example when attempting\r\n     * to transform a vector with a perspective matrix.\r\n     */\r\n    transformVector(v) {\r\n        assertVectors(v);\r\n        const m = this.m;\r\n        const w = v.x * m[12] + v.y * m[13] + v.z * m[14];\r\n        assert(w === 0, () => 'w != 0 needs to be true for this to make sense (w =' + w + this.str);\r\n        return new V3(m[0] * v.x + m[1] * v.y + m[2] * v.z, m[4] * v.x + m[5] * v.y + m[6] * v.z, m[8] * v.x + m[9] * v.y + m[10] * v.z);\r\n    }\r\n    transformedPoints(vs) {\r\n        return vs.map(v => this.transformPoint(v));\r\n    }\r\n    transformedVectors(vs) {\r\n        return vs.map(v => this.transformVector(v));\r\n    }\r\n    new() {\r\n        return new M4();\r\n    }\r\n    copy() {\r\n        return M4.copy(this);\r\n    }\r\n    isRegular() {\r\n        return !eq0(this.determinant());\r\n    }\r\n    isAxisAligned() {\r\n        const m = this.m;\r\n        return (1 >= +!eq0(m[0]) + +!eq0(m[1]) + +!eq0(m[2]))\r\n            && (1 >= +!eq0(m[4]) + +!eq0(m[5]) + +!eq0(m[6]))\r\n            && (1 >= +!eq0(m[8]) + +!eq0(m[9]) + +!eq0(m[10]));\r\n    }\r\n    /**\r\n     * A matrix M is orthogonal iff M * M^T = I\r\n     * I being the identity matrix.\r\n     *\r\n     * @returns If this matrix is orthogonal or very close to it. Comparison of the identity matrix and\r\n     * this * this^T is done with {@link #likeM4}\r\n     */\r\n    isOrthogonal() {\r\n        // return this.transposed().times(this).likeM4(M4.IDENTITY)\r\n        M4.transpose(this, M4.temp0);\r\n        M4.multiply(this, M4.temp0, M4.temp1);\r\n        return M4.IDENTITY.likeM4(M4.temp1);\r\n    }\r\n    /**\r\n     * A matrix M is symmetric iff M == M^T\r\n     * I being the identity matrix.\r\n     *\r\n     * @returns If this matrix is symmetric or very close to it. Comparison of the identity matrix and\r\n     * this * this^T is done with {@link #likeM4}\r\n     */\r\n    isSymmetric() {\r\n        M4.transpose(this, M4.temp0);\r\n        return this.likeM4(M4.temp0);\r\n    }\r\n    /**\r\n     * A matrix M is normal1 iff M * M^-T == M^T * M TODO: ^-T?\r\n     * I being the identity matrix.\r\n     *\r\n     * @returns If this matrix is symmetric or very close to it. Comparison of the identity matrix and\r\n     * this * this^T is done with {@link #likeM4}\r\n     */\r\n    isNormal() {\r\n        M4.transpose(this, M4.temp0); // temp0 = this^-T\r\n        M4.multiply(this, M4.temp0, M4.temp1); // temp1 = this * this^-T\r\n        M4.multiply(M4.temp0, this, M4.temp2); // temp2 = this^-T * this\r\n        return M4.temp1.likeM4(M4.temp2);\r\n    }\r\n    /**\r\n     * Determinant of matrix.\r\n     *\r\n     * Notes:\r\n     *      For matrices A and B\r\n     *      det(A * B) = det(A) * det(B)\r\n     *      det(A^-1) = 1 / det(A)\r\n     */\r\n    determinant() {\r\n        /*\r\n         | a b c d |\r\n         | e f g h |\r\n         | i j k l |\r\n         | m n o p |\r\n         */\r\n        const $ = this.m, a = $[0], b = $[1], c = $[2], d = $[3], e = $[4], f = $[5], g = $[6], h = $[7], i = $[8], j = $[9], k = $[10], l = $[11], m = $[12], n = $[13], o = $[14], p = $[15], klop = k * p - l * o, jlnp = j * p - l * n, jkno = j * o - k * n, ilmp = i * p - l * m, ikmo = i * o - k * m, ijmn = i * n - j * m;\r\n        return (a * (f * klop - g * jlnp + h * jkno)\r\n            - b * (e * klop - g * ilmp + h * ikmo)\r\n            + c * (e * jlnp - f * ilmp + h * ijmn)\r\n            - d * (e * jkno - f * ikmo + g * ijmn));\r\n    }\r\n    determinant3() {\r\n        const [a, b, c, , d, e, f, , g, h, i] = this.m;\r\n        const det = a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g);\r\n        return det;\r\n    }\r\n    /**\r\n     * determine whether this matrix is a mirroring transformation\r\n     */\r\n    isMirroring() {\r\n        /*\r\n         var u = V(this.m[0], this.m[4], this.m[8])\r\n         var v = V(this.m[1], this.m[5], this.m[9])\r\n         var w = V(this.m[2], this.m[6], this.m[10])\r\n\r\n         // for a true orthogonal, non-mirrored base, u.cross(v) == w\r\n         // If they have an opposite direction then we are mirroring\r\n         var mirrorvalue = u.cross(v).dot(w)\r\n         var ismirror = (mirrorvalue < 0)\r\n         return ismirror\r\n         */\r\n        return this.determinant() < 0; // TODO: also valid for 4x4?\r\n    }\r\n    /**\r\n     * Get the translation part of this matrix, i.e. the result of this.transformVector(V3.O)\r\n     */\r\n    getTranslation() {\r\n        const m = this.m, w = m[15];\r\n        return new V3(m[3] / w, m[7] / w, m[11] / w);\r\n    }\r\n    /**\r\n     * Returns this matrix scaled so that the determinant is 1.\r\n     * det(c * A) = (c ** n) * det(A) for n x n matrices,\r\n     * so we need to divide by the 4th root of the determinant\r\n     */\r\n    normalized() {\r\n        const detAbs = abs$1(this.determinant());\r\n        return 1 == detAbs ? this : this.divScalar(Math.pow(detAbs, 0.25));\r\n    }\r\n    /**\r\n     * Returns this matrix scaled so that the determinant is 1.\r\n     * det(c * A) = (c ** n) * det(A) for n x n matrices,\r\n     * so we need to divide by the 4th root of the determinant\r\n     */\r\n    normalized2() {\r\n        const div = this.m[15];\r\n        return 1 == div ? this : this.divScalar(Math.pow(div, 0.25));\r\n    }\r\n    /**\r\n     * Returns if the matrix has the following form (within NLA_PRECISION):\r\n     * a b c 0\r\n     * c d e 0\r\n     * f g h 0\r\n     * 0 0 0 1\r\n     */\r\n    is3x3() {\r\n        const m = this.m;\r\n        return eq(1, m[15])\r\n            && eq0(m[12]) && eq0(m[13]) && eq0(m[14])\r\n            && eq0(m[3]) && eq0(m[7]) && eq0(m[11]);\r\n    }\r\n    isNoProj() {\r\n        const m = this.m;\r\n        return 0 == m[12] && 0 == m[13] && 0 == m[14] && 1 == m[15];\r\n    }\r\n    likeIdentity() {\r\n        return this.m.every((val, i) => (i / 4 | 0) == (i % 4) ? eq(1, val) : eq0(val));\r\n    }\r\n    isIdentity() {\r\n        return this.m.every((val, i) => (i / 4 | 0) == (i % 4) ? 1 == val : 0 == val);\r\n    }\r\n    toString(f) {\r\n        f = f || ((v) => v.toFixed(6).replace(/([0.])(?=0*$)/g, ' ').toString());\r\n        assert(typeof f(0) == 'string', '' + typeof f(0));\r\n        // slice this.m to convert it to an Array (from TypeArray)\r\n        const rounded = Array.prototype.slice.call(this.m).map(f);\r\n        const colWidths = [0, 1, 2, 3].map((colIndex) => rounded.sliceStep(colIndex, 0, 4).map((x) => x.length).max());\r\n        return [0, 1, 2, 3].map((rowIndex) => rounded\r\n            .slice(rowIndex * 4, rowIndex * 4 + 4) // select matrix row\r\n            .map((x, colIndex) => repeatString(colWidths[colIndex] - x.length, ' ') + x) // pad numbers with\r\n            .join(' ')).join('\\n'); // join rows\r\n    }\r\n    isTranslation() {\r\n        // 2: any value, otherwise same value\r\n        const mask = [\r\n            1, 0, 0, 2,\r\n            0, 1, 0, 2,\r\n            0, 0, 1, 2,\r\n            0, 0, 0, 1\r\n        ];\r\n        return mask.every((expected, index) => expected == 2 || expected == this.m[index]);\r\n    }\r\n    toSource() {\r\n        if (this.isIdentity()) {\r\n            return 'M4.IDENTITY';\r\n        }\r\n        else if (this.isTranslation()) {\r\n            return callsce('M4.translate', this.O);\r\n        }\r\n        else if (this.isNoProj()) {\r\n            return !this.O.equals(V3.O)\r\n                ? callsce('M4.forSys', this.X, this.Y, this.Z, this.O)\r\n                : callsce('M4.forSys', this.X, this.Y, this.Z);\r\n        }\r\n        throw new Error();\r\n    }\r\n    xyAreaFactor() {\r\n        return this.transformVector(V3.X).cross(this.transformVector(V3.Y)).length();\r\n    }\r\n}\r\n/**\r\n * A simple (consists of integers), regular, non-orthogonal matrix, useful mainly for testing.\r\n * M4.BAR = M4.FOO.inverse()\r\n */\r\nM4.FOO = new M4(0, 1, 1, 2, 0.3, 0.4, 0.8, 13, 2.1, 3.4, 5.5, 8.9, 0, 0, 0, 1);\r\nM4.BAR = M4.FOO.inversed();\r\nM4.IDENTITY = M4.identity();\r\nM4.YZX = M4.forSys(V3.Y, V3.Z, V3.X);\r\nM4.ZXY = M4.forSys(V3.Z, V3.X, V3.Y);\r\nM4.IDENTITY3 = new M4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0);\r\nM4.temp0 = new M4();\r\nM4.temp1 = new M4();\r\nM4.temp2 = new M4();\r\nM4.NAMEMAP = new JavaMap()\r\n    .set(M4.IDENTITY3, 'M4.IDENTITY3')\r\n    .set(M4.FOO, 'M4.FOO')\r\n    .set(M4.BAR, 'M4.BAR')\r\n    .set(M4.IDENTITY, 'M4.IDENTITY')\r\n    .set(M4.ZXY, 'M4.ZXY')\r\n    .set(M4.YZX, 'M4.YZX');\r\nM4.prototype.height = 4;\r\nM4.prototype.width = 4;\r\nObject.assign(M4.prototype, Transformable.prototype);\n\nclass AABB extends Transformable {\r\n    constructor(min = V3.INF, max = V3.INF.negated()) {\r\n        super();\r\n        this.min = min;\r\n        this.max = max;\r\n        assertVectors(min, max);\r\n    }\r\n    static forXYZ(x, y, z) {\r\n        return new AABB(V3.O, new V3(x, y, z));\r\n    }\r\n    static forAABBs(aabbs) {\r\n        const result = new AABB();\r\n        for (const aabb of aabbs) {\r\n            result.addAABB(aabb);\r\n        }\r\n        return result;\r\n    }\r\n    addPoint(p) {\r\n        assertVectors(p);\r\n        this.min = this.min.min(p);\r\n        this.max = this.max.max(p);\r\n        return this;\r\n    }\r\n    addPoints(ps) {\r\n        ps.forEach(p => this.addPoint(p));\r\n        return this;\r\n    }\r\n    addAABB(aabb) {\r\n        assertInst(AABB, aabb);\r\n        this.addPoint(aabb.min);\r\n        this.addPoint(aabb.max);\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns the largest AABB contained in this which doesn't overlap with aabb\r\n     * @param aabb\r\n     */\r\n    withoutAABB(aabb) {\r\n        assertInst(AABB, aabb);\r\n        let min, max;\r\n        const volume = this.volume(), size = this.size();\r\n        let remainingVolume = -Infinity;\r\n        for (let i = 0; i < 3; i++) {\r\n            const dim = ['x', 'y', 'z'][i];\r\n            const cond = aabb.min[dim] - this.min[dim] > this.max[dim] - aabb.max[dim];\r\n            const dimMin = cond ? this.min[dim] : Math.max(this.min[dim], aabb.max[dim]);\r\n            const dimMax = !cond ? this.max[dim] : Math.min(this.max[dim], aabb.min[dim]);\r\n            const newRemainingVolume = (dimMax - dimMin) * volume / size[dim];\r\n            if (newRemainingVolume > remainingVolume) {\r\n                remainingVolume = newRemainingVolume;\r\n                min = this.min.withElement(dim, dimMin);\r\n                max = this.max.withElement(dim, dimMax);\r\n            }\r\n        }\r\n        return new AABB(min, max);\r\n    }\r\n    getIntersectionAABB(aabb) {\r\n        assertInst(AABB, aabb);\r\n        return new AABB(this.min.max(aabb.min), this.max.min(aabb.max));\r\n    }\r\n    touchesAABB(aabb) {\r\n        assertInst(AABB, aabb);\r\n        return !(this.min.x > aabb.max.x || this.max.x < aabb.min.x\r\n            || this.min.y > aabb.max.y || this.max.y < aabb.min.y\r\n            || this.min.z > aabb.max.z || this.max.z < aabb.min.z);\r\n    }\r\n    fuzzyTouchesAABB(aabb) {\r\n        assertInst(AABB, aabb);\r\n        return !(lt(aabb.max.x, this.min.x) || lt(this.max.x, aabb.min.x)\r\n            || lt(aabb.max.y, this.min.y) || lt(this.max.y, aabb.min.y)\r\n            || lt(aabb.max.z, this.min.z) || lt(this.max.z, aabb.min.z));\r\n    }\r\n    intersectsAABB(aabb) {\r\n        assertInst(AABB, aabb);\r\n        return !(this.min.x >= aabb.max.x || this.max.x <= aabb.min.x\r\n            || this.min.y >= aabb.max.y || this.max.y <= aabb.min.y\r\n            || this.min.z >= aabb.max.z || this.max.z <= aabb.min.z);\r\n    }\r\n    intersectsAABB2d(aabb) {\r\n        assertInst(AABB, aabb);\r\n        return !(this.min.x >= aabb.max.x || this.max.x <= aabb.min.x\r\n            || this.min.y >= aabb.max.y || this.max.y <= aabb.min.y);\r\n    }\r\n    containsPoint(p) {\r\n        assertVectors(p);\r\n        return this.min.x <= p.x && this.min.y <= p.y && this.min.z <= p.z\r\n            && this.max.x >= p.x && this.max.y >= p.y && this.max.z >= p.z;\r\n    }\r\n    containsSphere(center, radius) {\r\n        assertVectors(center);\r\n        assertNumbers(radius);\r\n        return this.distanceToPoint(center) > radius;\r\n    }\r\n    intersectsSphere(center, radius) {\r\n        assertVectors(center);\r\n        assertNumbers(radius);\r\n        return this.distanceToPoint(center) <= radius;\r\n    }\r\n    distanceToPoint(p) {\r\n        assertVectors(p);\r\n        const x = p.x, y = p.y, z = p.z;\r\n        const min = this.min, max = this.max;\r\n        if (this.containsPoint(p)) {\r\n            return Math.max(min.x - x, x - max.x, min.y - y, y - max.y, min.z - z, z - max.z);\r\n        }\r\n        return p.distanceTo(new V3(clamp(x, min.x, max.x), clamp(y, min.y, max.y), clamp(z, min.z, max.z)));\r\n    }\r\n    containsAABB(aabb) {\r\n        assertInst(AABB, aabb);\r\n        return this.containsPoint(aabb.min) && this.containsPoint(aabb.max);\r\n    }\r\n    likeAABB(aabb) {\r\n        assertInst(AABB, aabb);\r\n        return this.min.like(aabb.min) && this.max.like(aabb.max);\r\n    }\r\n    intersectsLine(line) {\r\n        assertVectors(line.anchor, line.dir1);\r\n        const dir = line.dir1.map(el => el || Number.MIN_VALUE);\r\n        const minTs = (this.min.minus(line.anchor)).divv(dir);\r\n        const maxTs = (this.max.minus(line.anchor)).divv(dir);\r\n        const tMin = minTs.min(maxTs).maxElement(), tMax = minTs.max(maxTs).minElement();\r\n        return tMin <= tMax && !(tMax < line.tMin || line.tMax < tMin);\r\n    }\r\n    hasVolume() {\r\n        return this.min.x <= this.max.x && this.min.y <= this.max.y && this.min.z <= this.max.z;\r\n    }\r\n    volume() {\r\n        if (!this.hasVolume()) {\r\n            return -1;\r\n        }\r\n        const v = this.max.minus(this.min);\r\n        return v.x * v.y * v.z;\r\n    }\r\n    size() {\r\n        return this.max.minus(this.min);\r\n    }\r\n    getCenter() {\r\n        return this.min.plus(this.max).div(2);\r\n    }\r\n    transform(m4) {\r\n        assertInst(M4, m4);\r\n        assert(m4.isAxisAligned());\r\n        const aabb = new AABB();\r\n        aabb.addPoint(m4.transformPoint(this.min));\r\n        aabb.addPoint(m4.transformPoint(this.max));\r\n        return aabb;\r\n    }\r\n    ofTransformed(m4) {\r\n        assertInst(M4, m4);\r\n        const aabb = new AABB();\r\n        aabb.addPoints(m4.transformedPoints(this.corners()));\r\n        return aabb;\r\n    }\r\n    corners() {\r\n        const min = this.min, max = this.max;\r\n        return [\r\n            min,\r\n            new V3(min.x, min.y, max.z),\r\n            new V3(min.x, max.y, min.z),\r\n            new V3(min.x, max.y, max.z),\r\n            new V3(max.x, min.y, min.z),\r\n            new V3(max.x, min.y, max.z),\r\n            new V3(max.x, max.y, min.z),\r\n            max,\r\n        ];\r\n    }\r\n    toString() {\r\n        return callsce('new AABB', this.min, this.max);\r\n    }\r\n    toSource() {\r\n        return this.toString();\r\n    }\r\n}\n\nexport { V3, V, M4, Matrix, Vector, P3YZ, P3ZX, P3XY, Transformable, TAU, NLA_DEBUG, NLA_PRECISION, disableConsole, enableConsole, hasConstructor, getIntervals, assertVectors, assertInst, assertNumbers, assert, assertNever, assertf, lerp, eq0, eq, lt, gt, le, ge, eqAngle, zeroAngle, snap, snap2, snapEPS, snap0, canonAngle, eq02, eq2, round10, floor10, ceil10, GOLDEN_RATIO, repeatString, mod, arraySwap, arrayCopy, clamp, between, fuzzyBetween, randomColor, mapPush, arrayCopyStep, arrayCopyBlocks, arrayRange, arrayFromFunction, fuzzyUniques, fuzzyUniquesF, addOwnProperties, defaultRoundFunction, forceFinite, MINUS, floatHashCode, combinations, arithmeticGeometricMean, EllipticF, EllipticE, DEG, rad2deg, numberToStr, time, SCE, STR, isCCW, doubleSignedArea, pqFormula, solveCubicReal2, checkDerivate, getRoots, bisect, newtonIterate, newtonIterate1d, newtonIterateWithDerivative, newtonIterateSmart, newtonIterate2d, newtonIterate2dWithDerivatives, gaussLegendre24Xs, gaussLegendre24Weights, gaussLegendreQuadrature24, glq24_11, glqInSteps, midpointRuleQuadrature, callsce, AABB };\n//# sourceMappingURL=bundle.module.js.map\n","import {\n\tAABB, arrayFromFunction, assert, assertVectors, int, lerp, M4, NLA_PRECISION, raddd, Transformable, Tuple3, V, V3,\n} from 'ts3dutils'\n\nimport {Buffer} from './Buffer'\nimport {currentGL, GL_COLOR, LightGLContext, pushQuad} from './LightGLContext'\n\nconst {cos, sin, PI, min, max} = Math\nconst WGL = WebGLRenderingContext\n\n/**\n * @example new Mesh()\n *        .addIndexBuffer('TRIANGLES')\n *        .addIndexBuffer('LINES')\n *        .addVertexBuffer('normals', 'LGL_Normal')\n */\nexport class Mesh extends Transformable {\n\thasBeenCompiled: boolean = false\n\tvertexBuffers: { [name: string]: Buffer } = {}\n\tindexBuffers: { [name: string]: Buffer } = {}\n\n\n\tvertices: V3[]\n\tnormals?: V3[]\n\tcoords?: [number, number][]\n\tcolors?: GL_COLOR[]\n\tTRIANGLES?: int[]\n\tLINES?: int[]\n\n\tconstructor() {\n\t\tsuper()\n\t\tthis.addVertexBuffer('vertices', 'LGL_Vertex')\n\t\t//if (options.coords) this.addVertexBuffer('coords', 'LGL_TexCoord')\n\t\t//if (options.normals) this.addVertexBuffer('normals', 'LGL_Normal')\n\t\t//if (options.colors) this.addVertexBuffer('colors', 'LGL_Color')\n\t}\n\n\tcalcVolume(this: Mesh & { TRIANGLES: int[] }): { volume: number, centroid: V3, area: number } {\n\t\tlet totalVolume = 0, totalCentroid = V3.O, totalAreaX2 = 0\n\t\tconst triangles = this.TRIANGLES\n\t\tconst vertices = this.vertices\n\t\tfor (let i = 0; i < triangles.length; i += 3) {\n\t\t\tconst i0 = triangles[i + 0], i1 = triangles[i + 1], i2 = triangles[i + 2]\n\t\t\tconst v0 = vertices[i0], v1 = vertices[i1], v2 = vertices[i2]\n\t\t\tconst v01 = v1.minus(v0), v02 = v2.minus(v0)\n\t\t\tconst normal = v01.cross(v02)\n\t\t\t//const centroidZ = (v0.z + v1.z + v2.z) / 3\n\t\t\t//totalVolume += centroidZ * (area === v01.cross(v02).length() / 2) * v01.cross(v02).unit().z\n\t\t\tconst faceCentroid = v0.plus(v1.plus(v2)).div(3)\n\t\t\ttotalVolume += faceCentroid.z * normal.z / 2\n\t\t\tconst faceAreaX2 = normal.length()\n\t\t\ttotalAreaX2 += faceAreaX2\n\t\t\ttotalCentroid = totalCentroid.plus(new V3(faceCentroid.x, faceCentroid.y, faceCentroid.z / 2).times(faceCentroid.z * normal.z / 2))\n\t\t}\n\t\t// sumInPlaceTree adds negligible additional accuracy for XY sphere\n\t\treturn {volume: totalVolume, centroid: totalCentroid.div(triangles.length / 3), area: totalAreaX2 / 2}\n\t}\n\n\t/**\n\t * Add a new vertex buffer with a list as a property called `name` on this object and map it to\n\t * the attribute called `attribute` in all shaders that draw this mesh.\n\t * @example new Mesh().addVertexBuffer('coords', 'LGL_TexCoord')\n\t */\n\n\taddVertexBuffer<K extends string>(name: K, attribute: string): this & { [k in K]: any[] } {\n\t\tassert(!this.vertexBuffers[attribute], 'Buffer ' + attribute + ' already exists.')\n\t\t//assert(!this[name])\n\t\tthis.hasBeenCompiled = false\n\t\tassert('string' == typeof name)\n\t\tassert('string' == typeof attribute)\n\t\tconst buffer = this.vertexBuffers[attribute] = new Buffer(WGL.ARRAY_BUFFER, Float32Array)\n\t\tbuffer.name = name\n\t\t;(this as any)[name] = []\n\t\treturn this as any\n\t}\n\n\t/**\n\t * Add a new index buffer.\n\t * @example new Mesh().addIndexBuffer('TRIANGLES')\n\t * @example new Mesh().addIndexBuffer('LINES')\n\t */\n\taddIndexBuffer<K extends string>(name: K): this & { [k in K]: int[] } {\n\t\tthis.hasBeenCompiled = false\n\t\tconst buffer = this.indexBuffers[name] = new Buffer(WGL.ELEMENT_ARRAY_BUFFER, Uint16Array)\n\t\tbuffer.name = name\n\t\t;(this as any)[name] = []\n\t\treturn this as any\n\t}\n\n\tconcat<T extends Mesh>(...others: T[]): T {\n\t\tconst mesh = new Mesh() as any\n\t\t;[this as Mesh].concat(others).forEach((oldMesh: any) => {\n\t\t\tconst startIndex = mesh.vertices ? mesh.vertices.length : 0\n\t\t\tObject.getOwnPropertyNames(oldMesh.vertexBuffers).forEach(attribute => {\n\t\t\t\tconst bufferName = this.vertexBuffers[attribute].name!\n\t\t\t\tif (!mesh.vertexBuffers[attribute]) {\n\t\t\t\t\tmesh.addVertexBuffer(bufferName, attribute)\n\t\t\t\t}\n\t\t\t\tmesh[bufferName].push(oldMesh[bufferName])\n\t\t\t})\n\t\t\tObject.getOwnPropertyNames(oldMesh.indexBuffers).forEach(name => {\n\t\t\t\tif (!mesh.indexBuffers[name]) {\n\t\t\t\t\tmesh.addIndexBuffer(name)\n\t\t\t\t}\n\t\t\t\tmesh[name].push(...(oldMesh[name] as int[]).map(index => index + startIndex))\n\t\t\t})\n\t\t})\n\t\treturn mesh as any\n\t}\n\n\t/**\n\t * Upload all attached buffers to the GPU in preparation for rendering. This doesn't need to be called every\n\t * frame, only needs to be done when the data changes.\n\t *\n\t * Sets `this.hasBeenCompiled` to true.\n\t */\n\tcompile(gl: LightGLContext = currentGL()) {\n\t\t// figure out shortest vertex buffer to make sure indexBuffers are in bounds\n\t\tlet minVertexBufferLength = Infinity, minBufferName\n\t\tObject.getOwnPropertyNames(this.vertexBuffers).forEach(attribute => {\n\t\t\tconst buffer = this.vertexBuffers[attribute]\n\t\t\tbuffer.data = (this as any)[buffer.name!]\n\t\t\tbuffer.compile(undefined, gl)\n\t\t\tif ((this as any)[buffer.name!].length < minVertexBufferLength) {\n\t\t\t\tminBufferName = attribute\n\t\t\t\tminVertexBufferLength = (this as any)[buffer.name!].length\n\t\t\t}\n\t\t})\n\n\t\tfor (const name in this.indexBuffers) {\n\t\t\tconst buffer = this.indexBuffers[name]\n\t\t\tbuffer.data = (this as any)[buffer.name!]\n\t\t\tbuffer.compile(undefined, gl)\n\t\t\t// if (NLA_DEBUG && buffer.maxValue >= minVertexBufferLength) {\n\t\t\t// \tthrow new Error(`max index value for buffer ${name}\n\t\t\t// \tis too large ${buffer.maxValue} min Vbuffer size: ${minVertexBufferLength} ${minBufferName}`)\n\t\t\t// }\n\t\t}\n\t\tthis.hasBeenCompiled = true\n\t\treturn this\n\t}\n\n\tstatic async fromBinarySTL(stl: Blob) {\n\t\treturn new Promise<Mesh & { normals: V3[] }>((resolve, reject) => {\n\t\t\tconst mesh = new Mesh()\n\t\t\t\t.addVertexBuffer('normals', 'LGL_Normal')\n\t\t\tconst fileReader = new FileReader()\n\t\t\tfileReader.onerror = reject\n\t\t\tfileReader.onload = function (progressEvent) {\n\t\t\t\tconst dataView = new DataView(this.result)\n\t\t\t\tconst HEADER_BYTE_SIZE = 80\n\t\t\t\tconst triangleCount = dataView.getUint32(HEADER_BYTE_SIZE, true)\n\t\t\t\tmesh.normals.length = triangleCount * 3\n\t\t\t\tmesh.vertices.length = triangleCount * 3\n\t\t\t\tlet i = triangleCount * 3, bufferPtr = HEADER_BYTE_SIZE + 4\n\n\t\t\t\tfunction readV3() {\n\t\t\t\t\tconst x = dataView.getFloat32(bufferPtr, true)\n\t\t\t\t\tbufferPtr += 4\n\t\t\t\t\tconst y = dataView.getFloat32(bufferPtr, true)\n\t\t\t\t\tbufferPtr += 4\n\t\t\t\t\tconst z = dataView.getFloat32(bufferPtr, true)\n\t\t\t\t\tbufferPtr += 4\n\t\t\t\t\treturn new V3(x, y, z)\n\t\t\t\t}\n\n\t\t\t\twhile (i) {\n\t\t\t\t\ti -= 3\n\t\t\t\t\tconst normal = readV3()\n\t\t\t\t\tmesh.normals[i + 0] = normal\n\t\t\t\t\tmesh.normals[i + 1] = normal\n\t\t\t\t\tmesh.normals[i + 2] = normal\n\t\t\t\t\tmesh.vertices[i + 0] = readV3()\n\t\t\t\t\tmesh.vertices[i + 1] = readV3()\n\t\t\t\t\tmesh.vertices[i + 2] = readV3()\n\n\t\t\t\t\tbufferPtr += 2\n\t\t\t\t}\n\t\t\t\tresolve(mesh)\n\t\t\t}\n\t\t\tfileReader.readAsArrayBuffer(stl)\n\t\t})\n\t}\n\n\ttoBinarySTL(this: Mesh & { TRIANGLES: number[] }): Blob {\n\t\tif (!this.TRIANGLES) throw new Error('TRIANGLES must be defined.')\n\t\tconst HEADER_BYTE_SIZE = 80, FLOAT_BYTE_SIZE = 4\n\t\tconst triangles = this.TRIANGLES\n\t\tconst triangleCount = triangles.length / 3\n\t\tconst buffer = new ArrayBuffer(HEADER_BYTE_SIZE + 4 + triangleCount * (4 * 3 * FLOAT_BYTE_SIZE + 2))\n\t\tconst dataView = new DataView(buffer)\n\t\tdataView.setUint32(HEADER_BYTE_SIZE, triangleCount, true)\n\t\tlet bufferPtr = HEADER_BYTE_SIZE + 4\n\t\tlet i = triangles.length\n\t\twhile (i) {\n\t\t\ti -= 3\n\t\t\tconst a = this.vertices[triangles[i]], b = this.vertices[triangles[i + 1]],\n\t\t\t\tc = this.vertices[triangles[i + 2]]\n\t\t\tconst normal = V3.normalOnPoints(a, b, c)\n\n\t\t\t;[normal, a, b, c].forEach(v => {\n\t\t\t\tdataView.setFloat32(bufferPtr, v.x, true)\n\t\t\t\tbufferPtr += 4\n\t\t\t\tdataView.setFloat32(bufferPtr, v.y, true)\n\t\t\t\tbufferPtr += 4\n\t\t\t\tdataView.setFloat32(bufferPtr, v.z, true)\n\t\t\t\tbufferPtr += 4\n\t\t\t})\n\t\t\t// skip 2 bytes, already initalized to zero\n\t\t\tbufferPtr += 2\n\t\t}\n\t\tassert(bufferPtr == buffer.byteLength, bufferPtr + ' ' + buffer.byteLength)\n\t\treturn new Blob([buffer], {type: 'application/octet-stream'})\n\n\t}\n\n\t/**\n\t * Transform all vertices by `matrix` and all normals by the inverse transpose of `matrix`.\n\t *\n\t * Index buffer data is referenced.\n\t */\n\ttransform(m4: M4): this {\n\t\tconst mesh = new Mesh()\n\t\tmesh.vertices = m4.transformedPoints(this.vertices)\n\t\tif (this.normals) {\n\t\t\tmesh.addVertexBuffer('normals', 'LGL_Normal')\n\t\t\tconst invTrans = m4.as3x3().inversed().transposed().normalized()\n\t\t\tmesh.normals = this.normals.map(n => invTrans.transformVector(n).unit())\n\t\t\t// mesh.normals.forEach(n => assert(n.hasLength(1)))\n\t\t}\n\t\tfor (const name in this.indexBuffers) {\n\t\t\tmesh.addIndexBuffer(name)\n\t\t\t;(mesh as any)[name] = (this as any)[name]\n\t\t}\n\t\tmesh.compile()\n\t\treturn mesh as this\n\t}\n\n\t/**\n\t * Computes a new normal1 for each vertex from the average normal1 of the neighboring triangles. This means\n\t * adjacent triangles must share vertices for the resulting normals to be smooth.\n\t */\n\tcomputeNormalsFromFlatTriangles(this: Mesh & { TRIANGLES: int[] }): this & { normals: V3[] } {\n\t\tif (!this.normals) this.addVertexBuffer('normals', 'LGL_Normal')\n\t\t// tslint:disable:no-string-literal\n\t\t//this.vertexBuffers['LGL_Normal'].data = arrayFromFunction(this.vertices.length, i => V3.O)\n\n\t\tconst TRIANGLES = this.TRIANGLES, vertices = this.vertices, normals = this.normals!\n\t\tnormals.length = vertices.length\n\t\tfor (let i = 0; i < TRIANGLES.length; i += 3) {\n\t\t\tconst ai = TRIANGLES[i], bi = TRIANGLES[i + 1], ci = TRIANGLES[i + 2]\n\t\t\tconst a = vertices[ai]\n\t\t\tconst b = vertices[bi]\n\t\t\tconst c = vertices[ci]\n\t\t\tconst normal = b.minus(a).cross(c.minus(a)).unit()\n\t\t\tnormals[ai] = normals[ai].plus(normal)\n\t\t\tnormals[bi] = normals[bi].plus(normal)\n\t\t\tnormals[ci] = normals[ci].plus(normal)\n\t\t}\n\t\tfor (let i = 0; i < vertices.length; i++) {\n\t\t\tnormals[i] = normals[i].unit()\n\t\t}\n\t\tthis.hasBeenCompiled = false\n\t\treturn this as any\n\t}\n\n\n\t/**\n\t * Populate the `LINES` index buffer from the `triangles` index buffer.\n\t */\n\tcomputeWireframeFromFlatTriangles(this: Mesh & { TRIANGLES: int[] }): this & { LINES: int[] }\n\tcomputeWireframeFromFlatTriangles<T extends string>(this: Mesh & { TRIANGLES: int[] },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tindexBufferName: T): this & { [k in T]: int[] }\n\tcomputeWireframeFromFlatTriangles(this: any, indexBufferName: string = 'LINES'): this {\n\t\tif (!this.TRIANGLES) throw new Error('TRIANGLES must be defined.')\n\t\tconst canonEdges = new Set()\n\n\t\tfunction canonEdge(i0: int, i1: int) {\n\t\t\tconst iMin = min(i0, i1), iMax = max(i0, i1)\n\t\t\treturn (iMin << 16) | iMax\n\t\t}\n\n\t\t// function uncanonEdge(key) {\n\t\t// \treturn [key >> 16, key & 0xffff]\n\t\t// }\n\t\tconst t = this.TRIANGLES\n\t\tfor (let i = 0; i < t.length; i += 3) {\n\t\t\tcanonEdges.add(canonEdge(t[i + 0], t[i + 1]))\n\t\t\tcanonEdges.add(canonEdge(t[i + 1], t[i + 2]))\n\t\t\tcanonEdges.add(canonEdge(t[i + 2], t[i + 0]))\n\t\t}\n\t\tconst data = indexBufferName\n\t\tif (!this[data]) this.addIndexBuffer(indexBufferName)\n\t\t//this.LINES = new Array(canonEdges.size)\n\t\tcanonEdges.forEach(val => this[data].push(val >> 16, val & 0xffff))\n\t\tthis.hasBeenCompiled = false\n\t\treturn this\n\t}\n\n\tcomputeWireframeFromFlatTrianglesClosedMesh(this: Mesh & { TRIANGLES: int[] }): this & { LINES: int[] }\n\tcomputeWireframeFromFlatTrianglesClosedMesh<T extends string>(this: Mesh & { TRIANGLES: int[] },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  indexBufferName: T): this & { [k in T]: int[] }\n\tcomputeWireframeFromFlatTrianglesClosedMesh(this: any, indexBufferName: string = 'LINES'): this {\n\t\tif (!this.TRIANGLES) throw new Error('TRIANGLES must be defined.')\n\t\tif (!this.LINES) this.addIndexBuffer('LINES')\n\t\tconst tris = this.TRIANGLES\n\t\tif (!this[indexBufferName]) this.addIndexBuffer(indexBufferName)\n\t\tconst lines = this[indexBufferName]\n\t\tfor (let i = 0; i < tris.length; i += 3) {\n\t\t\tif (tris[i + 0] < tris[i + 1]) lines.push(tris[i + 0], tris[i + 1])\n\t\t\tif (tris[i + 1] < tris[i + 2]) lines.push(tris[i + 1], tris[i + 2])\n\t\t\tif (tris[i + 2] < tris[i + 0]) lines.push(tris[i + 2], tris[i + 0])\n\t\t}\n\t\tthis.hasBeenCompiled = false\n\t\treturn this\n\t}\n\n\tcomputeNormalLines(this: Mesh & { normals: V3[] }, length: number): this & { LINES: int[] }\n\tcomputeNormalLines<T extends string>(this: Mesh & { normals: V3[] },\n\t\t\t\t\t\t\t\t\t\t length: number, indexBufferName: T): this & { [k in T]: int[] }\n\tcomputeNormalLines(this: any, length: number = 1, indexBufferName: string = 'LINES') {\n\t\tif (!this.normals) {\n\t\t\tthrow new Error('normals must be defined.')\n\t\t}\n\t\tconst vs = this.vertices, si = this.vertices.length\n\t\tif (!this[indexBufferName]) this.addIndexBuffer(indexBufferName)\n\n\t\tfor (let i = 0; i < this.normals.length; i++) {\n\t\t\tvs[si + i] = vs[i].plus(this.normals[i].toLength(length))\n\t\t\tthis[indexBufferName].push(si + i, i)\n\t\t}\n\t\tthis.hasBeenCompiled = false\n\t\treturn this\n\t}\n\n\tgetAABB(): AABB {\n\t\treturn new AABB().addPoints(this.vertices)\n\t}\n\n\tgetBoundingSphere(): { center: V3, radius: number } {\n\t\tconst sphere = {center: this.getAABB().getCenter(), radius: 0}\n\t\tfor (let i = 0; i < this.vertices.length; i++) {\n\t\t\tsphere.radius = Math.max(sphere.radius, this.vertices[i].minus(sphere.center).length())\n\t\t}\n\t\treturn sphere\n\t}\n\n\n\t// ### Mesh.plane([options])\n\t//\n\t// Generates a square 2x2 mesh the xy plane centered at the origin. The\n\t// `options` argument specifies options to pass to the mesh constructor.\n\t// Additional options include `detailX` and `detailY`, which set the tesselation\n\t// in x and y, and `detail`, which sets both `detailX` and `detailY` at once.\n\t// Two triangles are generated by default.\n\t// Example usage:\n\t//\n\t//     var mesh1 = Mesh.plane();\n\t//     var mesh2 = Mesh.plane({ detail: 5 });\n\t//     var mesh3 = Mesh.plane({ detailX: 20, detailY: 40 });\n\t//\n\t/**\n\t * Generates a square mesh in the XY plane.\n\t * Texture coordinates (buffer \"coords\") are set to go from 0 to 1 in either direction.\n\t *\n\t *\n\t * @param {Object=} options\n\t * @param {number=} options.detail Defaults to 1\n\t * @param {number=} options.detailX Defaults to options.detail. Number of subdivisions in X direction.\n\t * @param {number=} options.detailY Defaults to options.detail. Number of subdivisions in Y direction.j\n\t * @param {number=} options.width defaults to 1\n\t * @param {number=} options.height defaults to 1\n\t * @param {number=} options.startX defaults to 0\n\t * @param {number=} options.startY defaults to 0\n\t */\n\tstatic plane(options: {\n\t\tdetail?: int,\n\t\tdetailX?: int,\n\t\tdetailY?: int,\n\t\twidth?: number,\n\t\theight?: number,\n\t\tstartX?: number,\n\t\tstartY?: number\n\t} = {}) {\n\t\tconst detailX = options.detailX || options.detail || 1\n\t\tconst detailY = options.detailY || options.detail || 1\n\t\tconst startX = options.startX || 0\n\t\tconst startY = options.startY || 0\n\t\tconst width = options.width || 1\n\t\tconst height = options.height || 1\n\t\tconst mesh = new Mesh()\n\t\t\t.addIndexBuffer('LINES')\n\t\t\t.addIndexBuffer('TRIANGLES')\n\t\t\t.addVertexBuffer('normals', 'LGL_Normal')\n\t\t\t.addVertexBuffer('coords', 'LGL_TexCoord')\n\n\t\tfor (let j = 0; j <= detailY; j++) {\n\t\t\tconst t = j / detailY\n\t\t\tfor (let i = 0; i <= detailX; i++) {\n\t\t\t\tconst s = i / detailX\n\t\t\t\tmesh.vertices.push(new V3(startX + s * width, startY + t * height, 0))\n\t\t\t\tmesh.coords.push([s, t])\n\t\t\t\tmesh.normals.push(V3.Z)\n\t\t\t\tif (i < detailX && j < detailY) {\n\t\t\t\t\tconst offset = i + j * (detailX + 1)\n\t\t\t\t\tmesh.TRIANGLES.push(\n\t\t\t\t\t\toffset, offset + detailX + 1, offset + 1,\n\t\t\t\t\t\toffset + detailX + 1, offset + detailX + 2, offset + 1)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < detailX; i++) {\n\t\t\tmesh.LINES.push(i, i + 1)\n\t\t\tmesh.LINES.push((detailX + 1) * detailY + i, (detailX + 1) * detailY + i + 1)\n\t\t}\n\t\tfor (let j = 0; j < detailY; j++) {\n\t\t\tmesh.LINES.push(detailX * j, detailX * (j + 1) + 1)\n\t\t\tmesh.LINES.push(detailX * (j + 1), detailX * (j + 2) + 1)\n\t\t}\n\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\t// unique corners of a unit cube. Used by Mesh.cube to generate a cube mesh.\n\tstatic UNIT_CUBE_CORNERS = [\n\t\tV3.O,\n\t\tnew V3(0, 0, 1),\n\t\tnew V3(0, 1, 0),\n\t\tnew V3(0, 1, 1),\n\n\t\tnew V3(1, 0, 0),\n\t\tnew V3(1, 0, 1),\n\t\tnew V3(1, 1, 0),\n\t\tV3.XYZ,\n\t]\n\n\t/**\n\t * Generates a unit cube (1x1x1) starting at the origin and extending into the (+ + +) octant.\n\t * I.e. box from V3.O to V3(1,1,1)\n\t * Creates line, triangle, vertex and normal1 buffers.\n\t */\n\tstatic cube() {\n\t\tconst mesh = new Mesh()\n\t\t\t.addVertexBuffer('normals', 'LGL_Normal')\n\t\t\t.addIndexBuffer('TRIANGLES')\n\t\t\t.addIndexBuffer('LINES')\n\n\t\t// basically indexes for faces of the cube. vertices each need to be added 3 times,\n\t\t// as they have different normals depending on the face being rendered\n\t\tconst VERTEX_CORNERS = [\n\t\t\t0, 1, 2, 3, // X = 0\n\t\t\t4, 5, 6, 7, // X = 1\n\n\t\t\t0, 4, 1, 5, // Y = 0\n\t\t\t2, 6, 3, 7, // Y = 1\n\n\t\t\t2, 6, 0, 4, // Z = 0\n\t\t\t3, 7, 1, 5, // Z = 1\n\t\t]\n\t\tmesh.vertices = VERTEX_CORNERS.map(i => Mesh.UNIT_CUBE_CORNERS[i])\n\t\tmesh.normals = [V3.X.negated(), V3.X, V3.Y.negated(), V3.Y, V3.Z.negated(), V3.Z].map(v => [v, v, v, v]).concatenated()\n\t\tfor (let i = 0; i < 6 * 4; i += 4) {\n\t\t\tpushQuad(mesh.TRIANGLES, 0 != i % 8,\n\t\t\t\tVERTEX_CORNERS[i], VERTEX_CORNERS[i + 1], VERTEX_CORNERS[i + 2], VERTEX_CORNERS[i + 3])\n\t\t}\n\t\t// indexes of LINES relative to UNIT_CUBE_CORNERS. Mapped to VERTEX_CORNERS.indexOf\n\t\t// so they make sense in the context of the mesh\n\t\tmesh.LINES = [\n\t\t\t0, 1,\n\t\t\t0, 2,\n\t\t\t1, 3,\n\t\t\t2, 3,\n\n\t\t\t0, 4,\n\t\t\t1, 5,\n\t\t\t2, 6,\n\t\t\t3, 7,\n\n\t\t\t4, 5,\n\t\t\t4, 6,\n\t\t\t5, 7,\n\t\t\t6, 7,\n\t\t].map(i => VERTEX_CORNERS.indexOf(i))\n\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\tstatic isocahedron() {\n\t\treturn Mesh.sphere(0)\n\t}\n\n\tstatic sphere2(las: int, longs: int) {\n\t\tconst baseVertices = arrayFromFunction(las, i => {\n\t\t\tconst angle = i / (las - 1) * PI - PI / 2\n\t\t\treturn new V3(0, cos(angle), sin(angle))\n\t\t})\n\t\treturn Mesh.rotation(baseVertices, {anchor: V3.O, dir1: V3.Z}, 2 * PI, longs, true, baseVertices)\n\t}\n\n\t/**\n\t * Returns a sphere mesh with radius 1 created by subdividing the faces of a isocahedron (20-sided) recursively\n\t * The sphere is positioned at the origin\n\t * @param subdivisions\n\t *      How many recursive divisions to do. A subdivision divides a triangle into 4,\n\t *      so the total number of triangles is 20 * 4^subdivisions\n\t * @returns\n\t *      Contains vertex and normal1 buffers and index buffers for triangles and LINES\n\t */\n\tstatic sphere(subdivisions: int = 3) {\n\t\tconst golden = (1 + Math.sqrt(5)) / 2, u = new V3(1, golden, 0).unit(), s = u.x, t = u.y\n\t\t// base vertices of isocahedron\n\t\tconst vertices = [\n\t\t\tnew V3(-s, t, 0),\n\t\t\tnew V3(s, t, 0),\n\t\t\tnew V3(-s, -t, 0),\n\t\t\tnew V3(s, -t, 0),\n\n\t\t\tnew V3(0, -s, t),\n\t\t\tnew V3(0, s, t),\n\t\t\tnew V3(0, -s, -t),\n\t\t\tnew V3(0, s, -t),\n\n\t\t\tnew V3(t, 0, -s),\n\t\t\tnew V3(t, 0, s),\n\t\t\tnew V3(-t, 0, -s),\n\t\t\tnew V3(-t, 0, s)]\n\t\t// base triangles of isocahedron\n\t\tconst triangles = [\n\t\t\t// 5 faces around point 0\n\t\t\t0, 11, 5,\n\t\t\t0, 5, 1,\n\t\t\t0, 1, 7,\n\t\t\t0, 7, 10,\n\t\t\t0, 10, 11,\n\n\t\t\t// 5 adjacent faces\n\t\t\t1, 5, 9,\n\t\t\t5, 11, 4,\n\t\t\t11, 10, 2,\n\t\t\t10, 7, 6,\n\t\t\t7, 1, 8,\n\n\t\t\t// 5 faces around point 3\n\t\t\t3, 9, 4,\n\t\t\t3, 4, 2,\n\t\t\t3, 2, 6,\n\t\t\t3, 6, 8,\n\t\t\t3, 8, 9,\n\n\t\t\t// 5 adjacent faces\n\t\t\t4, 9, 5,\n\t\t\t2, 4, 11,\n\t\t\t6, 2, 10,\n\t\t\t8, 6, 7,\n\t\t\t9, 8, 1,\n\t\t]\n\n\t\t/**\n\t\t * Tesselates triangle a b c\n\t\t * a b c must already be in vertices with the indexes ia ib ic\n\t\t * res is the number of subdivisions to do. 0 just results in triangle and line indexes being added to the\n\t\t * respective buffers.\n\t\t */\n\t\tfunction tesselateRecursively(a: V3, b: V3, c: V3, res: int, vertices: V3[], triangles: int[],\n\t\t\t\t\t\t\t\t\t  ia: int, ib: int, ic: int, lines: int[]) {\n\t\t\tif (0 == res) {\n\t\t\t\ttriangles.push(ia, ib, ic)\n\t\t\t\tif (ia < ib) lines.push(ia, ib)\n\t\t\t\tif (ib < ic) lines.push(ib, ic)\n\t\t\t\tif (ic < ia) lines.push(ic, ia)\n\t\t\t} else {\n\t\t\t\t// subdivide the triangle abc into 4 by adding a vertex (with the correct distance from the origin)\n\t\t\t\t// between each segment ab, bc and cd, then calling the function recursively\n\t\t\t\tconst abMid1 = a.plus(b).toLength(1), bcMid1 = b.plus(c).toLength(1), caMid1 = c.plus(a).toLength(1)\n\t\t\t\t// indexes of new vertices:\n\t\t\t\tconst iabm = vertices.length, ibcm = iabm + 1, icam = iabm + 2\n\t\t\t\tvertices.push(abMid1, bcMid1, caMid1)\n\t\t\t\ttesselateRecursively(abMid1, bcMid1, caMid1, res - 1, vertices, triangles, iabm, ibcm, icam, lines)\n\t\t\t\ttesselateRecursively(a, abMid1, caMid1, res - 1, vertices, triangles, ia, iabm, icam, lines)\n\t\t\t\ttesselateRecursively(b, bcMid1, abMid1, res - 1, vertices, triangles, ib, ibcm, iabm, lines)\n\t\t\t\ttesselateRecursively(c, caMid1, bcMid1, res - 1, vertices, triangles, ic, icam, ibcm, lines)\n\t\t\t}\n\t\t}\n\n\t\tconst mesh = new Mesh()\n\t\t\t.addVertexBuffer('normals', 'LGL_Normal')\n\t\t\t.addIndexBuffer('TRIANGLES')\n\t\t\t.addIndexBuffer('LINES')\n\t\tmesh.vertices.push(...vertices)\n\t\tsubdivisions = undefined == subdivisions ? 4 : subdivisions\n\t\tfor (let i = 0; i < 20; i++) {\n\t\t\tconst [ia, ic, ib] = triangles.slice(i * 3, i * 3 + 3)\n\t\t\ttesselateRecursively(vertices[ia], vertices[ic], vertices[ib], subdivisions, mesh.vertices, mesh.TRIANGLES, ia, ic, ib, mesh.LINES)\n\t\t}\n\n\t\tmesh.normals = mesh.vertices\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\tstatic aabb(aabb: AABB) {\n\t\tconst matrix = M4.multiplyMultiple(\n\t\t\tM4.translate(aabb.min),\n\t\t\tM4.scale(aabb.size().max(new V3(NLA_PRECISION, NLA_PRECISION, NLA_PRECISION))))\n\t\tconst mesh = Mesh.cube().transform(matrix)\n\t\t// mesh.vertices = aabb.corners()\n\t\tmesh.computeNormalLines(20)\n\t\tmesh.compile()\n\n\t\treturn mesh\n\t}\n\n\n\tstatic offsetVertices(vertices: V3[], offset: V3, close: boolean): Mesh & { TRIANGLES: int[], coords: [number, number][] }\n\tstatic offsetVertices(vertices: V3[], offset: V3, close: boolean, normals: V3[]): Mesh & { TRIANGLES: int[], coords: [number, number][], normals: V3[] }\n\tstatic offsetVertices(vertices: V3[], offset: V3, close: boolean, normals?: V3[]) {\n\t\tassertVectors.apply(undefined, vertices)\n\t\tassertVectors(offset)\n\n\t\tconst mesh = new Mesh()\n\t\t\t.addIndexBuffer('TRIANGLES')\n\t\t\t.addVertexBuffer('coords', 'LGL_TexCoord')\n\t\tnormals && mesh.addVertexBuffer('normals', 'LGL_Normal')\n\t\tmesh.vertices = vertices.concat(vertices.map(v => v.plus(offset)))\n\t\tconst vl = vertices.length\n\t\tmesh.coords = arrayFromFunction(vl * 2, (i): [number, number] => [(i % vl) / vl, (i / vl) | 0])\n\n\t\tconst triangles = mesh.TRIANGLES\n\t\tfor (let i = 0; i < vertices.length - 1; i++) {\n\t\t\tpushQuad(triangles, false,\n\t\t\t\ti, i + 1,\n\t\t\t\tvertices.length + i, vertices.length + i + 1)\n\t\t}\n\t\tif (close) {\n\t\t\tpushQuad(triangles, false, 0, vertices.length - 1, vertices.length, vertices.length * 2 - 1)\n\t\t}\n\t\tif (normals) {\n\t\t\tmesh.normals = normals.concat(normals)\n\t\t}\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\t// Creates a new $Mesh by rotating $vertices by $totalRads around $lineAxis (according to the right-hand\n\t// rule). $steps is the number of steps to take. $close is whether the vertices of the first and last step\n\t// should be connected by triangles. If $normals is set (pass an array of V3s of the same length as $vertices),\n\t// these will also be rotated and correctly added to the mesh.\n\t// @example const precious = Mesh.rotation([V(10, 0, -2), V(10, 0, 2), V(11, 0, 2), V(11, 0, -2)], , L3.Z, 512)\n\tstatic rotation(vertices: V3[], lineAxis: { anchor: V3, dir1: V3 }, totalRads: raddd, steps: int, close = true, normals?: V3[]) {\n\t\tconst mesh = new Mesh().addIndexBuffer('TRIANGLES')\n\t\tnormals && mesh.addVertexBuffer('normals', 'LGL_Normal')\n\t\tconst vc = vertices.length, vTotal = vc * steps\n\n\t\tconst rotMat = new M4()\n\t\tconst triangles = mesh.TRIANGLES\n\t\tfor (let i = 0; i < steps; i++) {\n\t\t\t// add triangles\n\t\t\tconst rads = totalRads / steps * i\n\t\t\tM4.rotateLine(lineAxis.anchor, lineAxis.dir1, rads, rotMat)\n\t\t\tmesh.vertices.push(...rotMat.transformedPoints(vertices))\n\n\t\t\tnormals && mesh.normals!.push(...rotMat.transformedVectors(normals))\n\t\t\tif (close || i !== steps - 1) {\n\t\t\t\tfor (let j = 0; j < vc - 1; j++) {\n\t\t\t\t\tpushQuad(triangles, false,\n\t\t\t\t\t\ti * vc + j + 1, i * vc + j,\n\t\t\t\t\t\t((i + 1) * vc + j + 1) % vTotal, ((i + 1) * vc + j) % vTotal)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\tstatic parametric(pF: (d: number, z: number) => V3, pN: (d: number, z: number) => V3,\n\t\t\t\t\t  sMin: number, sMax: number, tMin: number, tMax: number, sRes: number, tRes: number) {\n\t\tconst mesh = new Mesh()\n\t\t\t.addVertexBuffer('normals', 'LGL_Normal')\n\t\t\t.addIndexBuffer('TRIANGLES')\n\t\tfor (let si = 0; si <= sRes; si++) {\n\t\t\tconst s = lerp(sMin, sMax, si / sRes)\n\t\t\tfor (let ti = 0; ti <= tRes; ti++) {\n\t\t\t\tconst t = lerp(tMin, tMax, ti / tRes)\n\t\t\t\tmesh.vertices.push(pF(s, t))\n\t\t\t\tmesh.normals.push(pN(s, t))\n\t\t\t\tif (ti < tRes && si < sRes) {\n\t\t\t\t\tconst offset = ti + si * (tRes + 1)\n\t\t\t\t\tpushQuad(mesh.TRIANGLES, false,\n\t\t\t\t\t\toffset, offset + tRes + 1, offset + 1, offset + tRes + 2)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\tstatic load(json: { vertices: Tuple3<number>[], triangles?: Tuple3<number>[], normals?: Tuple3<number>[] }) {\n\t\tconst mesh = new Mesh()\n\t\tif (Array.isArray(json.vertices[0])) {\n\t\t\tmesh.vertices = json.vertices.map(x => V(x))\n\t\t} else {\n\t\t\tthrow new Error()\n\t\t}\n\t\tif (json.triangles) {\n\t\t\tmesh.addIndexBuffer('TRIANGLES')\n\t\t\t;(mesh as any).TRIANGLES = json.triangles\n\t\t}\n\t\tif (json.normals) {\n\t\t\tmesh.addVertexBuffer('normals', 'LGL_Normal')\n\t\t\t;(mesh as any).normals = json.normals\n\t\t}\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n}","/* tslint:disable:no-string-literal */\nimport {assert, assertf, assertInst, assertVectors, int, M4, NLA_DEBUG, V3} from 'ts3dutils'\n\nimport {Buffer} from './Buffer'\nimport {currentGL, GL_COLOR, LightGLContext} from './LightGLContext'\nimport {Mesh} from './Mesh'\n\nconst WGL = WebGLRenderingContext\n\n/**\n * These are all the draw modes usable in OpenGL ES\n */\nexport enum DRAW_MODES {\n\tPOINTS = WGL.POINTS,\n\tLINES = WGL.LINES,\n\tLINE_STRIP = WGL.LINE_STRIP,\n\tLINE_LOOP = WGL.LINE_LOOP,\n\tTRIANGLES = WGL.TRIANGLES,\n\tTRIANGLE_STRIP = WGL.TRIANGLE_STRIP,\n\tTRIANGLE_FAN = WGL.TRIANGLE_FAN\n}\n\nexport type DRAW_MODES_ENUM = keyof typeof DRAW_MODES\nexport const SHADER_VAR_TYPES = ['FLOAT', 'FLOAT_MAT2', 'FLOAT_MAT3', 'FLOAT_MAT4', 'FLOAT_VEC2', 'FLOAT_VEC3', 'FLOAT_VEC4', 'INT', 'INT_VEC2', 'INT_VEC3', 'INT_VEC4', 'UNSIGNED_INT']\n\nconst DRAW_MODE_CHECKS: { [type: string]: (x: int) => boolean } = {\n\t[DRAW_MODES.POINTS]: x => true,\n\t[DRAW_MODES.LINES]: x => 0 == x % 2, // divisible by 2\n\t[DRAW_MODES.LINE_STRIP]: x => x > 2, // need at least 2\n\t[DRAW_MODES.LINE_LOOP]: x => x > 2, // more like > 3, but oh well\n\t[DRAW_MODES.TRIANGLES]: x => 0 == x % 3, // divisible by 3\n\t[DRAW_MODES.TRIANGLE_STRIP]: x => x > 3,\n\t[DRAW_MODES.TRIANGLE_FAN]: x => x > 3,\n}\n\nexport function isArray<T>(obj: any): obj is T[] {\n\treturn Array == obj.constructor || Float32Array == obj.constructor || Float64Array == obj.constructor\n}\n\nexport interface UniformTypesMap {\n\tFLOAT_VEC4: GL_COLOR | V3\n\tFLOAT_VEC3: [number, number, number] | V3\n\tFLOAT_VEC2: [number, number] | V3\n\tFLOAT: number\n\tINT: int\n\tFLOAT_MAT4: M4 | number[]\n\tFLOAT_MAT3: M4 | number[]\n\tSAMPLER_2D: int\n\tBOOL: boolean\n}\n\nfunction isFloatArray(obj: any): obj is number[] | Float64Array | Float32Array {\n\treturn Float32Array == obj.constructor || Float64Array == obj.constructor ||\n\t\tArray.isArray(obj) && obj.every(x => 'number' == typeof x)\n}\n\nfunction isIntArray(x: any) {\n\tif ([Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array]\n\t\t\t.some(y => x instanceof y)) {\n\t\treturn true\n\t}\n\treturn (x instanceof Float32Array || x instanceof Float64Array || Array.isArray(x)) &&\n\t\t(x as number[]).every(x => Number.isInteger(x))\n}\n\nexport type ShaderType<UniformTypes> = string & { T?: UniformTypes }\n\n//const x:keyof UniformTypesMap = undefined as 'FLOAT_VEC4' | 'FLOAT_VEC3'\nexport class Shader<UniformTypes extends { [uniformName: string]: keyof UniformTypesMap } = any> {\n\tprogram: WebGLProgram\n\tactiveMatrices: { [matrixName: string ]: boolean }\n\tattributes: { [attributeName: string ]: number }\n\tuniformLocations: { [uniformName: string ]: WebGLUniformLocation }\n\tuniformInfos: { [uniformName: string ]: WebGLActiveInfo }\n\tprojectionMatrixVersion = -1\n\tmodelViewMatrixVersion = -1\n\tgl: LightGLContext\n\n\tstatic create<S extends { [uniformName: string]: keyof UniformTypesMap },\n\t\tT extends { [uniformName: string]: keyof UniformTypesMap }>\n\t(vertexSource: ShaderType<S>, fragmentSource: ShaderType<T>): Shader<S & T> {\n\t\treturn new Shader(vertexSource, fragmentSource) as any\n\t}\n\n\t/**\n\t * Provides a convenient wrapper for WebGL shaders. A few uniforms and attributes,\n\t * prefixed with `gl_`, are automatically added to all shader sources to make\n\t * simple shaders easier to write.\n\t * Headers for the following variables are automatically prepended to the passed source. The correct variables\n\t * are also automatically passed to the shader when drawing.\n\t *\n\t * For vertex and fragment shaders:\n\t uniform mat3 LGL_NormalMatrix;\n\t uniform mat4 LGL_ModelViewMatrix;\n\t uniform mat4 LGL_ProjectionMatrix;\n\t uniform mat4 LGL_ModelViewProjectionMatrix;\n\t uniform mat4 LGL_ModelViewMatrixInverse;\n\t uniform mat4 LGL_ProjectionMatrixInverse;\n\t uniform mat4 LGL_ModelViewProjectionMatrixInverse;\n\t *\n\t *\n\t * Example usage:\n\t *\n\t *  const shader = new GL.Shader(\n\t *      `void main() { gl_Position = LGL_ModelViewProjectionMatrix * LGL_Vertex; }`,\n\t *      `uniform vec4 color; void main() { gl_FragColor = color; }`)\n\t *\n\t *  shader.uniforms({ color: [1, 0, 0, 1] }).draw(mesh)\n\t *\n\t * Compiles a shader program using the provided vertex and fragment shaders.\n\t */\n\tconstructor(vertexSource: string, fragmentSource: string, gl = currentGL()) {\n\n\t\t// Headers are prepended to the sources to provide some automatic functionality.\n\t\tconst header = `\n\t\tuniform mat3 LGL_NormalMatrix;\n\t\tuniform mat4 LGL_ModelViewMatrix;\n\t\tuniform mat4 LGL_ProjectionMatrix;\n\t\tuniform mat4 LGL_ModelViewProjectionMatrix;\n\t\tuniform mat4 LGL_ModelViewMatrixInverse;\n\t\tuniform mat4 LGL_ProjectionMatrixInverse;\n\t\tuniform mat4 LGL_ModelViewProjectionMatrixInverse;\n\t`\n\t\tconst vertexHeader = header + `\n\t\tattribute vec4 LGL_Vertex;\n\t\tattribute vec2 LGL_TexCoord;\n\t\tattribute vec3 LGL_Normal;\n\t\tattribute vec4 LGL_Color;\n\t`\n\t\tconst fragmentHeader = `  precision highp float;` + header\n\n\t\tconst matrixNames = header.match(/\\bLGL_\\w+/g)\n\n\t\t// Compile and link errors are thrown as strings.\n\t\tfunction compileSource(type: number, source: string) {\n\t\t\tconst shader = gl.createShader(type)\n\t\t\tgl.shaderSource(shader, source)\n\t\t\tgl.compileShader(shader)\n\t\t\tif (!gl.getShaderParameter(shader, WGL.COMPILE_STATUS)) {\n\t\t\t\tthrow new Error('compile error: ' + gl.getShaderInfoLog(shader))\n\t\t\t}\n\t\t\treturn shader\n\t\t}\n\n\t\tthis.gl = gl\n\t\tconst program = gl.createProgram()\n\t\tif (!program) {\n\t\t\tgl.handleError()\n\t\t}\n\t\tthis.program = program!\n\t\tgl.attachShader(this.program, compileSource(WGL.VERTEX_SHADER, vertexHeader + vertexSource))\n\t\tgl.attachShader(this.program, compileSource(WGL.FRAGMENT_SHADER, fragmentHeader + fragmentSource))\n\t\tgl.linkProgram(this.program)\n\t\tif (!gl.getProgramParameter(this.program, WGL.LINK_STATUS)) {\n\t\t\tthrow new Error('link error: ' + gl.getProgramInfoLog(this.program))\n\t\t}\n\t\tthis.attributes = {}\n\t\tthis.uniformLocations = {}\n\n\t\t// Check for the use of built-in matrices that require expensive matrix\n\t\t// multiplications to compute, and record these in `activeMatrices`.\n\t\tthis.activeMatrices = {}\n\t\tmatrixNames && matrixNames.forEach(name => {\n\t\t\tif (gl.getUniformLocation(this.program, name)) {\n\t\t\t\tthis.activeMatrices[name] = true\n\t\t\t}\n\t\t})\n\n\t\tthis.uniformInfos = {}\n\t\tfor (let i = gl.getProgramParameter(this.program, WGL.ACTIVE_UNIFORMS); i-- > 0;) {\n\t\t\t// see https://www.khronos.org/registry/OpenGL-Refpages/es2.0/xhtml/glGetActiveUniform.xml\n\t\t\t// this.program has already been checked\n\t\t\t// i is in bounds\n\t\t\tconst info = gl.getActiveUniform(this.program, i)!\n\t\t\tthis.uniformInfos[info.name] = info\n\t\t}\n\t\tgl.handleError()\n\t}\n\n\n\t/**\n\t * Set a uniform for each property of `uniforms`. The correct `viewerGL.uniform*()` method is inferred from the\n\t * value types and from the stored uniform sampler flags.\n\t */\n\tuniforms(uniforms: Partial<{ [K in keyof UniformTypes]: UniformTypesMap[UniformTypes[K]] }>): this {\n\t\tconst gl = this.gl\n\t\tgl.useProgram(this.program)\n\t\tgl.handleError()\n\n\t\tfor (const name in uniforms) {\n\t\t\tconst location = this.uniformLocations[name] || gl.getUniformLocation(this.program, name)\n\t\t\t!location && console.warn(name + ' uniform is not used in shader')\n\t\t\tif (!location) continue\n\t\t\tthis.uniformLocations[name] = location\n\t\t\tlet value: any = uniforms[name] as any\n\t\t\tconst info = this.uniformInfos[name]\n\t\t\tif (NLA_DEBUG) {\n\t\t\t\t// TODO: better errors\n\t\t\t\tif (gl.SAMPLER_2D == info.type || gl.SAMPLER_CUBE == info.type || gl.INT == info.type) {\n\t\t\t\t\tif (1 == info.size) {\n\t\t\t\t\t\tassert(Number.isInteger(value))\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert(isIntArray(value) && value.length == info.size, 'value must be int array if info.size != 1')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tassert(gl.FLOAT != info.type ||\n\t\t\t\t\t(1 == info.size && 'number' === typeof value || isFloatArray(value) && info.size == value.length))\n\t\t\t\tassert(gl.FLOAT_VEC3 != info.type ||\n\t\t\t\t\t(1 == info.size && value instanceof V3 ||\n\t\t\t\t\t\tArray.isArray(value) && info.size == value.length && assertVectors(...value)))\n\t\t\t\tassert(gl.FLOAT_VEC4 != info.type || 1 != info.size || isFloatArray(value) && value.length == 4)\n\t\t\t\tassert(gl.FLOAT_MAT4 != info.type || value instanceof M4, () => value.toSource())\n\t\t\t\tassert(gl.FLOAT_MAT3 != info.type || value.length == 9 || value instanceof M4)\n\t\t\t}\n\t\t\tif (value instanceof V3) {\n\t\t\t\tvalue = value.toArray()\n\t\t\t}\n\t\t\tif (gl.FLOAT_VEC4 == info.type && info.size != 1) {\n\t\t\t\tgl.uniform4fv(location, value.concatenated())\n\t\t\t} else if (value.length) {\n\t\t\t\tswitch (value.length) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tgl.uniform1fv(location, value)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tgl.uniform2fv(location, value)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tgl.uniform3fv(location, value)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tgl.uniform4fv(location, value)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t// Matrices are automatically transposed, since WebGL uses column-major\n\t\t\t\t\t// indices instead of row-major indices.\n\t\t\t\t\tcase 9:\n\t\t\t\t\t\tgl.uniformMatrix3fv(location, false, new Float32Array([\n\t\t\t\t\t\t\tvalue[0], value[3], value[6],\n\t\t\t\t\t\t\tvalue[1], value[4], value[7],\n\t\t\t\t\t\t\tvalue[2], value[5], value[8],\n\t\t\t\t\t\t]))\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 16:\n\t\t\t\t\t\tgl.uniformMatrix4fv(location, false, new Float32Array([\n\t\t\t\t\t\t\tvalue[0], value[4], value[8], value[12],\n\t\t\t\t\t\t\tvalue[1], value[5], value[9], value[13],\n\t\t\t\t\t\t\tvalue[2], value[6], value[10], value[14],\n\t\t\t\t\t\t\tvalue[3], value[7], value[11], value[15],\n\t\t\t\t\t\t]))\n\t\t\t\t\t\tbreak\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error('don\\'t know how to load uniform \"' + name + '\" of length ' + value.length)\n\t\t\t\t}\n\t\t\t} else if ('number' == typeof value) {\n\t\t\t\tif (gl.SAMPLER_2D == info.type || gl.SAMPLER_CUBE == info.type || gl.INT == info.type) {\n\t\t\t\t\tgl.uniform1i(location, value)\n\t\t\t\t} else {\n\t\t\t\t\tgl.uniform1f(location, value)\n\t\t\t\t}\n\t\t\t} else if ('boolean' == typeof value) {\n\t\t\t\tgl.uniform1i(location, +value)\n\t\t\t} else if (value instanceof M4) {\n\t\t\t\tconst m = value.m\n\t\t\t\tif (gl.FLOAT_MAT4 == info.type) {\n\t\t\t\t\tgl.uniformMatrix4fv(location, false, [\n\t\t\t\t\t\tm[0], m[4], m[8], m[12],\n\t\t\t\t\t\tm[1], m[5], m[9], m[13],\n\t\t\t\t\t\tm[2], m[6], m[10], m[14],\n\t\t\t\t\t\tm[3], m[7], m[11], m[15]])\n\t\t\t\t} else if (gl.FLOAT_MAT3 == info.type) {\n\t\t\t\t\tgl.uniformMatrix3fv(location, false, [\n\t\t\t\t\t\tm[0], m[4], m[8],\n\t\t\t\t\t\tm[1], m[5], m[9],\n\t\t\t\t\t\tm[2], m[6], m[10]])\n\t\t\t\t} else if (gl.FLOAT_MAT2 == info.type) {\n\t\t\t\t\tgl.uniformMatrix2fv(location, false, new Float32Array([\n\t\t\t\t\t\tm[0], m[4],\n\t\t\t\t\t\tm[1], m[5]]))\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(`Can't assign M4 to ${info.type}`)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new Error('attempted to set uniform \"' + name + '\" to invalid value ' + value)\n\t\t\t}\n\t\t\tgl.handleError()\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Sets all uniform matrix attributes, binds all relevant buffers, and draws the mesh geometry as indexed\n\t * triangles or indexed LINES. Set `mode` to `WGL.LINES` (and either add indices to `LINES` or call\n\t * `computeWireframe()`) to draw the mesh in wireframe.\n\t *\n\t * @param mesh\n\t * @param mode Defaults to 'TRIANGLES'. Must be passed as string so the correct index buffer can be\n\t *     automatically drawn.\n\t * @param start int\n\t * @param count int\n\t */\n\tdraw(mesh: Mesh, mode: DRAW_MODES = DRAW_MODES.TRIANGLES, start?: int, count?: int): this {\n\t\tassert(mesh.hasBeenCompiled, 'mesh.hasBeenCompiled')\n\t\tassert(undefined != DRAW_MODES[mode])\n\t\tconst modeStr: string = DRAW_MODES[mode]\n\t\t// assert(mesh.indexBuffers[modeStr], `mesh.indexBuffers[${modeStr}] undefined`)\n\t\treturn this.drawBuffers(mesh.vertexBuffers, mesh.indexBuffers[modeStr], mode, start, count)\n\t}\n\n\t/**\n\t * Sets all uniform matrix attributes, binds all relevant buffers, and draws the\n\t * indexed mesh geometry. The `vertexBuffers` argument is a map from attribute\n\t * names to `Buffer` objects of type `WGL.ARRAY_BUFFER`, `indexBuffer` is a `Buffer`\n\t * object of type `WGL.ELEMENT_ARRAY_BUFFER`, and `mode` is a WebGL primitive mode\n\t * like `WGL.TRIANGLES` or `WGL.LINES`. This method automatically creates and caches\n\t * vertex attribute pointers for attributes as needed.\n\t */\n\tdrawBuffers(vertexBuffers: { [attributeName: string]: Buffer },\n\t\t\t\tindexBuffer: Buffer | undefined,\n\t\t\t\tmode: DRAW_MODES = DRAW_MODES.TRIANGLES,\n\t\t\t\tstart: int = 0, count?: int): this {\n\t\tconst gl = this.gl\n\t\tgl.handleError()\n\t\tassert(undefined != DRAW_MODES[mode])\n\t\tassertf(() => 1 <= Object.keys(vertexBuffers).length)\n\t\tObject.keys(vertexBuffers).forEach(key => assertInst(Buffer, vertexBuffers[key]))\n\n\t\t// Only varruct up the built-in matrices that are active in the shader\n\t\tconst on = this.activeMatrices\n\t\tconst modelViewMatrixInverse = (on['LGL_ModelViewMatrixInverse'] || on['LGL_NormalMatrix'])\n\t\t\t//&& this.modelViewMatrixVersion != gl.modelViewMatrixVersion\n\t\t\t&& gl.modelViewMatrix.inversed()\n\t\tconst projectionMatrixInverse = on['LGL_ProjectionMatrixInverse']\n\t\t\t//&& this.projectionMatrixVersion != gl.projectionMatrixVersion\n\t\t\t&& gl.projectionMatrix.inversed()\n\t\tconst modelViewProjectionMatrix = (on['LGL_ModelViewProjectionMatrix'] || on['LGL_ModelViewProjectionMatrixInverse'])\n\t\t\t//&& (this.projectionMatrixVersion != gl.projectionMatrixVersion || this.modelViewMatrixVersion !=\n\t\t\t// gl.modelViewMatrixVersion)\n\t\t\t&& gl.projectionMatrix.times(gl.modelViewMatrix)\n\n\t\tconst uni: { [matrixName: string ]: M4 } = {} // Uniform Matrices\n\t\ton['LGL_ModelViewMatrix']\n\t\t&& this.modelViewMatrixVersion != gl.modelViewMatrixVersion\n\t\t&& (uni['LGL_ModelViewMatrix'] = gl.modelViewMatrix)\n\t\ton['LGL_ModelViewMatrixInverse'] && (uni['LGL_ModelViewMatrixInverse'] = modelViewMatrixInverse as M4)\n\t\ton['LGL_ProjectionMatrix']\n\t\t&& this.projectionMatrixVersion != gl.projectionMatrixVersion\n\t\t&& (uni['LGL_ProjectionMatrix'] = gl.projectionMatrix)\n\t\tprojectionMatrixInverse && (uni['LGL_ProjectionMatrixInverse'] = projectionMatrixInverse)\n\t\tmodelViewProjectionMatrix && (uni['LGL_ModelViewProjectionMatrix'] = modelViewProjectionMatrix)\n\t\tmodelViewProjectionMatrix && on['LGL_ModelViewProjectionMatrixInverse']\n\t\t&& (uni['LGL_ModelViewProjectionMatrixInverse'] = modelViewProjectionMatrix.inversed())\n\t\ton['LGL_NormalMatrix']\n\t\t&& this.modelViewMatrixVersion != gl.modelViewMatrixVersion\n\t\t&& (uni['LGL_NormalMatrix'] = (modelViewMatrixInverse as M4).transposed())\n\t\tthis.uniforms(uni as any)\n\t\tthis.projectionMatrixVersion = gl.projectionMatrixVersion\n\t\tthis.modelViewMatrixVersion = gl.modelViewMatrixVersion\n\n\t\t// Create and enable attribute pointers as necessary.\n\t\tlet minVertexBufferLength = Infinity\n\t\tfor (const attribute in vertexBuffers) {\n\t\t\tconst buffer = vertexBuffers[attribute]\n\t\t\tassert(buffer.hasBeenCompiled)\n\t\t\tconst location = this.attributes[attribute] || gl.getAttribLocation(this.program, attribute)\n\t\t\tgl.handleError()\n\t\t\tif (location == -1 || !buffer.buffer) {\n\t\t\t\t//console.warn(`Vertex buffer ${attribute} was not bound because the attribute is not active.`)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tthis.attributes[attribute] = location\n\t\t\tgl.bindBuffer(WGL.ARRAY_BUFFER, buffer.buffer)\n\t\t\tgl.handleError()\n\n\t\t\tgl.enableVertexAttribArray(location)\n\t\t\tgl.handleError()\n\n\t\t\tgl.vertexAttribPointer(location, buffer.spacing, WGL.FLOAT, false, 0, 0)\n\t\t\tgl.handleError()\n\n\t\t\tminVertexBufferLength = Math.min(minVertexBufferLength, buffer.count)\n\t\t}\n\n\t\t// Disable unused attribute pointers.\n\t\tfor (const attribute in this.attributes) {\n\t\t\tif (!(attribute in vertexBuffers)) {\n\t\t\t\tgl.disableVertexAttribArray(this.attributes[attribute])\n\t\t\t\tgl.handleError()\n\t\t\t}\n\t\t}\n\n\t\t// Draw the geometry.\n\t\tif (minVertexBufferLength) {\n\t\t\tcount = count || (indexBuffer ? indexBuffer.count : minVertexBufferLength)\n\t\t\tassert(DRAW_MODE_CHECKS[mode](count), 'count ' + count + ' doesn\\'t fulfill requirement '\n\t\t\t\t+ DRAW_MODE_CHECKS[mode].toString() + ' for mode ' + DRAW_MODES[mode])\n\n\t\t\tif (indexBuffer) {\n\t\t\t\tassert(indexBuffer.hasBeenCompiled)\n\t\t\t\tassert(minVertexBufferLength > indexBuffer.maxValue!)\n\t\t\t\tassert(count % indexBuffer.spacing == 0)\n\t\t\t\tassert(start % indexBuffer.spacing == 0)\n\t\t\t\tif (start + count > indexBuffer.count) {\n\t\t\t\t\tthrow new Error('Buffer not long enough for passed parameters start/length/buffer length' + ' ' + start + ' ' + count + ' ' + indexBuffer.count)\n\t\t\t\t}\n\t\t\t\tgl.bindBuffer(WGL.ELEMENT_ARRAY_BUFFER, indexBuffer.buffer!)\n\t\t\t\tgl.handleError()\n\t\t\t\t// start parameter has to be multiple of sizeof(WGL.UNSIGNED_SHORT)\n\t\t\t\tgl.drawElements(mode, count, WGL.UNSIGNED_SHORT, 2 * start)\n\t\t\t\tgl.handleError()\n\t\t\t} else {\n\t\t\t\tif (start + count > minVertexBufferLength) {\n\t\t\t\t\tthrow new Error('invalid')\n\t\t\t\t}\n\t\t\t\tgl.drawArrays(mode, start, count)\n\t\t\t\tgl.handleError()\n\t\t\t}\n\t\t\tgl.drawCallCount++\n\t\t}\n\n\t\treturn this\n\t}\n}","import chroma from 'chroma-js'\nimport {addOwnProperties, assert, DEG, int, M4, P3ZX, V, V3,} from 'ts3dutils'\n\nimport {Mesh} from './Mesh'\nimport {DRAW_MODES, Shader} from './Shader'\n\nexport type GL_COLOR = [number, number, number, number]\n/**\n * There's only one constant, use it for default values. Use chroma-js or similar for actual colors.\n */\nexport const GL_COLOR_BLACK: GL_COLOR = [0, 0, 0, 1]\n\nexport function currentGL(): LightGLContext {\n\treturn LightGLContext.gl\n}\n\nconst WGL = WebGLRenderingContext\n\nexport function isNumber(obj: any) {\n\tconst str = Object.prototype.toString.call(obj)\n\treturn str == '[object Number]' || str == '[object Boolean]'\n}\n\nexport type UniformType = V3 | M4 | number[] | boolean | number\n\nexport interface LightGLContext extends WebGLRenderingContext {}\nexport class LightGLContext {\n\tmodelViewMatrix: M4 = new M4()\n\tprojectionMatrix: M4 = new M4()\n\tstatic readonly MODELVIEW: { __MATRIX_MODE_CONSTANT: any } = 0 as any\n\tstatic readonly PROJECTION: { __MATRIX_MODE_CONSTANT: any } = 1 as any\n\tMODELVIEW = LightGLContext.MODELVIEW\n\tPROJECTION = LightGLContext.PROJECTION\n\n\n\tstatic HALF_FLOAT_OES: int = 0x8D61\n\tHALF_FLOAT_OES: int\n\n\tprivate tempMatrix = new M4()\n\tprivate resultMatrix = new M4()\n\tprivate modelViewStack: M4[] = []\n\tprivate projectionStack: M4[] = []\n\tprivate currentMatrix: M4\n\tprivate currentMatrixName: 'modelViewMatrix' | 'projectionMatrix'\n\tprivate stack: M4[]\n\n\tmeshes: { [name: string]: Mesh }\n\tshaders: { [name: string]: Shader }\n\tpublic drawCallCount: int = 0\n\tpublic projectionMatrixVersion: int = 0\n\tpublic modelViewMatrixVersion: int = 0\n\n\tprotected constructor(gl: LightGLContext, private immediate = {\n\t\tmesh: new Mesh()\n\t\t\t.addVertexBuffer('coords', 'LGL_TexCoord')\n\t\t\t.addVertexBuffer('colors', 'LGL_Color'),\n\t\tmode: -1 as DRAW_MODES | -1,\n\t\tcoord: [0, 0] as [number, number],\n\t\tcolor: [1, 1, 1, 1] as GL_COLOR,\n\t\tpointSize: 1,\n\t\tshader: new Shader(`\n            uniform float pointSize;\n            varying vec4 color;\n            varying vec2 coord;\n            void main() {\n                color = LGL_Color;\n                coord = LGL_TexCoord;\n                gl_Position = LGL_ModelViewProjectionMatrix * LGL_Vertex;\n                gl_PointSize = pointSize;\n            }\n        `, `\n            uniform sampler2D texture;\n            uniform float pointSize;\n            uniform bool useTexture;\n            varying vec4 color;\n            varying vec2 coord;\n            void main() {\n                gl_FragColor = color;\n                if (useTexture) gl_FragColor *= texture2D(texture, coord.xy);\n            }\n        `, gl),\n\t}) {\n\t\tthis.matrixMode(LightGLContext.MODELVIEW)\n\t}\n\n\t/// Implement the OpenGL modelview and projection matrix stacks, along with some other useful GLU matrix functions.\n\tmatrixMode(mode: { __MATRIX_MODE_CONSTANT: any }): void {\n\t\tswitch (mode) {\n\t\t\tcase this.MODELVIEW:\n\t\t\t\tthis.currentMatrixName = 'modelViewMatrix'\n\t\t\t\t//this.currentMatrix = this.modelViewMatrix\n\t\t\t\tthis.stack = this.modelViewStack\n\t\t\t\tbreak\n\t\t\tcase this.PROJECTION:\n\t\t\t\tthis.currentMatrixName = 'projectionMatrix'\n\t\t\t\t//this.currentMatrix = this.projectionMatrix\n\t\t\t\tthis.stack = this.projectionStack\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tthrow new Error('invalid matrix mode ' + mode)\n\t\t}\n\t}\n\n\tloadIdentity(): void {\n\t\tM4.identity(this[this.currentMatrixName])\n\t\tthis.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++\n\t}\n\n\tloadMatrix(m4: M4) {\n\t\tM4.copy(m4, this[this.currentMatrixName])\n\t\tthis.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++\n\t}\n\n\tmultMatrix(m4: M4) {\n\t\tM4.multiply(this[this.currentMatrixName], m4, this.resultMatrix)\n\t\tconst temp = this.resultMatrix\n\t\tthis.resultMatrix = this[this.currentMatrixName]\n\t\tthis[this.currentMatrixName] = temp\n\t\tthis.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++\n\t}\n\n\tmirror(plane: { normal1: V3, w: number }) {\n\t\tthis.multMatrix(M4.mirror(plane))\n\t}\n\n\tperspective(fovDegrees: number, aspect: number, near: number, far: number, result?: M4) {\n\t\tthis.multMatrix(M4.perspectiveRad(fovDegrees * DEG, aspect, near, far, this.tempMatrix))\n\t}\n\n\tfrustum(left: number, right: number, bottom: number, top: number, near: number, far: number) {\n\t\tthis.multMatrix(M4.frustum(left, right, bottom, top, near, far, this.tempMatrix))\n\t}\n\n\tortho(left: number, right: number, bottom: number, top: number, near: number, far: number) {\n\t\tthis.multMatrix(M4.ortho(left, right, bottom, top, near, far, this.tempMatrix))\n\t}\n\n\tscale(x: number, y: number, z?: number): void\n\tscale(scale: number): void\n\tscale(v: V3): void\n\tscale(...args: any[]) {\n\t\tthis.multMatrix((M4.scale as any)(...args, this.tempMatrix))\n\t}\n\n\tmirroredX() {\n\t\tthis.multMatrix(M4.mirror(P3ZX))\n\t}\n\n\ttranslate(x: number, y?: number, z?: number): void\n\ttranslate(v: V3): void\n\ttranslate(x: any, y?: any, z?: any) {\n\t\tif (undefined !== y) {\n\t\t\tthis.multMatrix(M4.translate(x, y, z, this.tempMatrix))\n\t\t} else {\n\t\t\tthis.multMatrix(M4.translate(x, this.tempMatrix))\n\t\t}\n\t}\n\n\trotate(angleDegrees: number, x: number, y: number, z: number) {\n\t\tthis.multMatrix(M4.rotate(angleDegrees * DEG, {x, y, z}, this.tempMatrix))\n\t}\n\n\tlookAt(eye: V3, center: V3, up: V3) {\n\t\tthis.multMatrix(M4.lookAt(eye, center, up, this.tempMatrix))\n\t}\n\n\tpushMatrix() {\n\t\tthis.stack.push(M4.copy(this[this.currentMatrixName]))\n\t}\n\n\tpopMatrix() {\n\t\tconst pop = this.stack.pop()\n\t\tassert(undefined !== pop)\n\t\tthis[this.currentMatrixName] = pop as M4\n\t\tthis.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++\n\t}\n\n\t/**\n\t * World coordinates (WC) to screen/window coordinates matrix\n\t */\n\twcToWindowMatrix() {\n\t\tconst viewport = this.getParameter(this.VIEWPORT)\n\t\tconst [x, y, w, h] = viewport\n\t\tconst viewportToScreenMatrix = new M4([\n\t\t\tw / 2, 0, 0, x + w / 2,\n\t\t\th / 2, 0, 0, y + h / 2,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1,\n\t\t])\n\t\treturn M4.multiplyMultiple(viewportToScreenMatrix, this.projectionMatrix, this.modelViewMatrix)\n\t}\n\n\t/////////// IMMEDIATE MODE\n\t// ### Immediate mode\n\t//\n\t// Provide an implementation of OpenGL's deprecated immediate mode. This is\n\t// deprecated for a reason: constantly re-specifying the geometry is a bad\n\t// idea for performance. You should use a `GL.Mesh` instead, which specifies\n\t// the geometry once and caches it on the graphics card. Still, nothing\n\t// beats a quick `viewerGL.begin(WGL.POINTS); viewerGL.vertex(1, 2, 3); viewerGL.end();` for\n\t// debugging. This intentionally doesn't implement fixed-function lighting\n\t// because it's only meant for quick debugging tasks.\n\n\n\tpointSize(pointSize: number): void {\n\t\tthis.immediate.shader.uniforms({pointSize: pointSize})\n\t}\n\n\tbegin(mode: DRAW_MODES | -1) {\n\t\tif (this.immediate.mode != -1) throw new Error('mismatched viewerGL.begin() and viewerGL.end() calls')\n\t\tthis.immediate.mode = mode\n\t\tthis.immediate.mesh.colors = []\n\t\tthis.immediate.mesh.coords = []\n\t\tthis.immediate.mesh.vertices = []\n\t}\n\n\tcolor(cssColor: string): void\n\tcolor(r: number, g: number, b: number, a?: number): void\n\tcolor(hexInt: int): void\n\tcolor(glColor: GL_COLOR): void\n\tcolor(...args: any[]) {\n\t\tthis.immediate.color =\n\t\t\t(1 == args.length && Array.isArray(args[0]))\n\t\t\t\t? args[0]\n\t\t\t\t: (1 == args.length && 'number' == typeof args[0])\n\t\t\t\t? hexIntToGLColor(args[0])\n\t\t\t\t: (1 == args.length && 'string' == typeof args[0])\n\t\t\t\t\t? chroma(args[0]).gl()\n\t\t\t\t\t: [args[0], args[1], args[2], args[3] || 0]\n\t}\n\n\ttexCoord(s: number, t: number): void\n\ttexCoord(coords: [number, number]): void\n\ttexCoord(coords: { x: number, y: number }): void\n\ttexCoord(...args: any[]) {\n\t\tthis.immediate.coord = V.apply(undefined, args).toArray(2)\n\t}\n\n\tvertex(v: V3): void\n\tvertex(x: number, y: number, z: number): void\n\tvertex(...args: any[]) {\n\t\tthis.immediate.mesh.colors.push(this.immediate.color)\n\t\tthis.immediate.mesh.coords.push(this.immediate.coord)\n\t\tthis.immediate.mesh.vertices.push(V.apply(undefined, args))\n\t}\n\n\tend(): void {\n\t\tif (this.immediate.mode == -1) throw new Error('mismatched viewerGL.begin() and viewerGL.end() calls')\n\t\tthis.immediate.mesh.compile()\n\t\tthis.immediate.shader.uniforms({\n\t\t\tuseTexture: !!LightGLContext.gl.getParameter(WGL.TEXTURE_BINDING_2D),\n\t\t}).drawBuffers(this.immediate.mesh.vertexBuffers, undefined, this.immediate.mode)\n\t\tthis.immediate.mode = -1\n\t}\n\n\n\t////////// MISCELLANEOUS METHODS\n\tstatic gl: LightGLContext\n\n\tmakeCurrent() {\n\t\tLightGLContext.gl = this\n\t}\n\n\t/**\n\t * Starts an animation loop.\n\t */\n\tanimate(callback: (this: LightGLContext, domHighResTimeStamp: number, timeSinceLast: number) => void): () => void {\n\t\tconst requestAnimationFrame: typeof window.requestAnimationFrame =\n\t\t\twindow.requestAnimationFrame ||\n\t\t\t(window as any).mozRequestAnimationFrame ||\n\t\t\twindow.webkitRequestAnimationFrame ||\n\t\t\tfunction (callback: FrameRequestCallback) {\n\t\t\t\tsetTimeout(() => callback(performance.now()), 1000 / 60)\n\t\t\t}\n\t\tlet time = performance.now(), keepUpdating = true\n\t\tconst update = (domHighResTimeStamp: number) => {\n\t\t\tconst now = performance.now()\n\t\t\tcallback.call(this, now, now - time)\n\t\t\ttime = now\n\t\t\tkeepUpdating && requestAnimationFrame(update)\n\t\t}\n\t\trequestAnimationFrame(update)\n\t\treturn () => { keepUpdating = false }\n\t}\n\n\n\t/**\n\t * Provide an easy way to get a fullscreen app running, including an\n\t * automatic 3D perspective projection matrix by default. This should be\n\t * called once.\n\t *\n\t * Just fullscreen, no automatic camera:\n\t *\n\t *     viewerGL.fullscreen({ camera: false })\n\t *\n\t * Adjusting field of view, near plane distance, and far plane distance:\n\t *\n\t *     viewerGL.fullscreen({ fov: 45, near: 0.1, far: 1000 })\n\t *\n\t * Adding padding from the edge of the window:\n\t *\n\t *     viewerGL.fullscreen({ paddingLeft: 250, paddingBottom: 60 })\n\t */\n\tfullscreen(options: {\n\t\tpaddingTop?: number,\n\t\tpaddingLeft?: number,\n\t\tpaddingRight?: number,\n\t\tpaddingBottom?: number,\n\t\tcamera?: boolean,\n\t\tfov?: number,\n\t\tnear?: number,\n\t\tfar?: number\n\t} = {}) {\n\n\t\tconst top = options.paddingTop || 0\n\t\tconst left = options.paddingLeft || 0\n\t\tconst right = options.paddingRight || 0\n\t\tconst bottom = options.paddingBottom || 0\n\t\tif (!document.body) {\n\t\t\tthrow new Error('document.body doesn\\'t exist yet (call viewerGL.fullscreen() from ' +\n\t\t\t\t'window.onload() or from inside the <body> tag)')\n\t\t}\n\t\tdocument.body.appendChild(this.canvas)\n\t\tdocument.body.style.overflow = 'hidden'\n\t\tthis.canvas.style.position = 'absolute'\n\t\tthis.canvas.style.left = left + 'px'\n\t\tthis.canvas.style.top = top + 'px'\n\t\tconst gl = this\n\n\t\tfunction windowOnResize() {\n\t\t\tgl.canvas.width = window.innerWidth - left - right\n\t\t\tgl.canvas.height = window.innerHeight - top - bottom\n\t\t\tgl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n\t\t\tif (options.camera) {\n\t\t\t\tgl.matrixMode(LightGLContext.PROJECTION)\n\t\t\t\tgl.loadIdentity()\n\t\t\t\tgl.perspective(options.fov || 45, gl.canvas.width / gl.canvas.height,\n\t\t\t\t\toptions.near || 0.1, options.far || 1000)\n\t\t\t\tgl.matrixMode(LightGLContext.MODELVIEW)\n\t\t\t}\n\t\t}\n\n\t\twindow.addEventListener('resize', windowOnResize)\n\t\twindowOnResize()\n\t\treturn this\n\t}\n\n\tviewportFill() {\n\t\tthis.viewport(0, 0, this.canvas.width, this.canvas.height)\n\t}\n\n\thandleError(): void {\n\t\t// const errorCode = this.getError()\n\t\t// if (0 !== errorCode) {\n\t\t//     throw new Error('' + errorCode + WGL_ERROR[errorCode])\n\t\t// }\n\t}\n\n\n\t/**\n\t * `create()` creates a new WebGL context and augments it with more methods. The alpha channel is disabled\n\t * by default because it usually causes unintended transparencies in the canvas.\n\t */\n\tstatic create(options: { canvas?: HTMLCanvasElement, alpha?: boolean } = {}): LightGLContext {\n\t\tconst canvas = options.canvas || document.createElement('canvas')\n\t\tif (!options.canvas) {\n\t\t\tcanvas.width = 800\n\t\t\tcanvas.height = 600\n\t\t}\n\t\tif (!('alpha' in options)) options.alpha = false\n\t\tlet newGL: LightGLContext | undefined = undefined\n\t\ttry {\n\t\t\tnewGL = canvas.getContext('webgl', options) as LightGLContext\n\t\t\tconsole.log('getting context')\n\t\t} catch (e) {\n\t\t\tconsole.log(e, newGL)\n\t\t}\n\t\ttry {\n\t\t\tnewGL = newGL || canvas.getContext('experimental-webgl', options) as LightGLContext\n\t\t} catch (e) {\n\t\t\tconsole.log(e, newGL)\n\t\t}\n\t\tif (!newGL) throw new Error('WebGL not supported')\n\n\t\tLightGLContext.gl = newGL\n\t\taddOwnProperties(newGL, LightGLContext.prototype)\n\t\taddOwnProperties(newGL, new LightGLContext(newGL))\n\t\t//addEventListeners(newGL)\n\t\treturn newGL\n\t}\n}\n\nenum WGL_ERROR {\n\tNO_ERROR = WGL.NO_ERROR,\n\tINVALID_ENUM = WGL.INVALID_ENUM,\n\tINVALID_VALUE = WGL.INVALID_VALUE,\n\tINVALID_OPERATION = WGL.INVALID_OPERATION,\n\tINVALID_FRAMEBUFFER_OPERATION = WGL.INVALID_FRAMEBUFFER_OPERATION,\n\tOUT_OF_MEMORY = WGL.OUT_OF_MEMORY,\n\tCONTEXT_LOST_WEBGL = WGL.CONTEXT_LOST_WEBGL,\n}\n\nLightGLContext.prototype.MODELVIEW = LightGLContext.MODELVIEW\nLightGLContext.prototype.PROJECTION = LightGLContext.PROJECTION\nLightGLContext.prototype.HALF_FLOAT_OES = LightGLContext.HALF_FLOAT_OES\n\n\n/**\n *\n * Push two triangles:\n * c - d\n * | \\ |\n * a - b\n */\nexport function pushQuad(triangles: int[], flipped: boolean, a: int, b: int, c: int, d: int) {\n\tif (flipped) {\n\t\ttriangles.push(\n\t\t\ta, c, b,\n\t\t\tb, c, d)\n\t} else {\n\t\ttriangles.push(\n\t\t\ta, b, c,\n\t\t\tb, d, c)\n\t}\n}\n\nfunction hexIntToGLColor(color: int): GL_COLOR {\n\treturn [(color >> 16) / 255.0, ((color >> 8) & 0xff) / 255.0, (color & 0xff) / 255.0, 1.0]\n}\n","import {assert, int, NLA_DEBUG, V3} from 'ts3dutils'\nimport {currentGL, LightGLContext} from './LightGLContext'\n\nconst WGL = WebGLRenderingContext\n\nexport class Buffer {\n\tbuffer: WebGLBuffer | undefined\n\tdata: any[]\n\n\t/** Number of elements in buffer. 2 V3s is still 2, not 6. */\n\tcount: int\n\n\t/** Space between elements in buffer. 3 for V3s. */\n\tspacing: int\n\n\thasBeenCompiled: boolean\n\n\tname?: string\n\n\tmaxValue?: number\n\n\t/**\n\t * Provides a simple method of uploading data to a GPU buffer. Example usage:\n\t *\n\t *     const vertices = new Buffer(WGL.ARRAY_BUFFER, Float32Array)\n\t *     vertices.data = [[0, 0, 0], [1, 0, 0], [0, 1, 0], [1, 1, 0]]\n\t *     vertices.compile()\n\t *\n\t *     const indices = new Buffer(WGL.ELEMENT_ARRAY_BUFFER, Uint16Array)\n\t *     indices.data = [[0, 1, 2], [2, 1, 3]]\n\t *     indices.compile()\n\t *\n\t * Specifies the target to which the buffer object is bound.\n\t * The symbolic constant must be GL_ARRAY_BUFFER or GL_ELEMENT_ARRAY_BUFFER.\n\t */\n\tconstructor(readonly target: int, readonly type: typeof Float32Array | typeof Uint16Array) {\n\t\tassert(target == WGL.ARRAY_BUFFER || target == WGL.ELEMENT_ARRAY_BUFFER, 'target == WGL.ARRAY_BUFFER || target == WGL.ELEMENT_ARRAY_BUFFER')\n\t\tassert(type == Float32Array || type == Uint16Array, 'type == Float32Array || type == Uint16Array')\n\t\tthis.buffer = undefined\n\t\tthis.type = type\n\t\tthis.data = []\n\t\tthis.count = 0\n\t\tthis.spacing = 0\n\t\tthis.hasBeenCompiled = false\n\t}\n\n\t/**\n\t * Upload the contents of `data` to the GPU in preparation for rendering. The data must be a list of lists\n\t * where each inner list has the same length. For example, each element of data for vertex normals would be a\n\t * list of length three. This will remember the data length and element length for later use by shaders.\n\t *\n\t * This could have used `[].concat.apply([], this.data)` to flatten the array but Google\n\t * Chrome has a maximum number of arguments so the concatenations are chunked to avoid that limit.\n\t *\n\t * @param type Either `WGL.STATIC_DRAW` or `WGL.DYNAMIC_DRAW`. Defaults to `WGL.STATIC_DRAW`\n\t */\n\tcompile(type: int = WGL.STATIC_DRAW, gl: LightGLContext = currentGL()): void {\n\t\tassert(WGL.STATIC_DRAW == type || WGL.DYNAMIC_DRAW == type, 'WGL.STATIC_DRAW == type || WGL.DYNAMIC_DRAW == type')\n\t\tgl.handleError()\n\t\tthis.buffer = this.buffer || gl.createBuffer()!\n\t\tgl.handleError()\n\t\tlet buffer: Float32Array | Uint16Array\n\t\tif (this.data.length == 0) {\n\t\t\tconsole.warn('empty buffer ' + this.name)\n\t\t\t//console.trace()\n\t\t}\n\t\tif (this.data.length == 0 || this.data[0] instanceof V3) {\n\t\t\tassert(!(this.data[0] instanceof V3) || this.type == Float32Array)\n\t\t\tV3.pack(this.data, buffer = new this.type(this.data.length * 3) as Float32Array) // asserts that all\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t // elements are V3s\n\t\t\tthis.spacing = 3\n\t\t\tthis.count = this.data.length\n\t\t\tthis.maxValue = 0\n\t\t} else {\n\t\t\t//assert(Array != this.data[0].constructor, this.name + this.data[0])\n\t\t\tif (Array.isArray(this.data[0])) {\n\t\t\t\tconst bufferLength = this.data.length * this.data[0].length\n\t\t\t\tbuffer = new this.type(bufferLength)\n\t\t\t\tlet i = this.data.length, destPtr = bufferLength\n\t\t\t\twhile (i--) {\n\t\t\t\t\tconst subArray = this.data[i]\n\t\t\t\t\tlet j = subArray.length\n\t\t\t\t\twhile (j--) {\n\t\t\t\t\t\tbuffer[--destPtr] = subArray[j]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tassert(0 == destPtr)\n\t\t\t} else {\n\t\t\t\tbuffer = new this.type(this.data)\n\t\t\t}\n\n\t\t\tconst spacing = this.data.length ? buffer.length / this.data.length : 0\n\t\t\tassert(spacing % 1 == 0, `buffer ${this.name} elements not of consistent size, average size is ` + spacing)\n\t\t\tif (NLA_DEBUG) {\n\t\t\t\tif (10000 <= buffer.length) {\n\t\t\t\t\tthis.maxValue = 0\n\t\t\t\t} else {\n\t\t\t\t\tthis.maxValue = Math.max.apply(undefined, buffer)\n\t\t\t\t}\n\t\t\t}\n\t\t\tassert(spacing !== 0)\n\t\t\tthis.spacing = spacing\n\t\t\tthis.count = this.data.length\n\t\t}\n\t\tgl.bindBuffer(this.target, this.buffer)\n\t\tgl.handleError()\n\t\tgl.bufferData(this.target, buffer, type)\n\t\tgl.handleError()\n\t\tthis.hasBeenCompiled = true\n\t}\n}","import {assert, int} from 'ts3dutils'\n\nimport {currentGL, LightGLContext} from './LightGLContext'\n\nexport interface TextureOptions {\n\twrap?: number // defaults to WGL.CLAMP_TO_EDGE, or set wrapS and wrapT individually.\n\twrapS?: number\n\twrapT?: number\n\tfilter?: number // defaults to WGL.LINEAR, or set minFilter and magFilter individually.\n\tminFilter?: number\n\tmagFilter?: number\n\tformat?: number // defaults to WGL.RGBA.\n\ttype?: number // defaults to WGL.UNSIGNED_BYTE.\n}\n\nexport class Texture {\n\theight: int\n\twidth: int\n\ttexture: WebGLTexture\n\t// e.g. viewerGL.UNSIGNED_BYTE, viewerGL.FLOAT\n\tformat: int\n\t// e.g. viewerGL.RGBA\n\ttype: int\n\n\t/**\n\t * Provides a simple wrapper around WebGL textures that supports render-to-texture.\n\t *\n\t * The arguments `width` and `height` give the size of the texture in texels.\n\t * WebGL texture dimensions must be powers of two unless `filter` is set to\n\t * either `WGL.NEAREST` or `WGL.LINEAR` and `wrap` is set to `WGL.CLAMP_TO_EDGE`\n\t * (which they are by default).\n\t *\n\t * Texture parameters can be passed in via the `options` argument.\n\t * Example usage:\n\t *\n\t *      let tex = new GL.Texture(256, 256, {\n\t\t *       magFilter: WGL.NEAREST,\n\t\t *       minFilter: WGL.LINEAR,\n\t\t *\n\t\t *       wrapS: WGL.REPEAT,\n\t\t *       wrapT: WGL.REPEAT,\n\t\t *\n\t\t *       format: WGL.RGB, // Defaults to WGL.RGBA\n\t\t *       type: WGL.FLOAT // Defaults to WGL.UNSIGNED_BYTE\n\t\t *     })\n\t *\n\t */\n\tconstructor(width: int, height: int, options: TextureOptions = {}, readonly gl = currentGL()) {\n\t\tthis.texture = gl.createTexture()!\n\t\tgl.handleError() // in case createTexture returns null & fails\n\t\tthis.width = width\n\t\tthis.height = height\n\t\tthis.format = options.format || gl.RGBA\n\t\tthis.type = options.type || gl.UNSIGNED_BYTE\n\t\tconst magFilter = options.filter || options.magFilter || gl.LINEAR\n\t\tconst minFilter = options.filter || options.minFilter || gl.LINEAR\n\t\tif (this.type === gl.FLOAT) {\n\t\t\tif (!gl.getExtension('OES_texture_float')) {\n\t\t\t\tthrow new Error('OES_texture_float is required but not supported')\n\t\t\t}\n\t\t\tif ((minFilter !== gl.NEAREST || magFilter !== gl.NEAREST) && !gl.getExtension('OES_texture_float_linear')) {\n\t\t\t\tthrow new Error('OES_texture_float_linear is required but not supported')\n\t\t\t}\n\t\t} else if (this.type === LightGLContext.HALF_FLOAT_OES) {\n\t\t\tif (!gl.getExtension('OES_texture_half_float')) {\n\t\t\t\tthrow new Error('OES_texture_half_float is required but not supported')\n\t\t\t}\n\t\t\tif ((minFilter !== gl.NEAREST || magFilter !== gl.NEAREST) && !gl.getExtension('OES_texture_half_float_linear')) {\n\t\t\t\tthrow new Error('OES_texture_half_float_linear is required but not supported')\n\t\t\t}\n\t\t}\n\t\tgl.bindTexture(gl.TEXTURE_2D, this.texture)\n\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, options.wrap || options.wrapS || gl.CLAMP_TO_EDGE)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, options.wrap || options.wrapT || gl.CLAMP_TO_EDGE)\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, this.format, width, height, 0, this.format, this.type, null)\n\t}\n\n\tbind(unit: int) {\n\t\tthis.gl.activeTexture(this.gl.TEXTURE0 + unit)\n\t\tthis.gl.bindTexture(this.gl.TEXTURE_2D, this.texture)\n\t}\n\n\tunbind(unit: int) {\n\t\tthis.gl.activeTexture(this.gl.TEXTURE0 + unit)\n\t\tthis.gl.bindTexture(this.gl.TEXTURE_2D, null)\n\t}\n\n\tprivate framebuffer: WebGLFramebuffer\n\tprivate renderbuffer: WebGLRenderbuffer & { width: number, height: number }\n\tstatic checkerBoardCanvas: HTMLCanvasElement\n\n\tcanDrawTo() {\n\t\tconst gl = this.gl\n\t\tthis.framebuffer = this.framebuffer || gl.createFramebuffer()\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer)\n\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0)\n\t\tconst result = gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null)\n\t\treturn result\n\t}\n\n\tdrawTo(callback: (gl: LightGLContext) => void): void {\n\t\tconst gl = this.gl\n\t\tthis.framebuffer = this.framebuffer || gl.createFramebuffer()\n\t\tthis.renderbuffer = this.renderbuffer || gl.createRenderbuffer() as any\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer)\n\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, this.renderbuffer)\n\t\tif (this.width != this.renderbuffer.width || this.height != this.renderbuffer.height) {\n\t\t\tthis.renderbuffer.width = this.width\n\t\t\tthis.renderbuffer.height = this.height\n\t\t\tgl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.width, this.height)\n\t\t}\n\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0)\n\t\tgl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this.renderbuffer)\n\t\tif (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {\n\t\t\tthrow new Error('Rendering to this texture is not supported (incomplete this.framebuffer)')\n\t\t}\n\t\tconst viewport = gl.getParameter(gl.VIEWPORT)\n\t\tgl.viewport(0, 0, this.width, this.height)\n\n\t\tcallback(gl)\n\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null)\n\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null)\n\t\tgl.viewport(viewport[0], viewport[1], viewport[2], viewport[3])\n\t}\n\n\tswapWith(other: Texture): void {\n\t\tassert(this.gl == other.gl)\n\t\tlet temp\n\t\ttemp = other.texture\n\t\tother.texture = this.texture\n\t\tthis.texture = temp\n\n\t\ttemp = other.width\n\t\tother.width = this.width\n\t\tthis.width = temp\n\n\t\ttemp = other.height\n\t\tother.height = this.height\n\t\tthis.height = temp\n\t}\n\n\t/**\n\t * Return a new texture created from `imgElement`, an `<img>` tag.\n\t */\n\tstatic fromImage(imgElement: HTMLImageElement | HTMLCanvasElement, options: TextureOptions, gl: LightGLContext = currentGL()): Texture {\n\t\toptions = options || {}\n\t\tconst texture = new Texture(imgElement.width, imgElement.height, options, gl)\n\t\ttry {\n\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, texture.format, texture.format, texture.type, imgElement)\n\t\t} catch (e) {\n\t\t\tif (location.protocol == 'file:') {\n\t\t\t\tthrow new Error('imgElement not loaded for security reasons (serve this page over \"http://\" instead)')\n\t\t\t} else {\n\t\t\t\tthrow new Error('imgElement not loaded for security reasons (imgElement must originate from the same ' +\n\t\t\t\t\t'domain as this page or use Cross-Origin Resource Sharing)')\n\t\t\t}\n\t\t}\n\t\tif (options.minFilter && options.minFilter != gl.NEAREST && options.minFilter != gl.LINEAR) {\n\t\t\tgl.generateMipmap(gl.TEXTURE_2D)\n\t\t}\n\t\treturn texture\n\t}\n\n\t/**\n\t * Returns a checkerboard texture that will switch to the correct texture when it loads.\n\t */\n\tstatic fromURL(url: string, options: TextureOptions = {}, gl = currentGL()): Texture {\n\t\tTexture.checkerBoardCanvas = Texture.checkerBoardCanvas || (function () {\n\t\t\tconst c = document.createElement('canvas').getContext('2d')\n\t\t\tif (!c) throw new Error('Could not create 2d canvas.')\n\t\t\tc.canvas.width = c.canvas.height = 128\n\t\t\tfor (let y = 0; y < c.canvas.height; y += 16) {\n\t\t\t\tfor (let x = 0; x < c.canvas.width; x += 16) {\n\t\t\t\t\t//noinspection JSBitwiseOperatorUsage\n\t\t\t\t\tc.fillStyle = (x ^ y) & 16 ? '#FFF' : '#DDD'\n\t\t\t\t\tc.fillRect(x, y, 16, 16)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn c.canvas\n\t\t})()\n\t\tconst texture = Texture.fromImage(Texture.checkerBoardCanvas, options)\n\t\tconst image = new Image()\n\t\timage.onload = () => Texture.fromImage(image, options, gl).swapWith(texture)\n\t\timage.src = url\n\t\treturn texture\n\t}\n}","uniform vec4 color;\r\nvoid main() {\r\n    gl_FragColor = color;\r\n}","void main() {\r\n    gl_Position = LGL_ModelViewProjectionMatrix * LGL_Vertex;\r\n}","varying vec4 color;\r\nvoid main() {\r\n    gl_FragColor = color;\r\n}","const int NUM_PS = 64;\r\nfloat q = 0.01;\r\nuniform vec4 ps[NUM_PS];\r\nvarying vec4 color;\r\nvec3 forceAtPos(vec3 coord) {\r\n    vec3 totalForce = vec3(0.0, 0.0, 0.0);\r\n    for (int i = 0; i < NUM_PS; i++) {\r\n        vec4 p = ps[i];\r\n        float pCharge = p.w;\r\n        vec3 coordToP = p.xyz - coord;\r\n        float r = length(coordToP);\r\n        float partialForceMagnitude = pCharge * q / r / r;\r\n        vec3 partialForce = normalize(coordToP) * partialForceMagnitude;\r\n        totalForce += partialForce;\r\n    }\r\n    return totalForce;\r\n}\r\nvoid main() {\r\n    //gl_FragColor = vec4(coord.x, coord.y, 0, 1);\r\n    vec4 pos = LGL_Vertex;\r\n    vec3 fieldPos = pos.xyz;\r\n    vec3 fieldForce = forceAtPos(fieldPos);\r\n    color = vec4(1,0,0,1) * sqrt(length(fieldForce)) / 1.0;\r\n    gl_Position = vec4(\r\n        fieldPos * 2.0\r\n        + normalize(fieldForce) * pos.z\r\n        + vec3(-1, -1, -1), 1);\r\n}","/// <reference path=\"types.d.ts\" />\n\nimport chroma from 'chroma-js'\nimport {AABB, arrayFromFunction, clamp, DEG, int, lerp, M4, TAU, time, Tuple4, V, V3} from 'ts3dutils'\n\nimport {DRAW_MODES, LightGLContext, Mesh, pushQuad, Shader, Texture} from './index'\nimport colorFS from './shaders/colorFS.glslx'\nimport posVS from './shaders/posVS.glslx'\nimport varyingColorFS from './shaders/varyingColorFS.glslx'\nimport vectorFieldVS from './shaders/vectorFieldVS.glslx'\n\nconst {sin, PI} = Math\n\nexport {LightGLContext}\n\n/**\n * Draw a rotating cube.\n */\nexport async function setupDemo(gl: LightGLContext) {\n\tconst mesh = Mesh.cube()\n\tconst shader = new Shader<{ color: 'FLOAT_VEC4' }>(`\nvoid main() {\n    gl_Position = LGL_ModelViewProjectionMatrix * LGL_Vertex;\n}`, `\nuniform vec4 color;\nvoid main() {\n    gl_FragColor = color;\n}`)\n\n\t// setup camera\n\tgl.matrixMode(gl.PROJECTION)\n\tgl.loadIdentity()\n\tgl.perspective(70, gl.canvas.width / gl.canvas.height, 0.1, 1000)\n\tgl.lookAt(V(0, -2, 1.5), V3.O, V3.Z)\n\tgl.matrixMode(gl.MODELVIEW)\n\n\tgl.enable(gl.DEPTH_TEST)\n\n\treturn gl.animate(function (abs, diff) {\n\t\tconst angleDeg = abs / 1000 * 45\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t\tgl.loadIdentity()\n\t\tgl.rotate(angleDeg, 0, 0, 1)\n\t\tgl.scale(1.5)\n\t\tgl.translate(-0.5, -0.5, -0.5)\n\n\t\tshader.uniforms({color: [1, 1, 0, 1]}).draw(mesh)\n\t\tshader.uniforms({color: [0, 0, 0, 1]}).draw(mesh, gl.LINES)\n\t})\n}\n\n/**\n * Blend two textures while rendering them to a quad.\n */\nexport function multiTexture(gl: LightGLContext) {\n\tconst mesh = Mesh.plane()\n\tconst texture = Texture.fromURL('texture.png')\n\tconst texture2 = Texture.fromURL('texture2.png')\n\tconst shader = new Shader<{ texture: 'SAMPLER_2D', texture2: 'SAMPLER_2D' }>(`\n  varying vec2 coord;\n  void main() {\n    coord = LGL_TexCoord;\n    gl_Position = LGL_ModelViewProjectionMatrix * LGL_Vertex;\n  }\n`, `\n  uniform sampler2D texture;\n  uniform sampler2D texture2;\n  varying vec2 coord;\n  void main() {\n    //gl_FragColor = vec4(coord.x, coord.y, 0, 1);\n    gl_FragColor = texture2D(texture, coord) - texture2D(texture2, coord);\n  }\n`)\n\tgl.clearColor(1, 1, 1, 1)\n\n\t// setup camera\n\tgl.matrixMode(gl.PROJECTION)\n\tgl.loadIdentity()\n\tgl.perspective(40, gl.canvas.width / gl.canvas.height, 0.1, 1000)\n\tgl.lookAt(V(0, -2, 1.5), V3.O, V3.Z)\n\tgl.matrixMode(gl.MODELVIEW)\n\n\tgl.enable(gl.DEPTH_TEST)\n\n\treturn gl.animate(function (abs, diff) {\n\t\tconst angleDeg = abs / 1000 * 45\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t\tgl.loadIdentity()\n\n\t\t//gl.translate(0, 0, -5)\n\t\tgl.rotate(angleDeg, 0, 0, 1)\n\t\tgl.translate(-0.5, -0.5)\n\n\t\ttexture.bind(0)\n\t\ttexture2.bind(1)\n\t\tshader.uniforms({\n\t\t\ttexture: 0,\n\t\t\ttexture2: 1,\n\t\t}).draw(mesh)\n\t})\n}\n\n/**\n * Move camera using mouse.\n */\nexport function camera(gl: LightGLContext) {\n\tlet yRot = -10 * DEG\n\tlet zRot = 90 * DEG\n\tlet camera = new V3(0, -5, 1)\n\tconst mesh = Mesh.sphere().computeWireframeFromFlatTriangles().compile()\n\tconst shader = new Shader(`\n  varying vec3 normal;\n  void main() {\n    normal = LGL_Normal;\n    gl_Position = LGL_ModelViewProjectionMatrix * LGL_Vertex;\n  }\n`, `\n  uniform float brightness;\n  varying vec3 normal;\n  void main() {\n    gl_FragColor = vec4(brightness * (normal * 0.5 + 0.5), 1.0);\n  }\n`)\n\n\tlet lastPos = V3.O\n\t// scene rotation\n\tgl.canvas.onmousemove = function (e) {\n\t\tconst pagePos = V(e.pageX, e.pageY)\n\t\tconst delta = lastPos.to(pagePos)\n\t\tif (e.buttons & 1) {\n\t\t\tzRot -= delta.x * 0.25 * DEG\n\t\t\tyRot = clamp(yRot - delta.y * 0.25 * DEG, -85 * DEG, 85 * DEG)\n\t\t}\n\t\tlastPos = pagePos\n\t}\n\tgl.canvas.contentEditable = 'true'\n\tconst keys: { [key: string]: boolean } = {}\n\tgl.canvas.onkeydown = function (e) {\n\t\tkeys[e.code] = true\n\t}\n\tgl.canvas.onkeyup = function (e) {\n\t\tkeys[e.code] = false\n\t}\n\n\tgl.clearColor(1, 1, 1, 1)\n\n\t// setup camera\n\n\tgl.enable(gl.CULL_FACE)\n\tgl.enable(gl.POLYGON_OFFSET_FILL)\n\tgl.polygonOffset(1, 1)\n\tgl.clearColor(0.8, 0.8, 0.8, 1)\n\tgl.enable(gl.DEPTH_TEST)\n\n\treturn gl.animate(function (abs, diff) {\n\t\tconst angleDeg = abs / 1000 * 45\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t\tgl.loadIdentity()\n\t\tconst speed = diff / 1000 * 4\n\n\t\t// Forward movement\n\t\tconst forwardMov = +!!(keys.KeyW || keys.ArrowUp) - +!!(keys.KeyS || keys.ArrowDown)\n\t\tconst forwardV3 = V3.sphere(zRot, yRot)\n\n\t\t// Sideways movement\n\t\tconst sideMov = +!!(keys.KeyA || keys.ArrowLeft) - +!!(keys.KeyD || keys.ArrowRight)\n\t\tconst sideV3 = V3.sphere(zRot + Math.PI / 2, 0)\n\n\t\tconst movementV3 = forwardV3.times(forwardMov).plus(sideV3.times(sideMov))\n\t\tcamera = movementV3.likeO() ? camera : camera.plus(movementV3.toLength(speed))\n\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\n\t\tgl.matrixMode(gl.PROJECTION)\n\t\tgl.loadIdentity()\n\t\tgl.perspective(70, gl.canvas.width / gl.canvas.height, 0.1, 1000)\n\t\tgl.lookAt(camera, camera.plus(forwardV3), V3.Z)\n\n\t\tgl.matrixMode(gl.MODELVIEW)\n\t\tgl.loadIdentity()\n\t\tgl.rotate(-zRot, 0, 0, 1)\n\t\tgl.rotate(-yRot, 0, 1, 0)\n\t\tgl.translate(-camera.x, -camera.y, -camera.z)\n\n\t\tshader.uniforms({brightness: 1}).draw(mesh, gl.TRIANGLES)\n\t\tshader.uniforms({brightness: 0}).draw(mesh, gl.LINES)\n\t})\n\n}\n\n/**\n * OpenGL-style immediate mode.\n */\nexport function immediateMode(gl: LightGLContext) {\n\n\t// setup camera\n\tgl.matrixMode(gl.PROJECTION)\n\tgl.loadIdentity()\n\tgl.perspective(70, gl.canvas.width / gl.canvas.height, 0.1, 1000)\n\tgl.lookAt(V(0, -2, 1.5), V3.O, V3.Z)\n\tgl.matrixMode(gl.MODELVIEW)\n\n\tgl.enable(gl.DEPTH_TEST)\n\n\treturn gl.animate(function (abs, diff) {\n\t\tconst angleDeg = abs / 1000 * 45\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t\tgl.loadIdentity()\n\t\tgl.translate(0, 0, -5)\n\t\tgl.rotate(30, 1, 0, 0)\n\t\tgl.rotate(angleDeg, 0, 1, 0)\n\n\t\tgl.color(0.5, 0.5, 0.5)\n\t\tgl.lineWidth(1)\n\t\tgl.begin(gl.LINES)\n\t\tfor (let i = -10; i <= 10; i++) {\n\t\t\tgl.vertex(i, 0, -10)\n\t\t\tgl.vertex(i, 0, +10)\n\t\t\tgl.vertex(-10, 0, i)\n\t\t\tgl.vertex(+10, 0, i)\n\t\t}\n\t\tgl.end()\n\n\t\tgl.pointSize(10)\n\t\tgl.begin(gl.POINTS)\n\t\tgl.color(1, 0, 0)\n\t\tgl.vertex(1, 0, 0)\n\t\tgl.color(0, 1, 0)\n\t\tgl.vertex(0, 1, 0)\n\t\tgl.color(0, 0, 1)\n\t\tgl.vertex(0, 0, 1)\n\t\tgl.end()\n\n\t\tgl.lineWidth(2)\n\t\tgl.begin(gl.LINE_LOOP)\n\t\tgl.color(1, 0, 0)\n\t\tgl.vertex(1, 0, 0)\n\t\tgl.color(0, 1, 0)\n\t\tgl.vertex(0, 1, 0)\n\t\tgl.color(0, 0, 1)\n\t\tgl.vertex(0, 0, 1)\n\t\tgl.end()\n\n\t\tgl.begin(gl.TRIANGLES)\n\t\tgl.color(1, 1, 0)\n\t\tgl.vertex(0.5, 0.5, 0)\n\t\tgl.color(0, 1, 1)\n\t\tgl.vertex(0, 0.5, 0.5)\n\t\tgl.color(1, 0, 1)\n\t\tgl.vertex(0.5, 0, 0.5)\n\t\tgl.end()\n\t})\n}\n\n/**\n * Render mesh to texture, then render that texture to another mesh.\n */\nexport async function renderToTexture(gl: LightGLContext) {\n\tconst mesh = Mesh.load(await fetch('gazebo.json').then(response => response.json()))\n\tconst sinVertices = arrayFromFunction(32, i => {\n\t\tconst x = lerp(-PI, PI, i / 31)\n\t\tconst y = sin(x)\n\t\treturn new V3(x / 7.64, y / 7.64, 0)\n\t})\n\tconst cyl = Mesh.offsetVertices(sinVertices, V3.Z, false)\n\tconst plane = Mesh.plane()\n\tconst texture = Texture.fromURL('texture.png')\n\tconst overlay = new Texture(1024, 1024)\n\tconst meshShader = new Shader(`\n  varying vec3 normal;\n  void main() {\n    normal = LGL_Normal;\n    gl_Position = LGL_ModelViewProjectionMatrix * LGL_Vertex;\n  }\n`, `\n  varying vec3 normal;\n  void main() {\n    gl_FragColor = vec4(normal * 0.5 + 0.5, 1.0);\n  }\n`)\n\tconst planeShader = new Shader(`\n  varying vec2 coord;\n  void main() {\n    coord = LGL_TexCoord.xy;\n    gl_Position = LGL_ModelViewProjectionMatrix * LGL_Vertex;\n  }\n`, `\n  uniform sampler2D texture;\n  uniform sampler2D overlay;\n  varying vec2 coord;\n  void main() {\n    gl_FragColor = (texture2D(overlay, coord) + texture2D(texture, coord)) / 2.0;\n  }\n`)\n\n\tgl.clearColor(1, 1, 1, 1)\n\tgl.enable(gl.DEPTH_TEST)\n\n\n\treturn gl.animate(function (abs, diff) {\n\t\tconst angleDeg = abs / 1000 * 20\n\n\t\tgl.pushMatrix()\n\t\toverlay.drawTo(function (gl: LightGLContext) {\n\t\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t\t\tgl.matrixMode(gl.PROJECTION)\n\t\t\tgl.loadIdentity()\n\t\t\tgl.perspective(60, 1, 0.1, 1000)\n\t\t\tgl.lookAt(V(0, -2, 0.5), V(0, 0, 0.5), V3.Z)\n\t\t\tgl.matrixMode(gl.MODELVIEW)\n\t\t\tgl.loadIdentity()\n\t\t\tgl.rotate(angleDeg, 0, 0, 1)\n\t\t\tgl.rotate(90, 1, 0, 0)\n\t\t\tgl.scale(0.01, 0.01, 0.01)\n\t\t\tmeshShader.draw(mesh)\n\t\t})\n\t\tgl.popMatrix()\n\n\t\tgl.matrixMode(gl.PROJECTION)\n\t\tgl.loadIdentity()\n\t\tgl.perspective(70, gl.canvas.width / gl.canvas.height, 0.1, 1000)\n\t\tgl.lookAt(V(0, -2, 1), V(0.5, 0, 0), V3.Z)\n\t\tgl.matrixMode(gl.MODELVIEW)\n\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t\ttexture.bind(0)\n\t\toverlay.bind(1)\n\t\tplaneShader.uniforms({\n\t\t\ttexture: 0,\n\t\t\toverlay: 1,\n\t\t})\n\n\t\tgl.loadIdentity()\n\t\t//gl.rotate(angleDeg, 0, 0, 1)\n\t\t//gl.rotate(30 * DEG, 1, 0, 0)\n\t\t//gl.rotate(90, 0,0,1)\n\t\tplaneShader.draw(cyl)\n\n\t\tgl.loadIdentity()\n\t\tgl.rotate(90, 1, 0, 0)\n\t\tgl.translate(0.5, 0)\n\t\tplaneShader.draw(plane)\n\t})\n}\n\n/**\n * Draw shadow of a mesh using a shadow map.\n */\nexport async function shadowMap(gl: LightGLContext) {\n\n\t//const mesh = await fetch('dodecahedron.stl')\n\t//    .then(r => r.blob())\n\t//    .then(Mesh.fromBinarySTL)\n\t//    .then(mesh => mesh.translate(0,1,0).scale(5).compile())\n\tconst mesh = Mesh.load(await fetch('cessna.json').then(r => r.json()))\n\n\tlet angleX = 20\n\tlet angleY = 20\n\tlet useBoundingSphere = true\n\tconst cube = Mesh.cube()\n\tconst sphere = Mesh.sphere(2).computeWireframeFromFlatTriangles().compile()\n\tconst plane = Mesh.plane().translate(-0.5, -0.5).scale(300, 300, 1)\n\tconst depthMap = new Texture(1024, 1024, {format: gl.RGBA})\n\tconst texturePlane = Mesh.plane()\n\tconst boundingSphere = mesh.getBoundingSphere()\n\tconst boundingBox = mesh.getAABB()\n\tconst frustrumCube = Mesh.cube().scale(2).translate(V3.XYZ.negated())\n\tconst colorShader = new Shader(`\n  void main() {\n    gl_Position = LGL_ModelViewProjectionMatrix * LGL_Vertex;\n  }\n`, `\n  uniform vec4 color;\n  void main() {\n    gl_FragColor = color;\n  }\n`)\n\tconst depthShader = new Shader(`\n  varying vec4 pos;\n  void main() {\n    gl_Position = pos = LGL_ModelViewProjectionMatrix * LGL_Vertex;\n  }\n`, `\n  varying vec4 pos;\n  void main() {\n    float depth = pos.z / pos.w;\n    gl_FragColor = vec4(depth * 0.5 + 0.5);\n  }\n`)\n\tconst displayShader = new Shader(`\n  uniform mat4 shadowMapMatrix;\n  uniform vec3 light;\n  varying vec4 coord;\n  varying vec3 normal;\n  varying vec3 toLight;\n  void main() {\n    toLight = light - (LGL_ModelViewMatrix * LGL_Vertex).xyz;\n    normal = LGL_NormalMatrix * LGL_Normal;\n    gl_Position = LGL_ModelViewProjectionMatrix * LGL_Vertex;\n    coord = shadowMapMatrix * gl_Position;\n  }\n`, `\n  uniform sampler2D depthMap;\n  varying vec4 coord;\n  varying vec3 normal;\n  varying vec3 toLight;\n  void main() {\n    float shadow = 0.0;\n    if (coord.w > 0.0) {\n      float depth = 0.0;\n      vec2 sample = coord.xy / coord.w * 0.5 + 0.5;\n      if (clamp(sample, 0.0, 1.0) == sample) {\n        float sampleDepth = texture2D(depthMap, sample).r;\n        depth = (sampleDepth == 1.0) ? 1.0e9 : sampleDepth;\n      }\n      if (depth > 0.0) {\n        float bias = -0.002;\n        shadow = clamp(300.0 * (bias + coord.z / coord.w * 0.5 + 0.5 - depth), 0.0, 1.0);\n      }\n    }\n    float ambient = 0.1;\n    float diffuse = max(0.0, dot(normalize(toLight), normalize(normal)));\n    gl_FragColor = vec4((normal * 0.5 + 0.5) * mix(ambient, 1.0, diffuse * (1.0 - shadow)), 1.0);\n  }\n`)\n\tconst textureShader = new Shader(`\n  varying vec2 coord;\n  void main() {\n    coord = LGL_TexCoord;\n    gl_Position = vec4(coord * 2.0 - 1.0, 0.0, 1.0);\n  }\n`, `\n  uniform sampler2D texture;\n  varying vec2 coord;\n  void main() {\n    gl_FragColor = texture2D(texture, coord);\n  }\n`)\n\n\tlet lastPos = V3.O\n\t// scene rotation\n\tgl.canvas.onmousemove = function (e) {\n\t\tconst pagePos = V(e.pageX, e.pageY)\n\t\tconst delta = lastPos.to(pagePos)\n\t\tif (e.buttons & 1) {\n\t\t\tangleY += delta.x\n\t\t\tangleX = clamp(angleX + delta.y, -90, 90)\n\t\t}\n\t\tlastPos = pagePos\n\t}\n\n\n\tgl.canvas.contentEditable = 'true'\n\tgl.canvas.onkeydown = function (e) {\n\t\tuseBoundingSphere = !useBoundingSphere\n\t}\n\n\tgl.enable(gl.DEPTH_TEST)\n\n\tfunction cameraForBoundingSphere(light: V3, sphere: typeof boundingSphere) {\n\t\tconst distance = sphere.center.minus(light).length()\n\t\tconst angle = 2 * Math.asin(sphere.radius / distance)\n\t\tgl.matrixMode(gl.PROJECTION)\n\t\tgl.loadIdentity()\n\t\tgl.perspective(angle / DEG, 1, distance - sphere.radius, distance + sphere.radius)\n\t\tgl.matrixMode(gl.MODELVIEW)\n\t\tgl.loadIdentity()\n\t\tgl.lookAt(light, sphere.center, V3.Y)\n\t}\n\n\tfunction cameraForBoundingBox(light: V3, boundingBox: AABB) {\n\t\tconst center = boundingBox.min.plus(boundingBox.max).div(2)\n\t\tconst axisZ = center.minus(light).unit()\n\t\tconst axisX = axisZ.cross(new V3(0, 1, 0)).unit()\n\t\tconst axisY = axisX.cross(axisZ)\n\t\tlet near = Number.MAX_VALUE\n\t\tlet far = -Number.MAX_VALUE\n\t\tlet slopeNegX = 0\n\t\tlet slopePosX = 0\n\t\tlet slopeNegY = 0\n\t\tlet slopePosY = 0\n\n\t\t// Loop over all the points and find the maximum slope for each direction.\n\t\t// Incidentally, this algorithm works for convex hulls of any shape and will\n\t\t// return the optimal bounding frustum for every hull.\n\t\tconst bbPoints = boundingBox.corners()\n\t\tfor (const point of bbPoints) {\n\t\t\tconst toPoint = point.minus(light)\n\t\t\tconst dotZ = toPoint.dot(axisZ)\n\t\t\tconst slopeX = toPoint.dot(axisX) / dotZ\n\t\t\tconst slopeY = toPoint.dot(axisY) / dotZ\n\t\t\tslopeNegX = Math.min(slopeNegX, slopeX)\n\t\t\tslopeNegY = Math.min(slopeNegY, slopeY)\n\t\t\tslopePosX = Math.max(slopePosX, slopeX)\n\t\t\tslopePosY = Math.max(slopePosY, slopeY)\n\t\t\tnear = Math.min(near, dotZ)\n\t\t\tfar = Math.max(far, dotZ)\n\t\t}\n\n\t\t// Need to fit an oblique view frustum to get optimal bounds\n\t\tgl.matrixMode(gl.PROJECTION)\n\t\tgl.loadIdentity()\n\t\tgl.frustum(slopeNegX * near, slopePosX * near, slopeNegY * near, slopePosY * near, near, far)\n\t\tgl.matrixMode(gl.MODELVIEW)\n\t\tgl.loadIdentity()\n\t\tgl.lookAt(light, center, V3.Y)\n\t}\n\n\n\treturn gl.animate(function (abs, diff) {\n\t\tconst time = abs / 1000\n\t\t// Move the light around\n\t\tconst light = new V3(100 * Math.sin(time * 0.2), 25, 20 * Math.cos(time * 0.2))\n\n\t\t// Construct a camera looking from the light toward the object. The view\n\t\t// frustum is fit so it tightly encloses the bounding volume of the object\n\t\t// (sphere or box) to make best use of shadow map resolution. A frustum is\n\t\t// a pyramid shape with the apex chopped off.\n\t\tif (useBoundingSphere) {\n\t\t\tcameraForBoundingSphere(light, boundingSphere)\n\t\t} else {\n\t\t\tcameraForBoundingBox(light, boundingBox)\n\t\t}\n\n\t\t// Render the object viewed from the light using a shader that returns the\n\t\t// fragment depth.\n\t\tconst shadowMapMatrix = gl.projectionMatrix.times(gl.modelViewMatrix)\n\t\tdepthMap.unbind(0)\n\t\tdepthMap.drawTo(function () {\n\t\t\tgl.clearColor(1, 1, 1, 1)\n\t\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t\t\tdepthShader.draw(mesh)\n\t\t})\n\n\t\tconst shadowMapMatrixInversed = shadowMapMatrix.inversed()\n\n\t\t// Set up the camera for the scene\n\t\tgl.clearColor(0, 0, 0, 1)\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t\tgl.matrixMode(gl.PROJECTION)\n\t\tgl.loadIdentity()\n\t\tgl.perspective(45, gl.canvas.width / gl.canvas.height, 1, 1000)\n\t\tgl.matrixMode(gl.MODELVIEW)\n\t\tgl.loadIdentity()\n\t\tgl.translate(0, 0, -100)\n\t\tgl.rotate(angleX, 1, 0, 0)\n\t\tgl.rotate(angleY, 0, 1, 0)\n\n\t\t// Draw view frustum\n\t\tgl.pushMatrix()\n\t\tgl.translate(light)\n\t\tcolorShader.uniforms({\n\t\t\tcolor: [1, 1, 0, 1],\n\t\t}).draw(sphere, gl.LINES)\n\t\tgl.popMatrix()\n\n\t\tgl.pushMatrix()\n\t\tgl.multMatrix(shadowMapMatrixInversed)\n\t\tcolorShader.uniforms({\n\t\t\tcolor: [1, 1, 0, 1],\n\t\t}).draw(frustrumCube, gl.LINES)\n\t\tgl.popMatrix()\n\n\t\t// Draw the bounding volume\n\t\tgl.pushMatrix()\n\t\tif (useBoundingSphere) {\n\t\t\tgl.translate(boundingSphere.center)\n\t\t\tgl.scale(boundingSphere.radius)\n\t\t\tcolorShader.uniforms({\n\t\t\t\tcolor: [0, 1, 1, 1],\n\t\t\t}).draw(sphere, gl.LINES)\n\t\t} else {\n\t\t\tgl.translate(boundingBox.min)\n\t\t\tgl.scale(boundingBox.size())\n\t\t\tcolorShader.uniforms({\n\t\t\t\tcolor: [0, 1, 1, 1],\n\t\t\t}).draw(cube, gl.LINES)\n\t\t}\n\t\tgl.popMatrix()\n\n\t\t// Draw mesh\n\t\tdepthMap.bind(0)\n\t\tdisplayShader.uniforms({\n\t\t\tshadowMapMatrix: shadowMapMatrix.times(gl.projectionMatrix.times(gl.modelViewMatrix).inversed()),\n\t\t\tlight: gl.modelViewMatrix.transformPoint(light),\n\t\t\tdepthMap: 0,\n\t\t}).draw(mesh)\n\n\t\t// Draw plane\n\t\tgl.pushMatrix()\n\t\tgl.rotate(-90, 1, 0, 0)\n\t\tdisplayShader.draw(plane)\n\t\tgl.popMatrix()\n\n\t\t// Draw depth map overlay\n\t\tgl.viewport(10, 10, 10 + 256, 10 + 256)\n\t\ttextureShader.draw(texturePlane)\n\t\tgl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n\t})\n}\n\n//function rayTracing() {\n//\n//\n//    let angleX = 30\n//    let angleY = 10\n//    const gl = LightGLContext.create()\n//    const mesh = Mesh.plane()\n//    const shader = new Shader(`\n//  uniform vec3 ray00;\n//  uniform vec3 ray10;\n//  uniform vec3 ray01;\n//  uniform vec3 ray11;\n//  varying vec3 initialRay;\n//\n//  void main() {\n//    vec2 t = LGL_Vertex.xy * 0.5 + 0.5;\n//    initialRay = mix(mix(ray00, ray10, t.x), mix(ray01, ray11, t.x), t.y);\n//    gl_Position = LGL_Vertex;\n//  }\n//`, `\n//  const float INFINITY = 1.0e9;\n//  uniform vec3 eye;\n//  varying vec3 initialRay;\n//\n//  float intersectSphere(vec3 origin, vec3 ray, vec3 sphereCenter, float sphereRadius) {\n//    vec3 toSphere = origin - sphereCenter;\n//    float a = dot(ray, ray);\n//    float b = 2.0 * dot(toSphere, ray);\n//    float c = dot(toSphere, toSphere) - sphereRadius * sphereRadius;\n//    float discriminant = b * b - 4.0 * a * c;\n//    if (discriminant > 0.0) {\n//      float t = (-b - sqrt(discriminant)) / (2.0 * a);\n//      if (t > 0.0) return t;\n//    }\n//    return INFINITY;\n//  }\n//\n//  void main() {\n//    vec3 origin = eye, ray = initialRay, color = vec3(0.0), mask = vec3(1.0);\n//    vec3 sphereCenter = vec3(0.0, 1.6, 0.0);\n//    float sphereRadius = 1.5;\n//\n//    for (int bounce = 0; bounce < 2; bounce++) {\n//      /* Find the closest intersection with the scene */\n//      float planeT = -origin.y / ray.y;\n//      vec3 hit = origin + ray * planeT;\n//      if (planeT < 0.0 || abs(hit.x) > 4.0 || abs(hit.z) > 4.0) planeT = INFINITY;\n//      float sphereT = intersectSphere(origin, ray, sphereCenter, sphereRadius);\n//      float t = min(planeT, sphereT);\n//\n//      /* The background is white */\n//      if (t == INFINITY) {\n//        color += mask;\n//        break;\n//      }\n//\n//      /* Calculate the intersection */\n//      hit = origin + ray * t;\n//      if (t == planeT) {\n//        /* Look up the checkerboard color */\n//        vec3 c = fract(hit * 0.5) - 0.5;\n//        float checkerboard = c.x * c.z > 0.0 ? 1.0 : 0.0;\n//        color += vec3(1.0, checkerboard, 0.0) * mask;\n//        break;\n//      } else {\n//        /* Get the sphere color and reflect a new ray for the next iteration */\n//        vec3 normal = (hit - sphereCenter) / sphereRadius;\n//        ray = reflect(ray, normal);\n//        origin = hit;\n//        mask *= 0.8 * (0.5 + 0.5 * max(0.0, normal.y));\n//      }\n//    }\n//\n//    gl_FragColor = vec4(color, 1.0);\n//  }\n//`)\n//\n//\n//    let lastPos = V3.O\n//    // scene rotation\n//    gl.canvas.onmousemove = function(e) {\n//        const pagePos = V(e.pageX, e.pageY)\n//        const delta = lastPos.to(pagePos)\n//        if (e.buttons & 1) {\n//            angleY += delta.x\n//            angleX = clamp(angleX + delta.y, -90, 90)\n//        }\n//        lastPos = pagePos\n//    }\n//\n//    return gl.animate(function(abs, diff) {\n//        // Camera setup\n//        gl.loadIdentity()\n//        gl.translate(0, 0, -10)\n//        gl.rotate(angleX, 1, 0, 0)\n//        gl.rotate(angleY, 0, 1, 0)\n//\n//        // Get corner rays\n//        const w = gl.canvas.width\n//        const h = gl.canvas.height\n//        const tracer = new Raytracer()\n//        shader.uniforms({\n//            eye: tracer.eye,\n//            ray00: tracer.getRayForPixel(0, h),\n//            ray10: tracer.getRayForPixel(w, h),\n//            ray01: tracer.getRayForPixel(0, 0),\n//            ray11: tracer.getRayForPixel(w, 0)\n//        })\n//\n//        // Trace the rays\n//        shader.draw(mesh)\n//\n//        // Draw debug output to show that the raytraced scene lines up correctly with\n//        // the rasterized scene\n//        gl.color(0, 0, 0, 0.5)\n//        gl.enable(gl.BLEND)\n//        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\n//        gl.begin(gl.LINES)\n//        for (let s = 4, i = -s; i <= s; i++) {\n//            gl.vertex(-s, 0, i)\n//            gl.vertex(s, 0, i)\n//            gl.vertex(i, 0, -s)\n//            gl.vertex(i, 0, s)\n//        }\n//        gl.end()\n//        gl.disable(gl.BLEND)\n//    })\n//\n//}\n\n/**\n * Draw soft shadows by calculating a light map in multiple passes.\n */\nexport async function gpuLightMap(gl: LightGLContext) {\n\t// modified version of https://evanw.github.io/lightgl.js/tests/gpulightmap.html\n\n\tconst gazebo = Mesh.load(await fetch('gazebo.json').then(response => response.json()))\n\n\tlet angleX = 0\n\tlet angleY = 0\n\tif (!gl.getExtension('OES_texture_float') || !gl.getExtension('OES_texture_float_linear')) {\n\t\tdocument.write('This demo requires the OES_texture_float and OES_texture_float_linear extensions to run')\n\t\tthrow new Error('not supported')\n\t}\n\tconst texturePlane = Mesh.plane()\n\tconst textureShader = new Shader(`\n  varying vec2 coord;\n  void main() {\n    coord = LGL_TexCoord;\n    gl_Position = vec4(coord * 2.0 - 1.0, 0.0, 1.0);\n  }\n`, `\n  uniform sampler2D texture;\n  varying vec2 coord;\n  void main() {\n    gl_FragColor = texture2D(texture, coord);\n  }\n`)\n\n\tconst texture = Texture.fromURL('texture.png')\n\tconst depthMap = new Texture(1024, 1024, {format: gl.RGBA})\n\tconst depthShader = new Shader(`\n  varying vec4 pos;\n  void main() {\n    gl_Position = pos = LGL_ModelViewProjectionMatrix * LGL_Vertex;\n  }\n`, `\n  varying vec4 pos;\n  void main() {\n    float depth = pos.z / pos.w;\n    gl_FragColor = vec4(depth * 0.5 + 0.5);\n  }\n`)\n\n\tconst shadowTestShader = new Shader(`\n  uniform mat4 shadowMapMatrix;\n  uniform vec3 light;\n  attribute vec4 offsetPosition;\n  varying vec4 shadowMapPos; // position inside the shadow map frustrum\n  varying vec3 normal;\n\n  void main() {\n    normal = LGL_Normal;\n    shadowMapPos = shadowMapMatrix * offsetPosition;\n    gl_Position = vec4(LGL_TexCoord * 2.0 - 1.0, 0.0, 1.0);\n  }\n`, `\n  uniform float sampleCount;\n  uniform sampler2D depthMap;\n  uniform vec3 light;\n  varying vec4 shadowMapPos;\n  varying vec3 normal;\n  uniform vec4 res;\n\n  void main() {\n    /* Run shadow test */\n    const float bias = -0.0025;\n    float depth = texture2D(depthMap, shadowMapPos.xy / shadowMapPos.w * 0.5 + 0.5).r;\n    float shadow = (bias + shadowMapPos.z / shadowMapPos.w * 0.5 + 0.5 - depth > 0.0) ? 1.0 : 0.0;\n\n    /* Points on polygons facing away from the light are always in shadow */\n    float color = dot(normal, light) > 0.0 ? 1.0 - shadow : 0.0;\n    gl_FragColor = vec4(vec3(color), 1.0 / (1.0 + sampleCount));\n  }\n`)\n\n\t/**\n\t * Wrapper for a Mesh made only of quads (two triangles in a \"square\") and\n\t * an associated automatically UV-unwrapped texture.\n\t */\n\tclass QuadMesh {\n\t\tmesh = new Mesh()\n\t\t\t.addVertexBuffer('normals', 'LGL_Normal')\n\t\t\t.addIndexBuffer('TRIANGLES')\n\t\t\t.addVertexBuffer('coords', 'LGL_TexCoord')\n\t\t\t.addVertexBuffer('offsetCoords', 'offsetCoord')\n\t\t\t.addVertexBuffer('offsetPositions', 'offsetPosition')\n\t\tindex: int = 0\n\t\tlightmapTexture: Texture | undefined\n\t\tbounds: { center: V3, radius: number } | undefined\n\t\tsampleCount: int = 0\n\t\tcountedQuads = 0\n\n\t\t// Add a quad given its four vertices and allocate space for it in the lightmap\n\t\taddQuad(a: V3, b: V3, c: V3, d: V3) {\n\n\t\t\t// Add vertices\n\t\t\tconst vl = this.mesh.vertices.length\n\t\t\tthis.mesh.vertices.push(a, b, c, d)\n\n\t\t\t// Add normal\n\t\t\tconst normal = V3.normalOnPoints(a, b, c).unit()\n\t\t\tthis.mesh.normals.push(normal, normal, normal, normal)\n\n\t\t\t// A quad is two triangles\n\t\t\tpushQuad(this.mesh.TRIANGLES, false, vl, vl + 1, vl + 2, vl + 3)\n\n\t\t\tthis.countedQuads++\n\t\t}\n\n\t\taddDoubleQuad(a: V3, b: V3, c: V3, d: V3) {\n\t\t\t// Need a separate lightmap for each side of the quad\n\t\t\tthis.addQuad(a, b, c, d)\n\t\t\tthis.addQuad(a, c, b, d)\n\t\t}\n\n\t\taddCube(m4?: M4) {\n\t\t\t[\n\t\t\t\t[V3.O, V3.Y, V3.X, V3.XY],\n\t\t\t\t[V3.Z, new V3(1, 0, 1), new V3(0, 1, 1), V3.XYZ],\n\t\t\t\t[V3.O, V3.X, V3.Z, new V3(1, 0, 1)],\n\t\t\t\t[V3.X, new V3(1, 1, 0), new V3(1, 0, 1), new V3(1, 1, 1)],\n\t\t\t\t[new V3(1, 1, 0), V3.Y, V3.XYZ, new V3(0, 1, 1)],\n\t\t\t\t[V3.Y, V3.O, new V3(0, 1, 1), V3.Z],\n\t\t\t].forEach(vs => (this.addQuad as any)(...(m4 ? m4.transformedPoints(vs) : vs)))\n\t\t}\n\n\t\tcompile(texelsPerSide: int) {\n\t\t\tconst numQuads = this.mesh.vertices.length / 4\n\t\t\tif (numQuads % 1 != 0) throw new Error('not quads')\n\t\t\tconst quadsPerSide = Math.ceil(Math.sqrt(numQuads))\n\n\t\t\tfor (let i = 0; i < numQuads; i++) {\n\t\t\t\t// Compute location of texture cell\n\t\t\t\tconst s = i % quadsPerSide\n\t\t\t\tconst t = (i - s) / quadsPerSide\n\n\t\t\t\t// Coordinates that are on the edge of border texels (to avoid cracks when rendering)\n\t\t\t\tconst rs0 = s / quadsPerSide\n\t\t\t\tconst rt0 = t / quadsPerSide\n\t\t\t\tconst rs1 = (s + 1) / quadsPerSide\n\t\t\t\tconst rt1 = (t + 1) / quadsPerSide\n\t\t\t\tthis.mesh.coords.push(\n\t\t\t\t\t[rs0, rt0],\n\t\t\t\t\t[rs1, rt0],\n\t\t\t\t\t[rs0, rt1],\n\t\t\t\t\t[rs1, rt1])\n\n\t\t\t\tconst half = 1 / texelsPerSide\n\n\t\t\t\tconst [a, b, c, d] = this.mesh.vertices.slice(i * 4, (i + 1) * 4)\n\n\t\t\t\t// Add fake positions\n\t\t\t\tfunction bilerp(x: number, y: number) {\n\t\t\t\t\treturn a.times((1 - x) * (1 - y)).plus(b.times(x * (1 - y)))\n\t\t\t\t\t\t.plus(c.times((1 - x) * y)).plus(d.times(x * y))\n\t\t\t\t}\n\n\t\t\t\tthis.mesh.offsetPositions.push(\n\t\t\t\t\tbilerp(-half, -half),\n\t\t\t\t\tbilerp(1 + half, -half),\n\t\t\t\t\tbilerp(-half, 1 + half),\n\t\t\t\t\tbilerp(1 + half, 1 + half))\n\n\t\t\t\tconst s0 = (s + half) / quadsPerSide\n\t\t\t\tconst t0 = (t + half) / quadsPerSide\n\t\t\t\tconst s1 = (s + 1 - half) / quadsPerSide\n\t\t\t\tconst t1 = (t + 1 - half) / quadsPerSide\n\t\t\t\tthis.mesh.offsetCoords.push(\n\t\t\t\t\t[s0, t0],\n\t\t\t\t\t[s1, t0],\n\t\t\t\t\t[s0, t1],\n\t\t\t\t\t[s1, t1])\n\n\t\t\t}\n\t\t\t// Finalize mesh\n\t\t\tthis.mesh.compile()\n\t\t\tthis.bounds = this.mesh.getBoundingSphere()\n\n\t\t\t// Create textures\n\t\t\tconst textureSize = quadsPerSide * texelsPerSide\n\t\t\tconsole.log('texture size: ' + textureSize)\n\t\t\tthis.lightmapTexture = new Texture(textureSize, textureSize,\n\t\t\t\t{format: gl.RGBA, type: gl.FLOAT, filter: gl.LINEAR})\n\t\t}\n\n\t\tdrawShadow(dir: V3) {\n\t\t\t// Construct a camera looking from the light toward the object\n\t\t\tconst r = this.bounds!.radius, c = this.bounds!.center\n\t\t\tgl.matrixMode(gl.PROJECTION)\n\t\t\tgl.pushMatrix()\n\t\t\tgl.loadIdentity()\n\t\t\tgl.ortho(-r, r, -r, r, -r, r)\n\t\t\tgl.matrixMode(gl.MODELVIEW)\n\t\t\tgl.pushMatrix()\n\t\t\tgl.loadIdentity()\n\t\t\tconst at = c.minus(dir)\n\t\t\tconst useY = (dir.maxElement() != dir.z)\n\t\t\tconst up = new V3(+!useY, 0, +useY).cross(dir)\n\t\t\tgl.lookAt(c, at, up)\n\n\t\t\t// Render the object viewed from the light using a shader that returns the fragment depth\n\t\t\tconst mesh = this.mesh\n\t\t\tconst shadowMapMatrix = gl.projectionMatrix.times(gl.modelViewMatrix)\n\t\t\tdepthMap.drawTo(function (gl) {\n\t\t\t\tgl.enable(gl.DEPTH_TEST)\n\t\t\t\tgl.clearColor(1, 1, 1, 1)\n\t\t\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t\t\t\tdepthShader.draw(mesh)\n\t\t\t})\n\n\t\t\t//Run the shadow test for each texel in the lightmap and\n\t\t\t//accumulate that onto the existing lightmap contents\n\t\t\tconst sampleCount = this.sampleCount++\n\t\t\tdepthMap.bind(0)\n\t\t\tthis.lightmapTexture!.drawTo(function (gl) {\n\t\t\t\tgl.enable(gl.BLEND)\n\t\t\t\tgl.disable(gl.CULL_FACE)\n\t\t\t\tgl.disable(gl.DEPTH_TEST)\n\t\t\t\tgl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\n\t\t\t\tshadowTestShader.uniforms({\n\t\t\t\t\tshadowMapMatrix: shadowMapMatrix,\n\t\t\t\t\tsampleCount: sampleCount,\n\t\t\t\t\tlight: dir,\n\t\t\t\t}).draw(mesh)\n\t\t\t\tgl.disable(gl.BLEND)\n\t\t\t})\n\t\t\tdepthMap.unbind(0)\n\n\t\t\t// Reset the transform\n\t\t\tgl.matrixMode(gl.PROJECTION)\n\t\t\tgl.popMatrix()\n\t\t\tgl.matrixMode(gl.MODELVIEW)\n\t\t\tgl.popMatrix()\n\t\t}\n\t}\n\n\t// Make a mesh of quads\n\tconst numArcQuads = 32\n\tconst groundTilesPerSide = 5\n\tconst quadMesh = new QuadMesh()\n\t// Arc of randomly oriented quads\n\tquadMesh.addCube(M4.multiplyMultiple(\n\t\tM4.translate(0, 0, -0.2),\n\t\tM4.rotateAB(V3.XYZ, V3.Z)))\n\tfor (let i = 0; i < numArcQuads; i++) {\n\t\tconst r = 0.4\n\t\tconst t = i / numArcQuads * TAU\n\t\tconst center = V(0, 0, Math.sqrt(3) / 2 - 0.2).plus(V(0, 1.5, 0).times(Math.cos(t))).plus(V(1, 0, -1).toLength(1.5).times(Math.sin(t)))\n\t\t// const center = V3.sphere(0, (i + Math.random()) / numArcQuads * Math.PI)\n\t\tconst a = V3.randomUnit()\n\t\tconst b = V3.randomUnit().cross(a).unit()\n\t\tquadMesh.addCube(M4.multiplyMultiple(\n\t\t\tM4.translate(center),\n\t\t\tM4.forSys(a, b),\n\t\t\tM4.scale(r, r, r),\n\t\t\tM4.translate(-0.5, -0.5, -0.5)))\n\t\t// quadMesh.addDoubleQuad(\n\t\t//     center.minus(a).minus(b),\n\t\t//     center.minus(a).plus(b),\n\t\t//     center.plus(a).minus(b),\n\t\t//     center.plus(a).plus(b)\n\t\t// )\n\t}\n\n\t// Plane of quads\n\tfor (let x = 0; x < groundTilesPerSide; x++) {\n\t\tfor (let z = 0; z < groundTilesPerSide; z++) {\n\t\t\tconst dx = x - groundTilesPerSide / 2\n\t\t\tconst dz = z - groundTilesPerSide / 2\n\t\t\tquadMesh.addQuad(\n\t\t\t\tnew V3(dx, dz, 0),\n\t\t\t\tnew V3(dx + 1, dz, 0),\n\t\t\t\tnew V3(dx, dz + 1, 0),\n\t\t\t\tnew V3(dx + 1, dz + 1, 0),\n\t\t\t)\n\t\t}\n\t}\n\tquadMesh.compile(128)\n\n\t// The mesh will be drawn with texture mapping\n\tconst mesh = quadMesh.mesh\n\tconst textureMapShader = new Shader(`\n        attribute vec2 offsetCoord;\n        varying vec2 coord;\n        void main() {\n            coord = offsetCoord;\n            gl_Position = LGL_ModelViewProjectionMatrix * LGL_Vertex;\n        }\n`, `\n        uniform sampler2D texture;\n        varying vec2 coord;\n        void main() {\n            gl_FragColor = texture2D(texture, coord);\n        }\n`)\n\n\n\tlet lastPos = V3.O\n\t// scene rotation\n\tgl.canvas.onmousemove = function (e) {\n\t\tconst pagePos = V(e.pageX, e.pageY)\n\t\tconst delta = lastPos.to(pagePos)\n\t\tif (e.buttons & 1) {\n\t\t\tangleY += delta.x\n\t\t\tangleX = clamp(angleX + delta.y, -90, 90)\n\t\t}\n\t\tlastPos = pagePos\n\t}\n\n\tlet flip = false\n\n\tgl.enable(gl.CULL_FACE)\n\tgl.enable(gl.DEPTH_TEST)\n\n\tconst lightDir = V3.XYZ\n\tconst ambientFraction = 0.4\n\n\tlet frame = 0\n\treturn gl.animate(function (abs, diff) {\n\t\tframe++\n\t\t//if (frame % 60 != 0) return\n\t\tconst gl = this\n\n\t\tgl.enable(gl.CULL_FACE)\n\t\tgl.clearColor(0.9, 0.9, 0.9, 1)\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\n\t\t// setup camera\n\t\tgl.matrixMode(gl.PROJECTION)\n\t\tgl.loadIdentity()\n\t\tgl.perspective(70, gl.canvas.width / gl.canvas.height, 0.1, 1000)\n\t\tgl.lookAt(V(0, -3, 3), V3.O, V3.Z)\n\n\t\tgl.matrixMode(gl.MODELVIEW)\n\t\tgl.loadIdentity()\n\t\tgl.rotate(angleX, 1, 0, 0)\n\t\tgl.rotate(angleY, 0, 0, 1)\n\n\t\t// Alternate between a shadow from a random point on the sky hemisphere\n\t\t// and a random point near the light (creates a soft shadow)\n\t\tflip = !flip\n\t\tconst dir = Math.random() < ambientFraction\n\t\t\t? V3.randomUnit()\n\t\t\t: lightDir.plus(V3.randomUnit().times(0.1 * Math.sqrt(Math.random()))).unit()\n\t\tquadMesh.drawShadow(dir.z < 0 ? dir.negated() : dir)\n\n\t\t// Draw the mesh with the ambient occlusion so far\n\t\tgl.enable(gl.DEPTH_TEST)\n\t\tgl.enable(gl.CULL_FACE)\n\t\tquadMesh.lightmapTexture!.bind(0)\n\t\ttextureMapShader.draw(mesh)\n\n\t\t// Draw depth map overlay\n\t\tgl.disable(gl.CULL_FACE)\n\t\tquadMesh.lightmapTexture!.bind(0)\n\t\tgl.viewport(10, 10, 10 + 256, 10 + 256)\n\t\ttextureShader.draw(texturePlane)\n\t\tgl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n\n\t})\n\n}\n\n/**\n * Returns a 1d array of V3s in a 2d-grid. The V3s are all within [0; 1]²\n * The V3s are spaced like circles fit together as tight as possible. i.e. rows offset by half the x-spacing.\n * .   .   .\n *   .   .   .\n * .   .   .\n *\n * @param xCount\n */\nfunction ballGrid(xCount = 64) {\n\tconst xSpacing = 1 / xCount\n\tconst ySpacing = xSpacing * Math.sqrt(3) / 2\n\tconst yCount = (1 / ySpacing) | 0\n\treturn arrayFromFunction(xCount * yCount, i => {\n\t\tconst x = i % xCount\n\t\tconst y = (i / xCount) | 0\n\t\treturn new V3((x + (y % 2) * 0.5) / xCount, y / yCount, 0)\n\t})\n}\n\nfunction grid3d(xCount = 64, yCount = xCount, zCount = 1) {\n\treturn arrayFromFunction(xCount * yCount * zCount, i => {\n\t\tconst x = i % xCount\n\t\tconst y = (i / xCount) % yCount | 0\n\t\tconst z = (i / xCount / yCount) | 0\n\t\treturn new V3(x / xCount, y / yCount, z / zCount)\n\t})\n}\n\n/**\n * Calculate and render magnetic field lines.\n */\nexport async function mag(gl: LightGLContext) {\n\tconst cubeMesh = Mesh.cube()\n\tconst cubeShader = new Shader(posVS, colorFS)\n\tconst vectorFieldShader = new Shader(vectorFieldVS, varyingColorFS)\n\tgl.clearColor(1, 1, 1, 1)\n\n\tconst vec4 = (...args: number[]) => [...args] as Tuple4<number>\n\tconst ps: Tuple4<number>[] = []\n\t// ps.push(\n\t//     vec4(0.2, 0.5, 0, 1),\n\t//     vec4(0.2, 0.8, 0, 1),\n\t//     vec4(0.8, 0.5, 0, -1),\n\t// )\n\n\tconst q = 0.01\n\n\tfunction forceAtPos(coord: V3) {\n\t\tlet totalForce: V3 = V3.O\n\t\tps.forEach(p => {\n\t\t\tconst pCharge = p[3]\n\t\t\tconst coordToP = new V3(p[0], p[1], p[2]).minus(coord)\n\t\t\tconst r = coordToP.length()\n\t\t\tconst partialForceMagnitude = pCharge * q / r / r\n\t\t\tconst partialForce = coordToP.toLength(partialForceMagnitude)\n\t\t\ttotalForce = totalForce.plus(partialForce)\n\t\t})\n\t\treturn totalForce\n\t}\n\n\tconst bounds = new AABB(V3.O, V(1, 1, 0.3))\n\n\tfunction* qPath(start: V3, dir: number) {\n\t\tlet pos = start, f, i = 0\n\t\twhile (true) {\n\t\t\tf = forceAtPos(pos)\n\t\t\tpos = pos.plus(f.toLength(dir))\n\t\t\tif (!(f.squared() / q < 2.5e5 && i++ < 1000 && bounds.containsPoint(pos))) break\n\t\t\tyield pos\n\t\t}\n\t}\n\n\n\tfunction barMagnet(count = 4) {\n\t\treturn arrayFromFunction(count * count, i => {\n\t\t\tconst x = i % count\n\t\t\tconst y = (i / count) | 0\n\t\t\treturn vec4((0.5 + x) / count, (0.5 + y) / count, 0, (+(x < count / 2) || -1))\n\t\t})\n\t}\n\n\tconst barMats = [\n\t\tM4.multiplyMultiple(M4.translate(0.5, 0.5, 0.1), M4.rotateZ(20 * DEG), M4.scale(0.2, 0.1, 0.02)),\n\t\tM4.multiplyMultiple(M4.translate(0.2, 0.1), M4.rotateZ(60 * DEG), M4.scale(0.1, 0.05, 0.02)),\n\t\tM4.multiplyMultiple(M4.translate(0.2, 0.8), M4.rotateZ(120 * DEG), M4.rotateY(-100 * DEG), M4.scale(0.2, 0.02, 0.02)),\n\t]\n\tbarMats.forEach(mat => ps.push(...(barMagnet(6).map(([x, y, z, c]) => {\n\t\tconst pos = mat.transformPoint(new V3(x, y, z))\n\t\treturn [...pos, c] as Tuple4<number>\n\t}))))\n\n\tconst linesMesh = new Mesh().addIndexBuffer('LINES')\n\tconsole.log('generation took (ms): ' + time(() => {\n\t\tfor (const [x, y, z] of grid3d(10, 10, 4)) {\n\t\t\tconst start = V(x, y, z * bounds.max.z)\n\t\t\tlinesMesh.vertices.push(start)\n\t\t\tconst STEP = 0.01\n\t\t\tfor (const p of qPath(start, STEP)) {\n\t\t\t\tlinesMesh.vertices.push(p)\n\t\t\t\tlinesMesh.LINES.push(linesMesh.vertices.length - 2, linesMesh.vertices.length - 1)\n\t\t\t}\n\t\t\tlinesMesh.vertices.push(start)\n\t\t\tfor (const p of qPath(start, -STEP)) {\n\t\t\t\tlinesMesh.vertices.push(p)\n\t\t\t\tlinesMesh.LINES.push(linesMesh.vertices.length - 2, linesMesh.vertices.length - 1)\n\t\t\t}\n\t\t}\n\t}))\n\tlinesMesh.compile()\n\n\tconst vectorFieldMesh = new Mesh()\n\n\tconst fieldLinesXSide = 64\n\tconst vectorFieldVectorLength = 2 * 0.9 / fieldLinesXSide\n\tvectorFieldMesh.vertices = ballGrid(fieldLinesXSide).flatMap(\n\t\tp => [new V3(p.x, p.y, -vectorFieldVectorLength / 2), new V3(p.x, p.y, vectorFieldVectorLength / 2)])\n\n\t// vectorFieldMesh.vertices = arrayFromFunction(fieldLinesXSide * fieldLinesXSide * 2, i => {\n\t//     const startOrEnd = i % 2\n\t//     const x = ((i / 2) | 0) % fieldLinesXSide\n\t//     const y = ((i / 2 / fieldLinesXSide) | 0) % fieldLinesXSide\n\t//     return new V3(x / fieldLinesXSide, y / fieldLinesXSide, (startOrEnd || -1) * 0.01)\n\t// })\n\tvectorFieldMesh.compile()\n\n\t// setup camera\n\tgl.matrixMode(gl.PROJECTION)\n\tgl.loadIdentity()\n\tgl.perspective(60, gl.canvas.width / gl.canvas.height, 0.1, 1000)\n\tgl.lookAt(V(0.5, 2, 1), V(0.5, 0.5), V3.Z)\n\tgl.matrixMode(gl.MODELVIEW)\n\tgl.clearColor(...chroma('black').gl())\n\n\tgl.enable(gl.DEPTH_TEST)\n\n\tvectorFieldShader.uniforms({\n\t\t'ps[0]': ps as any,\n\t\tcolor: chroma('red').gl(),\n\t})\n\n\treturn gl.animate(function (abs, diff) {\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\t\tgl.loadIdentity()\n\t\tgl.multMatrix(M4.rotateLine(V(0.5, 0.5), V3.Z, abs / 5000))\n\t\t// gl.translate(-1, -1, -1)\n\t\t// gl.scale(2)\n\n\t\tcubeShader.uniforms({color: chroma('white').gl()}).draw(linesMesh, DRAW_MODES.LINES)\n\t\tbarMats.forEach(mat => {\n\t\t\tgl.pushMatrix()\n\t\t\tgl.multMatrix(mat)\n\t\t\tgl.scale(0.5, 1, 1)\n\t\t\tcubeShader.uniforms({color: chroma('red').gl()}).draw(cubeMesh, DRAW_MODES.LINES)\n\t\t\tgl.translate(1, 0)\n\t\t\tcubeShader.uniforms({color: chroma('blue').gl()}).draw(cubeMesh, DRAW_MODES.LINES)\n\t\t\tgl.popMatrix()\n\t\t})\n\t\tgl.scale(bounds.max)\n\t\tcubeShader.uniforms({color: chroma('grey').gl()}).draw(cubeMesh, DRAW_MODES.LINES)\n\t\t// vectorFieldShader.drawBuffers(vectorFieldMesh.vertexBuffers, undefined, DRAW_MODES.LINES)\n\t})\n}\n"],"names":["PI","PI$1","sin","WGL","time"],"mappings":"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C,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;QAC9I,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACzI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACxI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;QAC9I,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;QAC7I,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1I,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACvI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3I,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5I,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1I,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACvI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7I,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5I,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,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C,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAChE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAClE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACpE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACpE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACrE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAA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,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC;QACtC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,CAAC;QACrG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC;QACtC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,CAAC;QAC3C,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC;QACtC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,CAAC;QACrG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC;QACtC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC;QACtC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,CAAC;QAC5C,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,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"}