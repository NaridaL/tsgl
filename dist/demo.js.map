{"version":3,"file":"demo.js","sources":["../../../javasetmap.ts/src/JavaMap.ts","../../ts3dutils/src/Vector.ts","../../ts3dutils/src/Matrix.ts","../../ts3dutils/src/NLA.ts","../../ts3dutils/src/V3.ts","../../ts3dutils/src/Transformable.ts","../../ts3dutils/src/M4.ts","../../ts3dutils/src/toSource.ts","../../ts3dutils/src/AABB.ts","../node_modules/tslib/tslib.es6.js","../src/Mesh.ts","../src/Shader.ts","../src/TSGLContext.ts","../src/Buffer.ts","../src/Texture.ts","../src/demo/camera.ts","../src/demo/gpuLightMap.ts","../src/demo/immediateMode.ts","../src/shaders/colorFS.glslx","../src/shaders/posVS.glslx","../src/shaders/varyingColorFS.glslx","../src/shaders/vectorFieldVS.glslx","../src/demo/mag.ts","../src/demo/multiTexture.ts","../src/shaders/rayTracerFS.glslx","../src/demo/rayTracing.ts","../src/demo/renderToTexture.ts","../src/demo/setupDemo.ts","../src/demo/shadowMap.ts"],"sourcesContent":["import {Equalable, int} from './Equalable'\n\n/**\n * Java style map.\n */\nexport class JavaMap<K extends Equalable & {hashCodes?(): int[], like?(x: any): boolean }, V> implements Map<K, V> {\n    [Symbol.toStringTag]: 'Map' = 'Map'\n\n    toString() {\n        return '{' + Array.from(this.entries2()).map(({key, value}) => key + ':' + value).join(', ') + '}'\n    }\n\n    forEach(callbackfn: (value: V, index: K, map: Map<K, V>) => void, thisArg?: any): void {\n        for (const bucket of this._map.values()) {\n            for (const {key, value} of bucket) {\n                callbackfn.call(thisArg, value, key, this)\n            }\n        }\n    }\n\n    * keys(): IterableIterator<K> {\n        for (const bucket of this._map.values()) {\n            for (const {key} of bucket) {\n                yield key\n            }\n        }\n    }\n\n    * values(): IterableIterator<V> {\n        for (const bucket of this._map.values()) {\n            for (const {value} of bucket) {\n                yield value\n            }\n        }\n    }\n\n    protected _map: Map<int, { key: K, value: V }[]>\n    protected _size: int\n\n    constructor() {\n        this._map = new Map()\n        this._size = 0\n    }\n\n    [Symbol.iterator]() {\n        return this.entries()\n    }\n\n    set(key: K, value: V): this {\n        this.set2(key, value)\n        return this\n    }\n\n    /**\n     * Like {@link #set} except it returns true if key was new and false if the value was only updated.\n     *\n     */\n    set2(key: K, val: V): boolean {\n        const hashCode = key.hashCode(), bucket = this._map.get(hashCode)\n        //assert(hashCode === (hashCode | 0))\n        if (bucket) {\n            const pairIndex = bucket.findIndex(pair => pair.key.equals(key))\n            if (-1 == pairIndex) {\n                bucket.push({key: key, value: val})\n            } else {\n                bucket[pairIndex].value = val\n                return false\n            }\n        } else {\n            this._map.set(hashCode, [{key: key, value: val}])\n        }\n        this._size++\n        return true\n    }\n\n    has(key: K): boolean {\n        const hashCode = key.hashCode(), bucket = this._map.get(hashCode)\n        //assert(hashCode === (hashCode | 0))\n        return undefined !== bucket && bucket.some(pair => pair.key.equals(key))\n    }\n\n    get(key: K): V | undefined {\n        const\n                hashCode = key.hashCode(),\n                bucket = this._map.get(hashCode),\n                pair = bucket && bucket.find(pair => pair.key.equals(key))\n        return pair && pair.value\n    }\n\n    getLike(key: K) {\n        for (const hashCode of key.hashCodes!()) {\n            const bucket = this._map.get(hashCode)\n            const canonVal = bucket && bucket.find(x => x.key.like!(key))\n            if (canonVal) return canonVal\n        }\n    }\n\n    setLike(key: K, val: V) {\n        return !this.getLike(key) && this.set(key, val)\n    }\n\n    'delete'(key: K) {\n        const hashCode = key.hashCode(), bucket = this._map.get(hashCode)\n        if (bucket) {\n            const index = bucket.findIndex(x => x.key.equals(key))\n            if (-1 != index) {\n                if (1 == bucket.length) {\n                    this._map.delete(hashCode)\n                } else {\n                    bucket.splice(index, 1)\n                }\n                this._size--\n                return true\n            }\n        }\n        return false\n    }\n\n    deleteLike(key: K) {\n        for (const hashCode of key.hashCodes!()) {\n            const bucket = this._map.get(hashCode)\n            if (bucket) {\n                const index = bucket.findIndex(x => x.key.like!(key))\n                if (-1 != index) {\n                    const deleted = bucket[index]\n                    if (1 == bucket.length) {\n                        this._map.delete(hashCode)\n                    } else {\n                        bucket.splice(index, 1)\n                    }\n                    this._size--\n                    return deleted\n                }\n            }\n        }\n    }\n\n    * entries2(): IterableIterator<{ key: K, value: V }> {\n        for (const bucket of this._map.values()) {\n            yield* bucket\n        }\n    }\n\n    * entries(): IterableIterator<[K, V]> {\n        for (const bucket of this._map.values()) {\n            for (const {key, value} of bucket) {\n                yield [key, value]\n            }\n        }\n    }\n\n    clear() {\n        this._map.clear()\n        this._size = 0\n    }\n\n    get size() {\n        return this._size\n    }\n}\n","import {Matrix} from './Matrix'\nimport {assert, assertInst, assertNumbers, eq, eq0, int} from './NLA'\nimport {V3} from './V3'\n\nexport class Vector {\n\tconstructor(readonly v: Float64Array) {\n\t\tassertInst(Float64Array, v)\n\t}\n\n\tstatic fromFunction(dims: int, f: (dim: int) => number): Vector {\n\t\tassertNumbers(dims)\n\t\tconst e = new Float64Array(dims)\n\t\tlet i = dims\n\t\twhile (i--) {\n\t\t\te[i] = f(i)\n\t\t}\n\t\treturn new Vector(e)\n\t}\n\n\tstatic random(dims: int): Vector {\n\t\treturn Vector.fromFunction(dims, (i) => Math.random())\n\t}\n\n\tstatic from(f64a: Float64Array): Vector\n\tstatic from(...args: number[]): Vector\n\tstatic from(...args: any[]): Vector {\n\t\tassert(args[0] instanceof Float64Array || args.every(a => 'number' == typeof a),\n\t\t\t'args[0] instanceof Float64Array || args.every(a => \"number\" == typeof a)')\n\t\treturn new Vector(args[0] instanceof Float64Array ? args[0] : Float64Array.from(args))\n\t}\n\n\tstatic Zero(dims: int): Vector {\n\t\tassertNumbers(dims)\n\t\tlet i = 0\n\t\tconst n = new Float64Array(dims)\n\t\twhile (i--) {\n\t\t\tn[i] = 0\n\t\t}\n\t\treturn new Vector(n)\n\t}\n\n\tstatic Unit(dims: int, dir: int): Vector {\n\t\tassertNumbers(dims, dir)\n\t\tlet i = 0\n\t\tconst n = new Float64Array(dims)\n\t\twhile (i--) {\n\t\t\tn[i] = +(i == dir) // +true === 1, +false === 0\n\t\t}\n\t\treturn new Vector(n)\n\t}\n\n\t[Symbol.iterator]() {\n\t\treturn this.v[Symbol.iterator]()\n\t}\n\n\tdim(): int {\n\t\treturn this.v.length\n\t}\n\n\te(index: int): number {\n\t\tif (0 > index || index >= this.v.length) {\n\t\t\tthrow new Error('array index out of bounds')\n\t\t}\n\t\treturn this.v[index]\n\t}\n\n\tplus(vector: Vector): Vector {\n\t\tconst u = this.v, v = vector.v\n\t\tconst n = new Float64Array(u.length)\n\t\tlet i = u.length\n\t\twhile (i--) {\n\t\t\tn[i] = u[i] + v[i]\n\t\t}\n\t\treturn new Vector(n)\n\t}\n\n\tminus(vector: Vector): Vector {\n\t\tconst u = this.v, v = vector.v\n\t\tconst n = new Float64Array(u.length)\n\t\tlet i = u.length\n\t\twhile (i--) {\n\t\t\tn[i] = u[i] - v[i]\n\t\t}\n\t\treturn new Vector(n)\n\t}\n\n\ttimes(factor: number): Vector {\n\t\tconst u = this.v\n\t\tconst n = new Float64Array(u.length)\n\t\tlet i = u.length\n\t\twhile (i--) {\n\t\t\tn[i] = u[i] * factor\n\t\t}\n\t\treturn new Vector(n)\n\t}\n\n\tdiv(val: number): Vector {\n\t\tconst u = this.v\n\t\tconst n = new Float64Array(u.length)\n\t\tlet i = u.length\n\t\twhile (i--) {\n\t\t\tn[i] = u[i] / val\n\t\t}\n\t\treturn new Vector(n)\n\t}\n\n\tdot(vector: Vector): number {\n\t\tassert(this.dim == vector.dim, 'passed vector must have the same dim')\n\t\tlet result = 0\n\t\tconst u = this.v, v = vector.v\n\t\tlet i = u.length\n\t\twhile (i--) {\n\t\t\tresult += u[i] * v[i]\n\t\t}\n\t\treturn result\n\t}\n\n\tcross(vector: Vector): Vector {\n\t\tassertInst(Vector, vector)\n\t\tconst n = new Float64Array(3)\n\t\tn[0] = this.v[1] * vector.v[2] - this.v[2] * vector.v[1]\n\t\tn[1] = this.v[2] * vector.v[0] - this.v[0] * vector.v[2]\n\t\tn[2] = this.v[0] * vector.v[1] - this.v[1] * vector.v[0]\n\n\t\treturn new Vector(n)\n\t}\n\n\tschur(vector: Vector): Vector {\n\t\tassertInst(Vector, vector)\n\t\tconst u = this.v, v = vector.v\n\t\tconst n = new Float64Array(u.length)\n\t\tlet i = u.length\n\t\twhile (i--) {\n\t\t\tn[i] = u[i] * v[i]\n\t\t}\n\t\treturn new Vector(n)\n\t}\n\n\tequals(obj: any): boolean {\n\t\tif (obj === this) return true\n\t\tif (obj.constructor !== Vector) return false\n\t\tif (this.v.length != obj.v.length) return false\n\t\tlet i = this.v.length\n\t\twhile (i--) {\n\t\t\tif (!eq(this.v[i], obj.v[i])) return false\n\t\t}\n\t\treturn true\n\t}\n\n\tmap(f: (el: number, dim: number) => number): Vector {\n\t\treturn new Vector(this.v.map(f))\n\t}\n\n\ttoString(roundFunction?: (x: number) => any): string {\n\t\troundFunction = roundFunction || ((v) => +v.toFixed(6))\n\t\treturn 'Vector(' + this.v.map(roundFunction).join(', ') + ')'\n\t}\n\n\t/*\n\t get x() {\n\t return this.v[0]\n\t },\n\t get y() {\n\t return this.v[1]\n\t },\n\t get z() {\n\t return this.v[2]\n\t },\n\t get w() {\n\t return this.v[3]\n\t },\n\t */\n\tangleTo(vector: Vector): number {\n\t\tassertInst(Vector, vector)\n\t\tassert(!this.isZero(), '!this.likeO()')\n\t\tassert(!vector.isZero(), '!vector.likeO()')\n\t\treturn Math.acos(this.dot(vector) / this.length() / vector.length())\n\t}\n\n\t/**\n\t Returns true iff this is parallel to vector, using equals\n\t Throw a DebugError\n\t if vector is not a Vector or\n\t if this has a length of 0 or\n\t if vector has a length of 0\n\t */\n\tisParallelTo(vector: Vector): boolean {\n\t\tassertInst(Vector, vector)\n\t\tassert(!this.isZero(), '!this.likeO()')\n\t\tassert(!vector.isZero(), '!vector.likeO()')\n\t\t// a . b takes on values of +|a|*|b| (vectors same direction) to -|a|*|b| (opposite direction)\n\t\t// in both cases the vectors are paralle, so check if abs(a . b) == |a|*|b|\n\t\treturn eq(Math.sqrt(this.lengthSquared() * vector.lengthSquared()), Math.abs(this.dot(vector)))\n\t}\n\n\tisPerpendicularTo(vector: Vector): boolean {\n\t\tassertInst(Vector, vector)\n\t\tassert(!this.isZero(), '!this.likeO()')\n\t\tassert(!vector.isZero(), '!vector.likeO()')\n\t\treturn eq0(this.dot(vector))\n\t}\n\n\t/**\n\t Returns true iff the length of this vector is 0, as returned by NLA.isZero.\n\t Definition: Vector.prototype.isZero = () => NLA.isZero(this.length())\n\t */\n\tisZero(): boolean {\n\t\treturn eq0(this.length())\n\t}\n\n\t// Returns a new unit Vector (.length() === 1) with the same direction as this vector. Throws a\n\n\t/*/ Returns the length of this Vector, i.e. the euclidian norm.*/\n\tlength(): number {\n\t\treturn Math.hypot.apply(undefined, this.v)\n\t\t//return Math.sqrt(this.lengthSquared())\n\t}\n\n\tlengthSquared(): number {\n\t\tlet result = 0\n\t\tconst u = this.v\n\t\tlet i = u.length\n\t\twhile (i--) {\n\t\t\tresult += u[i] * u[i]\n\t\t}\n\t\treturn result\n\t}\n\n\t// NLA_DEBUGError if this has a length of 0.\n\tnormalized(): Vector {\n\t\tconst length = this.length()\n\t\tif (eq0(length)) {\n\t\t\tthrow new Error('cannot normalize zero vector')\n\t\t}\n\t\treturn this.div(this.length())\n\t}\n\n\tasRowMatrix(): Matrix {\n\t\treturn new Matrix(this.v.length, 1, this.v)\n\t}\n\n\tasColMatrix(): Matrix {\n\t\treturn new Matrix(1, this.v.length, this.v)\n\t}\n\n\t/**\n\t Returns a new Vector which is the projection of this vector onto the passed vector.\n\t Examples\n\t NLA.V(3, 4).projectedOn(NLA.V(1, 0)) // returns NLA.V(3, 0)\n\t NLA.V(3, 4).projectedOn(NLA.V(2, 0)) // returns NLA.V(3, 0)\n\t NLA.V(3, 4).projectedOn(NLA.V(-1, 0)) // returns NLA.V(-3, 0)\n\t NLA.V(3, 4).projectedOn(NLA.V(0, 1)) // returns NLA.V(0, 4)\n\t NLA.V(3, 4).projectedOn(NLA.V(1, 1)) // returns\n\t */\n\tprojectedOn(b: Vector): Vector {\n\t\tassertInst(Vector, b)\n\t\t// https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2\n\t\treturn b.times(this.dot(b) / b.dot(b))\n\t}\n\n\trejectedOn(b: Vector): Vector {\n\t\tassertInst(Vector, b)\n\t\t// https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2\n\t\treturn this.minus(b.times(this.dot(b) / b.dot(b)))\n\t}\n\n\t/**\n\t Returns true iff the length() of this vector is equal to 'length', using equals\n\t E.g. NLA.V(3, 4).hasLength(5) === true\n\t NLA.V(1, 1).hasLength(1) === false\n\t */\n\thasLength(length: number): boolean {\n\t\tassertNumbers(length)\n\t\treturn eq(length, this.length())\n\t}\n\n\tV3(): V3 {\n\t\t//assert(this.dim() == 3)\n\t\treturn new V3(this.v[0], this.v[1], this.v[2])\n\t}\n}","import { Equalable } from 'javasetmap.ts'\nimport {\n\tarrayCopy,\n\tarrayCopyBlocks,\n\tarrayCopyStep,\n\tarrayFromFunction,\n\tarraySwap,\n\tassert,\n\tassertf,\n\tassertInst,\n\tassertNumbers,\n\tassertVectors,\n\teq,\n\teq0,\n\tFloatArray,\n\tfloatHashCode,\n\tint,\n\tNLA_DEBUG,\n\tNLA_PRECISION,\n} from './NLA'\nimport { Vector } from './Vector'\n\nexport class Matrix implements Equalable {\n\tm: Float64Array\n\twidth: number\n\theight: number\n\n\tconstructor(width: int, height: int, m: Float64Array) {\n\t\tassert(width * height == m.length, 'width * height == m.length', width, height, m.length)\n\t\tthis.m = m\n\t\tthis.width = width\n\t\tthis.height = height\n\t}\n\n\tstatic random(width: int, height: int): Matrix {\n\t\tassertNumbers(width, height)\n\t\treturn Matrix.fromFunction(width, height, (i, j) => Math.random())\n\t}\n\n\tstatic fromFunction(width: int, height: int, f: (row: int, col: int, elIndex: int) => number): Matrix {\n\t\tassertNumbers(width, height)\n\t\tconst m = new Float64Array(height * width)\n\t\tlet elIndex = height * width\n\t\twhile (elIndex--) {\n\t\t\tm[elIndex] = f(Math.floor(elIndex / width), elIndex % width, elIndex)\n\t\t}\n\t\treturn new Matrix(width, height, m)\n\t}\n\n\tstatic identityN(dim: int): Matrix {\n\t\tassertNumbers(dim)\n\t\tconst m = new Float64Array(dim * dim)\n\t\t// Float64Arrays are init to 0\n\t\tlet elIndex = dim * (dim + 1)\n\t\twhile (elIndex) {\n\t\t\telIndex -= (dim + 1)\n\t\t\tm[elIndex] = 1\n\t\t}\n\t\treturn new Matrix(dim, dim, m)\n\t}\n\n\tstatic permutation(dim: int, i: int, k: int): Matrix {\n\t\tassertNumbers(dim, i, k)\n\t\tconst m = new Float64Array(dim * dim)\n\t\t// Float64Array are init to 0\n\t\tlet elIndex = dim * (dim + 1)\n\t\twhile (elIndex) {\n\t\t\telIndex -= (dim + 1)\n\t\t\tm[elIndex] = 1\n\t\t}\n\t\tm[i * dim + i] = 0\n\t\tm[k * dim + k] = 0\n\t\tm[i * dim + k] = 1\n\t\tm[k * dim + i] = 1\n\t\treturn new Matrix(dim, dim, m)\n\t}\n\n\tstatic fromRowArrays(...args: FloatArray[]): Matrix {\n\t\treturn Matrix.fromRowArrays2(args)\n\t}\n\n\tstatic fromRowArrays2(arrays: FloatArray[]) {\n\t\tif (0 == arrays.length) {\n\t\t\tthrow new Error('cannot have 0 vector')\n\t\t}\n\t\tconst height = arrays.length\n\t\tconst width = arrays[0].length\n\t\tconst m = new Float64Array(height * width)\n\t\tarrayCopy(arrays[0], 0, m, 0, width)\n\t\tfor (let rowIndex = 1; rowIndex < height; rowIndex++) {\n\t\t\tif (arrays[rowIndex].length != width) {\n\t\t\t\tthrow new Error('all row arrays must be the same length')\n\t\t\t}\n\t\t\tarrayCopy(arrays[rowIndex], 0, m, rowIndex * width, width)\n\t\t}\n\t\treturn new Matrix(width, height, m)\n\t}\n\n\tstatic fromColVectors(colVectors: Vector[]): Matrix {\n\t\treturn Matrix.fromColArrays(colVectors.map((v) => v.v))\n\t}\n\n\tstatic forWidthHeight(width: int, height: int): Matrix {\n\t\treturn new Matrix(width, height, new Float64Array(width * height))\n\t}\n\n\tstatic fromColArrays(colArrays: FloatArray[]): Matrix {\n\t\tif (0 == colArrays.length) {\n\t\t\tthrow new Error('cannot have 0 vector')\n\t\t}\n\t\tconst width = colArrays.length\n\t\tconst height = colArrays[0].length\n\t\tconst m = new Float64Array(height * width)\n\t\tarrayCopyStep(colArrays[0], 0, 1, m, 0, width, height)\n\t\tfor (let colIndex = 1; colIndex < width; colIndex++) {\n\t\t\tif (colArrays[colIndex].length != height) {\n\t\t\t\tthrow new Error('all col arrays must be the same length')\n\t\t\t}\n\t\t\tarrayCopyStep(colArrays[colIndex], 0, 1, m, colIndex, width, height)\n\t\t}\n\t\treturn new Matrix(width, height, m)\n\t}\n\n\t/**\n\t * Numerically calculate all the partial derivatives of f at x0.\n\t *\n\t *\n\t * @param f\n\t * @param x0\n\t * @param fx0 f(x0), pass it if you have it already\n\t * @param EPSILON\n\t */\n\tstatic jacobi(f: (x: FloatArray) => FloatArray, x0: FloatArray, fx0: FloatArray = f(x0), EPSILON: number = 1e-6): Matrix {\n\t\tconst jacobi = Matrix.forWidthHeight(x0.length, fx0.length)\n\t\tfor (let colIndex = 0; colIndex < x0.length; colIndex++) {\n\t\t\tx0[colIndex] += EPSILON\n\t\t\tconst fx = f(x0)\n\t\t\tfor (let rowIndex = 0; rowIndex < fx0.length; rowIndex++) {\n\t\t\t\tconst value = (fx[rowIndex] - fx0[rowIndex]) / EPSILON\n\t\t\t\tjacobi.setEl(rowIndex, colIndex, value)\n\t\t\t}\n\t\t\tx0[colIndex] -= EPSILON\n\t\t}\n\t\treturn jacobi\n\t}\n\n\te(rowIndex: number, colIndex: number): number {\n\t\tassertNumbers(rowIndex, colIndex)\n\t\tif (NLA_DEBUG && (rowIndex >= this.height || colIndex >= this.width)) {\n\t\t\tthrow new Error('index ' + rowIndex + ', ' + colIndex + ' is out of bounds (' + this.width + ' x ' + this.height + ')')\n\t\t}\n\t\treturn this.m[rowIndex * this.width + colIndex]\n\t}\n\n\tsetEl(rowIndex: number, colIndex: number, val: number): void {\n\t\tassertNumbers(rowIndex, colIndex, val)\n\t\tassert(0 <= rowIndex && rowIndex < this.height, 'rowIndex out of bounds ' + rowIndex)\n\t\tassert(0 <= colIndex && colIndex < this.width, 'colIndex out of bounds ' + colIndex)\n\t\tthis.m[rowIndex * this.width + colIndex] = val\n\t}\n\n\tplus(m: this): this {\n\t\tassert(this.width == m.width)\n\t\tassert(this.height == m.height)\n\t\tconst r = this.new()\n\t\tlet i = this.m.length\n\t\twhile (i--) r.m[i] = this.m[i] + m.m[i]\n\t\treturn r\n\t}\n\n\tminus(m: Matrix): Matrix {\n\t\tassert(this.width == m.width)\n\t\tassert(this.height == m.height)\n\t\tconst r = this.new()\n\t\tlet i = this.m.length\n\t\twhile (i--) r.m[i] = this.m[i] - m.m[i]\n\t\treturn r\n\t}\n\n\tmulScalar(factor: number): this {\n\t\tconst r = this.new()\n\t\tlet i = this.m.length\n\t\twhile (i--) r.m[i] = this.m[i] * factor\n\t\treturn r\n\t}\n\n\tdivScalar(scalar: number): this {\n\t\tconst r = this.new()\n\t\tlet i = this.m.length\n\t\twhile (i--) r.m[i] = this.m[i] / scalar\n\t\treturn r\n\t}\n\n\tnew(): this {\n\t\treturn new Matrix(this.width, this.height, new Float64Array(this.width * this.height)) as this\n\t}\n\n\ttoString(f?: (el: number) => string, colNames?: ReadonlyArray<string>, rowNames?: ReadonlyArray<string>): string {\n\t\tf = f || ((v) => v.toFixed(6))\n\t\tassert(typeof f(0) == 'string', '' + typeof f(0))\n\t\tassert(!colNames || colNames.length == this.width)\n\t\tassert(!rowNames || rowNames.length == this.height)\n\t\tconst rounded: string[] = Array.from(this.m).map(f)\n\t\tconst rows = arrayFromFunction(this.height,\n\t\t\t(rowIndex) => rounded.slice(rowIndex * this.width, (rowIndex + 1) * this.width))// select matrix row\n\t\tif (colNames) {\n\t\t\trows.unshift(Array.from(colNames))\n\t\t}\n\t\tif (rowNames) {\n\t\t\trows.forEach((row, rowIndex) => row.unshift(rowNames[rowIndex - (colNames ? 1 : 0)] || ''))\n\t\t}\n\t\tconst colWidths = arrayFromFunction(this.width, (colIndex) => rows.map(row => row[colIndex].length).max())\n\t\treturn rows.map(\n\t\t\t(row, rowIndex) => row.map((x, colIndex) => {\n\t\t\t\t// pad numbers with spaces to col width\n\t\t\t\tconst padder = rowIndex == 0 && colNames || colIndex == 0 && rowNames\n\t\t\t\t\t? String.prototype.padEnd\n\t\t\t\t\t: String.prototype.padStart\n\t\t\t\treturn padder.call(x, colWidths[colIndex])\n\t\t\t}).join('  ')\n\t\t).map(x => x + '\\n').join('') // join rows\n\t}\n\n\trow(rowIndex: int): Vector {\n\t\tconst v = new Float64Array(this.width)\n\t\tarrayCopy(this.m, rowIndex * this.width, v, 0, this.width)\n\t\treturn new Vector(v)\n\t}\n\n\tcol(colIndex: int): Vector {\n\t\tconst v = new Float64Array(this.height)\n\t\tarrayCopyStep(this.m, colIndex, this.width, v, 0, 1, this.height)\n\t\treturn new Vector(v)\n\t}\n\n\tdim(): { width: int, height: int } {\n\t\treturn { width: this.width, height: this.height }\n\t}\n\n\tdimString(): string {\n\t\treturn this.width + 'x' + this.height\n\t}\n\n\tequals(obj: any): boolean {\n\t\tif (obj.constructor != this.constructor) return false\n\t\tif (this.width != obj.width || this.height != obj.height) return false\n\t\tlet elIndex = this.m.length\n\t\twhile (elIndex--) {\n\t\t\tif (this.m[elIndex] != obj.m[elIndex]) return false\n\t\t}\n\t\treturn true\n\t}\n\n\tequalsMatrix(matrix: Matrix, precision?: number): boolean {\n\t\tprecision = precision || NLA_PRECISION\n\t\tif (!(matrix instanceof Matrix)) throw new Error('not a matrix')\n\t\tif (this.width != matrix.width || this.height != matrix.height) return false\n\t\tlet elIndex = this.m.length\n\t\twhile (elIndex--) {\n\t\t\tif (Math.abs(this.m[elIndex] - matrix.m[elIndex]) >= precision) return false\n\t\t}\n\t\treturn true\n\t}\n\n\thashCode(): int {\n\t\tlet result = 0\n\t\tlet elIndex = this.m.length\n\t\twhile (elIndex--) {\n\t\t\tresult = result * 31 + floatHashCode(this.m[elIndex])\n\t\t}\n\t\treturn result\n\t}\n\n\t// todo rename\n\tisZero(): boolean {\n\t\tlet elIndex = this.m.length\n\t\twhile (elIndex--) {\n\t\t\tif (!eq0(this.m[elIndex])) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n\tisOrthogonal(): boolean {\n\t\treturn this.isSquare() && this.transposed().times(this).equalsMatrix(Matrix.identityN(this.width))\n\t}\n\n\t/**\n\t * Returns L, U, P such that L * U == P * this\n\t */\n\tluDecomposition(): { L: Matrix, U: Matrix, P: Matrix } {\n\t\tassertf(() => this.isSquare(), this.dim().toSource())\n\t\tconst dim = this.width\n\t\tconst uRowArrays = this.asRowArrays(Float64Array)\n\t\tconst lRowArrays = arrayFromFunction(dim, (row) => new Float64Array(dim))\n\t\tconst pRowArrays = Matrix.identityN(dim).asRowArrays(Float64Array)\n\t\tlet currentRowIndex = 0\n\t\tfor (let colIndex = 0; colIndex < dim; colIndex++) {\n\t\t\t// find largest value in colIndex\n\t\t\tlet maxAbsValue = 0, pivotRowIndex = -1, numberOfNonZeroRows: number = 0\n\t\t\tfor (let rowIndex = currentRowIndex; rowIndex < dim; rowIndex++) {\n\t\t\t\tconst el: number = uRowArrays[rowIndex][colIndex]\n\t\t\t\tnumberOfNonZeroRows += +(0 != el)\n\t\t\t\tif (Math.abs(el) > maxAbsValue) {\n\t\t\t\t\tmaxAbsValue = Math.abs(el)\n\t\t\t\t\tpivotRowIndex = rowIndex\n\t\t\t\t}\n\t\t\t}\n\t\t\t// TODO: check with isZero\n\t\t\tif (0 == maxAbsValue) {\n\t\t\t\t// column contains only zeros\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tassert(-1 !== pivotRowIndex)\n\t\t\t// swap rows\n\t\t\tarraySwap(uRowArrays, currentRowIndex, pivotRowIndex)\n\t\t\tarraySwap(lRowArrays, currentRowIndex, pivotRowIndex)\n\t\t\tarraySwap(pRowArrays, currentRowIndex, pivotRowIndex)\n\t\t\tlRowArrays[colIndex][colIndex] = 1\n\n\t\t\tif (1 < numberOfNonZeroRows) {\n\t\t\t\t// subtract pivot (now current) row from all below it\n\t\t\t\tfor (let rowIndex = currentRowIndex + 1; rowIndex < dim; rowIndex++) {\n\t\t\t\t\tconst l = uRowArrays[rowIndex][colIndex] / uRowArrays[currentRowIndex][colIndex]\n\t\t\t\t\tlRowArrays[rowIndex][colIndex] = l\n\t\t\t\t\t// subtract pivot row * l from row 'rowIndex'\n\t\t\t\t\tfor (let colIndex2 = colIndex; colIndex2 < dim; colIndex2++) {\n\t\t\t\t\t\tuRowArrays[rowIndex][colIndex2] -= l * uRowArrays[currentRowIndex][colIndex2]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcurrentRowIndex++ // this doesn't increase if pivot was zero\n\t\t}\n\t\treturn {\n\t\t\tL: Matrix.fromRowArrays2(lRowArrays),\n\t\t\tU: Matrix.fromRowArrays2(uRowArrays),\n\t\t\tP: Matrix.fromRowArrays2(pRowArrays),\n\t\t}\n\t}\n\n\tgauss(): { L: Matrix, U: Matrix, P: Matrix } {\n\t\tconst width = this.width, height = this.height\n\t\tconst uRowArrays = this.asRowArrays(Float64Array)\n\t\tconst lRowArrays = arrayFromFunction(height, (row) => new Float64Array(width))\n\t\tconst pRowArrays = Matrix.identityN(height).asRowArrays(Float64Array)\n\t\tlet currentRowIndex = 0\n\t\tfor (let colIndex = 0; colIndex < width; colIndex++) {\n\t\t\t// console.log('currentRowIndex', currentRowIndex)\t// find largest value in colIndex\n\t\t\tlet maxAbsValue = 0, pivotRowIndex = -1, numberOfNonZeroRows = 0\n\t\t\tfor (let rowIndex = currentRowIndex; rowIndex < height; rowIndex++) {\n\t\t\t\tconst el = uRowArrays[rowIndex][colIndex]\n\t\t\t\tnumberOfNonZeroRows += +(0 != el)\n\t\t\t\tif (Math.abs(el) > maxAbsValue) {\n\t\t\t\t\tmaxAbsValue = Math.abs(el)\n\t\t\t\t\tpivotRowIndex = rowIndex\n\t\t\t\t}\n\t\t\t}\n\t\t\t// TODO: check with isZero\n\t\t\tif (0 == maxAbsValue) {\n\t\t\t\t// column contains only zeros\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tassert(-1 !== pivotRowIndex)\n\t\t\t// swap rows\n\t\t\tarraySwap(uRowArrays, currentRowIndex, pivotRowIndex)\n\t\t\tarraySwap(lRowArrays, currentRowIndex, pivotRowIndex)\n\t\t\tarraySwap(pRowArrays, currentRowIndex, pivotRowIndex)\n\t\t\tlRowArrays[currentRowIndex][colIndex] = 1\n\n\t\t\tif (1 < numberOfNonZeroRows) {\n\t\t\t\t// subtract pivot (now current) row from all below it\n\t\t\t\tfor (let rowIndex = currentRowIndex + 1; rowIndex < height; rowIndex++) {\n\t\t\t\t\tconst l = uRowArrays[rowIndex][colIndex] / uRowArrays[currentRowIndex][colIndex]\n\t\t\t\t\tlRowArrays[rowIndex][colIndex] = l\n\t\t\t\t\t// subtract pivot row * l from row 'rowIndex'\n\t\t\t\t\tfor (let colIndex2 = colIndex; colIndex2 < width; colIndex2++) {\n\t\t\t\t\t\tuRowArrays[rowIndex][colIndex2] -= l * uRowArrays[currentRowIndex][colIndex2]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcurrentRowIndex++ // this doesn't increase if pivot was zero\n\t\t}\n\t\treturn {\n\t\t\tL: Matrix.fromRowArrays2(lRowArrays),\n\t\t\tU: Matrix.fromRowArrays2(uRowArrays),\n\t\t\tP: Matrix.fromRowArrays2(pRowArrays),\n\t\t}\n\t}\n\n\tqrDecompositionGivensRotation(): { Q: Matrix, R: Matrix } {\n\t\tfunction sigma(c: number, s: number) {\n\t\t\tif (0 == c) {\n\t\t\t\treturn 1\n\t\t\t}\n\t\t\tif (Math.abs(s) < Math.abs(c)) {\n\t\t\t\treturn 0.5 * Math.sign(c) * s\n\t\t\t}\n\t\t\treturn 2 * Math.sign(s) / c\n\t\t}\n\n\t\tfunction matrixForCS(dim: int, i: int, k: int, c: number, s: number) {\n\t\t\tconst m = Matrix.identityN(dim)\n\t\t\tm.setEl(i, i, c)\n\t\t\tm.setEl(k, k, c)\n\t\t\tm.setEl(i, k, s)\n\t\t\tm.setEl(k, i, -s)\n\t\t\treturn m\n\t\t}\n\n\t\tlet qTransposed = Matrix.identityN(this.height)\n\t\tfor (let colIndex = 0; colIndex < this.width; colIndex++) {\n\t\t\t// find largest value in colIndex\n\t\t\tfor (let rowIndex = colIndex + 1; rowIndex < this.height; rowIndex++) {\n\t\t\t\t//console.log('row ', rowIndex, 'col ', colIndex)\n\t\t\t\tconst xi = this.e(colIndex, colIndex)\n\t\t\t\tconst xk = this.e(rowIndex, colIndex)\n\t\t\t\tif (xk == 0) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tconst r = Math.sqrt(xi * xi + xk * xk)\n\t\t\t\tconst c = xi / r\n\t\t\t\tconst s = xk / r\n\n\t\t\t\t// apply transformation on every column:\n\t\t\t\tfor (let col2 = colIndex; col2 < this.width; col2++) {\n\t\t\t\t\tconst x1 = this.e(colIndex, col2) * c + this.e(rowIndex, col2) * s\n\t\t\t\t\tconst x2 = this.e(rowIndex, col2) * c - this.e(colIndex, col2) * s\n\t\t\t\t\tthis.setEl(colIndex, col2, x1)\n\t\t\t\t\tthis.setEl(rowIndex, col2, x2)\n\t\t\t\t}\n\t\t\t\t//console.log('r ', r, 'c ', c, 's ', s, 'sigma', sigma(c, s))\n\t\t\t\t//console.log(this.toString(),'cs\\n', matrixForCS(this.height, colIndex, rowIndex, c, s).toString())\n\t\t\t\tqTransposed = matrixForCS(this.height, colIndex, rowIndex, c, s).times(qTransposed)\n\t\t\t}\n\t\t}\n\t\t//console.log(qTransposed.transposed().toString(), this.toString(),\n\t\t// qTransposed.transposed().times(this).toString())\n\t\treturn { Q: qTransposed.transposed(), R: this }\n\t}\n\n\tisPermutation(): boolean {\n\t\tif (!this.isSquare()) return false\n\t\tif (this.m.some((value) => !eq0(value) && !eq(1, value))) return false\n\n\t\tconst rows = this.asRowArrays(Array)\n\t\tif (rows.some((row) => row.filter((value) => eq(1, value)).length != 1)) return false\n\n\t\tconst cols = this.asColArrays(Array)\n\t\tif (cols.some((col) => col.filter((value) => eq(1, value)).length != 1)) return false\n\n\t\treturn true\n\t}\n\n\tisDiagonal(precision?: number): boolean {\n\t\tlet i = this.m.length\n\t\twhile (i--) {\n\t\t\tif (0 !== i % (this.width + 1) && !eq0(this.m[i])) return false\n\t\t}\n\t\treturn true\n\t}\n\n\tisIdentity(precision?: number): boolean {\n\t\treturn this.isLowerUnitriangular(precision) && this.isUpperTriangular(precision)\n\t}\n\n\tisUpperTriangular(precision?: number) {\n\t\tprecision = 'number' == typeof precision ? precision : NLA_PRECISION\n\t\tif (!this.isSquare()) return false\n\t\tfor (let rowIndex = 1; rowIndex < this.height; rowIndex++) {\n\t\t\tfor (let colIndex = 0; colIndex < rowIndex; colIndex++) {\n\t\t\t\tif (!eq0(this.m[rowIndex * this.width + colIndex], precision)) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n\t/**\n\t * Returns x, so that this * x = b\n\t * More efficient than calculating the inverse for few (~ <= this.height) values\n\t */\n\tsolveLinearSystem(b: Vector): Vector {\n\t\tconst lup = this.luDecomposition()\n\t\t// console.log(lup.L.toString())\n\t\t// console.log(lup.U.toString())\n\t\t// console.log(lup.P.toString())\n\t\tconst y = lup.L.solveForwards(lup.P.timesVector(b))\n\t\tconst x = lup.U.solveBackwards(y)\n\t\treturn x\n\t}\n\n\tisLowerUnitriangular(precision?: number): boolean {\n\t\tprecision = 'number' == typeof precision ? precision : NLA_PRECISION\n\t\tif (!this.isSquare()) return false\n\t\tfor (let rowIndex = 0; rowIndex < this.height - 1; rowIndex++) {\n\t\t\tfor (let colIndex = rowIndex; colIndex < this.width; colIndex++) {\n\t\t\t\tconst el = this.m[rowIndex * this.width + colIndex]\n\t\t\t\tif (rowIndex == colIndex ? !eq(1, el, precision) : !eq0(el, precision)) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n\tisLowerTriangular(): boolean {\n\t\tif (!this.isSquare()) return false\n\t\tfor (let rowIndex = 0; rowIndex < this.height - 1; rowIndex++) {\n\t\t\tfor (let colIndex = rowIndex + 1; colIndex < this.width; colIndex++) {\n\t\t\t\tif (!eq0(this.m[rowIndex * this.width + colIndex])) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n\tsolveBackwards(x: Vector): Vector {\n\t\tassertVectors(x)\n\t\tassert(this.height == x.dim(), 'this.height == x.dim()')\n\t\tassert(this.isUpperTriangular(), 'this.isUpperTriangular()\\n' + this.str)\n\t\tconst v = new Float64Array(this.width)\n\t\tlet rowIndex = this.height\n\t\twhile (rowIndex--) {\n\t\t\tlet temp = x.v[rowIndex]\n\t\t\tfor (let colIndex = rowIndex + 1; colIndex < this.width; colIndex++) {\n\t\t\t\ttemp -= v[colIndex] * this.e(rowIndex, colIndex)\n\t\t\t}\n\t\t\tv[rowIndex] = temp / this.e(rowIndex, rowIndex)\n\t\t}\n\t\treturn new Vector(v)\n\t}\n\n\tsolveBackwardsMatrix(matrix: Matrix): Matrix {\n\t\tconst colVectors = new Array(matrix.width)\n\t\tlet i = matrix.width\n\t\twhile (i--) {\n\t\t\tcolVectors[i] = this.solveBackwards(matrix.col(i))\n\t\t}\n\t\treturn Matrix.fromColVectors(colVectors)\n\t}\n\n\tsolveForwardsMatrix(matrix: Matrix): Matrix {\n\t\tconst colVectors = new Array(matrix.width)\n\t\tlet i = matrix.width\n\t\twhile (i--) {\n\t\t\tcolVectors[i] = this.solveForwards(matrix.col(i))\n\t\t}\n\t\treturn Matrix.fromColVectors(colVectors)\n\t}\n\n\tsolveForwards(x: Vector): Vector {\n\t\tassertVectors(x)\n\t\tassert(this.height == x.dim(), 'this.height == x.dim()')\n\t\tassertf(() => this.isLowerTriangular(), this.toString())\n\t\tconst v = new Float64Array(this.width)\n\t\tfor (let rowIndex = 0; rowIndex < this.height; rowIndex++) {\n\t\t\tlet temp = x.v[rowIndex]\n\t\t\tfor (let colIndex = 0; colIndex < rowIndex; colIndex++) {\n\t\t\t\ttemp -= v[colIndex] * this.e(rowIndex, colIndex)\n\t\t\t}\n\t\t\tv[rowIndex] = temp / this.e(rowIndex, rowIndex)\n\t\t}\n\t\treturn new Vector(v)\n\t}\n\n\t/**\n\t * Calculates rank of matrix.\n\t * Number of linearly independant row/column vectors.\n\t * Is equal to the unmber of dimensions the image of the affine transformation represented this matrix has.\n\t */\n\trank(): int {\n\t\tconst U = this.gauss().U\n\t\t//console.log(R.toString())\n\t\tlet rowIndex = this.height\n\t\twhile (rowIndex-- && U.row(rowIndex).isZero()) {\n\t\t\tconsole.log('RANK' + U.row(rowIndex).toString() + U.row(rowIndex).isZero())\n\t\t}\n\t\treturn rowIndex + 1\n\t}\n\n\trowsIndependent(): boolean {\n\t\treturn this.height == this.rank()\n\t}\n\n\tcolsIndependent(): boolean {\n\t\treturn this.width == this.rank()\n\t}\n\n\tasRowArrays<T extends FloatArray>(arrayConstructor: new (length: int) => T): T[] {\n\t\tarrayConstructor = arrayConstructor || Float64Array as any\n\t\tlet rowIndex = this.height\n\t\tconst result = new Array(this.height)\n\t\twhile (rowIndex--) {\n\t\t\tresult[rowIndex] = this.rowArray(rowIndex, arrayConstructor)\n\t\t}\n\t\treturn result\n\t}\n\n\tasColArrays<T extends FloatArray>(arrayConstructor: new (length: int) => T): T[] {\n\t\tarrayConstructor = arrayConstructor || Float64Array as any\n\t\tlet colIndex = this.width\n\t\tconst result = new Array(this.width)\n\t\twhile (colIndex--) {\n\t\t\tresult[colIndex] = this.colArray(colIndex, arrayConstructor)\n\t\t}\n\t\treturn result\n\t}\n\n\trowArray<T extends FloatArray>(rowIndex: int, arrayConstructor: new (length: int) => T): T {\n\t\tarrayConstructor = arrayConstructor || Float64Array as any\n\t\tconst result = new arrayConstructor(this.width)\n\t\tarrayCopy(this.m, rowIndex * this.width, result, 0, this.width)\n\t\treturn result\n\t}\n\n\tcolArray<T extends FloatArray>(colIndex: int, arrayConstructor: new (length: int) => T): T {\n\t\tarrayConstructor = arrayConstructor || Float64Array as any\n\t\tconst result = new arrayConstructor(this.width)\n\t\tarrayCopyStep(this.m, colIndex, this.height, result, 0, 1, this.height)\n\t\treturn result\n\t}\n\n\tsubMatrix(firstColIndex: int, subWidth: int, firstRowIndex: int, subHeight: int): Matrix {\n\t\tassert(firstColIndex + subWidth > this.width || firstRowIndex + subHeight > this.height)\n\t\tconst m = new Float64Array(this.height)\n\t\tarrayCopyBlocks(this.m, firstColIndex, this.width, m, 0, subWidth, subHeight, subWidth)\n\t\treturn new Matrix(subWidth, subHeight, m)\n\t}\n\n\tmap(fn: (el: number, elIndex: number, array: Float64Array) => number): Matrix {\n\t\treturn new Matrix(this.width, this.height, this.m.map(fn))\n\t}\n\n\tdimEquals(matrix: Matrix): boolean {\n\t\tassertInst(Matrix, matrix)\n\t\treturn this.width == matrix.width && this.height == matrix.height\n\t}\n\n\tinversed(): Matrix {\n\t\tconst lup = this.luDecomposition()\n\t\tconst y = lup.L.solveForwardsMatrix(lup.P)\n\t\tconsole.log(y)\n\t\tconst inverse = lup.U.solveBackwardsMatrix(y)\n\t\treturn inverse\n\t}\n\n\tinversed3(): Matrix {\n\t\tassertf(() => 3 == this.width && 3 == this.height)\n\t\tconst result = Matrix.forWidthHeight(3, 3), m = this.m, r = result.m\n\n\t\tr[0] = m[4] * m[8] - m[5] * m[7]\n\t\tr[1] = -m[1] * m[8] + m[2] * m[7]\n\t\tr[2] = m[1] * m[5] - m[2] * m[4]\n\n\t\tr[3] = -m[3] * m[8] + m[5] * m[6]\n\t\tr[4] = m[0] * m[8] - m[2] * m[6]\n\t\tr[5] = -m[0] * m[5] + m[2] * m[3]\n\n\t\tr[6] = m[3] * m[7] - m[4] * m[6]\n\t\tr[7] = -m[0] * m[7] + m[1] * m[6]\n\t\tr[8] = m[0] * m[4] - m[1] * m[3]\n\n\t\tconst det = m[0] * r[0] + m[1] * r[3] + m[2] * r[6]\n\t\tlet i = 9\n\t\twhile (i--) {\n\t\t\tr[i] /= det\n\t\t}\n\n\t\treturn result\n\t}\n\n\tinversed2(): Matrix {\n\t\tassertf(() => 2 == this.width && 2 == this.height)\n\t\tconst result = Matrix.forWidthHeight(2, 2), m = this.m, r = result.m\n\n\t\tconst det = m[0] * m[3] - m[1] * r[2]\n\n\t\tr[0] = m[3] / det\n\t\tr[1] = -m[2] / det\n\n\t\tr[2] = -m[1] / det\n\t\tr[3] = m[0] / det\n\n\t\treturn result\n\t}\n\n\tcanMultiply(matrix: Matrix): boolean {\n\t\tassertInst(Matrix, matrix)\n\t\treturn this.width == matrix.height\n\t}\n\n\ttimes(matrix: Matrix): Matrix {\n\t\tassertInst(Matrix, matrix)\n\t\tassert(this.canMultiply(matrix), `Cannot multiply this {this.dimString()} by matrix {matrix.dimString()}`)\n\t\tconst nWidth = matrix.width, nHeight = this.height, n = this.width\n\t\tconst nM = new Float64Array(nWidth * nHeight)\n\t\tlet nRowIndex = nHeight\n\t\twhile (nRowIndex--) {\n\t\t\tlet nColIndex = nWidth\n\t\t\twhile (nColIndex--) {\n\t\t\t\tlet result = 0\n\t\t\t\tlet i = n\n\t\t\t\twhile (i--) {\n\t\t\t\t\tresult += this.m[nRowIndex * n + i] * matrix.m[i * nWidth + nColIndex]\n\t\t\t\t}\n\t\t\t\tnM[nRowIndex * nWidth + nColIndex] = result\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(nWidth, nHeight, nM)\n\t}\n\n\ttimesVector(v: Vector): Vector {\n\t\tassertVectors(v)\n\t\tassert(this.width == v.dim())\n\t\tconst nHeight = this.height, n = this.width\n\t\tconst nM = new Float64Array(nHeight)\n\t\tlet nRowIndex = nHeight\n\t\twhile (nRowIndex--) {\n\t\t\tlet result = 0\n\t\t\tlet i = n\n\t\t\twhile (i--) {\n\t\t\t\tresult += this.m[nRowIndex * n + i] * v.v[i]\n\t\t\t}\n\t\t\tnM[nRowIndex] = result\n\t\t}\n\t\treturn new Vector(nM)\n\t}\n\n\ttransposed(): Matrix {\n\t\tconst tWidth = this.height, tHeight = this.width\n\t\tconst tM = new Float64Array(tWidth * tHeight)\n\t\tlet tRowIndex = tHeight\n\t\twhile (tRowIndex--) {\n\t\t\tlet tColIndex = tWidth\n\t\t\twhile (tColIndex--) {\n\t\t\t\ttM[tRowIndex * tWidth + tColIndex] = this.m[tColIndex * tHeight + tRowIndex]\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(tWidth, tHeight, tM)\n\t}\n\n\t/**\n\t * In-place transpose.\n\t */\n\ttranspose(): void {\n\t\tconst h = this.height, w = this.width, tM = this.m\n\t\tlet tRowIndex = h\n\t\twhile (tRowIndex--) {\n\t\t\tlet tColIndex = Math.min(tRowIndex, w)\n\t\t\twhile (tColIndex--) {\n\t\t\t\tconsole.log('col', tColIndex, 'row', tRowIndex)\n\t\t\t\tconst temp = tM[tRowIndex * w + tColIndex]\n\t\t\t\ttM[tRowIndex * w + tColIndex] = tM[tColIndex * h + tRowIndex]\n\t\t\t\ttM[tColIndex * h + tRowIndex] = temp\n\t\t\t}\n\t\t}\n\t\tthis.width = h\n\t\tthis.height = w\n\t}\n\n\tisSquare(): boolean {\n\t\treturn this.height == this.width\n\t}\n\n\tdiagonal(): Vector {\n\t\tif (!this.isSquare()) {\n\t\t\tthrow new Error('!!')\n\t\t}\n\t\tconst v = new Float64Array(this.width)\n\t\tlet elIndex = this.width * (this.width + 1)\n\t\tlet vIndex = this.width\n\t\twhile (vIndex--) {\n\t\t\telIndex -= this.width + 1\n\t\t\tv[vIndex] = this.m[elIndex]\n\t\t}\n\t\treturn new Vector(v)\n\t}\n\n\tmaxEl(): number {\n\t\treturn Math.max.apply(undefined, this.m)\n\t}\n\n\tminEl(): number {\n\t\treturn Math.min.apply(undefined, this.m)\n\t}\n\n\tmaxAbsColSum(): number {\n\t\tlet result = 0\n\t\tlet colIndex = this.width\n\t\twhile (colIndex--) {\n\t\t\tlet absSum = 0\n\t\t\tlet rowIndex = this.height\n\t\t\twhile (rowIndex--) {\n\t\t\t\tabsSum += Math.abs(this.m[rowIndex * this.width + colIndex])\n\t\t\t}\n\t\t\tresult = Math.max(result, absSum)\n\t\t}\n\t\treturn result\n\t}\n\n\tmaxAbsRowSum(): number {\n\t\tlet result = 0\n\t\tlet rowIndex = this.height\n\t\twhile (rowIndex--) {\n\t\t\tlet absSum = 0\n\t\t\tlet colIndex = this.width\n\t\t\twhile (colIndex--) {\n\t\t\t\tabsSum += Math.abs(this.m[rowIndex * this.width + colIndex])\n\t\t\t}\n\t\t\tresult = Math.max(result, absSum)\n\t\t}\n\t\treturn result\n\t}\n\n\tgetTriangularDeterminant(): number {\n\t\tassert(this.isUpperTriangular() || this.isLowerTriangular(), 'not a triangular matrix')\n\n\t\tlet product = 1\n\t\tlet elIndex = this.width * (this.width + 1)\n\t\twhile (elIndex) {\n\t\t\telIndex -= this.width + 1\n\t\t\tproduct *= this.m[elIndex]\n\t\t}\n\t\treturn product\n\t}\n\n\t/**\n\t * Calculates the determinant by first calculating the LU decomposition. If you already have that, use\n\t * U.getTriangularDeterminant()\n\t */\n\tgetDeterminant(): number {\n\t\t// PA = LU\n\t\t// det(A) * det(B) = det(A * B)\n\t\t// det(P) == 1 (permutation matrix)\n\t\t// det(L) == 1 (main diagonal is 1s\n\t\t// =>  det(A) == det(U)\n\t\treturn this.luDecomposition().U.getTriangularDeterminant()\n\t}\n\n\thasFullRank(): boolean {\n\t\treturn Math.min(this.width, this.height) == this.rank()\n\t}\n\n\tpermutationAsIndexMap(): int[] {\n\t\tassertf(() => this.isPermutation())\n\t\tconst result = new Array(this.height)\n\t\tlet i = this.height\n\t\twhile (i--) {\n\t\t\tconst searchIndexStart = i * this.width\n\t\t\tlet searchIndex = searchIndexStart\n\t\t\twhile (this.m[searchIndex] < 0.5) searchIndex++\n\t\t\tresult[i] = searchIndex - searchIndexStart\n\t\t}\n\t\treturn result\n\t}\n\n\tgetDependentRowIndexes(gauss: { L: Matrix, U: Matrix, P: Matrix } = this.gauss()): int[] {\n\t\tconst { L, U, P } = gauss\n\t\t// rows which end up as zero vectors in U are not linearly independent\n\t\tconst dependents = new Array(this.height)\n\t\tlet uRowIndex = this.height\n\t\twhile (uRowIndex--) {\n\t\t\tconst uRow = U.row(uRowIndex)\n\t\t\tif (uRow.length() < NLA_PRECISION) {\n\t\t\t\tdependents[uRowIndex] = true\n\t\t\t} else {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// figure out from which other rows the rows which end up as zero vectors are created by\n\t\tlet lRowIndex = this.height\n\t\twhile (lRowIndex--) {\n\t\t\tif (dependents[lRowIndex]) {\n\t\t\t\tlet lColIndex = Math.min(lRowIndex, this.width)\n\t\t\t\twhile (lColIndex--) {\n\t\t\t\t\tif (0 !== L.e(lRowIndex, lColIndex)) {\n\t\t\t\t\t\tdependents[lColIndex] = true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconsole.log('m\\n', this.toString(x => '' + x))\n\t\tconsole.log('L\\n', L.toString(x => '' + x))\n\t\tconsole.log('U\\n', U.toString(x => '' + x))\n\t\tconsole.log('P\\n', P.toString(x => '' + x))\n\t\t// gauss algorithm permutes the order of the rows, so map our results back to the original indices\n\t\tconst indexMap = P.permutationAsIndexMap()\n\t\tconst dependentRowIndexes = dependents.map((b, index) => b && indexMap[index]).filter(x => x != undefined)\n\t\treturn dependentRowIndexes\n\t}\n\n}","// @ts-ignore\nimport toSource from 'tosource'\n\nimport { Matrix } from './Matrix'\nimport { V, V3 } from './V3'\nimport { Vector } from './Vector'\n\nconst { abs, PI, sign } = Math\nexport const TAU = 2 * PI\nexport type int = number\nexport type colorstr = string // e.g. '#abcdef\nexport type raddd = number\nexport type FloatArray = Float32Array | Float64Array | number[]\n\n/** @define {boolean} */\nexport const NLA_DEBUG = true\nexport const NLA_PRECISION = 1 / (1 << 26)\nconsole.log('NLA_PRECISION', NLA_PRECISION)\nconsole.log('NLA_DEBUG', NLA_DEBUG)\n\n\n\nlet oldConsole: any = undefined\nexport function disableConsole() {\n    oldConsole = console.log\n    console.log = function () { }\n}\nexport function enableConsole() {\n    if (oldConsole) {\n        console.log = oldConsole\n    }\n}\nexport function hasConstructor<T>(instance: any, cons: { new(...args: any[]): T }): instance is T {\n    return instance.constructor == cons\n}\n\nexport function getIntervals(ts: number[], min: number, max: number): [number, number][] {\n    ts.sort((a, b) => a - b)\n    if (!eq(ts[0], min)) {\n        ts.splice(0, 0, min)\n    }\n    if (!eq(ts.last, max)) {\n        ts.push(max)\n    }\n    return arrayFromFunction(ts.length - 1, i => [ts[i], ts[i + 1]] as [number, number])\n}\n\nexport function assertVectors(...vectors: (Vector | V3)[]) {\n    if (NLA_DEBUG) {\n        for (let i = 0; i < arguments.length; i++) {\n            if (!(arguments[i] instanceof V3 || arguments[i] instanceof Vector)) {\n                throw new Error('assertVectors arguments[' + (i) + '] is not a vector. ' + typeof arguments[i] + ' == typeof ' + arguments[i])\n            }\n        }\n    }\n    return true\n}\nexport function assertInst<T>(what: Function & { prototype: T }, ...objs: T[]) {\n    if (NLA_DEBUG) {\n        for (let i = 0; i < objs.length; i++) {\n            if (!(objs[i] instanceof what)) {\n                throw new Error('assertInst objs[' + (i) + '] is not a ' + what.prototype.name + '. ' + objs[i].constructor.name + objs[i])\n            }\n        }\n    }\n    return true\n}\nexport function assertNumbers(...numbers: number[]) {\n    if (NLA_DEBUG) {\n        for (let i = 0; i < numbers.length; i++) {\n            if ('number' !== typeof numbers[i]) {\n                throw new Error('assertNumbers arguments[' + (i) + '] is not a number. ' + typeof numbers[i] + ' == typeof ' + numbers[i])\n            }\n        }\n    }\n    return true\n}\nexport function assert(value: any, ...messages: (any | (() => string))[]): value is true {\n    if (NLA_DEBUG && !value) {\n        throw new Error('assert failed: '\n            + messages.map(message => ('function' === typeof message ? message() : message || '')).join('\\n'))\n    }\n    return true\n}\nexport function assertNever(value?: never): never {\n    throw new Error()\n}\nexport function assertf(f: () => any, ...messages: (any | (() => any))[]) {\n    if (!f()) {\n        throw new Error('assertf failed: ' + f.toString()\n            + messages.map(message => ('function' === typeof message ? message() : message || '')).join('\\n'))\n    }\n}\n\nexport function lerp(a: number, b: number, t: number) {\n    return a * (1 - t) + b * t\n}\nconst originalNumberToString = Number.prototype.toString\nNumber.prototype.toString = function (radix) {\n    if (PI == this) {\n        return 'PI'\n    }\n    return originalNumberToString.call(this, radix)\n}\n\nexport const eq0 = (x: number, EPS: number = NLA_PRECISION): boolean => Math.abs(x) <= EPS\nexport const eq = (x: number, y: number, EPS: number = NLA_PRECISION): boolean => Math.abs(x - y) <= EPS\nexport const lt = (x: number, y: number, EPS: number = NLA_PRECISION): boolean => x - y < -EPS\nexport const gt = (x: number, y: number, EPS: number = NLA_PRECISION): boolean => y - x < -EPS\nexport const le = (x: number, y: number, EPS: number = NLA_PRECISION): boolean => x - y <= EPS\nexport const ge = (x: number, y: number, EPS: number = NLA_PRECISION): boolean => y - x <= EPS\n\nexport const eqAngle = (x: number, y: number): boolean => zeroAngle(x - y)\nexport const zeroAngle = (x: number): boolean => ((x % (2 * Math.PI)) + 2 * Math.PI + NLA_PRECISION) % (2 * Math.PI) < 2 * NLA_PRECISION\nexport const snap = (x: number, to: number): number => Math.abs(x - to) <= NLA_PRECISION ? to : x\nexport const snap2 = (x: number, ...to: number[]): number => to.reduce((x, to) => Math.abs(x - to) <= NLA_PRECISION ? to : x, x)\nexport const snapEPS = (x: number, EPS: number, ...to: number[]): number => to.reduce((x, to) => Math.abs(x - to) <= EPS ? to : x, x)\nexport const snap0 = (x: number, EPS = NLA_PRECISION): number => Math.abs(x) <= EPS ? 0 : x\nexport const canonAngle = (x: number): number => ((x % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI)\n\n/** @deprecated */ export const eq02 = eq0\n/** @deprecated */ export const eq2 = eq\n\n/**\n * Decimal adjustment of a number.\n *\n * @param f  The type of adjustment.\n * @param value The number.\n * @param exp The exponent (the 10 logarithm of the adjustment base).\n * @returns The adjusted value.\n */\nfunction decimalAdjust(f: (x: number) => number, value: number, exp: number): number {\n    // If the exp is undefined or zero...\n    if (typeof exp === 'undefined' || +exp === 0) {\n        return f(value)\n    }\n    value = +value\n    exp = +exp\n    // If the value is not a number or the exp is not an integer...\n    if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {\n        return NaN\n    }\n    // Shift\n    let vs = value.toString().split('e')\n    value = f(+(vs[0] + 'e' + (vs[1] ? (+vs[1] - exp) : -exp)))\n    // Shift back\n    vs = value.toString().split('e')\n    return +(vs[0] + 'e' + (vs[1] ? (+vs[1] + exp) : exp))\n}\n\nexport const round10: (value: number, exp: number) => number = decimalAdjust.bind(undefined, Math.round)\nexport const floor10: (value: number, exp: number) => number = decimalAdjust.bind(undefined, Math.floor)\nexport const ceil10: (value: number, exp: number) => number = decimalAdjust.bind(undefined, Math.ceil)\n\n\nexport const GOLDEN_RATIO = (1 + Math.sqrt(5)) / 2\n\n\n\n\nexport function repeatString(count: int, str: string) {\n    if (count == 0) {\n        return ''\n    }\n    count *= str.length\n    const halfCharLength = count / 2\n    let result = str\n\n    // double the input until it is long enough.\n    while (result.length <= halfCharLength) {\n        result += result\n    }\n    // use substring to hit the precise length target without\n    // using extra memory\n    return result + result.substring(0, count - result.length)\n}\nexport function mod(a: number, b: number) {\n    return ((a % b) + b) % b\n}\nexport function arraySwap(arr: any[], i: int, j: int) {\n    const temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n}\nexport function arrayCopy<T>(src: FloatArray, sstart: int, dst: FloatArray, dstart: int, length: int) {\n    dstart += length\n    length += sstart\n    while (length-- > sstart) {\n        dst[--dstart] = src[length]\n    }\n}\nexport function clamp(val: number, min: number, max: number) {\n    assertNumbers(val, min, max)\n    return Math.max(min, Math.min(max, val))\n}\n\nexport function between(val: number, min: number, max: number) {\n    return min <= val && val <= max\n}\nexport function fuzzyBetween(val: number, min: number, max: number) {\n    return le(min, val) && le(val, max)\n}\n\nexport function randomColor() {\n    return Math.floor(Math.random() * 0x1000000)\n}\n\nexport function mapPush<T, U>(map: Map<T, U[]>, key: T, val: U) {\n    const array = map.get(key)\n    if (array) {\n        array.push(val)\n    } else {\n        map.set(key, [val])\n    }\n}\n\n\nexport function arrayCopyStep<T>(src: FloatArray, sstart: int, sstep: int,\n    dst: FloatArray, dstart: int, dstep: int, count: int): void {\n    let srcIndex = sstart + count * sstep\n    let dIndex = dstart + count * dstep\n    while (srcIndex > sstart) {\n        dst[dIndex -= dstep] = src[srcIndex -= sstep]\n    }\n}\nexport function arrayCopyBlocks<T>(src: FloatArray, sstart: int, sstep: int,\n    dst: FloatArray, dstart: int, dstep: int,\n    blockSize: int, blockCount: int): void {\n    for (let i = 0; i < blockCount; i++) {\n        arrayCopy(src, sstart + sstep * i, dst, dstart + dstep * i, blockSize)\n    }\n}\nexport function arrayRange(startInclusive: int, endExclusive: int, step: int = 1) {\n    assertNumbers(startInclusive, step)\n    //console.log(Math.ceil((endExclusive - startInclusive) / step))\n    const arrLength = Math.ceil((endExclusive - startInclusive) / step)\n    const result = new Array(arrLength) // '- startInclusive' so that chunk in the last row will also be selected, even\n    // if the row is not complete\n    for (let i = startInclusive, index = 0; index < arrLength; i += step, index++) {\n        result[index] = i\n    }\n    return result\n}\n\nexport function arrayFromFunction<T>(length: 1, f: (i: int) => T): [T]\nexport function arrayFromFunction<T>(length: 2, f: (i: int) => T): [T, T]\nexport function arrayFromFunction<T>(length: 3, f: (i: int) => T): [T, T, T]\nexport function arrayFromFunction<T>(length: 4, f: (i: int) => T): [T, T, T, T]\nexport function arrayFromFunction<T>(length: 5, f: (i: int) => T): [T, T, T, T, T]\nexport function arrayFromFunction<T>(length: int, f: (i: int) => T): T[]\nexport function arrayFromFunction<T>(length: int, f: (i: int) => T): T[] {\n    assertNumbers(length)\n    assert('function' == typeof f)\n    const a = new Array(length)\n    let elIndex = length\n    while (elIndex--) {\n        a[elIndex] = f(elIndex)\n    }\n    return a\n}\n\nexport function fuzzyUniques(vals: number[]): number[] {\n    const round = (val: number) => Math.floor(val * (1 << 26)) / (1 << 26)\n    const map = new Map()\n    for (let i = 0; i < vals.length; i++) {\n        const val = vals[i], roundVal = round(val)\n        let key\n        if (!map.has(roundVal)\n            && !((key = map.get(roundVal - 1 / (1 << 26))) && eq(key, val))\n            && !((key = map.get(roundVal + 1 / (1 << 26))) && eq(key, val))) {\n            map.set(roundVal, val)\n        }\n    }\n    return Array.from(map.values())\n}\n\nexport function fuzzyUniquesF<T>(vals: T[], f: (o: T) => number): T[] {\n    const round = (val: number) => Math.floor(val * (1 << 26)) / (1 << 26)\n    const map = new Map()\n    for (let i = 0; i < vals.length; i++) {\n        const val = vals[i], roundVal = round(f(val))\n        let key\n        if (!map.has(roundVal)\n            && !((key = map.get(roundVal - 1 / (1 << 26))) && eq(key, f(val)))\n            && !((key = map.get(roundVal + 1 / (1 << 26))) && eq(key, f(val)))) {\n            map.set(roundVal, val)\n        }\n    }\n    return Array.from(map.values())\n}\n\n\nexport function addOwnProperties(target: any, props: any, ...exclude: string[]) {\n    Object.getOwnPropertyNames(props).forEach(key => {\n        //console.log(props, key)\n        if (!exclude.includes(key)) {\n            if (target.hasOwnProperty(key)) {\n                console.warn('target ', target, ' already has property ', key, target[key])\n            }\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(props, key)!)\n        }\n    })\n}\n\n//function defineClass(name, parent, constructor, props, statics) {\n//\tassertf(() => 'function' == typeof constructor, 'function' == typeof constructor)\n//\tconstructor.prototype = defineObject(parent && parent.prototype, props)\n//\tconstructor.prototype.constructor = constructor\n//\tObject.defineProperty(constructor.prototype, 'name', {value: name})\n//\tstatics && addOwnProperties(constructor, statics)\n//\treturn constructor\n//}\nexport let defaultRoundFunction = (x: number) => x // Math.round10(x, -4)\n\nexport function forceFinite(val: string): number {\n    const valNum = parseFloat(val.replace(',', '.').replace(/^[^0-9,\\.\\-]/, ''))\n    return Number.isFinite(valNum) ? valNum : 0\n}\n\nexport const MINUS = (a: number, b: number) => a - b\n\n\n\nexport function floatHashCode(f: number) {\n    return ~~(f * (1 << 28))\n}\n\n\n/**\n * combinations(2) will generate\n * [0,0] [0,1] [1,1] [0,2] [1,2] [2,2]\n */\nexport function* combinations(n: int): IterableIterator<{ i: number, j: number }> {\n    for (let i = 0; i < n; i++) {\n        for (let j = i; j < n; j++) {\n            yield { i: i, j: j }\n        }\n    }\n}\n\n\n/* The arithmetic-geometric mean of two non-negative numbers */\nexport function arithmeticGeometricMean(x: number, y: number): number {\n    assertf(() => lt(0, x))\n    assertf(() => lt(0, y))\n    let a = x, g = y\n    let i = 30\n    while (i-- && a != g) {\n        [a, g] = [(a + g) / 2, Math.sqrt(a * g)]\n    }\n    assert(i != -1)\n\n    return a\n}\n\n\n/**\n * incomplete elliptic integral of the first kind\n * EllipticF(phi, k2) = INT[0; phi] 1 / sqrt(1 - k2 * sin²(phi)) dphi\n */\nexport function EllipticF(phi: number, k2: number): number {\n    return gaussLegendreQuadrature24(phi => Math.pow(1 - k2 * Math.sin(phi) ** 2, -0.5), 0, phi)\n}\n\n/**\n * incomplete elliptic integral of the second kind\n * EllipticE(phi, k2) = INT[0; phi] sqrt(1 - k2 * sin²(phi)) dphi\n */\nexport function EllipticE(phi: number, k2: number): number {\n    return gaussLegendreQuadrature24(phi => Math.pow(1 - k2 * Math.sin(phi) ** 2, 0.5), 0, phi)\n}\n\nexport const DEG = .017453292519943295\nexport function rad2deg(rad: number): number {\n    //  discuss at: http://phpjs.org/functions/deg2rad/\n    // original by: Enrique Gonzalez\n    // improved by: Thomas Grainger (http://graingert.co.uk)\n    //   example 1: deg2rad(45)\n    //   returns 1: 0.7853981633974483\n\n    return rad / DEG\n}\n\n/**\n * numberToStr(2/3) == '0.6p'\n * numberToStr(7/12) == '0.583p'\n * numberToStr(2/7) == '0.285714pppppp'\n * numberToStr(NLA_PRECISION) == '0+'\n * numberToStr(-NLA_PRECISION) == '0-'\n * numberToStr(2-NLA_PRECISION) == '2-'\n * numberToStr(0) == '0='\n *\n */\nexport function numberToStr(value: number, length: int) {\n    let minAbsDiff = Infinity, closestValue: number | undefined = undefined, closestValueStr: string | undefined = undefined\n    function test(testValue: number, testValueStr: string) {\n        const absDiff = Math.abs(testValue - value)\n        console.log(testValue, testValueStr, absDiff)\n        if (absDiff < minAbsDiff) {\n            minAbsDiff = absDiff\n            closestValue = testValue\n            closestValueStr = testValueStr\n        }\n        return 0 == absDiff\n    }\n\n    function overline(str: string) {\n        return str.split('').map(c => c + '\\u0304').join('')\n    }\n\n    if (test(parseFloat(value.toFixed(length)), value.toFixed(length))) return closestValueStr + '='\n\n    const valueStr = '' + value\n    const toDecimal = valueStr.substr(0, valueStr.indexOf('.') + 1)\n    const decimals = valueStr.substr(valueStr.indexOf('.') + 1)\n\n    for (let startPos = 0; startPos < length; startPos++) {\n        for (let endPos = startPos + 1; endPos <= length; endPos++) {\n            const prefixDecimals = decimals.substr(0, startPos)\n            const period = decimals.substr(startPos, endPos)\n            const testValue = parseFloat(toDecimal + prefixDecimals + repeatString(Math.ceil((17 - startPos) / period.length), period))\n            if (test(testValue, toDecimal + prefixDecimals + overline(period))) return closestValueStr + '='\n        }\n    }\n\n    return closestValueStr + (closestValue! < value ? '-' : '+')\n}\n\n\n\nexport function time(f: () => void) {\n    const start = performance.now()\n    f()\n    return performance.now() - start\n}\n\nexport type Tuple2<T> = [T, T]\nexport type Tuple3<T> = [T, T, T]\nexport type Tuple4<T> = [T, T, T, T]\nexport type Tuple5<T> = [T, T, T, T, T]\nexport type Tuple6<T> = [T, T, T, T, T, T]\nexport type Tuple7<T> = [T, T, T, T, T, T, T]\nexport type Tuple8<T> = [T, T, T, T, T, T, T, T]\n//console.log(numberToStr(29 / 99, 4))\n//console.log(numberToStr(77 / 99, 4))\n\n// interface Object {\n//    cw(f: (x: any) => any): any\n// }\n//Object.prototype.cw = function (f) {\n//    return f(this)\n//}\n//Object.construct = function <T>(cons: {new(...args: any[]): T}, args: any[]) {\n//    return f(this)\n//}\ndeclare global {\n    interface Object {\n        sce: string\n        str: string\n        toSource(): string\n    }\n    interface ObjectConstructor {\n        construct<T>(cons: { new(...args: any[]): T }, args: any[]): T\n        map<T, S, K extends string>(\n            o: {[k in K]: T},\n            f: (this: undefined, v: T, key: string, o: {[k in K]: T}) => S\n        ): {[k in K]: S}\n        map<T, S, K extends string, C>(\n            o: {[k in K]: T},\n            f: (this: C, v: T, key: string, o: {[k in K]: T}) => S,\n            context: C\n        ): {[k in K]: S}\n    }\n    // tslint:disable-next-line:class-name\n    interface __NLAReadonlyArray<T> {\n        binaryIndexOf<S>(searchElement: S, cmp?: (a: T, b: S) => number): int\n\n        concatenated(): T\n\n        flatMap<U>(f: (el: T, elIndex: int, arr: this) => (U | ReadonlyArray<U>)): U[]\n\n        /**\n         * this.length == 0\n         */\n        isEmpty(): boolean\n\n        /**\n         * this[this.length - 1]\n         */\n        readonly last: T\n\n        /**\n         * this[index % this.length]\n         */\n        emod(index: int): T\n\n        /**\n         * this.map(f).filter(v => v)\n         */\n        mapFilter<U>(f: (el: T, elIndex: int, arr: this) => U | undefined | false | null): U[]\n\n        /**\n         * Math.max.apply(undefined, this)\n         */\n        max(this: number[]): number\n\n        /**\n         * Math.min.apply(undefined, this)\n         */\n        min(this: number[]): number\n\n        indexWithMax(f: (el: T, elIndex: int, arr: this) => number): int\n\n        sum(this: number[]): number\n\n        absSum(): number\n\n        sliceStep(start: int, end: int, step: int, chunkSize?: int): T[]\n\n        unique(): T[]\n\n        withMax(f: (el: T, elIndex: int, arr: this) => number): T\n\n        equals(this: { equals(obj: any): boolean }[], obj: any): boolean\n\n        hashCode(this: { hashCode(): int }[]): int\n    }\n    interface Array<T> extends __NLAReadonlyArray<T> {\n        binaryInsert(this: number[], newEl: number, cmp?: (a: number, b: number) => number): void\n\n        binaryInsert(newEl: T, cmp: (a: T, b: T) => number): void\n\n        /**\n         * this.length == 0\n         */\n        isEmpty(): boolean\n\n        /**\n         * this[this.length - 1]\n         */\n        last: T\n\n        remove(el: T): boolean\n\n        bagRemove(el: T): boolean\n        bagRemoveIndex(el: T): boolean\n        bagToggle(el: T): boolean\n\n        removeIndex(index: int): T\n\n        removeMatch(matcher: (el: T) => boolean): T | undefined\n\n        removeAll(els: T[]): void\n\n        sumInPlaceTree(): number\n\n        toggle(el: T): void\n\n        clear(...newItems: T[]): void\n\n        //filter<U extends T>(pred: (a: T) => a is U): U[]\n\n        map<U>(this: [T], callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): [U]\n        map<U>(this: Tuple2<T>, callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): Tuple2<U>\n        map<U>(this: Tuple3<T>, callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): Tuple3<U>\n        map<U>(this: Tuple4<T>, callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): Tuple4<U>\n        map<U>(this: Tuple5<T>, callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): Tuple5<U>\n        map<U>(this: Tuple6<T>, callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): Tuple6<U>\n        map<U>(this: Tuple7<T>, callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): Tuple7<U>\n        map<U>(this: Tuple8<T>, callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): Tuple8<U>\n    }\n    interface ReadonlyArray<T> extends __NLAReadonlyArray<T> { }\n\n    interface String {\n        capitalizeFirstLetter(): string\n        equals(x: any): boolean\n    }\n}\nObject.map = function <T, S, K extends string>(o: {[k in K]: T},\n    f: (v: T, key: string, o: {[k in K]: T}) => S,\n    context: any = undefined): {[k in K]: S} {\n    const result = {} as {[k in K]: S}\n    for (const key in o) {\n        result[key] = f.call(context, o[key], key, o)\n    }\n    return result\n}\nArray.prototype.emod = function (i) {\n    return this[i % this.length]\n}\nArray.prototype.sliceStep = function (start, end, step, chunkSize = 1) {\n    assertNumbers(start, step)\n    start < 0 && (start = this.length + start)\n    end <= 0 && (end = this.length + end)\n    const resultLength = Math.ceil((end - start) / step)\n    const result = new Array(resultLength) // '- start' so that chunk in the last row\n    // will also be selected, even if the row is\n    // not complete\n    let index = 0\n    for (let i = start; i < end; i += step) {\n        for (let j = i; j < Math.min(i + chunkSize, end); j++) {\n            result[index++] = this[j]\n        }\n    }\n    assert(resultLength == index)\n    return result\n}\nArray.prototype.equals = function (obj: any): boolean {\n    if (this === obj) return true\n    if (Object.getPrototypeOf(obj) !== Array.prototype) return false\n    if (this.length !== obj.length) return false\n    for (let i = 0; i < this.length; i++) {\n        if (!this[i].equals(obj[i])) return false\n    }\n    return true\n}\nArray.prototype.hashCode = function (): int {\n    let hashCode = 0\n    for (let i = 0; i < this.length; i++) {\n        hashCode = hashCode * 31 + this[i].hashCode() | 0\n    }\n    return hashCode | 0\n}\nArray.prototype.mapFilter = function (f) {\n    const length = this.length, result = []\n    for (let i = 0; i < length; i++) {\n        if (i in this) {\n            const val = f(this[i], i, this)\n            if (val) {\n                result.push(val)\n            }\n        }\n    }\n    return result\n}\nArray.prototype.flatMap = function (f) {\n    return Array.prototype.concat.apply([], this.map(f))\n}\nArray.prototype.clear = function (...newItems) {\n    return this.splice(0, this.length, ...newItems)\n}\n/**\n *\n * @returns Array.prototype.concat.apply([], this)\n */\nArray.prototype.concatenated = function () {\n    return Array.prototype.concat.apply([], this)\n}\nArray.prototype.min = function () {\n    let i = this.length, max = Infinity\n    while (i--) {\n        const val = this[i]\n        if (max > val) max = val\n    }\n    return max\n}\nArray.prototype.max = function () {\n    // faster and no limit on array size, see https://jsperf.com/math-max-apply-vs-loop/2\n    let i = this.length, max = -Infinity\n    while (i--) {\n        const val = this[i]\n        if (max < val) max = val\n    }\n    return max\n}\nArray.prototype.indexWithMax = function (f) {\n    if (this.length == 0) { return -1 }\n    let i = this.length, result = -1, maxVal = -Infinity\n    while (i--) {\n        const val = f(this[i], i, this)\n        if (val > maxVal) {\n            maxVal = val\n            result = i\n        }\n    }\n    return result\n}\nArray.prototype.withMax = function (f) {\n    let i = this.length, result = undefined, maxVal = -Infinity\n    while (i--) {\n        const el = this[i], val = f(el, i, this)\n        if (val > maxVal) {\n            maxVal = val\n            result = el\n        }\n    }\n    return result\n}\n\n/**\n Returns the sum of the absolute values of the components of this vector.\n E.g. V(1, -2, 3) === abs(1) + abs(-2) + abs(3) === 1 + 2 + 3 === 6\n */\nArray.prototype.absSum = function () {\n    let i = this.length\n    let result = 0\n    while (i--) {\n        result += Math.abs(this[i])\n    }\n    return result\n}\n\nArray.prototype.sum = function () {\n    let i = this.length\n    let result = 0\n    while (i--) {\n        result += this[i]\n    }\n    return result\n}\n\nArray.prototype.sumInPlaceTree = function () {\n    if (0 == this.length) return 0\n    let l = this.length\n    while (l != 1) {\n        const lHalfFloor = Math.floor(l / 2)\n        const lHalfCeil = Math.ceil(l / 2)\n        for (let i = 0; i < lHalfFloor; i++) {\n            this[i] += this[i + lHalfCeil]\n        }\n        l = lHalfCeil\n    }\n    return this[0]\n}\n\nArray.prototype.isEmpty = function () {\n    return 0 == this.length\n}\n\nArray.prototype.unique = function () {\n    const uniqueSet = new Set(this)\n    return Array.from(uniqueSet)\n}\n\nArray.prototype.remove = function (o) {\n    const index = this.indexOf(o)\n    if (index != -1) {\n        this.splice(index, 1)\n        return true\n    }\n    return false\n}\n\nArray.prototype.removeIndex = function (i) {\n    const result = this[i]\n    this.splice(i, 1)\n    return result\n}\nArray.prototype.bagRemoveIndex = function (i) {\n    const result = this[i]\n    if (i == this.length - 1) {\n        this.pop()\n    } else {\n        this[i] = this.pop()\n    }\n    return result\n}\n\nArray.prototype.removeMatch = function <T>(matcher: (el: T) => boolean) {\n    const index = this.findIndex(matcher)\n    if (-1 != index) {\n        return this.removeIndex(index)\n    }\n}\n\nArray.prototype.removeAll = function (o) {\n    let i = o.length\n    while (i--) {\n        this.remove(o[i])\n    }\n}\n\nArray.prototype.toggle = function (o) {\n    const index = this.indexOf(o)\n    if (index != -1) {\n        this.splice(index, 1)\n        return false\n    } else {\n        this.push(o)\n        return true\n    }\n}\nArray.prototype.bagToggle = function (o) {\n    const index = this.indexOf(o)\n    if (index != -1) {\n        this.bagRemoveIndex(index)\n        return false\n    } else {\n        this.push(o)\n        return true\n    }\n}\n\nArray.prototype.binaryIndexOf = function (searchElement, cmp = (a: any, b: any) => a - b) {\n\n    let minIndex = 0\n    let maxIndex = this.length - 1\n    let currentIndex\n    let currentElement\n\n    while (minIndex <= maxIndex) {\n        currentIndex = (minIndex + maxIndex) / 2 | 0\n        currentElement = this[currentIndex]\n\n        if (cmp(currentElement, searchElement) < 0) {\n            minIndex = currentIndex + 1\n        }\n        else if (cmp(currentElement, searchElement) > 0) {\n            maxIndex = currentIndex - 1\n        }\n        else {\n            return currentIndex\n        }\n    }\n\n    return -minIndex - 1\n}\n\nArray.prototype.binaryInsert = function (el: any, cmp = MINUS) {\n    let minIndex = 0\n    let maxIndex = this.length\n    let currentIndex\n    let currentElement\n\n    while (minIndex < maxIndex) {\n        currentIndex = ~~((minIndex + maxIndex) / 2)\n        currentElement = this[currentIndex]\n\n        if (cmp(currentElement, el) < 0) {\n            minIndex = currentIndex + 1\n        } else {\n            maxIndex = currentIndex\n        }\n    }\n\n    this.splice(minIndex, 0, el)\n}\nObject.defineProperty(Array.prototype, 'last', {\n    get() {\n        return this[this.length - 1]\n    },\n    set(val) {\n        this[this.length - 1] = val\n    },\n})\n\nString.prototype.capitalizeFirstLetter = function () {\n    return this.charAt(0).toUpperCase() + this.slice(1)\n}\nString.prototype.equals = function (x: any) {\n    return this == x\n}\n\nexport function SCE(o: any) {\n    switch (typeof o) {\n        case 'undefined':\n            return 'undefined'\n        case 'function':\n            return o.toString()\n        case 'number':\n            return '' + o\n        case 'string':\n            return JSON.stringify(o)\n        case 'object':\n            if (null == o) {\n                return 'null'\n            } else {\n                return o.sce\n            }\n        default:\n            throw new Error()\n    }\n}\nexport function STR(o: any) {\n    return o.str\n}\nObject.defineProperty(Object.prototype, 'sce', { get: function () { return this.toSource() } })\nObject.defineProperty(Object.prototype, 'str', { get: function () { return this.toString() } })\n\n\n//const NLA = {}\n//for (let key in ARRAY_UTILITIES) {\n//    const nlaName = 'array' + key.capitalizeFirstLetter()\n//    assert(!NLA[nlaName])\n//    NLA[nlaName] = (arr, ...rest) => ARRAY_UTILITIES[key].apply(arr, rest)\n//}\n\n\nexport function isCCW(vertices: V3[], normal: V3) {\n    const dsa = doubleSignedArea(vertices, normal)\n    assert(0 != dsa)\n    return dsa < 0\n}\nexport function doubleSignedArea(vertices: V3[], normal: V3) {\n    assert(!normal.likeO(), '!normal.likeO()')\n    const absMaxDim = normal.maxAbsDim()\n    // order is important, coord0 and coord1 must be set so that coord0, coord1 and maxDim span a right-hand coordinate\n    // system var [coord0, coord1] = [['y', 'z'], ['z', 'x'], ['x', 'y']][maxAbsDim]\n    const doubleSignedArea = vertices.map((v0, i, vertices) => {\n        const v1 = vertices[(i + 1) % vertices.length]\n        //return (v1[coord0] - v0[coord0]) * (v1[coord1] + v0[coord1])\n        switch (absMaxDim) {\n            case 0:\n                return (v1.y - v0.y) * (v1.z + v0.z)\n            case 1:\n                return (v1.z - v0.z) * (v1.x + v0.x)\n            case 2:\n                return (v1.x - v0.x) * (v1.y + v0.y)\n        }\n    }).reduce((a, b) => a + b)\n    return snap(doubleSignedArea * Math.sign(normal.e(absMaxDim)), 0)\n}\n\n/**\n * solves x² + px + q = 0\n */\nexport function pqFormula(p: number, q: number): number[] {\n    // 4 times the discriminant:in\n    const discriminantX4 = p * p / 4 - q\n    if (discriminantX4 < -NLA_PRECISION) {\n        return []\n    } else if (discriminantX4 <= NLA_PRECISION) {\n        return [-p / 2]\n    } else {\n        const root = Math.sqrt(discriminantX4)\n        return [-p / 2 - root, -p / 2 + root]\n    }\n}\n\n/**\n * from pomax' library\n * solves ax³ + bx² + cx + d = 0\n * This function from pomax' utils\n * @returns 0-3 roots\n */\nexport function solveCubicReal2(a: number, b: number, c: number, d: number): number[] {\n    if (eq0(a)) {\n        if (eq0(b)) {\n            return [-d / c]\n        } else {\n            return pqFormula(c / b, d / b)\n        }\n    }\n    const divisor = a\n    a = b / divisor\n    b = c / divisor\n    c = d / divisor\n    const p = (3 * b - a * a) / 3,\n        pDiv3 = p / 3,\n        pDiv3Pow3 = pDiv3 * pDiv3 * pDiv3,\n        q = (2 * a * a * a - 9 * a * b + 27 * c) / 27,\n        qDiv2 = q / 2,\n        discriminant = qDiv2 * qDiv2 + pDiv3Pow3\n    // 18abcd - 4b³d + b²c² - 4ac³ - 27a²d²\n    if (discriminant < -NLA_PRECISION / 8) {\n        const r = Math.sqrt(-pDiv3Pow3),\n            t = -q / (2 * r),\n            cosphi = t < -1 ? -1 : t > 1 ? 1 : t, // clamp t to [-1;1]\n            phi = Math.acos(cosphi),\n            t1 = 2 * Math.cbrt(r)\n        const x1 = t1 * Math.cos(phi / 3) - a / 3\n        const x2 = t1 * Math.cos((phi + 2 * Math.PI) / 3) - a / 3\n        const x3 = t1 * Math.cos((phi + 4 * Math.PI) / 3) - a / 3\n        return [x1, x2, x3]\n    } else if (discriminant <= NLA_PRECISION / 8) {\n        if (0 == qDiv2) {\n            // TODO: compare with likeO?\n            return [-a / 3]\n        }\n        const u1 = qDiv2 < 0 ? Math.cbrt(-qDiv2) : -Math.cbrt(qDiv2)\n        const x1 = 2 * u1 - a / 3\n        const x2 = -u1 - a / 3\n        return [x1, x2]\n    } else {\n        const sd = Math.sqrt(discriminant)\n        const u1 = Math.cbrt(-qDiv2 + sd)\n        const v1 = Math.cbrt(qDiv2 + sd)\n        return [u1 - v1 - a / 3]\n    }\n}\nexport function checkDerivate(f: (x: number) => number, df: (x: number) => number, a: number, b: number, maxFaults: int = 0) {\n    const eps = 1e-4\n    let faults = 0\n    for (let t = a; t < b; t += (b - a) / 100) {\n        const dfdt = df(t)\n        const df2 = (f(t + eps) - f(t)) / eps\n        assert((faults += +!eq2(df2, dfdt, 0.1)) <= maxFaults, `df2 == ${df2} != ${df(t)} = df(t)`)\n    }\n}\nexport function getRoots(f: (x: number) => number, a: number, b: number, stepSize: number, df: (x: number) => number): number[] {\n    const STEPS = (b - a) / stepSize\n    const results: number[] = []\n    for (let startT = a; startT <= b; startT += stepSize) {\n        const dt = stepSize * abs(df(startT))\n        if (abs(f(startT)) <= dt) {\n            //const t = newtonIterate1d(f, startT, 16)\n            let t = newtonIterateWithDerivative(f, startT, 16, df)\n            if (!eq0(f(t)) || eq0(df(t))) {\n                const a = startT - dt, b = startT + dt\n                t = newtonIterate1d(df, startT, 16)\n                //if (f(a) * f(b) < 0) {\n                //    t = bisect(f, a, b, 16)\n                //} else if (df(a) * df(b) < 0) {\n                //    t = bisect(df, a, b, 16)\n                //}\n            }\n            if (eq0(f(t)) && !results.some(r => eq(r, t))) {\n                results.push(t)\n            }\n        }\n    }\n    return results\n}\n\n//addOwnProperties(Array.prototype, ARRAY_UTILITIES)\nexport function bisect(f: (x: number) => number, a: number, b: number, steps: int) {\n    assert(a < b)\n    let fA = f(a), fB = f(b)\n    while (steps--) {\n        const c = (b + a) / 2\n        const fC = f(c)\n        if (sign(fA) == sign(fC)) {\n            a = c\n            fA = fC\n        } else {\n            b = c\n            fB = fC\n        }\n    }\n    assert(a <= (b + a) / 2)\n    assert(b >= (b + a) / 2)\n    return (b - a) / 2\n}\nexport function newtonIterate(f: (x: number[]) => number[], x: number[], steps: int = 4, EPSILON?: number) {\n    EPSILON = EPSILON || 1e-8\n\n    for (let i = 0; i < steps; i++) {\n        const fx = f(x)\n        const dfdx = Matrix.jacobi(f, x, fx, EPSILON)\n        assert(!dfdx.isZero())\n        const dx = dfdx.solveLinearSystem(new Vector(new Float64Array(fx))).v\n        assert(!isNaN(dx[0]))\n        //console.log('fx / dfdx', fx / dfdx)\n        for (let j = 0; j < x.length; j++) x[j] -= dx[j]\n    }\n    return x\n}\n\nexport function newtonIterate1d(\n    f: (x: number) => number, xStart: number, steps: number = 8, EPSILON: number = 1e-8): number {\n\n    let x = xStart\n\n    for (let i = 0; i < steps; i++) {\n        const fx = f(x)\n        const dfdx = (f(x + EPSILON) - fx) / EPSILON\n        //console.log('fx / dfdx', fx / dfdx)\n        x = x - fx / dfdx\n    }\n    return x\n}\nexport function newtonIterateWithDerivative(f: (x: number) => number, xStart: number, steps: number = 4, df: (x: number) => number) {\n    let x = xStart\n    for (let i = 0; i < steps; i++) {\n        const fx = f(x)\n        const dfdx = df(x)\n        if (isNaN(fx) || isNaN(dfdx)) {\n            console.log()\n            //console.log('fx / dfdx', fx / dfdx)\n        }\n        x = x - fx / dfdx\n        if (isNaN(fx)) {\n            console.log()\n            //console.log('fx / dfdx', fx / dfdx)\n        }\n    }\n    return x\n}\nexport function newtonIterateSmart(\n    f: (x: number) => number,\n    xStart: number,\n    steps: number = 4,\n    df: (x: number) => number,\n    mindf = 1e-6) {\n    let x = xStart\n    for (let i = 0; i < steps; i++) {\n        const fx = f(x)\n        const dfdx = df(x)\n        if (abs(dfdx) < mindf && abs(fx) < mindf) {\n            return newtonIterate1d(df, x)\n        }\n        if (isNaN(fx) || isNaN(dfdx)) {\n            console.log()\n            //console.log('fx / dfdx', fx / dfdx)\n        }\n        x = x - fx / dfdx\n        if (isNaN(fx)) {\n            console.log()\n            //console.log('fx / dfdx', fx / dfdx)\n        }\n    }\n    return x\n}\nexport function newtonIterate2d(\n    f1: (s: number, t: number) => number,\n    f2: (s: number, t: number) => number,\n    sStart: number,\n    tStart: number,\n    steps?: number): V3 | undefined {\n    const EPSILON = 1e-6\n    steps = steps || 4\n    let s = sStart, t = tStart, f1ts, f2ts\n    do {\n        /*\n         | a b |-1                   |  d -b |\n         | c d |   = 1 / (ad - bc) * | -c  a |\n         */\n        f1ts = f1(s, t)\n        f2ts = f2(s, t)\n        /*\n         let df1s = (f1(s + EPSILON, t) - f1ts) / EPSILON, df1t = (f1(s, t + EPSILON) - f1ts) / EPSILON,\n         df2s = (f2(s + EPSILON, t) - f2ts) / EPSILON, df2t = (f2(s, t + EPSILON) - f2ts) / EPSILON\n         let det = df1s * df2t - df1t * df2s\n         s = s - ( df2t * f1ts - df1t * f2ts) / det\n         t = t - (-df2s * f1ts + df1s * f2ts) / det\n         */\n        // TODO: is this even more accurate?\n        const df1s = (f1(s + EPSILON, t) - f1ts), df1t = (f1(s, t + EPSILON) - f1ts),\n            df2s = (f2(s + EPSILON, t) - f2ts), df2t = (f2(s, t + EPSILON) - f2ts)\n        const det = (df1s * df2t - df1t * df2s) / EPSILON\n        const ds = (df2t * f1ts - df1t * f2ts) / det\n        const dt = (-df2s * f1ts + df1s * f2ts) / det\n        s -= ds\n        t -= dt\n    } while (--steps && f1ts * f1ts + f2ts * f2ts > NLA_PRECISION)\n    if (!steps) {\n        //console.log(f1ts * f1ts + f2ts * f2ts)\n        return undefined\n    }\n    return new V3(s, t, 0)\n}\nexport function newtonIterate2dWithDerivatives(f: (s: number, t: number) => number,\n    g: (s: number, t: number) => number,\n    sStart: number, tStart: number, steps: int,\n    dfds: (s: number, t: number) => number,\n    dfdt: (s: number, t: number) => number,\n    dgds: (s: number, t: number) => number,\n    dgdt: (s: number, t: number) => number): V3 | undefined {\n    steps = steps || 4\n    let s = sStart, t = tStart\n    const eps = 1e-6\n    let f1ts, f2ts\n    do {\n        /*\n         | a b |-1                   |  d -b |\n         | c d |   = 1 / (ad - bc) * | -c  a |\n         */\n        f1ts = f(s, t)\n        f2ts = g(s, t)\n        const df1s = dfds(s, t), df1t = dfdt(s, t),\n            df2s = dgds(s, t), df2t = dgdt(s, t)\n        // TODO: is this even more accurate?\n        const det = df1s * df2t - df1t * df2s\n        const ds = (df2t * f1ts - df1t * f2ts) / det\n        const dt = (-df2s * f1ts + df1s * f2ts) / det\n        s -= ds\n        t -= dt\n    } while (--steps && f1ts * f1ts + f2ts * f2ts > NLA_PRECISION / 32)\n    if (!steps) {\n        //console.log(f1ts * f1ts + f2ts * f2ts)\n        return undefined\n    }\n    return V(s, t, 0)\n}\n\n\nexport const gaussLegendre24Xs = [\n    -0.0640568928626056260850430826247450385909,\n    0.0640568928626056260850430826247450385909,\n    -0.1911188674736163091586398207570696318404,\n    0.1911188674736163091586398207570696318404,\n    -0.3150426796961633743867932913198102407864,\n    0.3150426796961633743867932913198102407864,\n    -0.4337935076260451384870842319133497124524,\n    0.4337935076260451384870842319133497124524,\n    -0.5454214713888395356583756172183723700107,\n    0.5454214713888395356583756172183723700107,\n    -0.6480936519369755692524957869107476266696,\n    0.6480936519369755692524957869107476266696,\n    -0.7401241915785543642438281030999784255232,\n    0.7401241915785543642438281030999784255232,\n    -0.8200019859739029219539498726697452080761,\n    0.8200019859739029219539498726697452080761,\n    -0.8864155270044010342131543419821967550873,\n    0.8864155270044010342131543419821967550873,\n    -0.9382745520027327585236490017087214496548,\n    0.9382745520027327585236490017087214496548,\n    -0.9747285559713094981983919930081690617411,\n    0.9747285559713094981983919930081690617411,\n    -0.9951872199970213601799974097007368118745,\n    0.9951872199970213601799974097007368118745,\n]\nexport const gaussLegendre24Weights = [\n    0.1279381953467521569740561652246953718517,\n    0.1279381953467521569740561652246953718517,\n    0.1258374563468282961213753825111836887264,\n    0.1258374563468282961213753825111836887264,\n    0.1216704729278033912044631534762624256070,\n    0.1216704729278033912044631534762624256070,\n    0.1155056680537256013533444839067835598622,\n    0.1155056680537256013533444839067835598622,\n    0.1074442701159656347825773424466062227946,\n    0.1074442701159656347825773424466062227946,\n    0.0976186521041138882698806644642471544279,\n    0.0976186521041138882698806644642471544279,\n    0.0861901615319532759171852029837426671850,\n    0.0861901615319532759171852029837426671850,\n    0.0733464814110803057340336152531165181193,\n    0.0733464814110803057340336152531165181193,\n    0.0592985849154367807463677585001085845412,\n    0.0592985849154367807463677585001085845412,\n    0.0442774388174198061686027482113382288593,\n    0.0442774388174198061686027482113382288593,\n    0.0285313886289336631813078159518782864491,\n    0.0285313886289336631813078159518782864491,\n    0.0123412297999871995468056670700372915759,\n    0.0123412297999871995468056670700372915759,\n]\nexport function gaussLegendreQuadrature24(f: (x: number) => number, startT: number, endT: number): number {\n    //let result = 0\n    //for (let i = 0; i < gaussLegendre24Xs.length; i++) {\n    //\t// gauss-legendre goes from -1 to 1, so we need to scale\n    //\tlet t = startT + (gaussLegendre24Xs[i] + 1) / 2 * (endT - startT)\n    //\tresult += gaussLegendre24Weights[i] * f(t)\n    //}\n    //const result = NLA\n    //\t\t.arrayFromFunction(24, i => startT + (gaussLegendre24Xs[i] + 1) / 2 * (endT - startT))\n    //\t\t.map((t, i) => gaussLegendre24Weights[i] * f(t))\n    //\t\t.sumInPlaceTree()\n    //99.54182500782605\n    //99.54182500782602\n    // again, [-1,1], so div by 2\n    //return result // 2 * (endT - startT)\n\n\n    return glq24_11(t => f(startT + (t + 1) / 2 * (endT - startT))) / 2 * (endT - startT)\n}\nexport function glq24_11(f: (x: number) => number): number {\n    return arrayFromFunction(24, i => gaussLegendre24Weights[i] * f(gaussLegendre24Xs[i])).sumInPlaceTree()\n}\nexport function glqInSteps(f: (x: number) => number, startT: number, endT: number, steps: int) {\n    const dt = (endT - startT) / steps\n    return arrayFromFunction(steps, i => glq24_11(t => f(startT + dt * i + (t + 1) / 2 * dt))).sumInPlaceTree() / 2 * dt\n}\n\nexport function midpointRuleQuadrature(f: (x: number) => number, startT: number, endT: number, steps: int = 32): number {\n    const dt = (endT - startT) / steps\n    return arrayFromFunction(steps, i => startT + dt / 2 + dt * i).map(f).sumInPlaceTree() * dt\n}\n\nexport function callsce(name: string, ...params: any[]) {\n    return name + '(' + params.map(SCE).join(',') + ')'\n}\n","import {Equalable, JavaMap as CustomMap} from 'javasetmap.ts'\nimport {\n\tassert, assertf, assertInst, assertNumbers, assertVectors, defaultRoundFunction, eq, eq0, eq2, FloatArray, int,\n\tNLA_PRECISION, raddd,\n} from './NLA'\n\n/**\n * Immutable 3d-vector/point.\n */\nexport class V3 implements Equalable {\n\tstatic readonly O: V3 = new V3(0, 0, 0)\n\tstatic readonly X: V3 = new V3(1, 0, 0)\n\tstatic readonly Y: V3 = new V3(0, 1, 0)\n\tstatic readonly Z: V3 = new V3(0, 0, 1)\n\tstatic readonly XY: V3 = new V3(1, 1, 0)\n\tstatic readonly XYZ: V3 = new V3(1, 1, 1)\n\tstatic readonly INF: V3 = new V3(Infinity, Infinity, Infinity)\n\tstatic readonly UNITS: V3[] = [V3.X, V3.Y, V3.Z]\n\tstatic readonly NAMEMAP = new CustomMap<V3, string>()\n\t\t.set(V3.O, 'V3.O')\n\t\t.set(V3.X, 'V3.X')\n\t\t.set(V3.Y, 'V3.Y')\n\t\t.set(V3.Z, 'V3.Z')\n\t\t.set(V3.XYZ, 'V3.XYZ')\n\t\t.set(V3.INF, 'V3.INF')\n\n\tconstructor(readonly x: number,\n\t\t\t\treadonly y: number,\n\t\t\t\treadonly z: number) {\n\t\tassertNumbers(x, y, z)\n\t}\n\n    get [0]() {\n        return this.x\n    }\n    get [1]() {\n        return this.y\n    }\n    get [2]() {\n        return this.z\n    }\n\n\tstatic random(): V3 {\n\t\treturn new V3(Math.random(), Math.random(), Math.random())\n\t}\n\n\tstatic parallel(a: V3, b: V3) {\n\t\treturn a.dot(b) - a.length() * b.length()\n\t}\n\n\t/**\n\t * See http://math.stackexchange.com/questions/44689/how-to-find-a-random-axis-or-unit-vector-in-3d\n\t * @returns A random point on the unit sphere with uniform distribution across the surface.\n\t */\n\tstatic randomUnit(): V3 {\n\t\tconst zRotation = Math.random() * 2 * Math.PI\n\t\tconst z = Math.random() * 2 - 1\n\t\tconst zRadius = Math.sqrt(1 - z ** 2)\n\t\treturn new V3(zRadius * Math.cos(zRotation), zRadius * Math.sin(zRotation), z)\n\t}\n\n\t//noinspection JSUnusedLocalSymbols\n\t/**\n\t * Documentation stub. You want {@see V3#sphere}\n\t */\n\tstatic fromAngles(theta: number, phi: number): V3 {\n\t\tthrow new Error()\n\t}\n\n\tstatic fromFunction(f: (dim: number) => number) {\n\t\treturn new V3(f(0), f(1), f(2))\n\t}\n\n\tstatic min(a: V3, b: V3): V3 {\n\t\treturn new V3(Math.min(a.x, b.x), Math.min(a.y, b.y), Math.min(a.z, b.z))\n\t}\n\n\tstatic max(a: V3, b: V3): V3 {\n\t\treturn new V3(Math.max(a.x, b.x), Math.max(a.y, b.y), Math.max(a.z, b.z))\n\t}\n\n\tstatic lerp(a: V3, b: V3, fraction: number): V3 {\n\t\treturn b.minus(a).times(fraction).plus(a)\n\t}\n\n\tstatic fromArray(a: number[]): V3 {\n\t\treturn new V3(a[0], a[1], a[2])\n\t}\n\n\tstatic angleBetween(a: V3, b: V3): number {\n\t\treturn a.angleTo(b)\n\t}\n\n\tstatic zip(f: (...args: number[]) => number, ...args: V3[]): V3 {\n\t\tassert(f instanceof Function)\n\t\treturn new V3(\n\t\t\tf.apply(undefined, args.map(x => x.x)),\n\t\t\tf.apply(undefined, args.map(x => x.y)),\n\t\t\tf.apply(undefined, args.map(x => x.z)))\n\t}\n\n\tstatic normalOnPoints(a: V3, b: V3, c: V3): V3 {\n\t\tassertVectors(a, b, c)\n\t\treturn a.to(b).cross(a.to(c))\n\t}\n\n\tstatic add(...vs: V3[]): V3 {\n\t\tassertVectors.apply(undefined, vs)\n\t\tlet x = 0, y = 0, z = 0\n\t\tlet i = vs.length\n\t\twhile (i--) {\n\t\t\tx += vs[i].x\n\t\t\ty += vs[i].y\n\t\t\tz += vs[i].z\n\t\t}\n\t\treturn new V3(x, y, z)\n\t}\n\n\tstatic sub(...vs: V3[]): V3 {\n\t\tassertVectors.apply(undefined, vs)\n\t\tlet x = vs[0].x, y = vs[0].y, z = vs[0].z\n\t\tlet i = vs.length\n\t\twhile (i--) {\n\t\t\tx -= vs[i].x\n\t\t\ty -= vs[i].y\n\t\t\tz -= vs[i].z\n\t\t}\n\t\treturn new V3(x, y, z)\n\t}\n\n\t/**\n\t * Pack an array of V3s into an array of numbers (Float32Array by default).\n\t *\n\t * @param v3arr source array\n\t * @param dest destination array. If provided, must be large enough to fit v3count items.\n\t * @param srcStart starting index in source array\n\t * @param destStart starting index in destination array\n\t * @param v3count Number of V3s to copy.\n\t * @returns Packed array.\n\t */\n\tstatic pack<T extends FloatArray = Float32Array>(v3arr: V3[],\n\t\t\t\t\t\t\t\t\t\t\t\t\t dest?: T,\n\t\t\t\t\t\t\t\t\t\t\t\t\t srcStart: number = 0,\n\t\t\t\t\t\t\t\t\t\t\t\t\t destStart: number = 0,\n\t\t\t\t\t\t\t\t\t\t\t\t\t v3count: number = v3arr.length - srcStart,) {\n\t\t//assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')\n\t\tconst result = dest || new Float32Array(3 * v3count) as any // TODO\n\t\tassert(result.length - destStart >= v3count * 3, 'dest.length - destStart >= v3count * 3', result.length, destStart, v3count * 3)\n\n\t\tlet i = v3count, srcIndex = srcStart, destIndex = destStart\n\t\twhile (i--) {\n\t\t\tconst v = v3arr[srcIndex++]\n\t\t\tresult[destIndex++] = v.x\n\t\t\tresult[destIndex++] = v.y\n\t\t\tresult[destIndex++] = v.z\n\t\t}\n\t\treturn result\n\t}\n\n\tstatic unpack(packedArray: FloatArray,\n\t\t\t\t  dest?: V3[],\n\t\t\t\t  srcStart: number = 0,\n\t\t\t\t  destStart: number = 0,\n\t\t\t\t  v3count: number = (packedArray.length - srcStart) / 3,) {\n\t\t//assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')\n\t\tconst result = dest || new Array(v3count)\n\t\tassert(result.length - destStart >= v3count, 'dest.length - destStart >= v3count')\n\n\t\tlet i = v3count, srcIndex = srcStart, destIndex = destStart\n\t\twhile (i--) {\n\t\t\tresult[destIndex++] = new V3(packedArray[srcIndex++], packedArray[srcIndex++], packedArray[srcIndex++])\n\t\t}\n\t\treturn result\n\t}\n\n\tstatic packXY<T extends FloatArray = Float32Array>(v3arr: V3[],\n\t\t\t\t\t\t\t\t\t\t\t\t\t   dest?: T,\n\t\t\t\t\t\t\t\t\t\t\t\t\t   srcStart: number = 0,\n\t\t\t\t\t\t\t\t\t\t\t\t\t   destStart: number = 0,\n\t\t\t\t\t\t\t\t\t\t\t\t\t   v3count: number = v3arr.length - srcStart): T {\n\t\t//assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')\n\t\tconst result = dest || new Float32Array(2 * v3count) as any\n\t\tassert(result.length - destStart >= v3count, 'dest.length - destStart >= v3count')\n\n\t\tlet i = v3count, srcIndex = srcStart, destIndex = destStart\n\t\twhile (i--) {\n\t\t\tconst v = v3arr[srcIndex++]\n\t\t\tresult[destIndex++] = v.x\n\t\t\tresult[destIndex++] = v.y\n\t\t}\n\t\treturn result\n\t}\n\n\tstatic unpackXY(src: FloatArray,\n\t\t\t\t\tdest?: V3[],\n\t\t\t\t\tsrcStart: int = 0,\n\t\t\t\t\tdestStart: int = 0,\n\t\t\t\t\tv3count: int = Math.min(src.length / 2, dest && dest.length || Infinity) - destStart): V3[] {\n\t\t//assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')\n\t\tdest = dest || new Array(v3count)\n\t\tassert(dest.length - destStart >= v3count, 'dest.length - destStart >= v3count')\n\t\tassert(src.length - srcStart >= v3count * 2, 'dest.length - destStart >= v3count')\n\n\t\tlet i = v3count, srcIndex = srcStart, destIndex = destStart\n\t\twhile (i--) {\n\t\t\tdest[destIndex++] = new V3(src[srcIndex++], src[srcIndex++], 0)\n\t\t}\n\t\treturn dest\n\t}\n\n\tstatic perturbed(v: V3, delta?: number): V3 {\n\t\treturn v.perturbed(delta)\n\t}\n\n\tstatic polar(radius: number, phi: raddd, z: number = 0): V3 {\n\t\treturn new V3(radius * Math.cos(phi), radius * Math.sin(phi), z)\n\t}\n\n\t/**\n\t *\n\t * @param longitude angle in XY plane\n\t * @param latitude \"height\"/z dir angle\n\t */\n\tstatic sphere(longitude: raddd, latitude: raddd, length = 1): V3 {\n\t\treturn new V3(\n\t\t\tlength * Math.cos(latitude) * Math.cos(longitude),\n\t\t\tlength * Math.cos(latitude) * Math.sin(longitude),\n\t\t\tlength * Math.sin(latitude))\n\t}\n\n\tstatic inverseLerp(a: V3, b: V3, x: V3) {\n\t\tconst ab = a.to(b)\n\t\treturn a.to(x).dot(ab) / ab.squared()\n\t}\n\n\tperturbed(delta: number = NLA_PRECISION * 0.8): V3 {\n\t\treturn this.map(x => x + (Math.random() - 0.5) * delta)\n\t}\n\n\t* [Symbol.iterator]() {\n\t\tyield this.x\n\t\tyield this.y\n\t\tyield this.z\n\t}\n\n\te(index: int): number {\n\t\tassert(index >= 0 && index < 3)\n\t\treturn 0 == index ? this.x : (1 == index ? this.y : this.z)\n\t}\n\n\tnegated(): V3 {\n\t\treturn new V3(-this.x, -this.y, -this.z)\n\t}\n\n\tabs(): V3 {\n\t\treturn new V3(Math.abs(this.x), Math.abs(this.y), Math.abs(this.z))\n\t}\n\n\tplus(a: V3): V3 {\n\t\tassertVectors(a)\n\t\treturn new V3(this.x + a.x, this.y + a.y, this.z + a.z)\n\t}\n\n\t/**\n\t * Hadarmard product (or Schur product)\n\t * Element-wise multiplication of two vectors.\n\t * @see https://en.wikipedia.org/wiki/Hadamard_product_(matrices)\n\t *\n\t */\n\tschur(a: V3): V3 {\n\t\treturn new V3(this.x * a.x, this.y * a.y, this.z * a.z)\n\t}\n\n\t/**\n\t * Element-wise division.\n\t */\n\tdivv(a: V3): V3 {\n\t\treturn new V3(this.x / a.x, this.y / a.y, this.z / a.z)\n\t}\n\n\t/**\n\t * See also {@link to} which is a.minus(this)\n\t */\n\tminus(a: V3): V3 {\n\t\tassertVectors(a)\n\t\treturn new V3(this.x - a.x, this.y - a.y, this.z - a.z)\n\t}\n\n\tto(a: V3): V3 {\n\t\tassertVectors(a)\n\t\treturn a.minus(this)\n\t}\n\n\ttimes(factor: number): V3 {\n\t\tassertNumbers(factor)\n\t\treturn new V3(this.x * factor, this.y * factor, this.z * factor)\n\t}\n\n\tdiv(a: number): V3 {\n\t\tassertNumbers(a)\n\t\treturn new V3(this.x / a, this.y / a, this.z / a)\n\t}\n\n\t/**\n\t * Dot product.\n\t * @see https://en.wikipedia.org/wiki/Dot_product\n\t */\n\tdot(a: V3): number {\n\t\tassertInst(V3, a)\n\t\treturn this.x * a.x + this.y * a.y + this.z * a.z\n\t}\n\n\t/**\n\t * Linearly interpolate\n\t */\n\tlerp(b: V3, t: number): V3 {\n\t\tassertVectors(b)\n\t\tassertNumbers(t)\n\t\treturn this.plus(b.minus(this).times(t))\n\t}\n\n\tsquared(): number {\n\t\treturn this.dot(this)\n\t}\n\n\tdistanceTo(a: V3): number {\n\t\tassertVectors(a)\n\t\t//return this.minus(a).length()\n\t\treturn Math.hypot(this.x - a.x, this.y - a.y, this.z - a.z)\n\t}\n\n\tdistanceToSquared(a: V3): number {\n\t\tassertVectors(a)\n\t\treturn this.minus(a).squared()\n\t}\n\n\t///**\n\t// * See also {@see #setTo} for the individual\n\t// *\n\t// * @param v\n\t// */\n\t//assign(v) {\n\t//\tassertVectors(v)\n\t//\tthis.x = v.x\n\t//\tthis.y = v.y\n\t//\tthis.z = v.z\n\t//}\n\t//\n\t///**\n\t// * See also {@see #assign} for the V3 version\n\t// *\n\t// * @param x\n\t// * @param y\n\t// * @param z\n\t// */\n\t//setTo(x, y, z = 0) {\n\t//\tthis.x = x\n\t//\tthis.y = y\n\t//\tthis.z = z\n\t//}\n\n\ttoSource(): string {\n\t\treturn V3.NAMEMAP.get(this) || this.toString()\n\t}\n\n\tnonParallelVector(): V3 {\n\t\tconst abs = this.abs()\n\t\tif ((abs.x <= abs.y) && (abs.x <= abs.z)) {\n\t\t\treturn V3.X\n\t\t}\n\t\telse if ((abs.y <= abs.x) && (abs.y <= abs.z)) {\n\t\t\treturn V3.Y\n\t\t}\n\t\telse {\n\t\t\treturn V3.Z\n\t\t}\n\t}\n\n\tslerp(b: V3, t: number): V3 {\n\t\tassertVectors(b)\n\t\tassertNumbers(t)\n\t\tconst sin = Math.sin\n\t\tconst omega = this.angleTo(b)\n\t\treturn this.times(sin((1 - t) * omega) / sin(omega)).plus(b.times(sin(t * omega) / sin(omega)))\n\t}\n\n\tmin(b: V3): V3 {\n\t\treturn new V3(Math.min(this.x, b.x), Math.min(this.y, b.y), Math.min(this.z, b.z))\n\t}\n\n\tmax(b: V3): V3 {\n\t\treturn new V3(Math.max(this.x, b.x), Math.max(this.y, b.y), Math.max(this.z, b.z))\n\t}\n\n\tequals(v: any): boolean {\n\t\treturn this == v || this.x == v.x && this.y == v.y && this.z == v.z\n\t}\n\n\t/**\n\t *\n\t * The cross product is defined as:\n\t * a x b = |a| * |b| * sin(phi) * n\n\t * where |.| is the euclidean norm, phi is the angle between the vectors\n\t * and n is a unit vector perpendicular to both a and b.\n\t *\n\t * The cross product is zero for parallel vectors.\n\t * @see https://en.wikipedia.org/wiki/Cross_product\n\t */\n\tcross(v: V3): V3 {\n\t\treturn new V3(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x)\n\t}\n\n\t//noinspection JSMethodCanBeStatic\n\t/**\n\t * Documentation stub. You want {@link unit}\n\t */\n\tnormalized(): V3 { throw new Error('documentation stub. use .unit()') }\n\n\tminElement(): number {\n\t\treturn Math.min(this.x, this.y, this.z)\n\t}\n\n\tmaxElement(): number {\n\t\treturn Math.max(this.x, this.y, this.z)\n\t}\n\n\ttoArray(n: int = 3): number[] {\n\t\treturn [this.x, this.y, this.z].slice(0, n)\n\t}\n\n\t/**\n\t * Get a perpendicular vector.\n\t * For vectors in the XY-Plane, returns vector rotated 90° CCW.\n\t */\n\tgetPerpendicular(): V3 {\n\t\tif (eq0(this.x) && eq0(this.y)) {\n\t\t\tif (eq0(this.z)) {\n\t\t\t\tthrow new Error('zero vector')\n\t\t\t}\n\t\t\t// v is Vector(0, 0, v.z)\n\t\t\treturn V3.Y\n\t\t}\n\t\treturn new V3(-this.y, this.x, 0)\n\t}\n\n\t//noinspection JSMethodCanBeStatic\n\tdim(): int {\n\t\treturn 3\n\t}\n\n\tels(): number[] {\n\t\treturn [this.x, this.y, this.z]\n\t}\n\n\tangleXY(): number {\n\t\treturn Math.atan2(this.y, this.x)\n\t}\n\n\tlengthXY(): number {\n\t\treturn Math.hypot(this.x, this.y)\n\t\t//return Math.sqrt(this.x * this.x + this.y * this.y)\n\t}\n\n\tsquaredXY(): number {\n\t\treturn this.x * this.x + this.y * this.y\n\t}\n\n\txy(): V3 {\n\t\treturn new V3(this.x, this.y, 0)\n\t}\n\n\t/**\n\t * Transform this vector element-wise by way of function f. Returns V3(f(x), f(y), f(z))\n\t * @param f function to apply to elements (number -> number)\n\t */\n\tmap(f: (el: number, dim: 'x' | 'y' | 'z') => number): V3 {\n\t\treturn new V3(f(this.x, 'x'), f(this.y, 'y'), f(this.z, 'z'))\n\t}\n\n\ttoString(roundFunction?: (x: number) => any): string {\n\t\troundFunction = roundFunction || defaultRoundFunction\n\t\treturn V3.NAMEMAP.get(this) ||\n\t\t\t'V(' + [this.x, this.y, this.z].map(roundFunction).join(', ') + ')' //+ this.id\n\t}\n\n\tangleTo(b: V3): number {\n\t\tassert(1 == arguments.length)\n\t\tassertVectors(b)\n\t\tassert(!this.likeO())\n\t\tassert(!b.likeO())\n\t\treturn Math.acos(Math.min(1, this.dot(b) / this.length() / b.length()))\n\t}\n\n\t/**\n\t *\n\t * phi = angle between A and B\n\t * alpha = angle between n and normal1\n\t *\n\t * A . B = ||A|| * ||B|| * cos(phi)\n\t * A x B = ||A|| * ||B|| * sin(phi) * n (n = unit vector perpendicular)\n\t * (A x B) . normal1 = ||A|| * ||B|| * sin(phi) * cos(alpha)\n\t */\n\tangleRelativeNormal(vector: V3, normal1: V3): number {\n\t\tassert(2 == arguments.length)\n\t\tassertVectors(vector, normal1)\n\t\tassertf(() => normal1.hasLength(1))\n\t\t//assert(vector.isPerpendicularTo(normal1), 'vector.isPerpendicularTo(normal1)' + vector.sce + normal1.sce)\n\t\t//assert(this.isPerpendicularTo(normal1), 'this.isPerpendicularTo(normal1)' + this.dot(vector)) //\n\t\t// -0.000053600770598683675\n\t\treturn Math.atan2(this.cross(vector).dot(normal1), this.dot(vector))\n\t}\n\n\t/**\n\t Returns true iff this is parallel to vector, i.e. this * s == vector, where s is a pos or neg number, using equals\n\t Throw a DebugError\n\t if vector is not a Vector or\n\t if this has a length of 0 or\n\t if vector has a length of 0\n\t */\n\tisParallelTo(vector: V3): boolean {\n\t\tassertVectors(vector)\n\t\tassert(!this.likeO())\n\t\tassert(!vector.likeO())\n\t\t// a . b takes on values of +|a|*|b| (vectors same direction) to -|a|*|b| (opposite direction)\n\t\t// in both cases the vectors are parallel, so check if abs(a . b) == |a|*|b|\n\t\tconst dot = this.dot(vector)\n\t\treturn eq(this.squared() * vector.squared(), dot * dot)\n\t}\n\n\tisPerpendicularTo(vector: V3): boolean {\n\t\tassertVectors(vector)\n\t\tassert(!this.likeO(), '!this.likeO()')\n\t\tassert(!vector.likeO(), '!vector.likeO()')\n\t\treturn eq0(this.dot(vector))\n\t}\n\n\tisReverseDirTo(other: V3): boolean {\n\t\tassertVectors(other)\n\t\tassert(!this.likeO())\n\t\tassert(!other.likeO())\n\t\t// a . b takes on values of +|a|*|b| (vectors same direction) to -|a|*|b| (opposite direction)\n\t\t// in both cases the vectors are parallel, so check if abs(a . b) == |a|*|b|\n\t\tconst dot = this.dot(other)\n\t\treturn eq(Math.sqrt(this.squared() * other.squared()), dot)\n\t}\n\n\t/**\n\t * Returns the length of this Vector, i.e. the euclidean norm.\n\t *\n\t * Note that the partial derivatives of the euclidean norm at point x are equal to the\n\t * components of the unit vector x.\n\t */\n\tlength(): number {\n\t\treturn Math.hypot(this.x, this.y, this.z)\n\t\t//return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)\n\t}\n\n\t/**\n\t * Definition: V3.likeO == V3.like(V3.O)\n\t */\n\tlikeO(): boolean {\n\t\treturn this.like(V3.O)\n\t}\n\n\tlike(obj: any): boolean {\n\t\tif (obj === this)\n\t\t\treturn true\n\t\tif (!(obj instanceof V3))\n\t\t\treturn false\n\t\treturn eq(this.x, obj.x) && eq(this.y, obj.y) && eq(this.z, obj.z)\n\t}\n\n\t/**\n\t * equivalent to this.like(v) || this.negated().like(v)\n\t */\n\tlikeOrReversed(v: V3): boolean {\n\t\treturn eq(Math.abs(this.dot(v)), Math.sqrt(this.squared() * v.squared()))\n\t}\n\n\t/**\n\t * Returns a new unit Vector (.length() === 1) with the same direction as this vector. Throws a\n\t * DebugError if this has a length of 0.\n\t */\n\tunit(): V3 {\n\t\tassert(!this.likeO(), 'cannot normalize zero vector')\n\t\treturn this.div(this.length())\n\t}\n\n\t/**\n\t * Returns a new V3 equal to this scaled so that its length is equal to newLength.\n\t *\n\t * Passing a negative newLength will flip the vector.\n\t */\n\ttoLength(newLength: number): V3 {\n\t\tassertNumbers(newLength)\n\t\treturn this.times(newLength / this.length())\n\t}\n\n\t/**\n\t Returns a new Vector which is the projection of this vector onto the passed vector.\n\t Examples\n\t V(3, 4).projectedOn(V(1, 0)) // returns V(3, 0)\n\t V(3, 4).projectedOn(V(2, 0)) // returns V(3, 0)\n\t V(3, 4).projectedOn(V(-1, 0)) // returns V(-3, 0)\n\t V(3, 4).projectedOn(V(0, 1)) // returns V(0, 4)\n\t V(3, 4).projectedOn(V(1, 1)) // returns\n\t */\n\tprojectedOn(b: V3): V3 {\n\t\tassertVectors(b)\n\t\t// https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2\n\t\treturn b.times(this.dot(b) / b.dot(b))\n\t}\n\n\trejectedFrom(b: V3): V3 {\n\t\tassertVectors(b)\n\t\t// https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2\n\t\treturn this.minus(b.times(this.dot(b) / b.dot(b)))\n\t}\n\n\trejectedFrom1(b1: V3): V3 {\n\t\tassertVectors(b1)\n\t\tassert(b1.hasLength(1))\n\t\t// https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2\n\t\treturn this.minus(b1.times(this.dot(b1)))\n\t}\n\n\t/**\n\t * Returns the length of this vector rejected from the unit vector b.\n\t *\n\t *       /|\n\t * this / |    ^\n\t *     /__|    | b\n\t *      r\n\t *  Returns length of r (r === this.rejectedFrom(b))\n\t */\n\trejectedLength(b: V3): number {\n\t\tassertVectors(b)\n\t\treturn Math.sqrt(this.dot(this) - this.dot(b) ** 2 / b.dot(b))\n\t}\n\n\t/**\n\t * Returns the length of this vector rejected from the unit vector b1.\n\t *\n\t *       /|\n\t * this / |    ^\n\t *     /__|    | b1\n\t *      r\n\t *  Returns length of r (r === this.rejectedFrom(b1))\n\t */\n\trejected1Length(b1: V3): number {\n\t\tassertVectors(b1)\n\t\tassert(b1.hasLength(1))\n\t\treturn Math.sqrt(this.dot(this) - this.dot(b1) ** 2)\n\t}\n\n\t/**\n\t Returns true iff the length() of this vector is equal to 'length', using eq\n\t E.g. V(3, 4).hasLength(5) === true\n\t V(1, 1).hasLength(1) === false\n\t */\n\thasLength(length: number): boolean {\n\t\tassertNumbers(length)\n\t\treturn eq(length, this.length())\n\t}\n\n\t/**\n\t Returns the sum of the absolute values of the components of this vector.\n\t E.g. V(1, -2, 3) === abs(1) + abs(-2) + abs(3) === 1 + 2 + 3 === 6\n\t */\n\tabsSum(): number {\n\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z)\n\t}\n\n\t/**\n\t * returns max(|x|, |y|, |z|)\n\t */\n\tmaxAbsElement(): number {\n\t\treturn Math.max(Math.abs(this.x), Math.abs(this.y), Math.abs(this.z))\n\t}\n\n\t/**\n\t * returns min(|x|, |y|, |z|)\n\t */\n\tminAbsElement(): number {\n\t\treturn Math.min(Math.abs(this.x), Math.abs(this.y), Math.min(this.z))\n\t}\n\n\tmaxAbsDim(): 0 | 1 | 2 {\n\t\tconst xAbs = Math.abs(this.x), yAbs = Math.abs(this.y), zAbs = Math.abs(this.z)\n\t\treturn xAbs >= yAbs ? (xAbs >= zAbs ? 0 : 2) : (yAbs >= zAbs ? 1 : 2)\n\t}\n\n\tminAbsDim(): 0 | 1 | 2 {\n\t\tconst xAbs = Math.abs(this.x), yAbs = Math.abs(this.y), zAbs = Math.abs(this.z)\n\t\treturn xAbs < yAbs ? (xAbs < zAbs ? 0 : 2) : (yAbs < zAbs ? 1 : 2)\n\t}\n\n\twithElement(dim: 'x' | 'y' | 'z', el: number) {\n\t\tassert(['x', 'y', 'z'].includes(dim), '' + dim)\n\t\tassertNumbers(el)\n\t\tif ('x' == dim) {\n\t\t\treturn new V3(el, this.y, this.z)\n\t\t}\n\t\tif ('y' == dim) {\n\t\t\treturn new V3(this.x, el, this.z)\n\t\t}\n\t\treturn new V3(this.x, this.y, el)\n\t}\n\n\thashCode(): int {\n\t\tfunction floatHashCode(f: number) {\n\t\t\treturn ~~(f * (1 << 28))\n\t\t}\n\n\t\treturn ~~((floatHashCode(this.x) * 31 + floatHashCode(this.y)) * 31 + floatHashCode(this.z))\n\t}\n\n\thashCodes() {\n\t\t//function floatHashCode(f) {\n\t\t//\treturn ~~(f * (1 << 28))\n\t\t//}\n\n\t\t// compare hashCode.floatHashCode\n\t\t// the following ops are equivalent to\n\t\t// floatHashCode((el - NLA_PRECISION) % (2 * NLA_PRECISION))\n\t\t// this results in the hashCode for the (out of 8 possible) cube with the lowest hashCode\n\t\t// the other 7 can be calculated by adding constants\n\t\tconst xHC = ~~(this.x * (1 << 28) - 0.5),\n\t\t\tyHC = ~~(this.y * (1 << 28) - 0.5),\n\t\t\tzHC = ~~(this.z * (1 << 28) - 0.5),\n\t\t\thc = ~~((xHC * 31 + yHC) * 31 + zHC)\n\t\treturn [\n\t\t\t~~(hc),\n\t\t\t~~(hc + 961),\n\t\t\t~~(hc + 31),\n\t\t\t~~(hc + 31 + 961),\n\t\t\t~~(hc + 1),\n\t\t\t~~(hc + 1 + 961),\n\t\t\t~~(hc + 1 + 31),\n\t\t\t~~(hc + 1 + 31 + 961),\n\t\t]\n\t}\n\n\t//static areDisjoint(it: Iterable<V3>): boolean {\n\t//\tconst vSet = new CustomSet\n\t//\tfor (const v of it) {\n\t//\t\tif (!v.equals(vSet.canonicalizeLike(v))) {\n\t//\t\t\t// like value already in set\n\t//\t\t\treturn false\n\t//\t\t}\n\t//\t}\n\t//\treturn true\n\t//}\n\n\tcompareTo(other: V3): number {\n\t\tif (this.x != other.x) {\n\t\t\treturn this.x - other.x\n\t\t} else if (this.y != other.y) {\n\t\t\treturn this.y - other.y\n\t\t} else {\n\t\t\treturn this.z - other.z\n\t\t}\n\t}\n\n\tcompareTo2(other: V3, eps: number = NLA_PRECISION): number {\n\t\tif (!eq2(this.x, other.x, eps)) {\n\t\t\treturn this.x - other.x\n\t\t} else if (!eq2(this.y, other.y, eps)) {\n\t\t\treturn this.y - other.y\n\t\t} else if (!eq2(this.z, other.z, eps)) {\n\t\t\treturn this.z - other.z\n\t\t} else {\n\t\t\treturn 0\n\t\t}\n\t}\n\n\ttoAngles(): { theta: raddd, phi: raddd } {\n\t\treturn {\n\t\t\ttheta: Math.atan2(this.y, this.x),\n\t\t\tphi: Math.asin(this.z / this.length()),\n\t\t}\n\t}\n}\n\n/**\n * Utility method for creating V3s\n *\n * Example usage:\n *\n *     V(1, 2, 3)\n *     V([1, 2, 3])\n *     V({ x: 1, y: 2, z: 3 })\n *     V(1, 2) * assumes z=0\n *     V([1, 2]) // assumes z=0\n *\n */\nexport function V(x: number, y: number, z?: number): V3\nexport function V(arr: [number, number, number] | [number, number]): V3\nexport function V(obj: {x: number, y: number, z?: number}): V3\nexport function V(a: any, b?: any, c?: any): V3 {\n\tif (arguments.length == 3) {\n\t\treturn new V3(parseFloat(a), parseFloat(b), parseFloat(c))\n\t} else if (arguments.length == 2) {\n\t\treturn new V3(parseFloat(a), parseFloat(b), 0)\n\t} else if (arguments.length == 1) {\n\t\tif (typeof(a) == 'object') {\n\t\t\tif (a instanceof V3) {\n\t\t\t\t// immutable, so\n\t\t\t\treturn a\n\t\t\t} else if (a instanceof Array || a instanceof Float32Array || a instanceof Float64Array) {\n\t\t\t\tif (2 == a.length) {\n\t\t\t\t\treturn new V3(parseFloat(a[0]), parseFloat(a[1]), 0)\n\t\t\t\t} else if (3 == a.length) {\n\t\t\t\t\treturn new V3(parseFloat(a[0]), parseFloat(a[1]), parseFloat(a[2]))\n\t\t\t\t}\n\t\t\t} else if (('x' in a) && ('y' in a)) {\n\t\t\t\treturn new V3(parseFloat(a.x), parseFloat(a.y), 'z' in a ? parseFloat(a.z) : 0)\n\t\t\t}\n\t\t}\n\t}\n\tthrow new Error('invalid arguments' + arguments)\n}\n","import {M4} from './M4'\nimport {callsce, raddd} from './NLA'\nimport {V3} from './V3'\n\nexport const P3YZ = {normal1: V3.X, w: 0}\nexport const P3ZX = {normal1: V3.Y, w: 0}\nexport const P3XY = {normal1: V3.Z, w: 0}\n\nexport abstract class Transformable {\n\tmirror(plane: { normal1: V3, w: number }): this {\n\t\treturn this.transform(M4.mirror(plane))\n\t}\n\n\tmirroredX(): this {\n\t\treturn this.mirror(P3YZ)\n\t}\n\n\tmirrorY(): this {\n\t\treturn this.mirror(P3ZX)\n\t}\n\n\tmirrorZ(): this {\n\t\treturn this.mirror(P3XY)\n\t}\n\n\tproject(plane: { normal1: V3, w: number }): this {\n\t\treturn this.transform(M4.project(plane))\n\t}\n\n\tprojectXY(): this {\n\t\treturn this.transform(M4.project(P3XY))\n\t}\n\n\tprojectYZ(): this {\n\t\treturn this.transform(M4.project(P3YZ))\n\t}\n\n\tprojectZX(): this {\n\t\treturn this.transform(M4.project(P3ZX))\n\t}\n\n\ttranslate(x: number, y?: number, z?: number): this\n\ttranslate(v: V3): this\n\ttranslate(...args: any[]): this {\n\t\treturn this.transform(M4.translate.apply(undefined, args),\n\t\t\tcallsce.call(undefined, '.translate', ...args))\n\t}\n\n\tscale(x: number, y?: number, z?: number): this\n\tscale(f: V3): this\n\tscale(...args: any[]): this {\n\t\treturn this.transform(M4.scale.apply(undefined, args),\n\t\t\tcallsce.call(undefined, '.scale', ...args))\n\t}\n\n\trotateX(radians: raddd): this {\n\t\treturn this.transform(M4.rotateX(radians), `.rotateX(${radians})`)\n\t}\n\n\trotateY(radians: raddd): this {\n\t\treturn this.transform(M4.rotateY(radians), `.rotateY(${radians})`)\n\t}\n\n\trotateZ(radians: raddd): this {\n\t\treturn this.transform(M4.rotateZ(radians), `.rotateZ(${radians})`)\n\t}\n\n\trotate(rotationCenter: V3, rotationAxis: V3, radians: raddd): this {\n\t\treturn this.transform(M4.rotateLine(rotationCenter, rotationAxis, radians),\n\t\t\tcallsce('.rotate', rotationCenter, rotationAxis, radians))\n\t}\n\n\trotateAB(from: V3, to: V3): this {\n\t\treturn this.transform(M4.rotateAB(from, to), callsce('.rotateAB', from, to))\n\t}\n\n\teulerZXZ(alpha: raddd, beta: raddd, gamma: raddd): this {\n\t\tthrow new Error()\n\t\t//return this.transform(M4.eulerZXZ(alpha, beta, gamma))\n\t}\n\n\tshearX(y: number, z: number): this {\n\t\treturn this.transform(new M4([\n\t\t\t1, y, z, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1]))\n\t}\n\n\tfoo(): this {\n\t\treturn this.transform(M4.FOO)\n\t}\n\n\tbar(): this {\n\t\treturn this.transform(M4.BAR)\n\t}\n\n\tabstract transform(m4: M4, desc?: string): this\n\n\tvisit<R>(visitor: { [name: string]: (this: Transformable) => R }): R\n\tvisit<R, A>(visitor: { [name: string]: (this: Transformable, a: A) => R }, a: A): R\n\tvisit<R, A, B>(visitor: { [name: string]: (this: Transformable, a: A, b: B) => R }, a: A, b: B): R\n\tvisit<R, A, B, C>(visitor: { [name: string]: (this: Transformable, a: A, b: B, c: C) => R }, a: A, b: B, c: C): R\n\tvisit<R, A, B, C, D>(visitor: { [name: string]: (this: Transformable, a: A, b: B, c: C, d: D) => R }, a: A, b: B, c: C, d: D): R\n\tvisit(visitor: { [name: string]: (this: Transformable, ...args: any[]) => any }, ...args: any[]) {\n\t\tlet proto = Object.getPrototypeOf(this)\n\t\t// walk up the prototype chain until we find a defined function in o\n\t\twhile (!visitor.hasOwnProperty(proto.constructor.name) && proto !== Transformable.prototype) {\n\t\t\tproto = Object.getPrototypeOf(proto)\n\t\t}\n\t\tif (visitor.hasOwnProperty(proto.constructor.name)) {\n\t\t\treturn visitor[proto.constructor.name].apply(this, args)\n\t\t} else {\n\t\t\tthrow new Error('No implementation for ' + this.constructor.name)\n\t\t}\n\t}\n}\n","import { JavaMap } from 'javasetmap.ts'\n\nimport { Matrix } from './Matrix'\nimport {\n\taddOwnProperties, arrayFromFunction, assert, assertf, assertInst, assertNumbers, assertVectors, callsce, DEG, eq, eq0, int,\n\traddd, repeatString, solveCubicReal2,\n} from './NLA'\nimport { Transformable } from './Transformable'\nimport { V3 } from './V3'\n\nconst { PI, abs } = Math\n\nexport class M4 extends Matrix {\n\t/**\n\t * A simple (consists of integers), regular, non-orthogonal matrix, useful mainly for testing.\n\t * M4.BAR = M4.FOO.inverse()\n\t */\n\tstatic readonly FOO = new M4(\n\t\t0, 1, 1, 2,\n\t\t0.3, 0.4, 0.8, 13,\n\t\t2.1, 3.4, 5.5, 8.9,\n\t\t0, 0, 0, 1)\n\tstatic readonly BAR = M4.FOO.inversed()\n\tstatic readonly IDENTITY = M4.identity()\n\tstatic readonly YZX = M4.forSys(V3.Y, V3.Z, V3.X)\n\tstatic readonly ZXY = M4.forSys(V3.Z, V3.X, V3.Y)\n\tstatic IDENTITY3 = new M4(\n\t\t1, 0, 0, 0,\n\t\t0, 1, 0, 0,\n\t\t0, 0, 1, 0,\n\t\t0, 0, 0, 0,\n\t)\n\tprivate static readonly temp0 = new M4()\n\tprivate static readonly temp1 = new M4()\n\tprivate static readonly temp2 = new M4()\n\treadonly m: Float64Array\n\n\t/**\n\t * Takes 16 arguments in row-major order, which can be passed individually, as a list, or even as\n\t * four lists, one for each row. If the arguments are omitted then the identity matrix is constructed instead.\n\t */\n\tconstructor(...var_args: (number | number[])[]) {\n\t\tlet m\n\t\tif (0 == arguments.length) {\n\t\t\tm = new Float64Array(16)\n\t\t} else {\n\t\t\tconst flattened = Array.prototype.concat.apply([], arguments)\n\t\t\tassert(flattened.length == 16, 'flattened.length == 16' + flattened.length)\n\t\t\tm = new Float64Array(flattened)\n\t\t}\n\t\tsuper(4, 4, m)\n\t}\n\n\tget X(): V3 {\n\t\treturn this.transformVector(V3.X)\n\t}\n\n\tget Y(): V3 {\n\t\treturn this.transformVector(V3.Y)\n\t}\n\n\tget Z(): V3 {\n\t\treturn this.transformVector(V3.Z)\n\t}\n\n\tget O(): V3 {\n\t\treturn this.getTranslation()\n\t}\n\n\t/**\n\t * Returns the matrix that when multiplied with `matrix` results in the\n\t * identity matrix. You can optionally pass an existing matrix in `result`\n\t * to avoid allocating a new matrix. This implementation is from the Mesa\n\t * OpenGL function `__gluInvertMatrixd()` found in `project.c`.\n\t */\n\tstatic inverse(matrix: M4, result?: M4): M4 {\n\t\tassertInst(M4, matrix)\n\t\t!result || assertInst(M4, result)\n\t\tassert(matrix != result, 'matrix != result')\n\t\tresult = result || new M4()\n\t\tconst m = matrix.m, r = result.m\n\n\t\t// first compute transposed cofactor matrix:\n\t\t// cofactor of an element is the determinant of the 3x3 matrix gained by removing the column and row belonging\n\t\t// to the element\n\t\tr[0] = m[5] * m[10] * m[15] - m[5] * m[14] * m[11] - m[6] * m[9] * m[15] + m[6] * m[13] * m[11] + m[7] * m[9] * m[14] - m[7] * m[13] * m[10]\n\t\tr[1] = -m[1] * m[10] * m[15] + m[1] * m[14] * m[11] + m[2] * m[9] * m[15] - m[2] * m[13] * m[11] - m[3] * m[9] * m[14] + m[3] * m[13] * m[10]\n\t\tr[2] = m[1] * m[6] * m[15] - m[1] * m[14] * m[7] - m[2] * m[5] * m[15] + m[2] * m[13] * m[7] + m[3] * m[5] * m[14] - m[3] * m[13] * m[6]\n\t\tr[3] = -m[1] * m[6] * m[11] + m[1] * m[10] * m[7] + m[2] * m[5] * m[11] - m[2] * m[9] * m[7] - m[3] * m[5] * m[10] + m[3] * m[9] * m[6]\n\n\t\tr[4] = -m[4] * m[10] * m[15] + m[4] * m[14] * m[11] + m[6] * m[8] * m[15] - m[6] * m[12] * m[11] - m[7] * m[8] * m[14] + m[7] * m[12] * m[10]\n\t\tr[5] = m[0] * m[10] * m[15] - m[0] * m[14] * m[11] - m[2] * m[8] * m[15] + m[2] * m[12] * m[11] + m[3] * m[8] * m[14] - m[3] * m[12] * m[10]\n\t\tr[6] = -m[0] * m[6] * m[15] + m[0] * m[14] * m[7] + m[2] * m[4] * m[15] - m[2] * m[12] * m[7] - m[3] * m[4] * m[14] + m[3] * m[12] * m[6]\n\t\tr[7] = m[0] * m[6] * m[11] - m[0] * m[10] * m[7] - m[2] * m[4] * m[11] + m[2] * m[8] * m[7] + m[3] * m[4] * m[10] - m[3] * m[8] * m[6]\n\n\t\tr[8] = m[4] * m[9] * m[15] - m[4] * m[13] * m[11] - m[5] * m[8] * m[15] + m[5] * m[12] * m[11] + m[7] * m[8] * m[13] - m[7] * m[12] * m[9]\n\t\tr[9] = -m[0] * m[9] * m[15] + m[0] * m[13] * m[11] + m[1] * m[8] * m[15] - m[1] * m[12] * m[11] - m[3] * m[8] * m[13] + m[3] * m[12] * m[9]\n\t\tr[10] = m[0] * m[5] * m[15] - m[0] * m[13] * m[7] - m[1] * m[4] * m[15] + m[1] * m[12] * m[7] + m[3] * m[4] * m[13] - m[3] * m[12] * m[5]\n\t\tr[11] = -m[0] * m[5] * m[11] + m[0] * m[9] * m[7] + m[1] * m[4] * m[11] - m[1] * m[8] * m[7] - m[3] * m[4] * m[9] + m[3] * m[8] * m[5]\n\n\t\tr[12] = -m[4] * m[9] * m[14] + m[4] * m[13] * m[10] + m[5] * m[8] * m[14] - m[5] * m[12] * m[10] - m[6] * m[8] * m[13] + m[6] * m[12] * m[9]\n\t\tr[13] = m[0] * m[9] * m[14] - m[0] * m[13] * m[10] - m[1] * m[8] * m[14] + m[1] * m[12] * m[10] + m[2] * m[8] * m[13] - m[2] * m[12] * m[9]\n\t\tr[14] = -m[0] * m[5] * m[14] + m[0] * m[13] * m[6] + m[1] * m[4] * m[14] - m[1] * m[12] * m[6] - m[2] * m[4] * m[13] + m[2] * m[12] * m[5]\n\t\tr[15] = m[0] * m[5] * m[10] - m[0] * m[9] * m[6] - m[1] * m[4] * m[10] + m[1] * m[8] * m[6] + m[2] * m[4] * m[9] - m[2] * m[8] * m[5]\n\n\t\t// calculate determinant using laplace expansion (cf https://en.wikipedia.org/wiki/Laplace_expansion),\n\t\t// as we already have the cofactors. We multiply a column by a row as the cofactor matrix is transposed.\n\t\tconst det = m[0] * r[0] + m[1] * r[4] + m[2] * r[8] + m[3] * r[12]\n\t\t// assert(!isZero(det), 'det may not be zero, i.e. the matrix is not invertible')\n\t\tlet i = 16\n\t\twhile (i--) {\n\t\t\tr[i] /= det\n\t\t}\n\t\treturn result\n\t}\n\n\t/**\n\t * Returns `matrix`, exchanging columns for rows. You can optionally pass an\n\t * existing matrix in `result` to avoid allocating a new matrix.\n\t */\n\tstatic transpose(matrix: M4, result?: M4): M4 {\n\t\tassertInst(M4, matrix)\n\t\t!result || assertInst(M4, result)\n\t\tassert(matrix != result, 'matrix != result')\n\t\tresult = result || new M4()\n\t\tconst m = matrix.m, r = result.m\n\t\tr[0] = m[0]\n\t\tr[1] = m[4]\n\t\tr[2] = m[8]\n\t\tr[3] = m[12]\n\t\tr[4] = m[1]\n\t\tr[5] = m[5]\n\t\tr[6] = m[9]\n\t\tr[7] = m[13]\n\t\tr[8] = m[2]\n\t\tr[9] = m[6]\n\t\tr[10] = m[10]\n\t\tr[11] = m[14]\n\t\tr[12] = m[3]\n\t\tr[13] = m[7]\n\t\tr[14] = m[11]\n\t\tr[15] = m[15]\n\t\treturn result\n\t}\n\n\t/**\n\t * Returns the concatenation of the transforms for `left` and `right`.\n\t */\n\tstatic multiply(left: M4, right: M4, result?: M4): M4 {\n\t\tassertInst(M4, left, right)\n\t\t!result || assertInst(M4, result)\n\t\tassert(left != result, 'left != result')\n\t\tassert(right != result, 'right != result')\n\t\tresult = result || new M4()\n\t\tconst a = left.m, b = right.m, r = result.m\n\n\t\tr[0] = a[0] * b[0] + a[1] * b[4] + (a[2] * b[8] + a[3] * b[12])\n\t\tr[1] = a[0] * b[1] + a[1] * b[5] + (a[2] * b[9] + a[3] * b[13])\n\t\tr[2] = a[0] * b[2] + a[1] * b[6] + (a[2] * b[10] + a[3] * b[14])\n\t\tr[3] = a[0] * b[3] + a[1] * b[7] + (a[2] * b[11] + a[3] * b[15])\n\n\t\tr[4] = a[4] * b[0] + a[5] * b[4] + (a[6] * b[8] + a[7] * b[12])\n\t\tr[5] = a[4] * b[1] + a[5] * b[5] + (a[6] * b[9] + a[7] * b[13])\n\t\tr[6] = a[4] * b[2] + a[5] * b[6] + (a[6] * b[10] + a[7] * b[14])\n\t\tr[7] = a[4] * b[3] + a[5] * b[7] + (a[6] * b[11] + a[7] * b[15])\n\n\t\tr[8] = a[8] * b[0] + a[9] * b[4] + (a[10] * b[8] + a[11] * b[12])\n\t\tr[9] = a[8] * b[1] + a[9] * b[5] + (a[10] * b[9] + a[11] * b[13])\n\t\tr[10] = a[8] * b[2] + a[9] * b[6] + (a[10] * b[10] + a[11] * b[14])\n\t\tr[11] = a[8] * b[3] + a[9] * b[7] + (a[10] * b[11] + a[11] * b[15])\n\n\t\tr[12] = a[12] * b[0] + a[13] * b[4] + (a[14] * b[8] + a[15] * b[12])\n\t\tr[13] = a[12] * b[1] + a[13] * b[5] + (a[14] * b[9] + a[15] * b[13])\n\t\tr[14] = a[12] * b[2] + a[13] * b[6] + (a[14] * b[10] + a[15] * b[14])\n\t\tr[15] = a[12] * b[3] + a[13] * b[7] + (a[14] * b[11] + a[15] * b[15])\n\n\t\treturn result\n\t}\n\n\tstatic copy(src: M4, result: M4 = new M4()) {\n\t\tassertInst(M4, src, result)\n\t\tassert(result != src, 'result != src')\n\t\tconst s = src.m, d = result.m\n\t\tlet i = 16\n\t\twhile (i--) {\n\t\t\td[i] = s[i]\n\t\t}\n\t\treturn result\n\t}\n\n\tstatic forSys(e0: V3, e1: V3, e2: V3 = e0.cross(e1), origin: V3 = V3.O): M4 {\n\t\tassertVectors(e0, e1, e2, origin)\n\n\t\treturn new M4(\n\t\t\te0.x, e1.x, e2.x, origin.x,\n\t\t\te0.y, e1.y, e2.y, origin.y,\n\t\t\te0.z, e1.z, e2.z, origin.z,\n\t\t\t0, 0, 0, 1)\n\t}\n\n\tstatic forRows(n0: V3, n1: V3, n2: V3, n3: V3 = V3.O): M4 {\n\t\tassertVectors(n0, n1, n2, n3)\n\t\treturn new M4(\n\t\t\tn0.x, n0.y, n0.z, 0,\n\t\t\tn1.x, n1.y, n1.z, 0,\n\t\t\tn2.x, n2.y, n2.z, 0,\n\t\t\tn3.x, n3.y, n3.z, 1)\n\t}\n\n\t/**\n\t * Returns an identity matrix. You can optionally pass an existing matrix in `result` to avoid allocating a new\n\t * matrix. This emulates the OpenGL function `glLoadIdentity()`\n\t *\n\t * Unless initializing a matrix to be modified, use M4.IDENTITY\n\t */\n\tstatic identity(result: M4 = new M4()): M4 {\n\t\tassertInst(M4, result)\n\t\tconst m = result.m\n\t\tm[0] = m[5] = m[10] = m[15] = 1\n\t\tm[1] = m[2] = m[3] = m[4] = m[6] = m[7] = m[8] = m[9] = m[11] = m[12] = m[13] = m[14] = 0\n\n\t\treturn result\n\t}\n\n\t/**\n\t * Creates a new M4 initialized by a user defined callback function\n\t *\n\t * @param f signature: (elRow, elCol, elIndex) =>\n\t *     el, where elIndex is the row-major index, i.e. eLindex == elRow * 4 + elCol\n\t * @param result\n\t */\n\tstatic fromFunction4(f: (elRow: number, elCol: number, elIndex: number) => number, result: M4 = new M4()): M4 {\n\t\tassert(typeof f == 'function')\n\t\tassertInst(M4, result)\n\t\tconst m = result.m\n\t\tlet i = 16\n\t\twhile (i--) {\n\t\t\tm[i] = f(Math.floor(i / 4), i % 4, i)\n\t\t}\n\t\treturn result\n\t}\n\n\t/**\n\t ### GL.Matrix.perspective(fov, aspect, near, far[, result])\n\n\t */\n\t/**\n\t * ## hjghfhg jhg hjg jhkg jhg jkh jhg jh gjh {@see V3.O}\n\t * {@see perspectiveRad}\n\t * perspectiveRad\n\t * ```\n\t *  test ```\n\t * @param fovDegrees in degrees\n\t * @param aspect aspect ratio = width/height of viewport\n\t */\n\tstatic perspective(fovDegrees: number, aspect: number,\n\t\tnear: number, far: number,\n\t\tresult: M4 = new M4()): M4 {\n\t\treturn M4.perspectiveRad(fovDegrees * DEG, aspect, near, far, result)\n\t}\n\n\tstatic perspectiveRad(fov: raddd, aspect: number,\n\t\tnear: number, far: number,\n\t\tresult: M4 = new M4()): M4 {\n\t\tassertInst(M4, result)\n\t\tassertNumbers(fov, aspect, near, far)\n\t\tconst y = Math.tan(fov / 2) * near\n\t\tconst x = y * aspect\n\t\treturn M4.frustum(-x, x, -y, y, near, far, result)\n\t}\n\n\t// the OpenGL function `glFrustum()`.\n\tstatic frustum(left: number, right: number, bottom: number, top: number, near: number, far: number, result?: M4): M4 {\n\t\tassertNumbers(left, right, bottom, top, near, far)\n\t\tassert(0 < near, '0 < near')\n\t\tassert(near < far, 'near < far')\n\t\t!result || assertInst(M4, result)\n\t\tresult = result || new M4()\n\t\tconst m = result.m\n\n\t\tm[0] = 2 * near / (right - left)\n\t\tm[1] = 0\n\t\tm[2] = (right + left) / (right - left)\n\t\tm[3] = 0\n\n\t\tm[4] = 0\n\t\tm[5] = 2 * near / (top - bottom)\n\t\tm[6] = (top + bottom) / (top - bottom)\n\t\tm[7] = 0\n\n\t\tm[8] = 0\n\t\tm[9] = 0\n\t\tm[10] = -(far + near) / (far - near)\n\t\tm[11] = -2 * far * near / (far - near)\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = -1\n\t\tm[15] = 0\n\n\t\treturn result\n\t}\n\n\t/**\n\t * Returns a new M4 representing the a projection through/towards a point onto a plane.\n\t */\n\tstatic projectPlanePoint(p: V3, plane: { normal1: V3, w: number }, result: M4 = new M4()): M4 {\n\t\tassertVectors(p, plane.normal1)\n\t\tassertInst(M4, result)\n\t\tconst m = result.m\n\t\tconst n = plane.normal1, w = plane.w\n\t\tconst np = n.dot(p)\n\n\t\tm[0] = p.x * n.x + w - np\n\t\tm[1] = p.x * n.y\n\t\tm[2] = p.x * n.z\n\t\tm[3] = -w * p.x\n\n\t\tm[4] = p.y * n.x\n\t\tm[5] = p.y * n.y + w - np\n\t\tm[6] = p.y * n.z\n\t\tm[7] = -w * p.y\n\n\t\tm[8] = p.z * n.x\n\t\tm[9] = p.z * n.y\n\t\tm[10] = p.z * n.z + w - np\n\t\tm[11] = -w * p.z\n\n\t\tm[12] = n.x\n\t\tm[13] = n.y\n\t\tm[14] = n.z\n\t\tm[15] = -np\n\n\t\treturn result\n\t}\n\n\t/**\n\t * Orthographic/orthogonal projection. Transforms the cuboid with the dimensions X: [left right] Y: [bottom, top]\n\t * Z: [near far] to the cuboid X: [-1 1] Y [-1 1] Z [-1, 1]\n\t */\n\tstatic ortho(left: number, right: number,\n\t\tbottom: number, top: number,\n\t\tnear: number, far: number,\n\t\tresult: M4 = new M4()): M4 {\n\t\tassertNumbers(left, right, bottom, top, near, far)\n\t\tassertInst(M4, result)\n\t\tconst m = result.m\n\n\t\tm[0] = 2 / (right - left)\n\t\tm[1] = 0\n\t\tm[2] = 0\n\t\tm[3] = -(right + left) / (right - left)\n\n\t\tm[4] = 0\n\t\tm[5] = 2 / (top - bottom)\n\t\tm[6] = 0\n\t\tm[7] = -(top + bottom) / (top - bottom)\n\n\t\tm[8] = 0\n\t\tm[9] = 0\n\t\tm[10] = -2 / (far - near)\n\t\tm[11] = -(far + near) / (far - near)\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\n\t\treturn result\n\t}\n\n\t/**\n\t * This emulates the OpenGL function `glScale()`. You can optionally pass an existing matrix in `result` to avoid\n\t * allocating a new matrix.\n\t */\n\tstatic scale(x: number, y: number, z?: number, result?: M4): M4\n\n\tstatic scale(scale: number, result?: M4): M4\n\n\tstatic scale(v: V3, result?: M4): M4\n\n\tstatic scale(...args: any[]): M4 {\n\t\tlet x, y, z, result\n\t\tif (args[0] instanceof V3) {\n\t\t\tassert(args.length <= 2)\n\t\t\t\t; ({ x, y, z } = args[0])\n\t\t\tresult = args[1]\n\t\t} else if ('number' != typeof args[1]) {\n\t\t\tx = y = z = args[0]\n\t\t\tresult = args[1]\n\t\t} else {\n\t\t\tassert(args.length <= 4)\n\t\t\tx = args[0]\n\t\t\ty = args[1]\n\t\t\tz = undefined != args[2] ? args[2] : 1\n\t\t\tresult = args[3]\n\t\t}\n\t\tundefined == result && (result = new M4())\n\t\tassertInst(M4, result)\n\t\tassertNumbers(x, y, z)\n\n\t\tconst m = result.m\n\n\t\tm[0] = x\n\t\tm[1] = 0\n\t\tm[2] = 0\n\t\tm[3] = 0\n\n\t\tm[4] = 0\n\t\tm[5] = y\n\t\tm[6] = 0\n\t\tm[7] = 0\n\n\t\tm[8] = 0\n\t\tm[9] = 0\n\t\tm[10] = z\n\t\tm[11] = 0\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\n\t\treturn result\n\t}\n\n\t/**\n\t * This emulates the OpenGL function `glTranslate()`. You can optionally pass\n\t * an existing matrix in `result` to avoid allocating a new matrix.\n\t */\n\tstatic translate(x: number, y?: number, z?: number, result?: M4): M4\n\n\tstatic translate(v: V3, result?: M4): M4\n\n\tstatic translate(...args: any[]): M4 {\n\t\tlet x, y, z, result\n\t\tif (args[0] instanceof V3) {\n\t\t\tassert(args.length <= 2)\n\t\t\t\t; ({ x, y, z } = args[0])\n\t\t\tresult = args[1]\n\t\t} else {\n\t\t\tassert(args.length <= 4)\n\t\t\tx = args[0]\n\t\t\ty = undefined != args[1] ? args[1] : 0\n\t\t\tz = undefined != args[2] ? args[2] : 0\n\t\t\tresult = args[3]\n\t\t}\n\t\tundefined == result && (result = new M4())\n\t\tassertInst(M4, result)\n\t\tassertNumbers(x, y, z)\n\n\t\tconst m = result.m\n\n\t\tm[0] = 1\n\t\tm[1] = 0\n\t\tm[2] = 0\n\t\tm[3] = x\n\n\t\tm[4] = 0\n\t\tm[5] = 1\n\t\tm[6] = 0\n\t\tm[7] = y\n\n\t\tm[8] = 0\n\t\tm[9] = 0\n\t\tm[10] = 1\n\t\tm[11] = z\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\n\t\treturn result\n\t}\n\n\t/**\n\t * Returns a matrix that rotates by `a` degrees around the vector (x, y, z). You can optionally pass an existing\n\t * matrix in `result` to avoid allocating a new matrix. This emulates the OpenGL function `glRotate()`.\n\t */\n\t//static rotation(radians: raddd, x: number, y: number, z: number, result?: M4): M4\n\tstatic rotate(radians: raddd, v: { x: number, y: number, z: number }, result?: M4): M4 {\n\t\tundefined == result && (result = new M4())\n\t\tassertInst(M4, result)\n\t\tlet { x, y, z } = v\n\t\tassert(!new V3(x, y, z).likeO(), '!V(x, y, z).likeO()')\n\t\tconst m = result.m\n\n\t\tconst d = Math.sqrt(x * x + y * y + z * z)\n\t\tx /= d\n\t\ty /= d\n\t\tz /= d\n\t\tconst cos = Math.cos(radians), sin = Math.sin(radians), t = 1 - cos\n\n\t\tm[0] = x * x * t + cos\n\t\tm[1] = x * y * t - z * sin\n\t\tm[2] = x * z * t + y * sin\n\t\tm[3] = 0\n\n\t\tm[4] = y * x * t + z * sin\n\t\tm[5] = y * y * t + cos\n\t\tm[6] = y * z * t - x * sin\n\t\tm[7] = 0\n\n\t\tm[8] = z * x * t - y * sin\n\t\tm[9] = z * y * t + x * sin\n\t\tm[10] = z * z * t + cos\n\t\tm[11] = 0\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\n\t\treturn result\n\t}\n\n\tstatic readonly NAMEMAP = new JavaMap<M4, string>()\n\t\t.set(M4.IDENTITY3, 'M4.IDENTITY3')\n\t\t.set(M4.FOO, 'M4.FOO')\n\t\t.set(M4.BAR, 'M4.BAR')\n\t\t.set(M4.IDENTITY, 'M4.IDENTITY')\n\t\t.set(M4.ZXY, 'M4.ZXY')\n\t\t.set(M4.YZX, 'M4.YZX')\n\n\t/**\n\t * Returns a matrix that puts the camera at the eye point `ex, ey, ez` looking\n\t * toward the center point `cx, cy, cz` with an up direction of `ux, uy, uz`.\n\t * You can optionally pass an existing matrix in `result` to avoid allocating\n\t * a new matrix. This emulates the OpenGL function `gluLookAt()`.\n\t */\n\tstatic lookAt(eye: V3, focus: V3, up: V3, result?: M4): M4 {\n\t\tassert(3 == arguments.length || 4 == arguments.length, '3 == arguments.length || 4 == arguments.length')\n\t\tassertVectors(eye, focus, up)\n\t\t!result || assertInst(M4, result)\n\n\t\tresult = result || new M4()\n\t\tconst m = result.m\n\n\t\tconst f = eye.minus(focus).unit()\n\t\tconst s = up.cross(f).unit()\n\t\tconst t = f.cross(s).unit()\n\n\t\tm[0] = s.x\n\t\tm[1] = s.y\n\t\tm[2] = s.z\n\t\tm[3] = -s.dot(eye)\n\n\t\tm[4] = t.x\n\t\tm[5] = t.y\n\t\tm[6] = t.z\n\t\tm[7] = -t.dot(eye)\n\n\t\tm[8] = f.x\n\t\tm[9] = f.y\n\t\tm[10] = f.z\n\t\tm[11] = -f.dot(eye)\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\n\t\treturn result\n\t}\n\n\t/**\n\t * Create a rotation matrix for rotating around the X axis\n\t */\n\tstatic rotateX(radians: raddd): M4 {\n\t\tassertNumbers(radians)\n\t\tconst sin = Math.sin(radians), cos = Math.cos(radians)\n\t\tconst els = [\n\t\t\t1, 0, 0, 0, 0, cos, -sin, 0, 0, sin, cos, 0, 0, 0, 0, 1,\n\t\t]\n\t\treturn new M4(els)\n\t}\n\n\t/**\n\t * Create a rotation matrix for rotating around the Y axis\n\t */\n\tstatic rotateY(radians: raddd): M4 {\n\t\tconst sin = Math.sin(radians), cos = Math.cos(radians)\n\t\tconst els = [\n\t\t\tcos, 0, sin, 0, 0, 1, 0, 0, -sin, 0, cos, 0, 0, 0, 0, 1,\n\t\t]\n\t\treturn new M4(els)\n\t}\n\n\t/**\n\t * Create a rotation matrix for rotating around the Z axis\n\t */\n\tstatic rotateZ(radians: raddd): M4 {\n\t\tconst sin = Math.sin(radians), cos = Math.cos(radians)\n\t\tconst els = [\n\t\t\tcos, -sin, 0, 0, sin, cos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1,\n\t\t]\n\t\treturn new M4(els)\n\t}\n\n\t/**\n\t * New rotation matrix such that result.transformVector(a).isParallelTo(b) through smallest rotation.\n\t * Performs no scaling.\n\t */\n\tstatic rotateAB(a: V3, b: V3, result?: M4): M4 {\n\t\t// see http://inside.mines.edu/fs_home/gmurray/ArbitraryAxisRotation/\n\t\tassertVectors(a, b)\n\t\t!result || assertInst(M4, result)\n\t\tconst rotationAxis = a.cross(b), rotationAxisLength = rotationAxis.length()\n\t\tif (eq0(rotationAxisLength)) {\n\t\t\treturn M4.identity(result)\n\t\t}\n\t\tconst radians = Math.atan2(rotationAxisLength, a.dot(b))\n\t\treturn M4.rotateLine(V3.O, rotationAxis, radians, result)\n\t}\n\n\t/**\n\t * Matrix for rotation about arbitrary line defined by an anchor point and direction.\n\t * rotationAxis does not need to be unit\n\t */\n\tstatic rotateLine(rotationAnchor: V3, rotationAxis: V3, radians: raddd, result?: M4): M4 {\n\t\t// see http://inside.mines.edu/fs_home/gmurray/ArbitraryAxisRotation/\n\t\tassertVectors(rotationAnchor, rotationAxis)\n\t\tassertNumbers(radians)\n\t\t!result || assertInst(M4, result)\n\t\tresult = result || new M4()\n\t\trotationAxis = rotationAxis.unit()\n\n\t\tconst ax = rotationAnchor.x, ay = rotationAnchor.y, az = rotationAnchor.z,\n\t\t\tdx = rotationAxis.x, dy = rotationAxis.y, dz = rotationAxis.z\n\t\tconst m = result.m, cos = Math.cos(radians), sin = Math.sin(radians)\n\n\t\tm[0] = dx * dx + (dy * dy + dz * dz) * cos\n\t\tm[1] = dx * dy * (1 - cos) - dz * sin\n\t\tm[2] = dx * dz * (1 - cos) + dy * sin\n\t\tm[3] = (ax * (dy * dy + dz * dz) - dx * (ay * dy + az * dz)) * (1 - cos) + (ay * dz - az * dy) * sin\n\n\t\tm[4] = dx * dy * (1 - cos) + dz * sin\n\t\tm[5] = dy * dy + (dx * dx + dz * dz) * cos\n\t\tm[6] = dy * dz * (1 - cos) - dx * sin\n\t\tm[7] = (ay * (dx * dx + dz * dz) - dy * (ax * dx + az * dz)) * (1 - cos) + (az * dx - ax * dz) * sin\n\n\t\tm[8] = dx * dz * (1 - cos) - dy * sin\n\t\tm[9] = dy * dz * (1 - cos) + dx * sin\n\t\tm[10] = dz * dz + (dx * dx + dy * dy) * cos\n\t\tm[11] = (az * (dx * dx + dy * dy) - dz * (ax * dx + ay * dy)) * (1 - cos) + (ax * dy - ay * dx) * sin\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\n\t\treturn result\n\t}\n\n\t/**\n\t * Create an affine matrix for mirroring into an arbitrary plane:\n\t */\n\tstatic mirror(plane: { normal1: V3, w: number }, result: M4 = new M4()): M4 {\n\t\tassertVectors(plane.normal1)\n\t\tassertInst(M4, result)\n\t\tconst [nx, ny, nz] = plane.normal1\n\t\tconst w = plane.w\n\t\tconst m = result.m\n\n\t\tm[0] = 1.0 - 2.0 * nx * nx\n\t\tm[1] = -2.0 * ny * nx\n\t\tm[2] = -2.0 * nz * nx\n\t\tm[3] = 2.0 * nx * w\n\n\t\tm[4] = -2.0 * nx * ny\n\t\tm[5] = 1.0 - 2.0 * ny * ny\n\t\tm[6] = -2.0 * nz * ny\n\t\tm[7] = 2.0 * ny * w\n\n\t\tm[8] = -2.0 * nx * nz\n\t\tm[9] = -2.0 * ny * nz\n\t\tm[10] = 1.0 - 2.0 * nz * nz\n\t\tm[11] = 2.0 * nz * w\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\t\treturn result\n\t}\n\n\t/**\n\t *\n\t * @param plane\n\t * @param dir Projection direction. Optional, if not specified plane normal1 will be used.\n\t * @param result {@see M4}\n\t */\n\tstatic project(plane: { normal1: V3, w: number }, dir: V3 = plane.normal1, result: M4 = new M4()): M4 {\n\t\t// TODO: doc\n\t\t/**\n\t\t * plane.normal1 DOT (p + lambda * dir) = w (1)\n\t\t * extract lambda:\n\t\t * plane.normal1 DOT p + lambda * plane.normal1 DOT dir = w\n\t\t * lambda = (w - plane.normal1 DOT p) / plane.normal1 DOT dir\n\t\t * result = p + lambda * dir\n\t\t * result = p + dir * (w - plane.normal1 DOT p) / plane.normal1 DOT dir\n\t\t * result =  w * dir / (plane.normal1 DOT dir) + p - plane.normal1 DOT p * dir / (plane.normal1 DOT dir) *\n\t\t *\n\n\t\t a + d * (w - n . a) / (nd)\n\t\t a + dw - d * na\n\t\t */\n\t\tassertVectors(dir, plane.normal1)\n\t\tassertInst(M4, result)\n\t\tconst w = plane.w\n\t\tconst m = result.m\n\t\tconst nd = plane.normal1.dot(dir)\n\t\tconst { x: nx, y: ny, z: nz } = plane.normal1\n\t\tconst { x: dx, y: dy, z: dz } = dir.div(nd)\n\t\t/*\n\t\t rejectedFrom: return this.minus(b.times(this.dot(b) / b.dot(b)))\n\t\t return M4.forSys(\n\t\t V3.X.rejectedFrom(plane.normal1),\n\t\t V3.Y.rejectedFrom(plane.normal1),\n\t\t V3.Z.rejectedFrom(plane.normal1),\n\t\t plane.anchor,\n\t\t result\n\t\t )\n\t\t */\n\n\t\tm[0] = 1.0 - nx * dx\n\t\tm[1] = -ny * dx\n\t\tm[2] = -nz * dx\n\t\tm[3] = dx * w\n\n\t\tm[4] = -nx * dy\n\t\tm[5] = 1.0 - ny * dy\n\t\tm[6] = -nz * dy\n\t\tm[7] = dy * w\n\n\t\tm[8] = -nx * dz\n\t\tm[9] = -ny * dz\n\t\tm[10] = 1.0 - nz * dz\n\t\tm[11] = dz * w\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\n\t\treturn result\n\t}\n\n\tstatic lineProjection(line: { anchor: V3, dir1: V3 }, result: M4 = new M4()): M4 {\n\t\tassertVectors(line.anchor, line.dir1)\n\t\tassertInst(M4, result)\n\t\tconst ax = line.anchor.x, ay = line.anchor.y, az = line.anchor.z\n\t\tconst dx = line.dir1.x, dy = line.dir1.y, dz = line.dir1.z\n\t\tconst m = result.m\n\n\t\t/*\n\t\t projectedOn: return b.times(this.dot(b) / b.dot(b))\n\t\t */\n\n\t\tm[0] = dx * dx\n\t\tm[1] = dx * dy\n\t\tm[2] = dx * dz\n\t\tm[3] = ax\n\n\t\tm[4] = dy * dx\n\t\tm[5] = dy * dy\n\t\tm[6] = dy * dz\n\t\tm[7] = ay\n\n\t\tm[8] = dz * dx\n\t\tm[9] = dz * dy\n\t\tm[10] = dz * dz\n\t\tm[11] = az\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\t\treturn result\n\t}\n\n\n\t/**\n\t Returns a perspective transform matrix, which makes far away objects appear smaller than nearby objects. The `aspect` argument should be the width divided by the height of your viewport and `fov` is the top-to-bottom angle of the field of view in degrees. You can optionally pass an existing matrix in `result` to avoid allocating a new matrix. This emulates the OpenGL function `gluPerspective()`.\n\t */\n\n\tstatic multiplyMultiple(...m4s: M4[]): M4 {\n\t\tif (0 == m4s.length) return M4.identity()\n\t\tlet temp = M4.identity(), result = m4s[0].copy()\n\t\tfor (let i = 1; i < m4s.length; i++) {\n\t\t\tM4.multiply(result, m4s[i], temp)\n\n\t\t\t{ [temp, result] = [result, temp] }\n\t\t}\n\t\treturn result\n\t}\n\n\tstatic pointInversion(p: V3, result: M4 = new M4()): M4 {\n\t\tassertVectors(p)\n\t\tassertInst(M4, result)\n\t\tconst m = result.m\n\n\t\tm[0] = -1\n\t\tm[1] = 0\n\t\tm[2] = 0\n\t\tm[3] = 2 * p.x\n\n\t\tm[4] = 0\n\t\tm[5] = -1\n\t\tm[6] = 0\n\t\tm[7] = 2 * p.y\n\n\t\tm[8] = 0\n\t\tm[9] = 0\n\t\tm[10] = -1\n\t\tm[11] = 2 * p.z\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\t\treturn result\n\t}\n\n\t// ### GL.Matrix.frustum(left, right, bottom, top, near, far[, result])\n\t//\n\t// Sets up a viewing frustum, which is shaped like a truncated pyramid with the\n\t// camera where the point of the pyramid would be. You can optionally pass an\n\t// existing matrix in `result` to avoid allocating a new matrix. This emulates\n\n\t/**\n\t * Returns a new M4 which is equal to the inverse of this.\n\t */\n\tinversed(): M4 {\n\t\treturn M4.inverse(this)\n\t}\n\n\t/**\n\t * Matrix trace is defined as the sum of the elements of the main diagonal.\n\t */\n\ttrace(): number {\n\t\treturn this.m[0] + this.m[5] + this.m[10] + this.m[15]\n\t}\n\n\tas3x3(): M4 {\n\t\tconst result = M4.copy(this), m = result.m\n\n\t\tm[3] = m[7] = m[11] = m[12] = m[13] = m[14] = 0\n\t\tm[15] = 1\n\t\treturn result\n\t}\n\n\ttransform(m4: M4): this {\n\t\treturn m4.times(this) as this\n\t}\n\n\trealEigenValues3(): number[] {\n\t\tconst m = this.m\n\t\tassert(0 == m[12] && 0 == m[13] && 0 == m[14])\n\t\t// determinant of (this - λI):\n\t\t// | a-λ  b   c  |\n\t\t// |  d  e-λ  f  | = -λ^3 + λ^2 (a+e+i) + λ (-a e-a i+b d+c g-e i+f h) + a(ei - fh) - b(di - fg) + c(dh - eg)\n\t\t// |  g   h  i-λ |\n\n\t\tconst [a, b, c, ,\n\t\t\td, e, f, ,\n\t\t\tg, h, i] = m\n\t\t// det(this - λI) = -λ^3 +λ^2 (a+e+i) + λ (-a e-a i-b d+c g-e i+f h)+ (a e i-a f h-b d i+b f g+c d h-c e g)\n\t\tconst s = -1\n\t\tconst t = a + e + i // equivalent to trace of matrix\n\t\tconst u = -a * e - a * i + b * d + c * g - e * i + f * h // equivalent to 1/2 (trace(this²) - trace²(A))\n\t\tconst w = a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g) // equivalent to matrix determinant\n\n\t\tconsole.log(s, t, u, w)\n\t\treturn solveCubicReal2(s, t, u, w)\n\n\t}\n\n\trealEigenVectors3(): V3[] {\n\t\tconst eigenValues = this.realEigenValues3()\n\t\tconst this3x3 = this.times(M4.IDENTITY3)\n\t\tconsole.log(this.toString())\n\t\tconsole.log(this3x3.toString())\n\t\tlet mats = eigenValues.map(ev => M4.IDENTITY3.scale(-ev).plus(this3x3))\n\t\tconsole.log(mats.map(m => m.determinant3()))\n\t\tconsole.log(mats.map(m => '' + m.toString(v => '' + v)).join('\\n\\n'))\n\t\tconsole.log(mats.map(m => '' + m.gauss().U.toString(v => '' + v)).join('\\n\\n'))\n\t\tconsole.log('mats.map(m=>m.rank())', mats.map(m => m.rank()))\n\t\tif (1 == eigenValues.length) {\n\t\t\tconsole.log(mats[0].toString())\n\t\t\tassertf(() => 0 == mats[0].rank())\n\t\t\t// col vectors\n\t\t\treturn arrayFromFunction(3, col => new V3(this.m[col], this.m[4 + col], this.m[8 + col]))\n\t\t}\n\t\tif (2 == eigenValues.length) {\n\t\t\t// one matrix should have rank 1, the other rank 2\n\t\t\tif (1 == mats[0].rank()) {\n\t\t\t\tmats = [mats[1], mats[0]]\n\t\t\t}\n\t\t\tassertf(() => 2 == mats[0].rank())\n\t\t\tassertf(() => 1 == mats[1].rank())\n\n\t\t\t// mat[0] has rank 2, mat[1] has rank 1\n\t\t\tconst gauss0 = mats[0].gauss().U\n\t\t\tconst eigenVector0 = gauss0.row(0).cross(gauss0.row(1)).V3().unit()\n\n\t\t\tconst planeNormal = mats[1].gauss().U.row(0).V3()\n\t\t\tconst eigenVector1 = planeNormal.getPerpendicular().unit()\n\t\t\tconst eigenVector2 = eigenVector0.cross(eigenVector1).rejectedFrom(planeNormal)\n\n\t\t\treturn [eigenVector0, eigenVector1, eigenVector2]\n\t\t}\n\t\tif (3 == eigenValues.length) {\n\t\t\tmats.forEach((mat, i) => assert(2 == mat.rank(), i + ': ' + mat.rank()))\n\t\t\t// the (A - lambda I) matrices map to a plane. This means, that there is an entire line in R³ which maps to\n\t\t\t// the point V3.O\n\t\t\treturn mats.map(mat => {\n\t\t\t\tconst gauss = mat.gauss().U\n\t\t\t\treturn gauss.row(0).cross(gauss.row(1)).V3().unit()\n\t\t\t})\n\t\t}\n\t\tthrow new Error('there cannot be more than 3 eigen values')\n\t}\n\n\t/**\n\t * U * SIGMA * VSTAR = this\n\t * U and VSTAR are orthogonal matrices\n\t * SIGMA is a diagonal matrix\n\t */\n\tsvd3(): { U: M4, SIGMA: M4, VSTAR: M4 } {\n\t\tfunction matrixForCS(i: int, k: int, c: number, s: number) {\n\t\t\tconst m = M4.identity()\n\t\t\tm.setEl(i, i, c)\n\t\t\tm.setEl(k, k, c)\n\t\t\tm.setEl(i, k, s)\n\t\t\tm.setEl(k, i, -s)\n\t\t\treturn m\n\t\t}\n\n\t\tconst A = this.as3x3()\n\t\tlet S = A.transposed().times(A), V = M4.identity()\n\t\tconsole.log(S.str)\n\t\tfor (let it = 0; it < 16; it++) {\n\t\t\tconsole.log('blahg\\n', V.times(S).times(V.transposed()).str)\n\t\t\tassert(V.times(S).times(V.transposed()).likeM4(A.transposed().times(A)),\n\t\t\t\tV.times(S).times(V.transposed()).str,\n\t\t\t\tA.transposed().times(A).str)\n\t\t\tlet maxOffDiagonal = 0, maxOffDiagonalIndex = 1, j = 10\n\t\t\twhile (j--) {\n\t\t\t\tconst val = Math.abs(S.m[j])\n\t\t\t\tif (j % 4 != Math.floor(j / 4) && val > maxOffDiagonal) {\n\t\t\t\t\tmaxOffDiagonal = val\n\t\t\t\t\tmaxOffDiagonalIndex = j\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst i = Math.floor(maxOffDiagonalIndex / 4), k = maxOffDiagonalIndex % 4\n\t\t\tconst a_ii = S.m[5 * i], a_kk = S.m[5 * k], a_ik = S.m[maxOffDiagonalIndex]\n\t\t\tconst phi = a_ii === a_kk ? PI / 4 : Math.atan(2 * a_ik / (a_ii - a_kk)) / 2\n\t\t\tconsole.log(maxOffDiagonalIndex, i, k, 'phi', phi)\n\t\t\tconst cos = Math.cos(phi), sin = Math.sin(phi)\n\t\t\tconst givensRotation = matrixForCS(i, k, cos, -sin)\n\t\t\tassert(givensRotation.transposed().times(givensRotation).likeIdentity())\n\t\t\tconsole.log(givensRotation.str)\n\t\t\tV = V.times(givensRotation)\n\t\t\tS = M4.multiplyMultiple(givensRotation.transposed(), S, givensRotation)\n\t\t\tconsole.log(S.str)\n\t\t}\n\n\t\tconst sigma = S.map((el, elIndex) => elIndex % 5 == 0 ? Math.sqrt(el) : 0) as M4\n\t\treturn {\n\t\t\tU: M4.multiplyMultiple(A, V, sigma.map((el, elIndex) => elIndex % 5 == 0 ? 1 / el : 0)),\n\t\t\tSIGMA: sigma,\n\t\t\tVSTAR: V.transposed(),\n\t\t}\n\t}\n\n\tmap(fn: (el: number, elIndex: number, array: Float64Array) => number): M4 {\n\t\treturn M4.fromFunction4((x, y, i) => fn(this.m[i], i, this.m))\n\t}\n\n\tlikeM4(m4: M4): boolean {\n\t\tassertInst(M4, m4)\n\t\treturn this.m.every((el, index) => eq(el, m4.m[index]))\n\t}\n\n\t/**\n\t * Returns a new M4 equal to the transpose of this.\n\t */\n\ttransposed(): M4 {\n\t\treturn M4.transpose(this)\n\t}\n\n\t/**\n\t * Returns a new M4 which equal to (this * matrix) (in that order)\n\t */\n\ttimes(matrix: M4): M4 {\n\t\treturn M4.multiply(this, matrix)\n\t}\n\n\t/**\n\t * Transforms the vector as a point with a w coordinate of 1. This means translations will have an effect, for\n\t * example.\n\t */\n\ttransformPoint(v: V3): V3 {\n\t\tassertVectors(v)\n\t\tconst m = this.m\n\t\tconst vx = v.x, vy = v.y, vz = v.z, vw = 1\n\t\tconst x = vx * m[0] + vy * m[1] + vz * m[2] + vw * m[3]\n\t\tconst y = vx * m[4] + vy * m[5] + vz * m[6] + vw * m[7]\n\t\tconst z = vx * m[8] + vy * m[9] + vz * m[10] + vw * m[11]\n\t\tconst w = vx * m[12] + vy * m[13] + vz * m[14] + vw * m[15]\n\t\t// scale such that fourth element becomes 1:\n\t\treturn new V3(x / w, y / w, z / w)\n\t}\n\n\t/**\n\t * Transforms the vector as a vector with a w coordinate of 0. This means translations will have no effect, for\n\t * example. Will throw an exception if the calculated w component != 0. This occurs for example when attempting\n\t * to transform a vector with a perspective matrix.\n\t */\n\ttransformVector(v: V3): V3 {\n\t\tassertVectors(v)\n\t\tconst m = this.m\n\t\tconst w = v.x * m[12] + v.y * m[13] + v.z * m[14]\n\t\tassert(w === 0, () => 'w === 0 needs to be true for this to make sense (w =' + w + this.str)\n\t\treturn new V3(\n\t\t\tm[0] * v.x + m[1] * v.y + m[2] * v.z,\n\t\t\tm[4] * v.x + m[5] * v.y + m[6] * v.z,\n\t\t\tm[8] * v.x + m[9] * v.y + m[10] * v.z)\n\t}\n\n\ttransformedPoints(vs: V3[]): V3[] {\n\t\treturn vs.map(v => this.transformPoint(v))\n\t}\n\n\ttransformedVectors(vs: V3[]): V3[] {\n\t\treturn vs.map(v => this.transformVector(v))\n\t}\n\n\tnew() {\n\t\treturn new M4() as this\n\t}\n\n\tcopy(): M4 {\n\t\treturn M4.copy(this)\n\t}\n\n\tisRegular(): boolean {\n\t\treturn !eq0(this.determinant())\n\t}\n\n\tisAxisAligned(): boolean {\n\t\tconst m = this.m\n\t\treturn (1 >= +!eq0(m[0]) + +!eq0(m[1]) + +!eq0(m[2]))\n\t\t\t&& (1 >= +!eq0(m[4]) + +!eq0(m[5]) + +!eq0(m[6]))\n\t\t\t&& (1 >= +!eq0(m[8]) + +!eq0(m[9]) + +!eq0(m[10]))\n\t}\n\n\t/**\n\t * A matrix M is orthogonal iff M * M^T = I\n\t * I being the identity matrix.\n\t *\n\t * @returns If this matrix is orthogonal or very close to it. Comparison of the identity matrix and\n\t * this * this^T is done with {@link #likeM4}\n\t */\n\tisOrthogonal(): boolean {\n\t\t// return this.transposed().times(this).likeM4(M4.IDENTITY)\n\t\tM4.transpose(this, M4.temp0)\n\t\tM4.multiply(this, M4.temp0, M4.temp1)\n\t\treturn M4.IDENTITY.likeM4(M4.temp1)\n\t}\n\n\t/**\n\t * A matrix M is symmetric iff M == M^T\n\t * I being the identity matrix.\n\t *\n\t * @returns If this matrix is symmetric or very close to it. Comparison of the identity matrix and\n\t * this * this^T is done with {@link #likeM4}\n\t */\n\tisSymmetric(): boolean {\n\t\tM4.transpose(this, M4.temp0)\n\t\treturn this.likeM4(M4.temp0)\n\t}\n\n\t/**\n\t * A matrix M is normal1 iff M * M^-T == M^T * M TODO: ^-T?\n\t * I being the identity matrix.\n\t *\n\t * @returns If this matrix is symmetric or very close to it. Comparison of the identity matrix and\n\t * this * this^T is done with {@link #likeM4}\n\t */\n\tisNormal(): boolean {\n\t\tM4.transpose(this, M4.temp0) // temp0 = this^-T\n\t\tM4.multiply(this, M4.temp0, M4.temp1) // temp1 = this * this^-T\n\t\tM4.multiply(M4.temp0, this, M4.temp2) // temp2 = this^-T * this\n\t\treturn M4.temp1.likeM4(M4.temp2)\n\t}\n\n\t/**\n\t * Determinant of matrix.\n\t *\n\t * Notes:\n\t *      For matrices A and B\n\t *      det(A * B) = det(A) * det(B)\n\t *      det(A^-1) = 1 / det(A)\n\t */\n\tdeterminant(): number {\n\t\t/*\n\t\t | a b c d |\n\t\t | e f g h |\n\t\t | i j k l |\n\t\t | m n o p |\n\t\t */\n\t\tconst $ = this.m,\n\t\t\ta = $[0], b = $[1], c = $[2], d = $[3],\n\t\t\te = $[4], f = $[5], g = $[6], h = $[7],\n\t\t\ti = $[8], j = $[9], k = $[10], l = $[11],\n\t\t\tm = $[12], n = $[13], o = $[14], p = $[15],\n\t\t\tklop = k * p - l * o, jlnp = j * p - l * n, jkno = j * o - k * n,\n\t\t\tilmp = i * p - l * m, ikmo = i * o - k * m, ijmn = i * n - j * m\n\t\treturn (\n\t\t\ta * (f * klop - g * jlnp + h * jkno)\n\t\t\t- b * (e * klop - g * ilmp + h * ikmo)\n\t\t\t+ c * (e * jlnp - f * ilmp + h * ijmn)\n\t\t\t- d * (e * jkno - f * ikmo + g * ijmn))\n\t}\n\n\tdeterminant3(): number {\n\t\tconst [a, b, c, ,\n\t\t\td, e, f, ,\n\t\t\tg, h, i] = this.m\n\t\tconst det = a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g)\n\t\treturn det\n\t}\n\n\t/**\n\t * determine whether this matrix is a mirroring transformation\n\t */\n\tisMirroring(): boolean {\n\t\t/*\n\t\t var u = V(this.m[0], this.m[4], this.m[8])\n\t\t var v = V(this.m[1], this.m[5], this.m[9])\n\t\t var w = V(this.m[2], this.m[6], this.m[10])\n\n\t\t // for a true orthogonal, non-mirrored base, u.cross(v) == w\n\t\t // If they have an opposite direction then we are mirroring\n\t\t var mirrorvalue = u.cross(v).dot(w)\n\t\t var ismirror = (mirrorvalue < 0)\n\t\t return ismirror\n\t\t */\n\n\t\treturn this.determinant() < 0 // TODO: also valid for 4x4?\n\n\t}\n\n\t/**\n\t * Get the translation part of this matrix, i.e. the result of this.transformPoint(V3.O)\n\t */\n\tgetTranslation(): V3 {\n\t\tconst m = this.m, w = m[15]\n\t\treturn new V3(m[3] / w, m[7] / w, m[11] / w)\n\t}\n\n\t/**\n\t * Returns this matrix scaled so that the determinant is 1.\n\t * det(c * A) = (c ** n) * det(A) for n x n matrices,\n\t * so we need to divide by the 4th root of the determinant\n\t */\n\tnormalized(): M4 {\n\t\tconst detAbs = abs(this.determinant())\n\t\treturn 1 == detAbs ? this : this.divScalar(detAbs ** 0.25)\n\t}\n\n\t/**\n\t * Returns this matrix scaled so that the determinant is 1.\n\t * det(c * A) = (c ** n) * det(A) for n x n matrices,\n\t * so we need to divide by the 4th root of the determinant\n\t */\n\tnormalized2(): M4 {\n\t\tconst div = this.m[15]\n\t\treturn 1 == div ? this : this.divScalar(div ** 0.25)\n\t}\n\n\t/**\n\t * Returns if the matrix has the following form (within NLA_PRECISION):\n\t * a b c 0\n\t * c d e 0\n\t * f g h 0\n\t * 0 0 0 1\n\t */\n\tlike3x3(): boolean {\n\t\tconst m = this.m\n\t\treturn eq(1, m[15])\n\t\t\t&& eq0(m[12]) && eq0(m[13]) && eq0(m[14])\n\t\t\t&& eq0(m[3]) && eq0(m[7]) && eq0(m[11])\n\t}\n\n\tisNoProj(): boolean {\n\t\tconst m = this.m\n\t\treturn 0 == m[12] && 0 == m[13] && 0 == m[14] && 1 == m[15]\n\t}\n\n\tlikeIdentity(): boolean {\n\t\treturn this.m.every((val, i) => (i / 4 | 0) == (i % 4) ? eq(1, val) : eq0(val))\n\t}\n\n\tisIdentity(): boolean {\n\t\treturn this.m.every((val, i) => (i / 4 | 0) == (i % 4) ? 1 == val : 0 == val)\n\t}\n\n\ttoString(f?: (number: number) => string): string {\n\t\tf = f || ((v) => v.toFixed(6).replace(/([0.])(?=0*$)/g, ' ').toString())\n\t\tassert(typeof f(0) == 'string', '' + typeof f(0))\n\t\t// slice this.m to convert it to an Array (from TypeArray)\n\t\tconst rounded = Array.prototype.slice.call(this.m).map(f) as string[]\n\t\tconst colWidths = [0, 1, 2, 3].map((colIndex) => rounded.sliceStep(colIndex, 0, 4).map((x) => x.length).max())\n\t\treturn [0, 1, 2, 3].map(\n\t\t\t(rowIndex) => rounded\n\t\t\t\t.slice(rowIndex * 4, rowIndex * 4 + 4) // select matrix row\n\t\t\t\t.map((x, colIndex) => repeatString(colWidths[colIndex] - x.length, ' ') + x) // pad numbers with\n\t\t\t\t// spaces to col width\n\t\t\t\t.join(' '),\n\t\t).join('\\n') // join rows\n\t}\n\n\tisTranslation(): boolean {\n\t\t// 2: any value, otherwise same value\n\t\tconst mask = [\n\t\t\t1, 0, 0, 2,\n\t\t\t0, 1, 0, 2,\n\t\t\t0, 0, 1, 2,\n\t\t\t0, 0, 0, 1]\n\t\treturn mask.every((expected, index) => expected == 2 || expected == this.m[index])\n\t}\n\n\tisScaling(): boolean {\n\t\tconst mask = [\n\t\t\t2, 0, 0, 0,\n\t\t\t0, 2, 0, 0,\n\t\t\t0, 0, 2, 0,\n\t\t\t0, 0, 0, 1]\n\t\treturn mask.every((expected, index) => expected == 2 || expected == this.m[index])\n\t}\n\n\ttoSource(): string {\n\t\tif (this.isIdentity()) {\n\t\t\treturn 'M4.IDENTITY'\n\t\t} else if (this.isTranslation()) {\n\t\t\treturn callsce('M4.translate', this.O)\n\t\t} else if (this.isScaling()) {\n\t\t\treturn callsce('M4.scale', this.m[0], this.m[5], this.m[10])\n\t\t} else if (this.isNoProj()) {\n\t\t\treturn !this.O.equals(V3.O)\n\t\t\t\t? callsce('M4.forSys', this.X, this.Y, this.Z, this.O)\n\t\t\t\t: callsce('M4.forSys', this.X, this.Y, this.Z)\n\t\t}\n\t\tthrow new Error()\n\t}\n\n\txyAreaFactor(): number {\n\t\treturn this.transformVector(V3.X).cross(this.transformVector(V3.Y)).length()\n\t}\n}\n\nM4.prototype.height = 4\nM4.prototype.width = 4\n\nexport interface M4 extends Transformable { }\naddOwnProperties(M4.prototype, Transformable.prototype, 'constructor')\n","declare global {\n\tinterface Object {\n\t\ttoSource(): string\n\t}\n}\nconst KEYWORD_REGEXP = new RegExp\n\t('^(' +\n\t'abstract|boolean|break|byte|case|catch|char|class|const|continue|debugger|' +\n\t'default|delete|do|double|else|enum|export|extends|false|final|finally|' +\n\t'float|for|function|goto|if|implements|import|in|instanceof|int|interface|' +\n\t'long|native|new|null|package|private|protected|public|return|short|static|' +\n\t'super|switch|synchronized|this|throw|throws|transient|true|try|typeof|' +\n\t'undefined|var|void|volatile|while|with' +\n\t')$')\nfunction stringIsLegalKey(key: string) {\n\treturn /^[a-z_$][0-9a-z_$]*$/gi.test(key) && !KEYWORD_REGEXP.test(key)\n}\n\nconst seen: {}[] = []\nexport function toSource(o: {}, indent = 0) {\n\tif (undefined === o) return 'undefined'\n\tif (null === o) return 'null'\n\treturn o.toSource()\n\n}\nfunction addToSourceMethodToPrototype<T>(clazz: new (...args: {}[]) => T, method: (this: T) => string) {\n\tif (!clazz.prototype.toSource) {\n\t\tObject.defineProperty(clazz.prototype, 'toSource', { value: method, writable: true, configurable: true, enumerable: false })\n\t}\n}\n\naddToSourceMethodToPrototype(Boolean, Boolean.prototype.toString)\naddToSourceMethodToPrototype(Function, Function.prototype.toString)\naddToSourceMethodToPrototype(Number, Number.prototype.toString)\naddToSourceMethodToPrototype(RegExp, RegExp.prototype.toString)\naddToSourceMethodToPrototype(Date, function () {\n\treturn 'new Date(' + this.getTime() + ')'\n})\naddToSourceMethodToPrototype(String, function () {\n\treturn JSON.stringify(this)\n})\naddToSourceMethodToPrototype(Array, function () {\n\tif (seen.includes(this)) {\n\t\treturn 'CIRCULAR_REFERENCE'\n\t}\n\tseen.push(this)\n\tlet result = '['\n\tfor (let i = 0; i < this.length; i++) {\n\t\tresult += '\\n\\t' + toSource(this[i]).replace(/\\r\\n|\\n|\\r/g, '$&\\t')\n\t\tif (i !== this.length - 1) {\n\t\t\tresult += ','\n\t\t}\n\t}\n\tresult += (0 === this.length) ? ']' : '\\n]'\n\tseen.pop()\n\treturn result\n})\naddToSourceMethodToPrototype(Object, function () {\n\tif (seen.includes(this)) {\n\t\treturn 'CIRCULAR_REFERENCE'\n\t}\n\tseen.push(this)\n\tlet result = '{'\n\tconst keys = Object.keys(this).sort()\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst k = keys[i]\n\t\tresult += '\\n\\t' + (stringIsLegalKey(k) ? k : JSON.stringify(k)) + ': ' + toSource(this[k]).replace(/\\r\\n|\\n|\\r/g, '$&\\t')\n\t\tif (i !== keys.length - 1) {\n\t\t\tresult += ','\n\t\t}\n\t}\n\tresult += (0 === keys.length) ? '}' : '\\n}'\n\tseen.pop()\n\treturn result\n})\n","import {M4} from './M4'\nimport {assert, assertInst, assertNumbers, assertVectors, callsce, clamp, lt} from './NLA'\nimport {Transformable} from './Transformable'\nimport {V3} from './V3'\n\nexport class AABB extends Transformable {\n\tconstructor(public min: V3 = V3.INF,\n\t\t\t\tpublic max: V3 = V3.INF.negated()) {\n\t\tsuper()\n\t\tassertVectors(min, max)\n\t}\n\n\tstatic forXYZ(x: number, y: number, z: number): AABB {\n\t\treturn new AABB(V3.O, new V3(x, y, z))\n\t}\n\n\tstatic forAABBs(aabbs: Iterable<AABB>): AABB {\n\t\tconst result = new AABB()\n\t\tfor (const aabb of aabbs) {\n\t\t\tresult.addAABB(aabb)\n\t\t}\n\t\treturn result\n\t}\n\n\taddPoint(p: V3): this {\n\t\tassertVectors(p)\n\t\tthis.min = this.min.min(p)\n\t\tthis.max = this.max.max(p)\n\t\treturn this\n\t}\n\n\taddPoints(ps: V3[]): this {\n\t\tps.forEach(p => this.addPoint(p))\n\t\treturn this\n\t}\n\n\taddAABB(aabb: AABB): this {\n\t\tassertInst(AABB, aabb)\n\t\tthis.addPoint(aabb.min)\n\t\tthis.addPoint(aabb.max)\n\t\treturn this\n\t}\n\n\t/**\n\t * Returns the largest AABB contained in this which doesn't overlap with aabb\n\t * @param aabb\n\t */\n\twithoutAABB(aabb: AABB): AABB {\n\t\tassertInst(AABB, aabb)\n\t\tlet min, max\n\t\tconst volume = this.volume(), size = this.size()\n\t\tlet remainingVolume = -Infinity\n\t\tfor (let i = 0; i < 3; i++) {\n\t\t\tconst dim = ['x', 'y', 'z'][i] as 'x' | 'y' | 'z'\n\t\t\tconst cond = aabb.min[dim] - this.min[dim] > this.max[dim] - aabb.max[dim]\n\t\t\tconst dimMin = cond ? this.min[dim] : Math.max(this.min[dim], aabb.max[dim])\n\t\t\tconst dimMax = !cond ? this.max[dim] : Math.min(this.max[dim], aabb.min[dim])\n\t\t\tconst newRemainingVolume = (dimMax - dimMin) * volume / size[dim]\n\t\t\tif (newRemainingVolume > remainingVolume) {\n\t\t\t\tremainingVolume = newRemainingVolume\n\t\t\t\tmin = this.min.withElement(dim, dimMin)\n\t\t\t\tmax = this.max.withElement(dim, dimMax)\n\t\t\t}\n\t\t}\n\t\treturn new AABB(min, max)\n\t}\n\n\tgetIntersectionAABB(aabb: AABB): AABB {\n\t\tassertInst(AABB, aabb)\n\t\treturn new AABB(this.min.max(aabb.min), this.max.min(aabb.max))\n\t}\n\n\ttouchesAABB(aabb: AABB): boolean {\n\t\tassertInst(AABB, aabb)\n\t\treturn !(\n\t\t\tthis.min.x > aabb.max.x || this.max.x < aabb.min.x\n\t\t\t|| this.min.y > aabb.max.y || this.max.y < aabb.min.y\n\t\t\t|| this.min.z > aabb.max.z || this.max.z < aabb.min.z)\n\t}\n\n\tfuzzyTouchesAABB(aabb: AABB): boolean {\n\t\tassertInst(AABB, aabb)\n\t\treturn !(\n\t\t\tlt(aabb.max.x, this.min.x) || lt(this.max.x, aabb.min.x)\n\t\t\t|| lt(aabb.max.y, this.min.y) || lt(this.max.y, aabb.min.y)\n\t\t\t|| lt(aabb.max.z, this.min.z) || lt(this.max.z, aabb.min.z))\n\t}\n\n\tintersectsAABB(aabb: AABB): boolean {\n\t\tassertInst(AABB, aabb)\n\t\treturn !(\n\t\t\tthis.min.x >= aabb.max.x || this.max.x <= aabb.min.x\n\t\t\t|| this.min.y >= aabb.max.y || this.max.y <= aabb.min.y\n\t\t\t|| this.min.z >= aabb.max.z || this.max.z <= aabb.min.z)\n\t}\n\n\tintersectsAABB2d(aabb: AABB): boolean {\n\t\tassertInst(AABB, aabb)\n\t\treturn !(\n\t\t\tthis.min.x >= aabb.max.x || this.max.x <= aabb.min.x\n\t\t\t|| this.min.y >= aabb.max.y || this.max.y <= aabb.min.y)\n\t}\n\n\tcontainsPoint(p: V3): boolean {\n\t\tassertVectors(p)\n\t\treturn this.min.x <= p.x && this.min.y <= p.y && this.min.z <= p.z\n\t\t\t&& this.max.x >= p.x && this.max.y >= p.y && this.max.z >= p.z\n\t}\n\n\tcontainsSphere(center: V3, radius: number) {\n\t\tassertVectors(center)\n\t\tassertNumbers(radius)\n\t\treturn this.distanceToPoint(center) > radius\n\t}\n\n\tintersectsSphere(center: V3, radius: number) {\n\t\tassertVectors(center)\n\t\tassertNumbers(radius)\n\t\treturn this.distanceToPoint(center) <= radius\n\t}\n\n\tdistanceToPoint(p: V3) {\n\t\tassertVectors(p)\n\t\tconst x = p.x, y = p.y, z = p.z\n\t\tconst min = this.min, max = this.max\n\t\tif (this.containsPoint(p)) {\n\t\t\treturn Math.max(\n\t\t\t\tmin.x - x, x - max.x,\n\t\t\t\tmin.y - y, y - max.y,\n\t\t\t\tmin.z - z, z - max.z)\n\t\t}\n\t\treturn p.distanceTo(new V3(\n\t\t\tclamp(x, min.x, max.x),\n\t\t\tclamp(y, min.y, max.y),\n\t\t\tclamp(z, min.z, max.z)))\n\t}\n\n\tcontainsAABB(aabb: AABB) {\n\t\tassertInst(AABB, aabb)\n\t\treturn this.containsPoint(aabb.min) && this.containsPoint(aabb.max)\n\t}\n\n\tlikeAABB(aabb: AABB): boolean {\n\t\tassertInst(AABB, aabb)\n\t\treturn this.min.like(aabb.min) && this.max.like(aabb.max)\n\t}\n\n\tintersectsLine(line: { anchor: V3, dir1: V3, tMin: number, tMax: number }): boolean {\n\t\tassertVectors(line.anchor, line.dir1)\n\t\tconst dir = line.dir1.map(el => el || Number.MIN_VALUE)\n\t\tconst minTs = (this.min.minus(line.anchor)).divv(dir)\n\t\tconst maxTs = (this.max.minus(line.anchor)).divv(dir)\n\t\tconst tMin = minTs.min(maxTs).maxElement(), tMax = minTs.max(maxTs).minElement()\n\t\treturn tMin <= tMax && !(tMax < line.tMin || line.tMax < tMin)\n\t}\n\n\thasVolume(): boolean {\n\t\treturn this.min.x <= this.max.x && this.min.y <= this.max.y && this.min.z <= this.max.z\n\t}\n\n\tvolume(): number {\n\t\tif (!this.hasVolume()) {\n\t\t\treturn -1\n\t\t}\n\t\tconst v = this.max.minus(this.min)\n\t\treturn v.x * v.y * v.z\n\t}\n\n\tsize(): V3 {\n\t\treturn this.max.minus(this.min)\n\t}\n\n\tgetCenter(): V3 {\n\t\treturn this.min.plus(this.max).div(2)\n\t}\n\n\ttransform(m4: M4): this {\n\t\tassertInst(M4, m4)\n\t\tassert(m4.isAxisAligned())\n\t\tconst aabb = new AABB()\n\t\taabb.addPoint(m4.transformPoint(this.min))\n\t\taabb.addPoint(m4.transformPoint(this.max))\n\t\treturn aabb as this\n\t}\n\n\tofTransformed(m4: M4): AABB {\n\t\tassertInst(M4, m4)\n\t\tconst aabb = new AABB()\n\t\taabb.addPoints(m4.transformedPoints(this.corners()))\n\t\treturn aabb\n\t}\n\n\tcorners(): V3[] {\n\t\tconst min = this.min, max = this.max\n\t\treturn [\n\t\t\tmin,\n\t\t\tnew V3(min.x, min.y, max.z),\n\t\t\tnew V3(min.x, max.y, min.z),\n\t\t\tnew V3(min.x, max.y, max.z),\n\n\t\t\tnew V3(max.x, min.y, min.z),\n\t\t\tnew V3(max.x, min.y, max.z),\n\t\t\tnew V3(max.x, max.y, min.z),\n\t\t\tmax,\n\t\t]\n\t}\n\n\ttoString(): string {\n\t\treturn callsce('new AABB', this.min, this.max)\n\t}\n\n\ttoSource(): string {\n\t\treturn this.toString()\n\t}\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\n\tAABB, arrayFromFunction, assert, assertVectors, int, lerp, M4, NLA_PRECISION, raddd, Transformable, Tuple3, V, V3,\n} from 'ts3dutils'\n\nimport {Buffer} from './Buffer'\nimport {currentGL, GL_COLOR, pushQuad, TSGLContext} from './TSGLContext'\n\nconst {cos, sin, PI, min, max} = Math\nconst WGL = WebGLRenderingContext\n\n/**\n * @example new Mesh()\n *        .addIndexBuffer('TRIANGLES')\n *        .addIndexBuffer('LINES')\n *        .addVertexBuffer('normals', 'ts_Normal')\n */\nexport class Mesh extends Transformable {\n\thasBeenCompiled: boolean = false\n\tvertexBuffers: { [name: string]: Buffer } = {}\n\tindexBuffers: { [name: string]: Buffer } = {}\n\n\n\tvertices: V3[]\n\tnormals?: V3[]\n\tcoords?: [number, number][]\n\tcolors?: GL_COLOR[]\n\tTRIANGLES?: int[]\n\tLINES?: int[]\n\n\tconstructor() {\n\t\tsuper()\n\t\tthis.addVertexBuffer('vertices', 'ts_Vertex')\n\t}\n\n\tcalcVolume(this: Mesh & { TRIANGLES: int[] }): { volume: number, centroid: V3, area: number } {\n\t\tlet totalVolume = 0, totalCentroid = V3.O, totalAreaX2 = 0\n\t\tconst triangles = this.TRIANGLES\n\t\tconst vertices = this.vertices\n\t\tfor (let i = 0; i < triangles.length; i += 3) {\n\t\t\tconst i0 = triangles[i + 0], i1 = triangles[i + 1], i2 = triangles[i + 2]\n\t\t\tconst v0 = vertices[i0], v1 = vertices[i1], v2 = vertices[i2]\n\t\t\tconst v01 = v1.minus(v0), v02 = v2.minus(v0)\n\t\t\tconst normal = v01.cross(v02)\n\t\t\t//const centroidZ = (v0.z + v1.z + v2.z) / 3\n\t\t\t//totalVolume += centroidZ * (area === v01.cross(v02).length() / 2) * v01.cross(v02).unit().z\n\t\t\tconst faceCentroid = v0.plus(v1.plus(v2)).div(3)\n\t\t\ttotalVolume += faceCentroid.z * normal.z / 2\n\t\t\tconst faceAreaX2 = normal.length()\n\t\t\ttotalAreaX2 += faceAreaX2\n\t\t\ttotalCentroid = totalCentroid.plus(new V3(faceCentroid.x, faceCentroid.y, faceCentroid.z / 2).times(faceCentroid.z * normal.z / 2))\n\t\t}\n\t\t// sumInPlaceTree adds negligible additional accuracy for XY sphere\n\t\treturn {volume: totalVolume, centroid: totalCentroid.div(triangles.length / 3), area: totalAreaX2 / 2}\n\t}\n\n\t/**\n\t * Add a new vertex buffer with a list as a property called `name` on this object and map it to\n\t * the attribute called `attribute` in all shaders that draw this mesh.\n\t * @example new Mesh().addVertexBuffer('coords', 'ts_TexCoord')\n\t */\n\n\taddVertexBuffer<K extends string>(name: K, attribute: string): this & { [k in K]: any[] } {\n\t\tassert(!this.vertexBuffers[attribute], 'Buffer ' + attribute + ' already exists.')\n\t\t//assert(!this[name])\n\t\tthis.hasBeenCompiled = false\n\t\tassert('string' == typeof name)\n\t\tassert('string' == typeof attribute)\n\t\tconst buffer = this.vertexBuffers[attribute] = new Buffer(WGL.ARRAY_BUFFER, Float32Array)\n\t\tbuffer.name = name\n\t\t;(this as any)[name] = []\n\t\treturn this as any\n\t}\n\n\t/**\n\t * Add a new index buffer.\n\t * @example new Mesh().addIndexBuffer('TRIANGLES')\n\t * @example new Mesh().addIndexBuffer('LINES')\n\t */\n\taddIndexBuffer<K extends string>(name: K): this & { [k in K]: int[] } {\n\t\tthis.hasBeenCompiled = false\n\t\tconst buffer = this.indexBuffers[name] = new Buffer(WGL.ELEMENT_ARRAY_BUFFER, Uint16Array)\n\t\tbuffer.name = name\n\t\t;(this as any)[name] = []\n\t\treturn this as any\n\t}\n\n\tconcat<T extends Mesh>(...others: T[]): T {\n\t\tconst mesh = new Mesh() as any\n\t\t;[this as Mesh].concat(others).forEach((oldMesh: any) => {\n\t\t\tconst startIndex = mesh.vertices ? mesh.vertices.length : 0\n\t\t\tObject.getOwnPropertyNames(oldMesh.vertexBuffers).forEach(attribute => {\n\t\t\t\tconst bufferName = this.vertexBuffers[attribute].name!\n\t\t\t\tif (!mesh.vertexBuffers[attribute]) {\n\t\t\t\t\tmesh.addVertexBuffer(bufferName, attribute)\n\t\t\t\t}\n\t\t\t\tmesh[bufferName].push(...oldMesh[bufferName])\n\t\t\t})\n\t\t\tObject.getOwnPropertyNames(oldMesh.indexBuffers).forEach(name => {\n\t\t\t\tif (!mesh.indexBuffers[name]) {\n\t\t\t\t\tmesh.addIndexBuffer(name)\n\t\t\t\t}\n\t\t\t\tmesh[name].push(...(oldMesh[name] as int[]).map(index => index + startIndex))\n\t\t\t})\n\t\t})\n\t\treturn mesh\n\t}\n\n\t/**\n\t * Upload all attached buffers to the GPU in preparation for rendering. This doesn't need to be called every\n\t * frame, only needs to be done when the data changes.\n\t *\n\t * Sets `this.hasBeenCompiled` to true.\n\t */\n\tcompile(gl: TSGLContext = currentGL()) {\n\t\t// figure out shortest vertex buffer to make sure indexBuffers are in bounds\n\t\tlet minVertexBufferLength = Infinity// TODO, _minBufferName\n\t\tObject.getOwnPropertyNames(this.vertexBuffers).forEach(attribute => {\n\t\t\tconst buffer = this.vertexBuffers[attribute]\n\t\t\tbuffer.data = (this as any)[buffer.name!]\n\t\t\tbuffer.compile(undefined, gl)\n\t\t\tif ((this as any)[buffer.name!].length < minVertexBufferLength) {\n\t\t\t\t// _minBufferName = attribute\n\t\t\t\tminVertexBufferLength = (this as any)[buffer.name!].length\n\t\t\t}\n\t\t})\n\n\t\tfor (const name in this.indexBuffers) {\n\t\t\tconst buffer = this.indexBuffers[name]\n\t\t\tbuffer.data = (this as any)[buffer.name!]\n\t\t\tbuffer.compile(undefined, gl)\n\t\t\t// if (NLA_DEBUG && buffer.maxValue >= minVertexBufferLength) {\n\t\t\t// \tthrow new Error(`max index value for buffer ${name}\n\t\t\t// \tis too large ${buffer.maxValue} min Vbuffer size: ${minVertexBufferLength} ${minBufferName}`)\n\t\t\t// }\n\t\t}\n\t\tthis.hasBeenCompiled = true\n\t\treturn this\n\t}\n\n\tstatic async fromBinarySTL(stl: Blob) {\n\t\treturn new Promise<Mesh & { normals: V3[] }>((resolve, reject) => {\n\t\t\tconst mesh = new Mesh()\n\t\t\t\t.addVertexBuffer('normals', 'ts_Normal')\n\t\t\tconst fileReader = new FileReader()\n\t\t\tfileReader.onerror = reject\n\t\t\tfileReader.onload = function (_progressEvent) {\n\t\t\t\tconst dataView = new DataView(this.result)\n\t\t\t\tconst HEADER_BYTE_SIZE = 80\n\t\t\t\tconst triangleCount = dataView.getUint32(HEADER_BYTE_SIZE, true)\n\t\t\t\tmesh.normals.length = triangleCount * 3\n\t\t\t\tmesh.vertices.length = triangleCount * 3\n\t\t\t\tlet i = triangleCount * 3, bufferPtr = HEADER_BYTE_SIZE + 4\n\n\t\t\t\tfunction readV3() {\n\t\t\t\t\tconst x = dataView.getFloat32(bufferPtr, true)\n\t\t\t\t\tbufferPtr += 4\n\t\t\t\t\tconst y = dataView.getFloat32(bufferPtr, true)\n\t\t\t\t\tbufferPtr += 4\n\t\t\t\t\tconst z = dataView.getFloat32(bufferPtr, true)\n\t\t\t\t\tbufferPtr += 4\n\t\t\t\t\treturn new V3(x, y, z)\n\t\t\t\t}\n\n\t\t\t\twhile (i) {\n\t\t\t\t\ti -= 3\n\t\t\t\t\tconst normal = readV3()\n\t\t\t\t\tmesh.normals[i + 0] = normal\n\t\t\t\t\tmesh.normals[i + 1] = normal\n\t\t\t\t\tmesh.normals[i + 2] = normal\n\t\t\t\t\tmesh.vertices[i + 0] = readV3()\n\t\t\t\t\tmesh.vertices[i + 1] = readV3()\n\t\t\t\t\tmesh.vertices[i + 2] = readV3()\n\n\t\t\t\t\tbufferPtr += 2\n\t\t\t\t}\n\t\t\t\tresolve(mesh)\n\t\t\t}\n\t\t\tfileReader.readAsArrayBuffer(stl)\n\t\t})\n\t}\n\n\ttoBinarySTL(this: Mesh & { TRIANGLES: number[] }): Blob {\n\t\tif (!this.TRIANGLES) throw new Error('TRIANGLES must be defined.')\n\t\tconst HEADER_BYTE_SIZE = 80, FLOAT_BYTE_SIZE = 4\n\t\tconst triangles = this.TRIANGLES\n\t\tconst triangleCount = triangles.length / 3\n\t\tconst buffer = new ArrayBuffer(HEADER_BYTE_SIZE + 4 + triangleCount * (4 * 3 * FLOAT_BYTE_SIZE + 2))\n\t\tconst dataView = new DataView(buffer)\n\t\tdataView.setUint32(HEADER_BYTE_SIZE, triangleCount, true)\n\t\tlet bufferPtr = HEADER_BYTE_SIZE + 4\n\t\tlet i = triangles.length\n\t\twhile (i) {\n\t\t\ti -= 3\n\t\t\tconst a = this.vertices[triangles[i]], b = this.vertices[triangles[i + 1]],\n\t\t\t\tc = this.vertices[triangles[i + 2]]\n\t\t\tconst normal = V3.normalOnPoints(a, b, c)\n\n\t\t\t;[normal, a, b, c].forEach(v => {\n\t\t\t\tdataView.setFloat32(bufferPtr, v.x, true)\n\t\t\t\tbufferPtr += 4\n\t\t\t\tdataView.setFloat32(bufferPtr, v.y, true)\n\t\t\t\tbufferPtr += 4\n\t\t\t\tdataView.setFloat32(bufferPtr, v.z, true)\n\t\t\t\tbufferPtr += 4\n\t\t\t})\n\t\t\t// skip 2 bytes, already initalized to zero\n\t\t\tbufferPtr += 2\n\t\t}\n\t\tassert(bufferPtr == buffer.byteLength, bufferPtr + ' ' + buffer.byteLength)\n\t\treturn new Blob([buffer], {type: 'application/octet-stream'})\n\n\t}\n\n\t/**\n\t * Transform all vertices by `matrix` and all normals by the inverse transpose of `matrix`.\n\t *\n\t * Index buffer data is referenced.\n\t */\n\ttransform(m4: M4): this {\n\t\tconst mesh = new Mesh()\n\t\tmesh.vertices = m4.transformedPoints(this.vertices)\n\t\tif (this.normals) {\n\t\t\tmesh.addVertexBuffer('normals', 'ts_Normal')\n\t\t\tconst invTrans = m4.as3x3().inversed().transposed().normalized()\n\t\t\tmesh.normals = this.normals.map(n => invTrans.transformVector(n).unit())\n\t\t\t// mesh.normals.forEach(n => assert(n.hasLength(1)))\n\t\t}\n\t\tfor (const name in this.indexBuffers) {\n\t\t\tmesh.addIndexBuffer(name)\n\t\t\t;(mesh as any)[name] = (this as any)[name]\n\t\t}\n\t\tfor (const attribute in this.vertexBuffers) {\n\t\t\tif ('ts_Vertex' !== attribute && 'ts_Normal' !== attribute) {\n\t\t\t\tconst name = this.vertexBuffers[attribute].name!\n\t\t\t\tmesh.addVertexBuffer(name, attribute)\n\t\t\t\t;(mesh as any)[name] = (this as any)[name]\n\t\t\t}\n\t\t}\n\t\tmesh.compile()\n\t\treturn mesh as this\n\t}\n\n\t/**\n\t * Computes a new normal1 for each vertex from the average normal1 of the neighboring triangles. This means\n\t * adjacent triangles must share vertices for the resulting normals to be smooth.\n\t */\n\tcomputeNormalsFromFlatTriangles(this: Mesh & { TRIANGLES: int[] }): this & { normals: V3[] } {\n\t\tif (!this.normals) this.addVertexBuffer('normals', 'ts_Normal')\n\t\t// tslint:disable:no-string-literal\n\t\t//this.vertexBuffers['ts_Normal'].data = arrayFromFunction(this.vertices.length, i => V3.O)\n\n\t\tconst TRIANGLES = this.TRIANGLES, vertices = this.vertices, normals = this.normals!\n\t\tnormals.length = vertices.length\n\t\tfor (let i = 0; i < TRIANGLES.length; i += 3) {\n\t\t\tconst ai = TRIANGLES[i], bi = TRIANGLES[i + 1], ci = TRIANGLES[i + 2]\n\t\t\tconst a = vertices[ai]\n\t\t\tconst b = vertices[bi]\n\t\t\tconst c = vertices[ci]\n\t\t\tconst normal = b.minus(a).cross(c.minus(a)).unit()\n\t\t\tnormals[ai] = normals[ai].plus(normal)\n\t\t\tnormals[bi] = normals[bi].plus(normal)\n\t\t\tnormals[ci] = normals[ci].plus(normal)\n\t\t}\n\t\tfor (let i = 0; i < vertices.length; i++) {\n\t\t\tnormals[i] = normals[i].unit()\n\t\t}\n\t\tthis.hasBeenCompiled = false\n\t\treturn this as any\n\t}\n\n\n\t/**\n\t * Populate the `LINES` index buffer from the `triangles` index buffer.\n\t */\n\tcomputeWireframeFromFlatTriangles(this: Mesh & { TRIANGLES: int[] }): this & { LINES: int[] }\n\tcomputeWireframeFromFlatTriangles<T extends string>(this: Mesh & { TRIANGLES: int[] },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tindexBufferName: T): this & { [k in T]: int[] }\n\tcomputeWireframeFromFlatTriangles(this: any, indexBufferName: string = 'LINES'): this {\n\t\tif (!this.TRIANGLES) throw new Error('TRIANGLES must be defined.')\n\t\tconst canonEdges = new Set()\n\n\t\tfunction canonEdge(i0: int, i1: int) {\n\t\t\tconst iMin = min(i0, i1), iMax = max(i0, i1)\n\t\t\treturn (iMin << 16) | iMax\n\t\t}\n\n\t\t// function uncanonEdge(key) {\n\t\t// \treturn [key >> 16, key & 0xffff]\n\t\t// }\n\t\tconst t = this.TRIANGLES\n\t\tfor (let i = 0; i < t.length; i += 3) {\n\t\t\tcanonEdges.add(canonEdge(t[i + 0], t[i + 1]))\n\t\t\tcanonEdges.add(canonEdge(t[i + 1], t[i + 2]))\n\t\t\tcanonEdges.add(canonEdge(t[i + 2], t[i + 0]))\n\t\t}\n\t\tconst data = indexBufferName\n\t\tif (!this[data]) this.addIndexBuffer(indexBufferName)\n\t\t//this.LINES = new Array(canonEdges.size)\n\t\tcanonEdges.forEach(val => this[data].push(val >> 16, val & 0xffff))\n\t\tthis.hasBeenCompiled = false\n\t\treturn this\n\t}\n\n\tcomputeWireframeFromFlatTrianglesClosedMesh(this: Mesh & { TRIANGLES: int[] }): this & { LINES: int[] }\n\tcomputeWireframeFromFlatTrianglesClosedMesh<T extends string>(this: Mesh & { TRIANGLES: int[] },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  indexBufferName: T): this & { [k in T]: int[] }\n\tcomputeWireframeFromFlatTrianglesClosedMesh(this: any, indexBufferName: string = 'LINES'): this {\n\t\tif (!this.TRIANGLES) throw new Error('TRIANGLES must be defined.')\n\t\tif (!this.LINES) this.addIndexBuffer('LINES')\n\t\tconst tris = this.TRIANGLES\n\t\tif (!this[indexBufferName]) this.addIndexBuffer(indexBufferName)\n\t\tconst lines = this[indexBufferName]\n\t\tfor (let i = 0; i < tris.length; i += 3) {\n\t\t\tif (tris[i + 0] < tris[i + 1]) lines.push(tris[i + 0], tris[i + 1])\n\t\t\tif (tris[i + 1] < tris[i + 2]) lines.push(tris[i + 1], tris[i + 2])\n\t\t\tif (tris[i + 2] < tris[i + 0]) lines.push(tris[i + 2], tris[i + 0])\n\t\t}\n\t\tthis.hasBeenCompiled = false\n\t\treturn this\n\t}\n\n\tcomputeNormalLines(this: Mesh & { normals: V3[] }, length: number): this & { LINES: int[] }\n\tcomputeNormalLines<T extends string>(this: Mesh & { normals: V3[] },\n\t\t\t\t\t\t\t\t\t\t length: number, indexBufferName: T): this & { [k in T]: int[] }\n\tcomputeNormalLines(this: any, length: number = 1, indexBufferName: string = 'LINES') {\n\t\tif (!this.normals) {\n\t\t\tthrow new Error('normals must be defined.')\n\t\t}\n\t\tconst vs = this.vertices, si = this.vertices.length\n\t\tif (!this[indexBufferName]) this.addIndexBuffer(indexBufferName)\n\n\t\tfor (let i = 0; i < this.normals.length; i++) {\n\t\t\tvs[si + i] = vs[i].plus(this.normals[i].toLength(length))\n\t\t\tthis[indexBufferName].push(si + i, i)\n\t\t}\n\t\tthis.hasBeenCompiled = false\n\t\treturn this\n\t}\n\n\tgetAABB(): AABB {\n\t\treturn new AABB().addPoints(this.vertices)\n\t}\n\n\tgetBoundingSphere(): { center: V3, radius: number } {\n\t\tconst sphere = {center: this.getAABB().getCenter(), radius: 0}\n\t\tfor (let i = 0; i < this.vertices.length; i++) {\n\t\t\tsphere.radius = Math.max(sphere.radius, this.vertices[i].minus(sphere.center).length())\n\t\t}\n\t\treturn sphere\n\t}\n\n\n\t// ### Mesh.plane([options])\n\t//\n\t// Generates a square 2x2 mesh the xy plane centered at the origin. The\n\t// `options` argument specifies options to pass to the mesh constructor.\n\t// Additional options include `detailX` and `detailY`, which set the tesselation\n\t// in x and y, and `detail`, which sets both `detailX` and `detailY` at once.\n\t// Two triangles are generated by default.\n\t// Example usage:\n\t//\n\t//     var mesh1 = Mesh.plane();\n\t//     var mesh2 = Mesh.plane({ detail: 5 });\n\t//     var mesh3 = Mesh.plane({ detailX: 20, detailY: 40 });\n\t//\n\t/**\n\t * Generates a square mesh in the XY plane.\n\t * Texture coordinates (buffer \"coords\") are set to go from 0 to 1 in either direction.\n\t *\n\t *\n\t * @param {Object=} options\n\t * @param {number=} options.detail Defaults to 1\n\t * @param {number=} options.detailX Defaults to options.detail. Number of subdivisions in X direction.\n\t * @param {number=} options.detailY Defaults to options.detail. Number of subdivisions in Y direction.j\n\t * @param {number=} options.width defaults to 1\n\t * @param {number=} options.height defaults to 1\n\t * @param {number=} options.startX defaults to 0\n\t * @param {number=} options.startY defaults to 0\n\t */\n\tstatic plane(options: {\n\t\tdetail?: int,\n\t\tdetailX?: int,\n\t\tdetailY?: int,\n\t\twidth?: number,\n\t\theight?: number,\n\t\tstartX?: number,\n\t\tstartY?: number\n\t} = {}) {\n\t\tconst detailX = options.detailX || options.detail || 1\n\t\tconst detailY = options.detailY || options.detail || 1\n\t\tconst startX = options.startX || 0\n\t\tconst startY = options.startY || 0\n\t\tconst width = options.width || 1\n\t\tconst height = options.height || 1\n\t\tconst mesh = new Mesh()\n\t\t\t.addIndexBuffer('LINES')\n\t\t\t.addIndexBuffer('TRIANGLES')\n\t\t\t.addVertexBuffer('normals', 'ts_Normal')\n\t\t\t.addVertexBuffer('coords', 'ts_TexCoord')\n\n\t\tfor (let j = 0; j <= detailY; j++) {\n\t\t\tconst t = j / detailY\n\t\t\tfor (let i = 0; i <= detailX; i++) {\n\t\t\t\tconst s = i / detailX\n\t\t\t\tmesh.vertices.push(new V3(startX + s * width, startY + t * height, 0))\n\t\t\t\tmesh.coords.push([s, t])\n\t\t\t\tmesh.normals.push(V3.Z)\n\t\t\t\tif (i < detailX && j < detailY) {\n\t\t\t\t\tconst offset = i + j * (detailX + 1)\n\t\t\t\t\tmesh.TRIANGLES.push(\n\t\t\t\t\t\toffset, offset + detailX + 1, offset + 1,\n\t\t\t\t\t\toffset + detailX + 1, offset + detailX + 2, offset + 1)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < detailX; i++) {\n\t\t\tmesh.LINES.push(i, i + 1)\n\t\t\tmesh.LINES.push((detailX + 1) * detailY + i, (detailX + 1) * detailY + i + 1)\n\t\t}\n\t\tfor (let j = 0; j < detailY; j++) {\n\t\t\tmesh.LINES.push(detailX * j, detailX * (j + 1) + 1)\n\t\t\tmesh.LINES.push(detailX * (j + 1), detailX * (j + 2) + 1)\n\t\t}\n\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\t// unique corners of a unit cube. Used by Mesh.cube to generate a cube mesh.\n\tstatic UNIT_CUBE_CORNERS = [\n\t\tV3.O,\n\t\tnew V3(0, 0, 1),\n\t\tnew V3(0, 1, 0),\n\t\tnew V3(0, 1, 1),\n\n\t\tnew V3(1, 0, 0),\n\t\tnew V3(1, 0, 1),\n\t\tnew V3(1, 1, 0),\n\t\tV3.XYZ,\n\t]\n\n\t/**\n\t * Generates a unit cube (1x1x1) starting at the origin and extending into the (+ + +) octant.\n\t * I.e. box from V3.O to V3(1,1,1)\n\t * Creates line, triangle, vertex and normal1 buffers.\n\t */\n\tstatic cube() {\n\t\tconst mesh = new Mesh()\n\t\t\t.addVertexBuffer('normals', 'ts_Normal')\n\t\t\t.addIndexBuffer('TRIANGLES')\n\t\t\t.addIndexBuffer('LINES')\n\n\t\t// basically indexes for faces of the cube. vertices each need to be added 3 times,\n\t\t// as they have different normals depending on the face being rendered\n\t\tconst VERTEX_CORNERS = [\n\t\t\t0, 1, 2, 3, // X = 0\n\t\t\t4, 5, 6, 7, // X = 1\n\n\t\t\t0, 4, 1, 5, // Y = 0\n\t\t\t2, 6, 3, 7, // Y = 1\n\n\t\t\t2, 6, 0, 4, // Z = 0\n\t\t\t3, 7, 1, 5, // Z = 1\n\t\t]\n\t\tmesh.vertices = VERTEX_CORNERS.map(i => Mesh.UNIT_CUBE_CORNERS[i])\n\t\tmesh.normals = [V3.X.negated(), V3.X, V3.Y.negated(), V3.Y, V3.Z.negated(), V3.Z].map(v => [v, v, v, v]).concatenated()\n\t\tfor (let i = 0; i < 6 * 4; i += 4) {\n\t\t\tpushQuad(mesh.TRIANGLES, 0 != i % 8,\n\t\t\t\tVERTEX_CORNERS[i], VERTEX_CORNERS[i + 1], VERTEX_CORNERS[i + 2], VERTEX_CORNERS[i + 3])\n\t\t}\n\t\t// indexes of LINES relative to UNIT_CUBE_CORNERS. Mapped to VERTEX_CORNERS.indexOf\n\t\t// so they make sense in the context of the mesh\n\t\tmesh.LINES = [\n\t\t\t0, 1,\n\t\t\t0, 2,\n\t\t\t1, 3,\n\t\t\t2, 3,\n\n\t\t\t0, 4,\n\t\t\t1, 5,\n\t\t\t2, 6,\n\t\t\t3, 7,\n\n\t\t\t4, 5,\n\t\t\t4, 6,\n\t\t\t5, 7,\n\t\t\t6, 7,\n\t\t].map(i => VERTEX_CORNERS.indexOf(i))\n\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\tstatic isocahedron() {\n\t\treturn Mesh.sphere(0)\n\t}\n\n\tstatic sphere2(las: int, longs: int) {\n\t\tconst baseVertices = arrayFromFunction(las, i => {\n\t\t\tconst angle = i / (las - 1) * PI - PI / 2\n\t\t\treturn new V3(0, cos(angle), sin(angle))\n\t\t})\n\t\treturn Mesh.rotation(baseVertices, {anchor: V3.O, dir1: V3.Z}, 2 * PI, longs, true, baseVertices)\n\t}\n\n\t/**\n\t * Returns a sphere mesh with radius 1 created by subdividing the faces of a isocahedron (20-sided) recursively\n\t * The sphere is positioned at the origin\n\t * @param subdivisions\n\t *      How many recursive divisions to do. A subdivision divides a triangle into 4,\n\t *      so the total number of triangles is 20 * 4^subdivisions\n\t * @returns\n\t *      Contains vertex and normal1 buffers and index buffers for triangles and LINES\n\t */\n\tstatic sphere(subdivisions: int = 3) {\n\t\tconst golden = (1 + Math.sqrt(5)) / 2, u = new V3(1, golden, 0).unit(), s = u.x, t = u.y\n\t\t// base vertices of isocahedron\n\t\tconst vertices = [\n\t\t\tnew V3(-s, t, 0),\n\t\t\tnew V3(s, t, 0),\n\t\t\tnew V3(-s, -t, 0),\n\t\t\tnew V3(s, -t, 0),\n\n\t\t\tnew V3(0, -s, t),\n\t\t\tnew V3(0, s, t),\n\t\t\tnew V3(0, -s, -t),\n\t\t\tnew V3(0, s, -t),\n\n\t\t\tnew V3(t, 0, -s),\n\t\t\tnew V3(t, 0, s),\n\t\t\tnew V3(-t, 0, -s),\n\t\t\tnew V3(-t, 0, s)]\n\t\t// base triangles of isocahedron\n\t\tconst triangles = [\n\t\t\t// 5 faces around point 0\n\t\t\t0, 11, 5,\n\t\t\t0, 5, 1,\n\t\t\t0, 1, 7,\n\t\t\t0, 7, 10,\n\t\t\t0, 10, 11,\n\n\t\t\t// 5 adjacent faces\n\t\t\t1, 5, 9,\n\t\t\t5, 11, 4,\n\t\t\t11, 10, 2,\n\t\t\t10, 7, 6,\n\t\t\t7, 1, 8,\n\n\t\t\t// 5 faces around point 3\n\t\t\t3, 9, 4,\n\t\t\t3, 4, 2,\n\t\t\t3, 2, 6,\n\t\t\t3, 6, 8,\n\t\t\t3, 8, 9,\n\n\t\t\t// 5 adjacent faces\n\t\t\t4, 9, 5,\n\t\t\t2, 4, 11,\n\t\t\t6, 2, 10,\n\t\t\t8, 6, 7,\n\t\t\t9, 8, 1,\n\t\t]\n\n\t\t/**\n\t\t * Tesselates triangle a b c\n\t\t * a b c must already be in vertices with the indexes ia ib ic\n\t\t * res is the number of subdivisions to do. 0 just results in triangle and line indexes being added to the\n\t\t * respective buffers.\n\t\t */\n\t\tfunction tesselateRecursively(a: V3, b: V3, c: V3, res: int, vertices: V3[], triangles: int[],\n\t\t\t\t\t\t\t\t\t  ia: int, ib: int, ic: int, lines: int[]) {\n\t\t\tif (0 == res) {\n\t\t\t\ttriangles.push(ia, ib, ic)\n\t\t\t\tif (ia < ib) lines.push(ia, ib)\n\t\t\t\tif (ib < ic) lines.push(ib, ic)\n\t\t\t\tif (ic < ia) lines.push(ic, ia)\n\t\t\t} else {\n\t\t\t\t// subdivide the triangle abc into 4 by adding a vertex (with the correct distance from the origin)\n\t\t\t\t// between each segment ab, bc and cd, then calling the function recursively\n\t\t\t\tconst abMid1 = a.plus(b).toLength(1), bcMid1 = b.plus(c).toLength(1), caMid1 = c.plus(a).toLength(1)\n\t\t\t\t// indexes of new vertices:\n\t\t\t\tconst iabm = vertices.length, ibcm = iabm + 1, icam = iabm + 2\n\t\t\t\tvertices.push(abMid1, bcMid1, caMid1)\n\t\t\t\ttesselateRecursively(abMid1, bcMid1, caMid1, res - 1, vertices, triangles, iabm, ibcm, icam, lines)\n\t\t\t\ttesselateRecursively(a, abMid1, caMid1, res - 1, vertices, triangles, ia, iabm, icam, lines)\n\t\t\t\ttesselateRecursively(b, bcMid1, abMid1, res - 1, vertices, triangles, ib, ibcm, iabm, lines)\n\t\t\t\ttesselateRecursively(c, caMid1, bcMid1, res - 1, vertices, triangles, ic, icam, ibcm, lines)\n\t\t\t}\n\t\t}\n\n\t\tconst mesh = new Mesh()\n\t\t\t.addVertexBuffer('normals', 'ts_Normal')\n\t\t\t.addIndexBuffer('TRIANGLES')\n\t\t\t.addIndexBuffer('LINES')\n\t\tmesh.vertices.push(...vertices)\n\t\tsubdivisions = undefined == subdivisions ? 4 : subdivisions\n\t\tfor (let i = 0; i < 20; i++) {\n\t\t\tconst [ia, ic, ib] = triangles.slice(i * 3, i * 3 + 3)\n\t\t\ttesselateRecursively(vertices[ia], vertices[ic], vertices[ib], subdivisions, mesh.vertices, mesh.TRIANGLES, ia, ic, ib, mesh.LINES)\n\t\t}\n\n\t\tmesh.normals = mesh.vertices\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\tstatic aabb(aabb: AABB) {\n\t\tconst matrix = M4.multiplyMultiple(\n\t\t\tM4.translate(aabb.min),\n\t\t\tM4.scale(aabb.size().max(new V3(NLA_PRECISION, NLA_PRECISION, NLA_PRECISION))))\n\t\tconst mesh = Mesh.cube().transform(matrix)\n\t\t// mesh.vertices = aabb.corners()\n\t\tmesh.computeNormalLines(20)\n\t\tmesh.compile()\n\n\t\treturn mesh\n\t}\n\n\n\tstatic offsetVertices(vertices: V3[], offset: V3, close: boolean): Mesh & { TRIANGLES: int[], coords: [number, number][] }\n\tstatic offsetVertices(vertices: V3[], offset: V3, close: boolean, normals: V3[]): Mesh & { TRIANGLES: int[], coords: [number, number][], normals: V3[] }\n\tstatic offsetVertices(vertices: V3[], offset: V3, close: boolean, normals?: V3[]) {\n\t\tassertVectors.apply(undefined, vertices)\n\t\tassertVectors(offset)\n\n\t\tconst mesh = new Mesh()\n\t\t\t.addIndexBuffer('TRIANGLES')\n\t\t\t.addVertexBuffer('coords', 'ts_TexCoord')\n\t\tnormals && mesh.addVertexBuffer('normals', 'ts_Normal')\n\t\tmesh.vertices = vertices.concat(vertices.map(v => v.plus(offset)))\n\t\tconst vl = vertices.length\n\t\tmesh.coords = arrayFromFunction(vl * 2, (i): [number, number] => [(i % vl) / vl, (i / vl) | 0])\n\n\t\tconst triangles = mesh.TRIANGLES\n\t\tfor (let i = 0; i < vertices.length - 1; i++) {\n\t\t\tpushQuad(triangles, false,\n\t\t\t\ti, i + 1,\n\t\t\t\tvertices.length + i, vertices.length + i + 1)\n\t\t}\n\t\tif (close) {\n\t\t\tpushQuad(triangles, false, 0, vertices.length - 1, vertices.length, vertices.length * 2 - 1)\n\t\t}\n\t\tif (normals) {\n\t\t\tmesh.normals = normals.concat(normals)\n\t\t}\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\t// Creates a new $Mesh by rotating $vertices by $totalRads around $lineAxis (according to the right-hand\n\t// rule). $steps is the number of steps to take. $close is whether the vertices of the first and last step\n\t// should be connected by triangles. If $normals is set (pass an array of V3s of the same length as $vertices),\n\t// these will also be rotated and correctly added to the mesh.\n\t// @example const precious = Mesh.rotation([V(10, 0, -2), V(10, 0, 2), V(11, 0, 2), V(11, 0, -2)], , L3.Z, 512)\n\tstatic rotation(vertices: V3[], lineAxis: { anchor: V3, dir1: V3 }, totalRads: raddd, steps: int, close = true, normals?: V3[]) {\n\t\tconst mesh = new Mesh().addIndexBuffer('TRIANGLES')\n\t\tnormals && mesh.addVertexBuffer('normals', 'ts_Normal')\n\t\tconst vc = vertices.length, vTotal = vc * steps\n\n\t\tconst rotMat = new M4()\n\t\tconst triangles = mesh.TRIANGLES\n\t\tfor (let i = 0; i < steps; i++) {\n\t\t\t// add triangles\n\t\t\tconst rads = totalRads / steps * i\n\t\t\tM4.rotateLine(lineAxis.anchor, lineAxis.dir1, rads, rotMat)\n\t\t\tmesh.vertices.push(...rotMat.transformedPoints(vertices))\n\n\t\t\tnormals && mesh.normals!.push(...rotMat.transformedVectors(normals))\n\t\t\tif (close || i !== steps - 1) {\n\t\t\t\tfor (let j = 0; j < vc - 1; j++) {\n\t\t\t\t\tpushQuad(triangles, false,\n\t\t\t\t\t\ti * vc + j + 1, i * vc + j,\n\t\t\t\t\t\t((i + 1) * vc + j + 1) % vTotal, ((i + 1) * vc + j) % vTotal)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\tstatic parametric(pF: (d: number, z: number) => V3, pN: (d: number, z: number) => V3,\n\t\t\t\t\t  sMin: number, sMax: number, tMin: number, tMax: number, sRes: number, tRes: number) {\n\t\tconst mesh = new Mesh()\n\t\t\t.addVertexBuffer('normals', 'ts_Normal')\n\t\t\t.addIndexBuffer('TRIANGLES')\n\t\tfor (let si = 0; si <= sRes; si++) {\n\t\t\tconst s = lerp(sMin, sMax, si / sRes)\n\t\t\tfor (let ti = 0; ti <= tRes; ti++) {\n\t\t\t\tconst t = lerp(tMin, tMax, ti / tRes)\n\t\t\t\tmesh.vertices.push(pF(s, t))\n\t\t\t\tmesh.normals.push(pN(s, t))\n\t\t\t\tif (ti < tRes && si < sRes) {\n\t\t\t\t\tconst offset = ti + si * (tRes + 1)\n\t\t\t\t\tpushQuad(mesh.TRIANGLES, false,\n\t\t\t\t\t\toffset, offset + tRes + 1, offset + 1, offset + tRes + 2)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\tstatic load(json: { vertices: Tuple3<number>[], triangles?: Tuple3<number>[], normals?: Tuple3<number>[] }) {\n\t\tconst mesh = new Mesh()\n\t\tif (Array.isArray(json.vertices[0])) {\n\t\t\tmesh.vertices = json.vertices.map(x => V(x))\n\t\t} else {\n\t\t\tthrow new Error()\n\t\t}\n\t\tif (json.triangles) {\n\t\t\tmesh.addIndexBuffer('TRIANGLES')\n\t\t\t;(mesh as any).TRIANGLES = json.triangles\n\t\t}\n\t\tif (json.normals) {\n\t\t\tmesh.addVertexBuffer('normals', 'ts_Normal')\n\t\t\t;(mesh as any).normals = json.normals\n\t\t}\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n}","/* tslint:disable:no-string-literal */\nimport {assert, assertf, assertInst, assertVectors, int, M4, NLA_DEBUG, V3} from 'ts3dutils'\n\nimport {Buffer} from './Buffer'\nimport {currentGL, GL_COLOR, TSGLContext} from './TSGLContext'\nimport {Mesh} from './Mesh'\n\nconst WGL = WebGLRenderingContext\n\n/**\n * These are all the draw modes usable in OpenGL ES\n */\nexport enum DRAW_MODES {\n\tPOINTS = WGL.POINTS,\n\tLINES = WGL.LINES,\n\tLINE_STRIP = WGL.LINE_STRIP,\n\tLINE_LOOP = WGL.LINE_LOOP,\n\tTRIANGLES = WGL.TRIANGLES,\n\tTRIANGLE_STRIP = WGL.TRIANGLE_STRIP,\n\tTRIANGLE_FAN = WGL.TRIANGLE_FAN\n}\n\nexport type DRAW_MODES_ENUM = keyof typeof DRAW_MODES\nexport const SHADER_VAR_TYPES = ['FLOAT', 'FLOAT_MAT2', 'FLOAT_MAT3', 'FLOAT_MAT4', 'FLOAT_VEC2', 'FLOAT_VEC3', 'FLOAT_VEC4', 'INT', 'INT_VEC2', 'INT_VEC3', 'INT_VEC4', 'UNSIGNED_INT']\n\nconst DRAW_MODE_CHECKS: { [type: string]: (x: int) => boolean } = {\n\t[DRAW_MODES.POINTS]: _ => true,\n\t[DRAW_MODES.LINES]: x => 0 == x % 2, // divisible by 2\n\t[DRAW_MODES.LINE_STRIP]: x => x > 2, // need at least 2\n\t[DRAW_MODES.LINE_LOOP]: x => x > 2, // more like > 3, but oh well\n\t[DRAW_MODES.TRIANGLES]: x => 0 == x % 3, // divisible by 3\n\t[DRAW_MODES.TRIANGLE_STRIP]: x => x > 3,\n\t[DRAW_MODES.TRIANGLE_FAN]: x => x > 3,\n}\n\nexport function isArray<T>(obj: any): obj is T[] {\n\treturn Array == obj.constructor || Float32Array == obj.constructor || Float64Array == obj.constructor\n}\n\nexport interface UniformTypesMap {\n\tFLOAT_VEC4: GL_COLOR | V3\n\tFLOAT_VEC3: [number, number, number] | V3\n\tFLOAT_VEC2: [number, number] | V3\n\tFLOAT: number\n\tINT: int\n\tFLOAT_MAT4: M4 | number[]\n\tFLOAT_MAT3: M4 | number[]\n\tSAMPLER_2D: int\n\tBOOL: boolean\n}\n\nfunction isFloatArray(obj: any): obj is number[] | Float64Array | Float32Array {\n\treturn Float32Array == obj.constructor || Float64Array == obj.constructor ||\n\t\tArray.isArray(obj) && obj.every(x => 'number' == typeof x)\n}\n\nfunction isIntArray(x: any) {\n\tif ([Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array]\n\t\t\t.some(y => x instanceof y)) {\n\t\treturn true\n\t}\n\treturn (x instanceof Float32Array || x instanceof Float64Array || Array.isArray(x)) &&\n\t\t(x as number[]).every(x => Number.isInteger(x))\n}\n\nexport type ShaderType<UniformTypes> = string & { T?: UniformTypes }\n\n//const x:keyof UniformTypesMap = undefined as 'FLOAT_VEC4' | 'FLOAT_VEC3'\nexport class Shader<UniformTypes extends { [uniformName: string]: keyof UniformTypesMap } = any> {\n\tprogram: WebGLProgram\n\tactiveMatrices: { [matrixName: string ]: boolean }\n\tattributes: { [attributeName: string ]: number }\n\tuniformLocations: { [uniformName: string ]: WebGLUniformLocation }\n\tuniformInfos: { [uniformName: string ]: WebGLActiveInfo }\n\tprojectionMatrixVersion = -1\n\tmodelViewMatrixVersion = -1\n\tgl: TSGLContext\n\n\tstatic create<S extends { [uniformName: string]: keyof UniformTypesMap },\n\t\tT extends { [uniformName: string]: keyof UniformTypesMap }>\n\t(vertexSource: ShaderType<S>, fragmentSource: ShaderType<T>, gl?: TSGLContext): Shader<S & T> {\n\t\treturn new Shader(vertexSource, fragmentSource, gl) as any\n\t}\n\n\t/**\n\t * Provides a convenient wrapper for WebGL shaders. A few uniforms and attributes,\n\t * prefixed with `gl_`, are automatically added to all shader sources to make\n\t * simple shaders easier to write.\n\t * Headers for the following variables are automatically prepended to the passed source. The correct variables\n\t * are also automatically passed to the shader when drawing.\n\t *\n\t * For vertex and fragment shaders:\n\t uniform mat3 ts_NormalMatrix;\n\t uniform mat4 ts_ModelViewMatrix;\n\t uniform mat4 ts_ProjectionMatrix;\n\t uniform mat4 ts_ModelViewProjectionMatrix;\n\t uniform mat4 ts_ModelViewMatrixInverse;\n\t uniform mat4 ts_ProjectionMatrixInverse;\n\t uniform mat4 ts_ModelViewProjectionMatrixInverse;\n\t *\n\t *\n\t * Example usage:\n\t *\n\t *  const shader = new GL.Shader(\n\t *      `void main() { gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex; }`,\n\t *      `uniform vec4 color; void main() { gl_FragColor = color; }`)\n\t *\n\t *  shader.uniforms({ color: [1, 0, 0, 1] }).draw(mesh)\n\t *\n\t * Compiles a shader program using the provided vertex and fragment shaders.\n\t */\n\tprotected constructor(vertexSource: string, fragmentSource: string, gl = currentGL()) {\n\t\t// const versionRegex = /^(?:\\s+|\\/\\/[\\s\\S]*?[\\r\\n]+|\\/\\*[\\s\\S]*?\\*\\/)+(#version\\s+(\\d+)\\s+es)/\n\t\t// Headers are prepended to the sources to provide some automatic functionality.\n\t\tconst header = `\n\t\tuniform mat3 ts_NormalMatrix;\n\t\tuniform mat4 ts_ModelViewMatrix;\n\t\tuniform mat4 ts_ProjectionMatrix;\n\t\tuniform mat4 ts_ModelViewProjectionMatrix;\n\t\tuniform mat4 ts_ModelViewMatrixInverse;\n\t\tuniform mat4 ts_ProjectionMatrixInverse;\n\t\tuniform mat4 ts_ModelViewProjectionMatrixInverse;\n\t`\n\t\tconst matrixNames = header.match(/\\bts_\\w+/g)\n\n\t\t// Compile and link errors are thrown as strings.\n\t\tfunction compileSource(type: number, source: string) {\n\t\t\tconst shader = gl.createShader(type)\n\t\t\tgl.shaderSource(shader, source)\n\t\t\tgl.compileShader(shader)\n\t\t\tif (!gl.getShaderParameter(shader, WGL.COMPILE_STATUS)) {\n\t\t\t\tthrow new Error('compile error: ' + gl.getShaderInfoLog(shader))\n\t\t\t}\n\t\t\treturn shader\n\t\t}\n\n\n\t\tthis.gl = gl\n\t\tconst program = gl.createProgram()\n\t\tif (!program) {\n\t\t\tgl.handleError()\n\t\t}\n\t\tthis.program = program!\n\t\tgl.attachShader(this.program, compileSource(WGL.VERTEX_SHADER, vertexSource))\n\t\tgl.attachShader(this.program, compileSource(WGL.FRAGMENT_SHADER, fragmentSource))\n\t\tgl.linkProgram(this.program)\n\t\tif (!gl.getProgramParameter(this.program, WGL.LINK_STATUS)) {\n\t\t\tthrow new Error('link error: ' + gl.getProgramInfoLog(this.program))\n\t\t}\n\t\tthis.attributes = {}\n\t\tthis.uniformLocations = {}\n\n\t\t// Check for the use of built-in matrices that require expensive matrix\n\t\t// multiplications to compute, and record these in `activeMatrices`.\n\t\tthis.activeMatrices = {}\n\t\tmatrixNames && matrixNames.forEach(name => {\n\t\t\tif (gl.getUniformLocation(this.program, name)) {\n\t\t\t\tthis.activeMatrices[name] = true\n\t\t\t}\n\t\t})\n\n\t\tthis.uniformInfos = {}\n\t\tfor (let i = gl.getProgramParameter(this.program, WGL.ACTIVE_UNIFORMS); i-- > 0;) {\n\t\t\t// see https://www.khronos.org/registry/OpenGL-Refpages/es2.0/xhtml/glGetActiveUniform.xml\n\t\t\t// this.program has already been checked\n\t\t\t// i is in bounds\n\t\t\tconst info = gl.getActiveUniform(this.program, i)!\n\t\t\tthis.uniformInfos[info.name] = info\n\t\t}\n\t\tgl.handleError()\n\t}\n\n\n\t/**\n\t * Set a uniform for each property of `uniforms`. The correct `viewerGL.uniform*()` method is inferred from the\n\t * value types and from the stored uniform sampler flags.\n\t */\n\tuniforms(uniforms: Partial<{ [K in keyof UniformTypes]: UniformTypesMap[UniformTypes[K]] }>): this {\n\t\tconst gl = this.gl\n\t\tgl.useProgram(this.program)\n\t\tgl.handleError()\n\n\t\tfor (const name in uniforms) {\n\t\t\tconst location = this.uniformLocations[name] || gl.getUniformLocation(this.program, name)\n\t\t\t// !location && console.warn(name + ' uniform is not used in shader')\n\t\t\tif (!location) continue\n\t\t\tthis.uniformLocations[name] = location\n\t\t\tlet value: any = uniforms[name] as any\n\t\t\tconst info = this.uniformInfos[name]\n\t\t\tif (NLA_DEBUG) {\n\t\t\t\t// TODO: better errors\n\t\t\t\tif (gl.SAMPLER_2D == info.type || gl.SAMPLER_CUBE == info.type || gl.INT == info.type) {\n\t\t\t\t\tif (1 == info.size) {\n\t\t\t\t\t\tassert(Number.isInteger(value))\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert(isIntArray(value) && value.length == info.size, 'value must be int array if info.size != 1')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tassert(gl.FLOAT != info.type ||\n\t\t\t\t\t(1 == info.size && 'number' === typeof value || isFloatArray(value) && info.size == value.length))\n\t\t\t\tassert(gl.FLOAT_VEC3 != info.type ||\n\t\t\t\t\t(1 == info.size && value instanceof V3 ||\n\t\t\t\t\t\tArray.isArray(value) && info.size == value.length && assertVectors(...value)))\n\t\t\t\tassert(gl.FLOAT_VEC4 != info.type || 1 != info.size || isFloatArray(value) && value.length == 4)\n\t\t\t\tassert(gl.FLOAT_MAT4 != info.type || value instanceof M4, () => value.toSource())\n\t\t\t\tassert(gl.FLOAT_MAT3 != info.type || value.length == 9 || value instanceof M4)\n\t\t\t}\n\t\t\tif (value instanceof V3) {\n\t\t\t\tvalue = value.toArray()\n\t\t\t}\n\t\t\tif (gl.FLOAT_VEC4 == info.type && info.size != 1) {\n\t\t\t\tgl.uniform4fv(location, value.concatenated())\n\t\t\t} else if (gl.FLOAT == info.type && info.size != 1) {\n\t\t\t\tgl.uniform1fv(location, value)\n\t\t\t} else if (gl.FLOAT_VEC3 == info.type && info.size != 1) {\n\t\t\t\tgl.uniform3fv(location, V3.pack(value))\n\t\t\t} else if (value.length) {\n\t\t\t\tswitch (value.length) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tgl.uniform1fv(location, value)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tgl.uniform2fv(location, value)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tgl.uniform3fv(location, value)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tgl.uniform4fv(location, value)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t// Matrices are automatically transposed, since WebGL uses column-major\n\t\t\t\t\t// indices instead of row-major indices.\n\t\t\t\t\tcase 9:\n\t\t\t\t\t\tgl.uniformMatrix3fv(location, false, new Float32Array([\n\t\t\t\t\t\t\tvalue[0], value[3], value[6],\n\t\t\t\t\t\t\tvalue[1], value[4], value[7],\n\t\t\t\t\t\t\tvalue[2], value[5], value[8],\n\t\t\t\t\t\t]))\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 16:\n\t\t\t\t\t\tgl.uniformMatrix4fv(location, false, new Float32Array([\n\t\t\t\t\t\t\tvalue[0], value[4], value[8], value[12],\n\t\t\t\t\t\t\tvalue[1], value[5], value[9], value[13],\n\t\t\t\t\t\t\tvalue[2], value[6], value[10], value[14],\n\t\t\t\t\t\t\tvalue[3], value[7], value[11], value[15],\n\t\t\t\t\t\t]))\n\t\t\t\t\t\tbreak\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error('don\\'t know how to load uniform \"' + name + '\" of length ' + value.length)\n\t\t\t\t}\n\t\t\t} else if ('number' == typeof value) {\n\t\t\t\tif (gl.SAMPLER_2D == info.type || gl.SAMPLER_CUBE == info.type || gl.INT == info.type) {\n\t\t\t\t\tgl.uniform1i(location, value)\n\t\t\t\t} else {\n\t\t\t\t\tgl.uniform1f(location, value)\n\t\t\t\t}\n\t\t\t} else if ('boolean' == typeof value) {\n\t\t\t\tgl.uniform1i(location, +value)\n\t\t\t} else if (value instanceof M4) {\n\t\t\t\tconst m = value.m\n\t\t\t\tif (gl.FLOAT_MAT4 == info.type) {\n\t\t\t\t\tgl.uniformMatrix4fv(location, false, [\n\t\t\t\t\t\tm[0], m[4], m[8], m[12],\n\t\t\t\t\t\tm[1], m[5], m[9], m[13],\n\t\t\t\t\t\tm[2], m[6], m[10], m[14],\n\t\t\t\t\t\tm[3], m[7], m[11], m[15]])\n\t\t\t\t} else if (gl.FLOAT_MAT3 == info.type) {\n\t\t\t\t\tgl.uniformMatrix3fv(location, false, [\n\t\t\t\t\t\tm[0], m[4], m[8],\n\t\t\t\t\t\tm[1], m[5], m[9],\n\t\t\t\t\t\tm[2], m[6], m[10]])\n\t\t\t\t} else if (gl.FLOAT_MAT2 == info.type) {\n\t\t\t\t\tgl.uniformMatrix2fv(location, false, new Float32Array([\n\t\t\t\t\t\tm[0], m[4],\n\t\t\t\t\t\tm[1], m[5]]))\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(`Can't assign M4 to ${info.type}`)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new Error('attempted to set uniform \"' + name + '\" to invalid value ' + value)\n\t\t\t}\n\t\t\tgl.handleError()\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Sets all uniform matrix attributes, binds all relevant buffers, and draws the mesh geometry as indexed\n\t * triangles or indexed LINES. Set `mode` to `WGL.LINES` (and either add indices to `LINES` or call\n\t * `computeWireframe()`) to draw the mesh in wireframe.\n\t *\n\t * @param mesh\n\t * @param mode Defaults to 'TRIANGLES'. Must be passed as string so the correct index buffer can be\n\t *     automatically drawn.\n\t * @param start int\n\t * @param count int\n\t */\n\tdraw(mesh: Mesh, mode: DRAW_MODES = DRAW_MODES.TRIANGLES, start?: int, count?: int): this {\n\t\tassert(mesh.hasBeenCompiled, 'mesh.hasBeenCompiled')\n\t\tassert(undefined != DRAW_MODES[mode])\n\t\tconst modeStr: string = DRAW_MODES[mode]\n\t\t// assert(mesh.indexBuffers[modeStr], `mesh.indexBuffers[${modeStr}] undefined`)\n\t\treturn this.drawBuffers(mesh.vertexBuffers, mesh.indexBuffers[modeStr], mode, start, count)\n\t}\n\n\t/**\n\t * Sets all uniform matrix attributes, binds all relevant buffers, and draws the\n\t * indexed mesh geometry. The `vertexBuffers` argument is a map from attribute\n\t * names to `Buffer` objects of type `WGL.ARRAY_BUFFER`, `indexBuffer` is a `Buffer`\n\t * object of type `WGL.ELEMENT_ARRAY_BUFFER`, and `mode` is a WebGL primitive mode\n\t * like `WGL.TRIANGLES` or `WGL.LINES`. This method automatically creates and caches\n\t * vertex attribute pointers for attributes as needed.\n\t */\n\tdrawBuffers(vertexBuffers: { [attributeName: string]: Buffer },\n\t\t\t\tindexBuffer: Buffer | undefined,\n\t\t\t\tmode: DRAW_MODES = DRAW_MODES.TRIANGLES,\n\t\t\t\tstart: int = 0, count?: int): this {\n\t\tconst gl = this.gl\n\t\tgl.handleError()\n\t\tassert(undefined != DRAW_MODES[mode])\n\t\tassertf(() => 1 <= Object.keys(vertexBuffers).length)\n\t\tObject.keys(vertexBuffers).forEach(key => assertInst(Buffer, vertexBuffers[key]))\n\n\t\t// Only varruct up the built-in matrices that are active in the shader\n\t\tconst on = this.activeMatrices\n\t\tconst modelViewMatrixInverse = (on['ts_ModelViewMatrixInverse'] || on['ts_NormalMatrix'])\n\t\t\t//&& this.modelViewMatrixVersion != gl.modelViewMatrixVersion\n\t\t\t&& gl.modelViewMatrix.inversed()\n\t\tconst projectionMatrixInverse = on['ts_ProjectionMatrixInverse']\n\t\t\t//&& this.projectionMatrixVersion != gl.projectionMatrixVersion\n\t\t\t&& gl.projectionMatrix.inversed()\n\t\tconst modelViewProjectionMatrix = (on['ts_ModelViewProjectionMatrix'] || on['ts_ModelViewProjectionMatrixInverse'])\n\t\t\t//&& (this.projectionMatrixVersion != gl.projectionMatrixVersion || this.modelViewMatrixVersion !=\n\t\t\t// gl.modelViewMatrixVersion)\n\t\t\t&& gl.projectionMatrix.times(gl.modelViewMatrix)\n\n\t\tconst uni: { [matrixName: string ]: M4 } = {} // Uniform Matrices\n\t\ton['ts_ModelViewMatrix']\n\t\t&& this.modelViewMatrixVersion != gl.modelViewMatrixVersion\n\t\t&& (uni['ts_ModelViewMatrix'] = gl.modelViewMatrix)\n\t\ton['ts_ModelViewMatrixInverse'] && (uni['ts_ModelViewMatrixInverse'] = modelViewMatrixInverse as M4)\n\t\ton['ts_ProjectionMatrix']\n\t\t&& this.projectionMatrixVersion != gl.projectionMatrixVersion\n\t\t&& (uni['ts_ProjectionMatrix'] = gl.projectionMatrix)\n\t\tprojectionMatrixInverse && (uni['ts_ProjectionMatrixInverse'] = projectionMatrixInverse)\n\t\tmodelViewProjectionMatrix && (uni['ts_ModelViewProjectionMatrix'] = modelViewProjectionMatrix)\n\t\tmodelViewProjectionMatrix && on['ts_ModelViewProjectionMatrixInverse']\n\t\t&& (uni['ts_ModelViewProjectionMatrixInverse'] = modelViewProjectionMatrix.inversed())\n\t\ton['ts_NormalMatrix']\n\t\t&& this.modelViewMatrixVersion != gl.modelViewMatrixVersion\n\t\t&& (uni['ts_NormalMatrix'] = (modelViewMatrixInverse as M4).transposed())\n\t\tthis.uniforms(uni as any)\n\t\tthis.projectionMatrixVersion = gl.projectionMatrixVersion\n\t\tthis.modelViewMatrixVersion = gl.modelViewMatrixVersion\n\n\t\t// Create and enable attribute pointers as necessary.\n\t\tlet minVertexBufferLength = Infinity\n\t\tfor (const attribute in vertexBuffers) {\n\t\t\tconst buffer = vertexBuffers[attribute]\n\t\t\tassert(buffer.hasBeenCompiled)\n\t\t\tconst location = this.attributes[attribute] || gl.getAttribLocation(this.program, attribute)\n\t\t\tgl.handleError()\n\t\t\tif (location == -1 || !buffer.buffer) {\n\t\t\t\tif (!attribute.startsWith('ts_')) {\n\t\t\t\t\tconsole.warn(`Vertex buffer ${attribute} was not bound because the attribute is not active.`)\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tthis.attributes[attribute] = location\n\t\t\tgl.bindBuffer(WGL.ARRAY_BUFFER, buffer.buffer)\n\t\t\tgl.handleError()\n\n\t\t\tgl.enableVertexAttribArray(location)\n\t\t\tgl.handleError()\n\n\t\t\tgl.vertexAttribPointer(location, buffer.spacing, WGL.FLOAT, false, 0, 0)\n\t\t\tgl.handleError()\n\n\t\t\tminVertexBufferLength = Math.min(minVertexBufferLength, buffer.count)\n\t\t}\n\n\t\t// Disable unused attribute pointers.\n\t\tfor (const attribute in this.attributes) {\n\t\t\tif (!(attribute in vertexBuffers)) {\n\t\t\t\tgl.disableVertexAttribArray(this.attributes[attribute])\n\t\t\t\tgl.handleError()\n\t\t\t}\n\t\t}\n\n\t\tif (NLA_DEBUG) {\n\t\t\tconst numAttribs = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES)\n\t\t\tfor (let i = 0; i < numAttribs; ++i) {\n\t\t\t\tconst buffer=gl.getVertexAttrib(i, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING)\n\t\t\t\tif (!buffer) {\n\t\t\t\t\tconst info = gl.getActiveAttrib(this.program, i)!\n\t\t\t\t\tthrow new Error('No buffer is bound to attribute ' + info.name)\n\t\t\t\t}\n\t\t\t\t// console.log('name:', info.name, 'type:', info.type, 'size:', info.size)\n\t\t\t}\n\t\t}\n\n\t\t// Draw the geometry.\n\t\tif (minVertexBufferLength) {\n\t\t\tcount = count || (indexBuffer ? indexBuffer.count : minVertexBufferLength)\n\t\t\tassert(DRAW_MODE_CHECKS[mode](count), 'count ' + count + ' doesn\\'t fulfill requirement '\n\t\t\t\t+ DRAW_MODE_CHECKS[mode].toString() + ' for mode ' + DRAW_MODES[mode])\n\n\t\t\tif (indexBuffer) {\n\t\t\t\tassert(indexBuffer.hasBeenCompiled)\n\t\t\t\tassert(minVertexBufferLength > indexBuffer.maxValue!)\n\t\t\t\tassert(count % indexBuffer.spacing == 0)\n\t\t\t\tassert(start % indexBuffer.spacing == 0)\n\t\t\t\tif (start + count > indexBuffer.count) {\n\t\t\t\t\tthrow new Error('Buffer not long enough for passed parameters start/length/buffer length' + ' ' + start + ' ' + count + ' ' + indexBuffer.count)\n\t\t\t\t}\n\t\t\t\tgl.bindBuffer(WGL.ELEMENT_ARRAY_BUFFER, indexBuffer.buffer!)\n\t\t\t\tgl.handleError()\n\t\t\t\t// start parameter has to be multiple of sizeof(WGL.UNSIGNED_SHORT)\n\t\t\t\tgl.drawElements(mode, count, WGL.UNSIGNED_SHORT, 2 * start)\n\t\t\t\tgl.handleError()\n\t\t\t} else {\n\t\t\t\tif (start + count > minVertexBufferLength) {\n\t\t\t\t\tthrow new Error('invalid')\n\t\t\t\t}\n\t\t\t\tgl.drawArrays(mode, start, count)\n\t\t\t\tgl.handleError()\n\t\t\t}\n\t\t\tgl.drawCallCount++\n\t\t}\n\n\t\treturn this\n\t}\n}","import chroma from 'chroma-js'\nimport {addOwnProperties, assert, DEG, int, M4, P3ZX, V, V3,} from 'ts3dutils'\n\nimport {Mesh} from './Mesh'\nimport {DRAW_MODES, Shader} from './Shader'\n\nexport type GL_COLOR = [number, number, number, number]\n/**\n * There's only one constant, use it for default values. Use chroma-js or similar for actual colors.\n */\nexport const GL_COLOR_BLACK: GL_COLOR = [0, 0, 0, 1]\n\nexport function currentGL(): TSGLContext {\n\treturn TSGLContext.gl\n}\n\nconst WGL = WebGLRenderingContext\n\nexport function isNumber(obj: any) {\n\tconst str = Object.prototype.toString.call(obj)\n\treturn str == '[object Number]' || str == '[object Boolean]'\n}\n\nexport type UniformType = V3 | M4 | number[] | boolean | number\n\nexport interface TSGLContext extends WebGLRenderingContext {}\nexport class TSGLContext {\n\tmodelViewMatrix: M4 = M4.identity()\n\tprojectionMatrix: M4 = M4.identity()\n\tstatic readonly MODELVIEW: { __MATRIX_MODE_CONSTANT: any } = 0 as any\n\tstatic readonly PROJECTION: { __MATRIX_MODE_CONSTANT: any } = 1 as any\n\tMODELVIEW: typeof TSGLContext.MODELVIEW\n\tPROJECTION: typeof TSGLContext.PROJECTION\n\n\treadonly version: 1 | 2\n\n\tstatic HALF_FLOAT_OES: int = 0x8D61\n\tHALF_FLOAT_OES: int\n\n\tprivate tempMatrix = new M4()\n\tprivate resultMatrix = new M4()\n\tprivate modelViewStack: M4[] = []\n\tprivate projectionStack: M4[] = []\n\tprivate currentMatrixName: 'modelViewMatrix' | 'projectionMatrix'\n\tprivate stack: M4[]\n\n\tmeshes: { [name: string]: Mesh }\n\tshaders: { [name: string]: Shader }\n\tpublic drawCallCount: int = 0\n\tpublic projectionMatrixVersion: int = 0\n\tpublic modelViewMatrixVersion: int = 0\n\n\tprotected constructor(gl: TSGLContext, private immediate = {\n\t\tmesh: new Mesh()\n\t\t\t.addVertexBuffer('coords', 'ts_TexCoord')\n\t\t\t.addVertexBuffer('colors', 'ts_Color'),\n\t\tmode: -1 as DRAW_MODES | -1,\n\t\tcoord: [0, 0] as [number, number],\n\t\tcolor: [1, 1, 1, 1] as GL_COLOR,\n\t\tpointSize: 1,\n\t\tshader: Shader.create(`\n\t\t\tattribute vec4 ts_Color;\n\t\t\tattribute vec4 ts_Vertex;\n\t\t\tuniform mat4 ts_ModelViewProjectionMatrix;\n\t\t\tattribute vec2 ts_TexCoord;\n            uniform float pointSize;\n            varying vec4 color;\n            varying vec2 coord;\n            void main() {\n                color = ts_Color;\n                coord = ts_TexCoord;\n                gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\n                gl_PointSize = pointSize;\n            }\n\t\t`, `\n\t\t\tprecision highp float;\n            uniform sampler2D texture;\n            uniform float pointSize;\n            // uniform bool useTexture;\n            varying vec4 color;\n            varying vec2 coord;\n            void main() {\n                gl_FragColor = color;\n                // if (useTexture) gl_FragColor *= texture2D(texture, coord.xy);\n            }\n        `, gl),\n\t}) {\n\t\tthis.matrixMode(TSGLContext.MODELVIEW)\n\t}\n\n\t/// Implement the OpenGL modelview and projection matrix stacks, along with some other useful GLU matrix functions.\n\tmatrixMode(mode: { __MATRIX_MODE_CONSTANT: any }): void {\n\t\tswitch (mode) {\n\t\t\tcase this.MODELVIEW:\n\t\t\t\tthis.currentMatrixName = 'modelViewMatrix'\n\t\t\t\tthis.stack = this.modelViewStack\n\t\t\t\tbreak\n\t\t\tcase this.PROJECTION:\n\t\t\t\tthis.currentMatrixName = 'projectionMatrix'\n\t\t\t\tthis.stack = this.projectionStack\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tthrow new Error('invalid matrix mode ' + mode)\n\t\t}\n\t}\n\n\tloadIdentity(): void {\n\t\tM4.identity(this[this.currentMatrixName])\n\t\tthis.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++\n\t}\n\n\tloadMatrix(m4: M4) {\n\t\tM4.copy(m4, this[this.currentMatrixName])\n\t\tthis.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++\n\t}\n\n\tmultMatrix(m4: M4) {\n\t\tM4.multiply(this[this.currentMatrixName], m4, this.resultMatrix)\n\t\tconst temp = this.resultMatrix\n\t\tthis.resultMatrix = this[this.currentMatrixName]\n\t\tthis[this.currentMatrixName] = temp\n\t\tthis.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++\n\t}\n\n\tmirror(plane: { normal1: V3, w: number }) {\n\t\tthis.multMatrix(M4.mirror(plane))\n\t}\n\n\tperspective(fovDegrees: number, aspect: number, near: number, far: number) {\n\t\tthis.multMatrix(M4.perspectiveRad(fovDegrees * DEG, aspect, near, far, this.tempMatrix))\n\t}\n\n\tfrustum(left: number, right: number, bottom: number, top: number, near: number, far: number) {\n\t\tthis.multMatrix(M4.frustum(left, right, bottom, top, near, far, this.tempMatrix))\n\t}\n\n\tortho(left: number, right: number, bottom: number, top: number, near: number, far: number) {\n\t\tthis.multMatrix(M4.ortho(left, right, bottom, top, near, far, this.tempMatrix))\n\t}\n\n\tscale(x: number, y: number, z?: number): void\n\tscale(scale: number): void\n\tscale(v: V3): void\n\tscale(...args: any[]) {\n\t\tthis.multMatrix((M4.scale as any)(...args, this.tempMatrix))\n\t}\n\n\tmirroredX() {\n\t\tthis.multMatrix(M4.mirror(P3ZX))\n\t}\n\n\ttranslate(x: number, y?: number, z?: number): void\n\ttranslate(v: V3): void\n\ttranslate(x: any, y?: any, z?: any) {\n\t\tif (undefined !== y) {\n\t\t\tthis.multMatrix(M4.translate(x, y, z, this.tempMatrix))\n\t\t} else {\n\t\t\tthis.multMatrix(M4.translate(x, this.tempMatrix))\n\t\t}\n\t}\n\n\trotate(angleDegrees: number, x: number, y: number, z: number) {\n\t\tthis.multMatrix(M4.rotate(angleDegrees * DEG, {x, y, z}, this.tempMatrix))\n\t}\n\n\tlookAt(eye: V3, center: V3, up: V3) {\n\t\tthis.multMatrix(M4.lookAt(eye, center, up, this.tempMatrix))\n\t}\n\n\tpushMatrix() {\n\t\tthis.stack.push(M4.copy(this[this.currentMatrixName]))\n\t}\n\n\tpopMatrix() {\n\t\tconst pop = this.stack.pop()\n\t\tassert(undefined !== pop)\n\t\tthis[this.currentMatrixName] = pop as M4\n\t\tthis.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++\n\t}\n\n\t/**\n\t * World coordinates (WC) to screen/window coordinates matrix\n\t */\n\twcToWindowMatrix() {\n\t\tconst viewport = this.getParameter(this.VIEWPORT)\n\t\tconst [x, y, w, h] = viewport\n\t\tconst viewportToScreenMatrix = new M4([\n\t\t\tw / 2, 0, 0, x + w / 2,\n\t\t\th / 2, 0, 0, y + h / 2,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1,\n\t\t])\n\t\treturn M4.multiplyMultiple(viewportToScreenMatrix, this.projectionMatrix, this.modelViewMatrix)\n\t}\n\n\t/////////// IMMEDIATE MODE\n\t// ### Immediate mode\n\t//\n\t// Provide an implementation of OpenGL's deprecated immediate mode. This is\n\t// deprecated for a reason: constantly re-specifying the geometry is a bad\n\t// idea for performance. You should use a `GL.Mesh` instead, which specifies\n\t// the geometry once and caches it on the graphics card. Still, nothing\n\t// beats a quick `viewerGL.begin(WGL.POINTS); viewerGL.vertex(1, 2, 3); viewerGL.end();` for\n\t// debugging. This intentionally doesn't implement fixed-function lighting\n\t// because it's only meant for quick debugging tasks.\n\n\n\tpointSize(pointSize: number): void {\n\t\tthis.immediate.shader.uniforms({pointSize: pointSize})\n\t}\n\n\tbegin(mode: DRAW_MODES | -1) {\n\t\tif (this.immediate.mode != -1) throw new Error('mismatched viewerGL.begin() and viewerGL.end() calls')\n\t\tthis.immediate.mode = mode\n\t\tthis.immediate.mesh.colors = []\n\t\tthis.immediate.mesh.coords = []\n\t\tthis.immediate.mesh.vertices = []\n\t}\n\n\tcolor(cssColor: string): void\n\tcolor(r: number, g: number, b: number, a?: number): void\n\tcolor(hexInt: int): void\n\tcolor(glColor: GL_COLOR): void\n\tcolor(...args: any[]) {\n\t\tthis.immediate.color =\n\t\t\t(1 == args.length && Array.isArray(args[0]))\n\t\t\t\t? args[0]\n\t\t\t\t: (1 == args.length && 'number' == typeof args[0])\n\t\t\t\t? hexIntToGLColor(args[0])\n\t\t\t\t: (1 == args.length && 'string' == typeof args[0])\n\t\t\t\t\t? chroma(args[0]).gl()\n\t\t\t\t\t: [args[0], args[1], args[2], args[3] || 0]\n\t}\n\n\ttexCoord(s: number, t: number): void\n\ttexCoord(coords: [number, number]): void\n\ttexCoord(coords: { x: number, y: number }): void\n\ttexCoord(...args: any[]) {\n\t\tthis.immediate.coord = V.apply(undefined, args).toArray(2)\n\t}\n\n\tvertex(v: V3): void\n\tvertex(x: number, y: number, z: number): void\n\tvertex(...args: any[]) {\n\t\tthis.immediate.mesh.colors.push(this.immediate.color)\n\t\tthis.immediate.mesh.coords.push(this.immediate.coord)\n\t\tthis.immediate.mesh.vertices.push(V.apply(undefined, args))\n\t}\n\n\tend(): void {\n\t\tif (this.immediate.mode == -1) throw new Error('mismatched viewerGL.begin() and viewerGL.end() calls')\n\t\tthis.immediate.mesh.compile()\n\t\tthis.immediate.shader.uniforms({\n\t\t\tuseTexture: !!TSGLContext.gl.getParameter(WGL.TEXTURE_BINDING_2D),\n\t\t}).drawBuffers(this.immediate.mesh.vertexBuffers, undefined, this.immediate.mode)\n\t\tthis.immediate.mode = -1\n\t}\n\n\n\t////////// MISCELLANEOUS METHODS\n\tstatic gl: TSGLContext\n\n\tmakeCurrent() {\n\t\tTSGLContext.gl = this\n\t}\n\n\t/**\n\t * Starts an animation loop.\n\t */\n\tanimate(callback: (this: TSGLContext, domHighResTimeStamp: number, timeSinceLast: number) => void): () => void {\n\t\tconst requestAnimationFrame: typeof window.requestAnimationFrame =\n\t\t\twindow.requestAnimationFrame ||\n\t\t\t(window as any).mozRequestAnimationFrame ||\n\t\t\twindow.webkitRequestAnimationFrame ||\n\t\t\tfunction (callback: FrameRequestCallback) {\n\t\t\t\tsetTimeout(() => callback(performance.now()), 1000 / 60)\n\t\t\t}\n\t\tlet time = performance.now(), keepUpdating = true\n\t\tconst update = (now: number) => {\n\t\t\tif (keepUpdating) {\n\t\t\t\tcallback.call(this, now, now - time)\n\t\t\t\ttime = now\n\t\t\t\trequestAnimationFrame(update)\n\t\t\t}\n\t\t}\n\t\trequestAnimationFrame(update)\n\t\treturn () => { keepUpdating = false }\n\t}\n\n\n\t/**\n\t * Provide an easy way to get a fullscreen app running, including an\n\t * automatic 3D perspective projection matrix by default. This should be\n\t * called once.\n\t *\n\t * Just fullscreen, no automatic camera:\n\t *\n\t *     viewerGL.fullscreen({ camera: false })\n\t *\n\t * Adjusting field of view, near plane distance, and far plane distance:\n\t *\n\t *     viewerGL.fullscreen({ fov: 45, near: 0.1, far: 1000 })\n\t *\n\t * Adding padding from the edge of the window:\n\t *\n\t *     viewerGL.fullscreen({ paddingLeft: 250, paddingBottom: 60 })\n\t */\n\tfullscreen(options: {\n\t\tpaddingTop?: number,\n\t\tpaddingLeft?: number,\n\t\tpaddingRight?: number,\n\t\tpaddingBottom?: number,\n\t\tcamera?: boolean,\n\t\tfov?: number,\n\t\tnear?: number,\n\t\tfar?: number\n\t} = {}) {\n\n\t\tconst top = options.paddingTop || 0\n\t\tconst left = options.paddingLeft || 0\n\t\tconst right = options.paddingRight || 0\n\t\tconst bottom = options.paddingBottom || 0\n\t\tif (!document.body) {\n\t\t\tthrow new Error('document.body doesn\\'t exist yet (call viewerGL.fullscreen() from ' +\n\t\t\t\t'window.onload() or from inside the <body> tag)')\n\t\t}\n\t\tdocument.body.appendChild(this.canvas)\n\t\tdocument.body.style.overflow = 'hidden'\n\t\tthis.canvas.style.position = 'absolute'\n\t\tthis.canvas.style.left = left + 'px'\n\t\tthis.canvas.style.top = top + 'px'\n\t\tthis.canvas.style.width = window.innerWidth - left - right + 'px'\n\t\tthis.canvas.style.bottom = window.innerHeight - top - bottom + 'px'\n\n\t\tconst gl = this\n\n\t\tfunction windowOnResize() {\n\t\t\tgl.canvas.width = (window.innerWidth - left - right) * window.devicePixelRatio\n\t\t\tgl.canvas.height = (window.innerHeight - top - bottom) * window.devicePixelRatio\n\t\t\tgl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n\t\t\tif (options.camera) {\n\t\t\t\tgl.matrixMode(TSGLContext.PROJECTION)\n\t\t\t\tgl.loadIdentity()\n\t\t\t\tgl.perspective(options.fov || 45, gl.canvas.width / gl.canvas.height,\n\t\t\t\t\toptions.near || 0.1, options.far || 1000)\n\t\t\t\tgl.matrixMode(TSGLContext.MODELVIEW)\n\t\t\t}\n\t\t}\n\n\t\twindow.addEventListener('resize', windowOnResize)\n\t\twindowOnResize()\n\t\treturn this\n\t}\n\n\tviewportFill() {\n\t\tthis.viewport(0, 0, this.canvas.width, this.canvas.height)\n\t}\n\n\thandleError(): void {\n\t\t// const errorCode = this.getError()\n\t\t// if (0 !== errorCode) {\n\t\t//     throw new Error('' + errorCode + WGL_ERROR[errorCode])\n\t\t// }\n\t}\n\n\n\t/**\n\t * `create()` creates a new WebGL context and augments it with more methods. The alpha channel is disabled\n\t * by default because it usually causes unintended transparencies in the canvas.\n\t */\n\tstatic create(options: { canvas?: HTMLCanvasElement, alpha?: boolean } = {}): TSGLContext {\n\t\tconst canvas = options.canvas || document.createElement('canvas')\n\t\tif (!options.canvas) {\n\t\t\tcanvas.width = 800\n\t\t\tcanvas.height = 600\n\t\t}\n\t\tif (!('alpha' in options)) options.alpha = false\n\t\tlet newGL: TSGLContext | undefined = undefined\n\t\ttry {\n\t\t\tnewGL = canvas.getContext('webgl2', options) as TSGLContext\n\t\t\tnewGL && ((newGL as any).version = 2)\n\t\t\tif (!newGL) {\n\t\t\t\tnewGL = (canvas.getContext('webgl', options) || canvas.getContext('experimental-webgl', options)) as TSGLContext\n\t\t\t\tnewGL && ((newGL as any).version = 1)\n\t\t\t}\n\t\t\tconsole.log('getting context')\n\t\t} catch (e) {\n\t\t\tconsole.log(e, 'Failed to get context')\n\t\t}\n\t\tif (!newGL) throw new Error('WebGL not supported')\n\n\t\tTSGLContext.gl = newGL\n\t\taddOwnProperties(newGL, TSGLContext.prototype)\n\t\taddOwnProperties(newGL, new TSGLContext(newGL))\n\t\t//addEventListeners(newGL)\n\t\treturn newGL\n\t}\n}\n\n// enum WGL_ERROR {\n// \tNO_ERROR = WGL.NO_ERROR,\n// \tINVALID_ENUM = WGL.INVALID_ENUM,\n// \tINVALID_VALUE = WGL.INVALID_VALUE,\n// \tINVALID_OPERATION = WGL.INVALID_OPERATION,\n// \tINVALID_FRAMEBUFFER_OPERATION = WGL.INVALID_FRAMEBUFFER_OPERATION,\n// \tOUT_OF_MEMORY = WGL.OUT_OF_MEMORY,\n// \tCONTEXT_LOST_WEBGL = WGL.CONTEXT_LOST_WEBGL,\n// }\n\nTSGLContext.prototype.MODELVIEW = TSGLContext.MODELVIEW\nTSGLContext.prototype.PROJECTION = TSGLContext.PROJECTION\nTSGLContext.prototype.HALF_FLOAT_OES = TSGLContext.HALF_FLOAT_OES\n\n\n/**\n *\n * Push two triangles:\n * c - d\n * | \\ |\n * a - b\n */\nexport function pushQuad(triangles: int[], flipped: boolean, a: int, b: int, c: int, d: int) {\n\tif (flipped) {\n\t\ttriangles.push(\n\t\t\ta, c, b,\n\t\t\tb, c, d)\n\t} else {\n\t\ttriangles.push(\n\t\t\ta, b, c,\n\t\t\tb, d, c)\n\t}\n}\n\nfunction hexIntToGLColor(color: int): GL_COLOR {\n\treturn [(color >> 16) / 255.0, ((color >> 8) & 0xff) / 255.0, (color & 0xff) / 255.0, 1.0]\n}\n","import {assert, int, NLA_DEBUG, V3} from 'ts3dutils'\nimport {currentGL, TSGLContext} from './TSGLContext'\n\nconst WGL = WebGLRenderingContext\n\nexport class Buffer {\n\tbuffer: WebGLBuffer | undefined\n\tdata: any[]\n\n\t/** Number of elements in buffer. 2 V3s is still 2, not 6. */\n\tcount: int\n\n\t/** Space between elements in buffer. 3 for V3s. */\n\tspacing: int\n\n\thasBeenCompiled: boolean\n\n\tname?: string\n\n\tmaxValue?: number\n\n\t/**\n\t * Provides a simple method of uploading data to a GPU buffer. Example usage:\n\t *\n\t *     const vertices = new Buffer(WGL.ARRAY_BUFFER, Float32Array)\n\t *     vertices.data = [[0, 0, 0], [1, 0, 0], [0, 1, 0], [1, 1, 0]]\n\t *     vertices.compile()\n\t *\n\t *     const indices = new Buffer(WGL.ELEMENT_ARRAY_BUFFER, Uint16Array)\n\t *     indices.data = [[0, 1, 2], [2, 1, 3]]\n\t *     indices.compile()\n\t *\n\t * Specifies the target to which the buffer object is bound.\n\t * The symbolic constant must be GL_ARRAY_BUFFER or GL_ELEMENT_ARRAY_BUFFER.\n\t */\n\tconstructor(readonly target: int, readonly type: typeof Float32Array | typeof Uint16Array) {\n\t\tassert(target == WGL.ARRAY_BUFFER || target == WGL.ELEMENT_ARRAY_BUFFER, 'target == WGL.ARRAY_BUFFER || target == WGL.ELEMENT_ARRAY_BUFFER')\n\t\tassert(type == Float32Array || type == Uint16Array, 'type == Float32Array || type == Uint16Array')\n\t\tthis.buffer = undefined\n\t\tthis.type = type\n\t\tthis.data = []\n\t\tthis.count = 0\n\t\tthis.spacing = 0\n\t\tthis.hasBeenCompiled = false\n\t}\n\n\t/**\n\t * Upload the contents of `data` to the GPU in preparation for rendering. The data must be a list of lists\n\t * where each inner list has the same length. For example, each element of data for vertex normals would be a\n\t * list of length three. This will remember the data length and element length for later use by shaders.\n\t *\n\t * This could have used `[].concat.apply([], this.data)` to flatten the array but Google\n\t * Chrome has a maximum number of arguments so the concatenations are chunked to avoid that limit.\n\t *\n\t * @param type Either `WGL.STATIC_DRAW` or `WGL.DYNAMIC_DRAW`. Defaults to `WGL.STATIC_DRAW`\n\t */\n\tcompile(type: int = WGL.STATIC_DRAW, gl: TSGLContext = currentGL()): void {\n\t\tassert(WGL.STATIC_DRAW == type || WGL.DYNAMIC_DRAW == type, 'WGL.STATIC_DRAW == type || WGL.DYNAMIC_DRAW == type')\n\t\tgl.handleError()\n\t\tthis.buffer = this.buffer || gl.createBuffer()!\n\t\tgl.handleError()\n\t\tlet buffer: Float32Array | Uint16Array\n\t\tif (this.data.length == 0) {\n\t\t\tconsole.warn('empty buffer ' + this.name)\n\t\t\t//console.trace()\n\t\t}\n\t\tif (this.data.length == 0 || this.data[0] instanceof V3) {\n\t\t\tassert(!(this.data[0] instanceof V3) || this.type == Float32Array)\n\t\t\tV3.pack(this.data, buffer = new this.type(this.data.length * 3) as Float32Array) // asserts that all\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t // elements are V3s\n\t\t\tthis.spacing = 3\n\t\t\tthis.count = this.data.length\n\t\t\tthis.maxValue = 0\n\t\t} else {\n\t\t\t//assert(Array != this.data[0].constructor, this.name + this.data[0])\n\t\t\tif (Array.isArray(this.data[0])) {\n\t\t\t\tconst bufferLength = this.data.length * this.data[0].length\n\t\t\t\tbuffer = new this.type(bufferLength)\n\t\t\t\tlet i = this.data.length, destPtr = bufferLength\n\t\t\t\twhile (i--) {\n\t\t\t\t\tconst subArray = this.data[i]\n\t\t\t\t\tlet j = subArray.length\n\t\t\t\t\twhile (j--) {\n\t\t\t\t\t\tbuffer[--destPtr] = subArray[j]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tassert(0 == destPtr)\n\t\t\t} else {\n\t\t\t\tbuffer = new this.type(this.data)\n\t\t\t}\n\n\t\t\tconst spacing = this.data.length ? buffer.length / this.data.length : 0\n\t\t\tassert(spacing % 1 == 0, `buffer ${this.name} elements not of consistent size, average size is ` + spacing)\n\t\t\tif (NLA_DEBUG) {\n\t\t\t\tif (10000 <= buffer.length) {\n\t\t\t\t\tthis.maxValue = 0\n\t\t\t\t} else {\n\t\t\t\t\tthis.maxValue = Math.max.apply(undefined, buffer)\n\t\t\t\t}\n\t\t\t}\n\t\t\tassert(spacing !== 0)\n\t\t\tthis.spacing = spacing\n\t\t\tthis.count = this.data.length\n\t\t}\n\t\tgl.bindBuffer(this.target, this.buffer)\n\t\tgl.handleError()\n\t\tgl.bufferData(this.target, buffer, type)\n\t\tgl.handleError()\n\t\tthis.hasBeenCompiled = true\n\t}\n}","import {assert, int} from 'ts3dutils'\n\nimport {currentGL, TSGLContext} from './TSGLContext'\n\nexport interface TextureOptions {\n\twrap?: number // defaults to WGL.CLAMP_TO_EDGE, or set wrapS and wrapT individually.\n\twrapS?: number\n\twrapT?: number\n\tfilter?: number // defaults to WGL.LINEAR, or set minFilter and magFilter individually.\n\tminFilter?: number\n\tmagFilter?: number\n\tformat?: number // defaults to WGL.RGBA.\n\tinternalFormat?: number\n\ttype?: number // defaults to WGL.UNSIGNED_BYTE.\n\tdata?: any\n}\n\nexport class Texture {\n\theight: int\n\twidth: int\n\ttexture: WebGLTexture\n\t// e.g. viewerGL.UNSIGNED_BYTE, viewerGL.FLOAT\n\t\tinternalFormat: int\n\tformat: int\n\t// e.g. viewerGL.RGBA\n\ttype: int\n\n\t/**\n\t * Provides a simple wrapper around WebGL textures that supports render-to-texture.\n\t *\n\t * The arguments `width` and `height` give the size of the texture in texels.\n\t * WebGL texture dimensions must be powers of two unless `filter` is set to\n\t * either `WGL.NEAREST` or `WGL.LINEAR` and `wrap` is set to `WGL.CLAMP_TO_EDGE`\n\t * (which they are by default).\n\t *\n\t * Texture parameters can be passed in via the `options` argument.\n\t * Example usage:\n\t *\n\t *      let tex = new GL.Texture(256, 256, {\n\t\t *       magFilter: WGL.NEAREST,\n\t\t *       minFilter: WGL.LINEAR,\n\t\t *\n\t\t *       wrapS: WGL.REPEAT,\n\t\t *       wrapT: WGL.REPEAT,\n\t\t *\n\t\t *       format: WGL.RGB, // Defaults to WGL.RGBA\n\t\t *       type: WGL.FLOAT // Defaults to WGL.UNSIGNED_BYTE\n\t\t *     })\n\t *\n\t */\n\tconstructor(width: int, height: int, options: TextureOptions = {}, readonly gl = currentGL()) {\n\t\tthis.texture = gl.createTexture()!\n\t\tgl.handleError() // in case createTexture returns null & fails\n\t\tthis.width = width\n\t\tthis.height = height\n\t\tthis.format = options.format || gl.RGBA\n\t\tthis.internalFormat = options.internalFormat || gl.RGBA\n\t\tthis.type = options.type || gl.UNSIGNED_BYTE\n\t\tconst magFilter = options.filter || options.magFilter || gl.LINEAR\n\t\tconst minFilter = options.filter || options.minFilter || gl.LINEAR\n\t\tif (this.type === gl.FLOAT) {\n\t\t\tif (gl.version != 2 && !gl.getExtension('OES_texture_float')) {\n\t\t\t\tthrow new Error('OES_texture_float is required but not supported')\n\t\t\t}\n\t\t\tif ((minFilter !== gl.NEAREST || magFilter !== gl.NEAREST) && !gl.getExtension('OES_texture_float_linear')) {\n\t\t\t\tthrow new Error('OES_texture_float_linear is required but not supported')\n\t\t\t}\n\t\t} else if (this.type === gl.HALF_FLOAT_OES) {\n\t\t\tif (!gl.getExtension('OES_texture_half_float')) {\n\t\t\t\tthrow new Error('OES_texture_half_float is required but not supported')\n\t\t\t}\n\t\t\tif ((minFilter !== gl.NEAREST || magFilter !== gl.NEAREST) && !gl.getExtension('OES_texture_half_float_linear')) {\n\t\t\t\tthrow new Error('OES_texture_half_float_linear is required but not supported')\n\t\t\t}\n\t\t}\n\t\tgl.bindTexture(gl.TEXTURE_2D, this.texture)\n\t\t// gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 1)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, options.wrap || options.wrapS || gl.CLAMP_TO_EDGE)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, options.wrap || options.wrapT || gl.CLAMP_TO_EDGE)\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, width, height, 0, this.format, this.type, options.data)\n\t}\n\n\tsetData(data: ArrayBufferView) {\n\t\tthis.gl.bindTexture(this.gl.TEXTURE_2D, this.texture)\n\t\tthis.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.format, this.width, this.height, 0, this.format, this.type, data)\n\t}\n\n\tbind(unit: int) {\n\t\tthis.gl.activeTexture(this.gl.TEXTURE0 + unit)\n\t\tthis.gl.bindTexture(this.gl.TEXTURE_2D, this.texture)\n\t}\n\n\tunbind(unit: int) {\n\t\tthis.gl.activeTexture(this.gl.TEXTURE0 + unit)\n\t\tthis.gl.bindTexture(this.gl.TEXTURE_2D, null)\n\t}\n\n\tprivate framebuffer: WebGLFramebuffer\n\tprivate renderbuffer: WebGLRenderbuffer & { width: number, height: number }\n\tstatic checkerBoardCanvas: HTMLCanvasElement\n\n\tcanDrawTo() {\n\t\tconst gl = this.gl\n\t\tthis.framebuffer = this.framebuffer || gl.createFramebuffer()\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer)\n\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0)\n\t\tconst result = gl.checkFramebufferStatus(gl.FRAMEBUFFER) == gl.FRAMEBUFFER_COMPLETE\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null)\n\t\treturn result\n\t}\n\n\tdrawTo(callback: (gl: TSGLContext) => void): void {\n\t\tconst gl = this.gl\n\t\tthis.framebuffer = this.framebuffer || gl.createFramebuffer()\n\t\tthis.renderbuffer = this.renderbuffer || gl.createRenderbuffer() as any\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer)\n\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, this.renderbuffer)\n\t\tif (this.width != this.renderbuffer.width || this.height != this.renderbuffer.height) {\n\t\t\tthis.renderbuffer.width = this.width\n\t\t\tthis.renderbuffer.height = this.height\n\t\t\tgl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.width, this.height)\n\t\t}\n\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0)\n\t\tgl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this.renderbuffer)\n\t\t// if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {\n\t\t// \tthrow new Error('Rendering to this texture is not supported (incomplete this.framebuffer)')\n\t\t// }\n\t\tconst viewport = gl.getParameter(gl.VIEWPORT)\n\t\tgl.viewport(0, 0, this.width, this.height)\n\n\t\tcallback(gl)\n\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null)\n\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null)\n\t\tgl.viewport(viewport[0], viewport[1], viewport[2], viewport[3])\n\t}\n\n\tswapWith(other: Texture): void {\n\t\tassert(this.gl == other.gl)\n\t\tlet temp\n\t\ttemp = other.texture\n\t\tother.texture = this.texture\n\t\tthis.texture = temp\n\n\t\ttemp = other.width\n\t\tother.width = this.width\n\t\tthis.width = temp\n\n\t\ttemp = other.height\n\t\tother.height = this.height\n\t\tthis.height = temp\n\t}\n\n\t/**\n\t * Return a new texture created from `imgElement`, an `<img>` tag.\n\t */\n\tstatic fromImage(imgElement: HTMLImageElement | HTMLCanvasElement, options: TextureOptions, gl: TSGLContext = currentGL()): Texture {\n\t\toptions = options || {}\n\t\tconst texture = new Texture(imgElement.width, imgElement.height, options, gl)\n\t\ttry {\n\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, texture.format, texture.format, texture.type, imgElement)\n\t\t} catch (e) {\n\t\t\tif (location.protocol == 'file:') {\n\t\t\t\tthrow new Error('imgElement not loaded for security reasons (serve this page over \"http://\" instead)')\n\t\t\t} else {\n\t\t\t\tthrow new Error('imgElement not loaded for security reasons (imgElement must originate from the same ' +\n\t\t\t\t\t'domain as this page or use Cross-Origin Resource Sharing)')\n\t\t\t}\n\t\t}\n\t\tif (options.minFilter && options.minFilter != gl.NEAREST && options.minFilter != gl.LINEAR) {\n\t\t\tgl.generateMipmap(gl.TEXTURE_2D)\n\t\t}\n\t\treturn texture\n\t}\n\n\t/**\n\t * Returns a checkerboard texture that will switch to the correct texture when it loads.\n\t */\n\tstatic fromURLSwitch(url: string, options: TextureOptions = {}, gl = currentGL()): Texture {\n\t\tTexture.checkerBoardCanvas = Texture.checkerBoardCanvas || (function () {\n\t\t\tconst c = document.createElement('canvas').getContext('2d')\n\t\t\tif (!c) throw new Error('Could not create 2d canvas.')\n\t\t\tc.canvas.width = c.canvas.height = 128\n\t\t\tfor (let y = 0; y < c.canvas.height; y += 16) {\n\t\t\t\tfor (let x = 0; x < c.canvas.width; x += 16) {\n\t\t\t\t\t//noinspection JSBitwiseOperatorUsage\n\t\t\t\t\tc.fillStyle = (x ^ y) & 16 ? '#FFF' : '#DDD'\n\t\t\t\t\tc.fillRect(x, y, 16, 16)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn c.canvas\n\t\t})()\n\t\tconst texture = Texture.fromImage(Texture.checkerBoardCanvas, options)\n\t\tconst image = new Image()\n\t\timage.onload = () => Texture.fromImage(image, options, gl).swapWith(texture)\n\t\t// error event doesn't return a reason. Most likely a 404.\n\t\timage.onerror = () => { throw new Error('Could not load image ' + image.src + '. 404?') }\n\t\timage.src = url\n\t\treturn texture\n\t}\n\n\tstatic fromURL(url: string, options: TextureOptions, gl = currentGL()): Promise<Texture> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst image = new Image()\n\t\t\timage.onload = () => resolve(Texture.fromImage(image, options, gl))\n\t\t\timage.onerror = () => reject('Could not load image ' + image.src + '. 404?')\n\t\t\timage.src = url\n\t\t})\n\t}\n}","/// <reference path=\"../types.d.ts\" />\r\nimport { V3, DEG, V, clamp } from 'ts3dutils'\r\nimport { TSGLContext, Mesh, Shader } from 'tsgl'\r\n\r\n/**\r\n * Move camera using mouse.\r\n */\r\nexport function camera(gl: TSGLContext) {\r\n\tlet yRot = -10 * DEG\r\n\tlet zRot = 90 * DEG\r\n\tlet camera = new V3(0, -5, 1)\r\n\tconst mesh = Mesh.sphere().computeWireframeFromFlatTriangles().compile()\r\n\tconst shader = Shader.create(`\r\nprecision mediump float;\r\nattribute vec3 ts_Normal;\r\nattribute vec4 ts_Vertex;\r\nuniform mat4 ts_ModelViewProjectionMatrix;\r\nvarying vec3 normal;\r\nvoid main() {\r\n\tnormal = ts_Normal;\r\n\tgl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\r\n}\r\n`, `\r\nprecision mediump float;\r\nuniform float brightness;\r\nvarying vec3 normal;\r\nvoid main() {\r\n\tgl_FragColor = vec4(brightness * (normal * 0.5 + 0.5), 1.0);\r\n}\r\n`)\r\n\r\n\tlet lastPos = V3.O\r\n\t// scene rotation\r\n\tgl.canvas.onmousemove = function (e) {\r\n\t\tconst pagePos = V(e.pageX, e.pageY)\r\n\t\tconst delta = lastPos.to(pagePos)\r\n\t\tif (e.buttons & 1) {\r\n\t\t\tzRot -= delta.x * 0.25 * DEG\r\n\t\t\tyRot = clamp(yRot - delta.y * 0.25 * DEG, -85 * DEG, 85 * DEG)\r\n\t\t}\r\n\t\tlastPos = pagePos\r\n\t}\r\n\tgl.canvas.contentEditable = 'true'\r\n\tconst keys: { [key: string]: boolean } = {}\r\n\tgl.canvas.onkeydown = function (e) {\r\n\t\tkeys[e.code] = true\r\n\t}\r\n\tgl.canvas.onkeyup = function (e) {\r\n\t\tkeys[e.code] = false\r\n\t}\r\n\r\n\tgl.clearColor(1, 1, 1, 1)\r\n\r\n\t// setup camera\r\n\r\n\tgl.enable(gl.CULL_FACE)\r\n\tgl.enable(gl.POLYGON_OFFSET_FILL)\r\n\tgl.polygonOffset(1, 1)\r\n\tgl.clearColor(0.8, 0.8, 0.8, 1)\r\n\tgl.enable(gl.DEPTH_TEST)\r\n\r\n\treturn gl.animate(function (abs, diff) {\r\n\t\tconst angleDeg = abs / 1000 * 45\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\t\tgl.loadIdentity()\r\n\t\tconst speed = diff / 1000 * 4\r\n\r\n\t\t// Forward movement\r\n\t\tconst forwardMov = +!!(keys.KeyW || keys.ArrowUp) - +!!(keys.KeyS || keys.ArrowDown)\r\n\t\tconst forwardV3 = V3.sphere(zRot, yRot)\r\n\r\n\t\t// Sideways movement\r\n\t\tconst sideMov = +!!(keys.KeyA || keys.ArrowLeft) - +!!(keys.KeyD || keys.ArrowRight)\r\n\t\tconst sideV3 = V3.sphere(zRot + Math.PI / 2, 0)\r\n\r\n\t\tconst movementV3 = forwardV3.times(forwardMov).plus(sideV3.times(sideMov))\r\n\t\tcamera = movementV3.likeO() ? camera : camera.plus(movementV3.toLength(speed))\r\n\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\r\n\t\tgl.matrixMode(gl.PROJECTION)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.perspective(70, gl.canvas.width / gl.canvas.height, 0.1, 1000)\r\n\t\tgl.lookAt(camera, camera.plus(forwardV3), V3.Z)\r\n\r\n\t\tgl.matrixMode(gl.MODELVIEW)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.rotate(-zRot, 0, 0, 1)\r\n\t\tgl.rotate(-yRot, 0, 1, 0)\r\n\t\tgl.translate(-camera.x, -camera.y, -camera.z)\r\n\r\n\t\tshader.uniforms({ brightness: 1 }).draw(mesh, gl.TRIANGLES)\r\n\t\tshader.uniforms({ brightness: 0 }).draw(mesh, gl.LINES)\r\n\t})\r\n}\r\n\r\n(camera as any).info = 'LMB-drag to move camera.'","/// <reference path=\"../types.d.ts\" />\r\nimport chroma from 'chroma-js'\r\nimport { AABB, arrayFromFunction, clamp, DEG, int, lerp, M4, TAU, time, Tuple4, V, V3 } from 'ts3dutils'\r\n\r\nimport { DRAW_MODES, TSGLContext, Mesh, pushQuad, Shader, Texture } from 'tsgl'\r\n\r\nconst { sin, PI } = Math\r\n\r\nexport { TSGLContext }\r\n\r\nimport gazeboJSON from '../../gazebo.json'\r\n\r\n/**\r\n * Draw soft shadows by calculating a light map in multiple passes.\r\n */\r\nexport function gpuLightMap(gl: TSGLContext) {\r\n\tgl.getExtension('EXT_color_buffer_float')\r\n\t// modified version of https://evanw.github.io/lightgl.js/tests/gpulightmap.html\r\n\r\n\tconst gazebo = Mesh.load(gazeboJSON)\r\n\r\n\tlet angleX = 0\r\n\tlet angleY = 0\r\n\tif (gl.version !== 2 && (!gl.getExtension('OES_texture_float') || !gl.getExtension('OES_texture_float_linear'))) {\r\n\t\tdocument.write('This demo requires the OES_texture_float and OES_texture_float_linear extensions to run')\r\n\t\tthrow new Error('not supported')\r\n\t}\r\n\tconst texturePlane = Mesh.plane()\r\n\tconst textureShader = Shader.create(`\r\n  attribute vec2 ts_TexCoord;\r\n  varying vec2 coord;\r\n  void main() {\r\n    coord = ts_TexCoord;\r\n    gl_Position = vec4(coord * 2.0 - 1.0, 0.0, 1.0);\r\n  }\r\n`, `\r\nprecision highp float;\r\n  uniform sampler2D texture;\r\n  varying vec2 coord;\r\n  void main() {\r\n    gl_FragColor = texture2D(texture, coord);\r\n  }\r\n`)\r\n\r\n\tconst depthMap = new Texture(1024, 1024, { format: gl.RGBA })\r\n\tconst depthShader = Shader.create(`\r\n\tuniform mat4 ts_ModelViewProjectionMatrix;\r\n\tattribute vec4 ts_Vertex;\r\n  varying vec4 pos;\r\n  void main() {\r\n    gl_Position = pos = ts_ModelViewProjectionMatrix * ts_Vertex;\r\n  }\r\n`, `\r\nprecision highp float;\r\n  varying vec4 pos;\r\n  void main() {\r\n    float depth = pos.z / pos.w;\r\n    gl_FragColor = vec4(depth * 0.5 + 0.5);\r\n  }\r\n`)\r\n\r\n\tconst shadowTestShader = Shader.create(`\r\n  uniform mat4 shadowMapMatrix;\r\n  uniform vec3 light;\r\n  attribute vec4 offsetPosition;\r\n  attribute vec3 ts_Normal;\r\n  attribute vec2 ts_TexCoord;\r\n  varying vec4 shadowMapPos; // position inside the shadow map frustrum\r\n  varying vec3 normal;\r\n\r\n  void main() {\r\n    normal = ts_Normal;\r\n    shadowMapPos = shadowMapMatrix * offsetPosition;\r\n    gl_Position = vec4(ts_TexCoord * 2.0 - 1.0, 0.0, 1.0);\r\n  }\r\n`, `\r\n\tprecision highp float;\r\n  uniform float sampleCount;\r\n  uniform sampler2D depthMap;\r\n  uniform vec3 light;\r\n  varying vec4 shadowMapPos;\r\n  varying vec3 normal;\r\n  uniform vec4 res;\r\n\r\n  void main() {\r\n    /* Run shadow test */\r\n    const float bias = -0.0025;\r\n    float depth = texture2D(depthMap, shadowMapPos.xy / shadowMapPos.w * 0.5 + 0.5).r;\r\n    float shadow = (bias + shadowMapPos.z / shadowMapPos.w * 0.5 + 0.5 - depth > 0.0) ? 1.0 : 0.0;\r\n\r\n    /* Points on polygons facing away from the light are always in shadow */\r\n    float color = dot(normal, light) > 0.0 ? 1.0 - shadow : 0.0;\r\n    gl_FragColor = vec4(vec3(color), 1.0 / (1.0 + sampleCount));\r\n  }\r\n`)\r\n\r\n\t/**\r\n\t * Wrapper for a Mesh made only of quads (two triangles in a \"square\") and\r\n\t * an associated automatically UV-unwrapped texture.\r\n\t */\r\n\tclass QuadMesh {\r\n\t\tmesh = new Mesh()\r\n\t\t\t.addVertexBuffer('normals', 'ts_Normal')\r\n\t\t\t.addIndexBuffer('TRIANGLES')\r\n\t\t\t.addVertexBuffer('coords', 'ts_TexCoord')\r\n\t\t\t.addVertexBuffer('offsetCoords', 'offsetCoord')\r\n\t\t\t.addVertexBuffer('offsetPositions', 'offsetPosition')\r\n\t\tindex: int = 0\r\n\t\tlightmapTexture: Texture | undefined\r\n\t\tbounds: { center: V3, radius: number } | undefined\r\n\t\tsampleCount: int = 0\r\n\t\tcountedQuads = 0\r\n\r\n\t\t// Add a quad given its four vertices and allocate space for it in the lightmap\r\n\t\taddQuad(a: V3, b: V3, c: V3, d: V3) {\r\n\r\n\t\t\t// Add vertices\r\n\t\t\tconst vl = this.mesh.vertices.length\r\n\t\t\tthis.mesh.vertices.push(a, b, c, d)\r\n\r\n\t\t\t// Add normal\r\n\t\t\tconst normal = V3.normalOnPoints(a, b, c).unit()\r\n\t\t\tthis.mesh.normals.push(normal, normal, normal, normal)\r\n\r\n\t\t\t// A quad is two triangles\r\n\t\t\tpushQuad(this.mesh.TRIANGLES, false, vl, vl + 1, vl + 2, vl + 3)\r\n\r\n\t\t\tthis.countedQuads++\r\n\t\t}\r\n\r\n\t\taddDoubleQuad(a: V3, b: V3, c: V3, d: V3) {\r\n\t\t\t// Need a separate lightmap for each side of the quad\r\n\t\t\tthis.addQuad(a, b, c, d)\r\n\t\t\tthis.addQuad(a, c, b, d)\r\n\t\t}\r\n\r\n\t\taddCube(m4?: M4) {\r\n\t\t\t[\r\n\t\t\t\t[V3.O, V3.Y, V3.X, V3.XY],\r\n\t\t\t\t[V3.Z, new V3(1, 0, 1), new V3(0, 1, 1), V3.XYZ],\r\n\t\t\t\t[V3.O, V3.X, V3.Z, new V3(1, 0, 1)],\r\n\t\t\t\t[V3.X, new V3(1, 1, 0), new V3(1, 0, 1), new V3(1, 1, 1)],\r\n\t\t\t\t[new V3(1, 1, 0), V3.Y, V3.XYZ, new V3(0, 1, 1)],\r\n\t\t\t\t[V3.Y, V3.O, new V3(0, 1, 1), V3.Z],\r\n\t\t\t].forEach(vs => (this.addQuad as any)(...(m4 ? m4.transformedPoints(vs) : vs)))\r\n\t\t}\r\n\r\n\t\tcompile(texelsPerSide: int) {\r\n\t\t\tconst numQuads = this.mesh.vertices.length / 4\r\n\t\t\tif (numQuads % 1 != 0) throw new Error('not quads')\r\n\t\t\tconst quadsPerSide = Math.ceil(Math.sqrt(numQuads))\r\n\r\n\t\t\tfor (let i = 0; i < numQuads; i++) {\r\n\t\t\t\t// Compute location of texture cell\r\n\t\t\t\tconst s = i % quadsPerSide\r\n\t\t\t\tconst t = (i - s) / quadsPerSide\r\n\r\n\t\t\t\t// Coordinates that are on the edge of border texels (to avoid cracks when rendering)\r\n\t\t\t\tconst rs0 = s / quadsPerSide\r\n\t\t\t\tconst rt0 = t / quadsPerSide\r\n\t\t\t\tconst rs1 = (s + 1) / quadsPerSide\r\n\t\t\t\tconst rt1 = (t + 1) / quadsPerSide\r\n\t\t\t\tthis.mesh.coords.push(\r\n\t\t\t\t\t[rs0, rt0],\r\n\t\t\t\t\t[rs1, rt0],\r\n\t\t\t\t\t[rs0, rt1],\r\n\t\t\t\t\t[rs1, rt1])\r\n\r\n\t\t\t\tconst half = 1 / texelsPerSide\r\n\r\n\t\t\t\tconst [a, b, c, d] = this.mesh.vertices.slice(i * 4, (i + 1) * 4)\r\n\r\n\t\t\t\t// Add fake positions\r\n\t\t\t\tfunction bilerp(x: number, y: number) {\r\n\t\t\t\t\treturn a.times((1 - x) * (1 - y)).plus(b.times(x * (1 - y)))\r\n\t\t\t\t\t\t.plus(c.times((1 - x) * y)).plus(d.times(x * y))\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.mesh.offsetPositions.push(\r\n\t\t\t\t\tbilerp(-half, -half),\r\n\t\t\t\t\tbilerp(1 + half, -half),\r\n\t\t\t\t\tbilerp(-half, 1 + half),\r\n\t\t\t\t\tbilerp(1 + half, 1 + half))\r\n\r\n\t\t\t\tconst s0 = (s + half) / quadsPerSide\r\n\t\t\t\tconst t0 = (t + half) / quadsPerSide\r\n\t\t\t\tconst s1 = (s + 1 - half) / quadsPerSide\r\n\t\t\t\tconst t1 = (t + 1 - half) / quadsPerSide\r\n\t\t\t\tthis.mesh.offsetCoords.push(\r\n\t\t\t\t\t[s0, t0],\r\n\t\t\t\t\t[s1, t0],\r\n\t\t\t\t\t[s0, t1],\r\n\t\t\t\t\t[s1, t1])\r\n\r\n\t\t\t}\r\n\t\t\t// Finalize mesh\r\n\t\t\tthis.mesh.compile()\r\n\t\t\tthis.bounds = this.mesh.getBoundingSphere()\r\n\r\n\t\t\t// Create textures\r\n\t\t\tconst textureSize = quadsPerSide * texelsPerSide\r\n\t\t\tconsole.log('texture size: ' + textureSize)\r\n\t\t\tthis.lightmapTexture = new Texture(textureSize, textureSize,\r\n\t\t\t\t{ internalFormat: gl.RGBA32F, format: gl.RGBA, type: gl.FLOAT, filter: gl.LINEAR })\r\n\t\t}\r\n\r\n\t\tdrawShadow(dir: V3) {\r\n\t\t\t// Construct a camera looking from the light toward the object\r\n\t\t\tconst r = this.bounds!.radius, c = this.bounds!.center\r\n\t\t\tgl.matrixMode(gl.PROJECTION)\r\n\t\t\tgl.pushMatrix()\r\n\t\t\tgl.loadIdentity()\r\n\t\t\tgl.ortho(-r, r, -r, r, -r, r)\r\n\t\t\tgl.matrixMode(gl.MODELVIEW)\r\n\t\t\tgl.pushMatrix()\r\n\t\t\tgl.loadIdentity()\r\n\t\t\tconst at = c.minus(dir)\r\n\t\t\tconst useY = (dir.maxElement() != dir.z)\r\n\t\t\tconst up = new V3(+!useY, 0, +useY).cross(dir)\r\n\t\t\tgl.lookAt(c, at, up)\r\n\r\n\t\t\t// Render the object viewed from the light using a shader that returns the fragment depth\r\n\t\t\tconst mesh = this.mesh\r\n\t\t\tconst shadowMapMatrix = gl.projectionMatrix.times(gl.modelViewMatrix)\r\n\t\t\tdepthMap.drawTo(function (gl) {\r\n\t\t\t\tgl.enable(gl.DEPTH_TEST)\r\n\t\t\t\tgl.clearColor(1, 1, 1, 1)\r\n\t\t\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\t\t\t\tdepthShader.draw(mesh)\r\n\t\t\t})\r\n\r\n\t\t\t//Run the shadow test for each texel in the lightmap and\r\n\t\t\t//accumulate that onto the existing lightmap contents\r\n\t\t\tconst sampleCount = this.sampleCount++\r\n\t\t\tdepthMap.bind(0)\r\n\t\t\tthis.lightmapTexture!.drawTo(function (gl) {\r\n\t\t\t\tgl.enable(gl.BLEND)\r\n\t\t\t\tgl.disable(gl.CULL_FACE)\r\n\t\t\t\tgl.disable(gl.DEPTH_TEST)\r\n\t\t\t\tgl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\r\n\t\t\t\tshadowTestShader.uniforms({\r\n\t\t\t\t\tshadowMapMatrix: shadowMapMatrix,\r\n\t\t\t\t\tsampleCount: sampleCount,\r\n\t\t\t\t\tlight: dir,\r\n\t\t\t\t}).draw(mesh)\r\n\t\t\t\tgl.disable(gl.BLEND)\r\n\t\t\t})\r\n\t\t\tdepthMap.unbind(0)\r\n\r\n\t\t\t// Reset the transform\r\n\t\t\tgl.matrixMode(gl.PROJECTION)\r\n\t\t\tgl.popMatrix()\r\n\t\t\tgl.matrixMode(gl.MODELVIEW)\r\n\t\t\tgl.popMatrix()\r\n\t\t}\r\n\t}\r\n\r\n\t// Make a mesh of quads\r\n\tconst numArcQuads = 32\r\n\tconst groundTilesPerSide = 5\r\n\tconst quadMesh = new QuadMesh()\r\n\t// Arc of randomly oriented quads\r\n\tquadMesh.addCube(M4.multiplyMultiple(\r\n\t\tM4.translate(0, 0, -0.2),\r\n\t\tM4.rotateAB(V3.XYZ, V3.Z)))\r\n\tfor (let i = 0; i < numArcQuads; i++) {\r\n\t\tconst r = 0.4\r\n\t\tconst t = i / numArcQuads * TAU\r\n\t\tconst center = V(0, 0, Math.sqrt(3) / 2 - 0.2).plus(V(0, 1.5, 0).times(Math.cos(t))).plus(V(1, 0, -1).toLength(1.5).times(Math.sin(t)))\r\n\t\t// const center = V3.sphere(0, (i + Math.random()) / numArcQuads * Math.PI)\r\n\t\tconst a = V3.randomUnit()\r\n\t\tconst b = V3.randomUnit().cross(a).unit()\r\n\t\tquadMesh.addCube(M4.multiplyMultiple(\r\n\t\t\tM4.translate(center),\r\n\t\t\tM4.forSys(a, b),\r\n\t\t\tM4.scale(r, r, r),\r\n\t\t\tM4.translate(-0.5, -0.5, -0.5)))\r\n\t\t// quadMesh.addDoubleQuad(\r\n\t\t//     center.minus(a).minus(b),\r\n\t\t//     center.minus(a).plus(b),\r\n\t\t//     center.plus(a).minus(b),\r\n\t\t//     center.plus(a).plus(b)\r\n\t\t// )\r\n\t}\r\n\r\n\t// Plane of quads\r\n\tfor (let x = 0; x < groundTilesPerSide; x++) {\r\n\t\tfor (let z = 0; z < groundTilesPerSide; z++) {\r\n\t\t\tconst dx = x - groundTilesPerSide / 2\r\n\t\t\tconst dz = z - groundTilesPerSide / 2\r\n\t\t\tquadMesh.addQuad(\r\n\t\t\t\tnew V3(dx, dz, 0),\r\n\t\t\t\tnew V3(dx + 1, dz, 0),\r\n\t\t\t\tnew V3(dx, dz + 1, 0),\r\n\t\t\t\tnew V3(dx + 1, dz + 1, 0),\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\tquadMesh.compile(128)\r\n\r\n\t// The mesh will be drawn with texture mapping\r\n\tconst mesh = quadMesh.mesh\r\n\tconst textureMapShader = Shader.create(`\r\n\t\tattribute vec4 ts_Vertex;\r\n\t\tuniform mat4 ts_ModelViewProjectionMatrix;\r\n        attribute vec2 offsetCoord;\r\n        varying vec2 coord;\r\n        void main() {\r\n            coord = offsetCoord;\r\n            gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\r\n        }\r\n`, `\r\n\t\tprecision highp float;\r\n        uniform sampler2D texture;\r\n        varying vec2 coord;\r\n        void main() {\r\n            gl_FragColor = texture2D(texture, coord);\r\n        }\r\n`)\r\n\r\n\r\n\tlet lastPos = V3.O\r\n\t// scene rotation\r\n\tgl.canvas.onmousemove = function (e) {\r\n\t\tconst pagePos = V(e.pageX, e.pageY)\r\n\t\tconst delta = lastPos.to(pagePos)\r\n\t\tif (e.buttons & 1) {\r\n\t\t\tangleY += delta.x\r\n\t\t\tangleX = clamp(angleX + delta.y, -90, 90)\r\n\t\t}\r\n\t\tlastPos = pagePos\r\n\t}\r\n\r\n\tlet flip = false\r\n\r\n\tgl.enable(gl.CULL_FACE)\r\n\tgl.enable(gl.DEPTH_TEST)\r\n\r\n\tconst lightDir = V3.XYZ\r\n\tconst ambientFraction = 0.4\r\n\r\n\tlet frame = 0\r\n\treturn gl.animate(function (abs, diff) {\r\n\t\tframe++\r\n\t\t//if (frame % 60 != 0) return\r\n\t\tconst gl = this\r\n\r\n\t\tgl.enable(gl.CULL_FACE)\r\n\t\tgl.clearColor(0.9, 0.9, 0.9, 1)\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\r\n\t\t// setup camera\r\n\t\tgl.matrixMode(gl.PROJECTION)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.perspective(70, gl.canvas.width / gl.canvas.height, 0.1, 1000)\r\n\t\tgl.lookAt(V(0, -3, 3), V3.O, V3.Z)\r\n\r\n\t\tgl.matrixMode(gl.MODELVIEW)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.rotate(angleX, 1, 0, 0)\r\n\t\tgl.rotate(angleY, 0, 0, 1)\r\n\r\n\t\t// Alternate between a shadow from a random point on the sky hemisphere\r\n\t\t// and a random point near the light (creates a soft shadow)\r\n\t\tflip = !flip\r\n\t\tconst dir = Math.random() < ambientFraction\r\n\t\t\t? V3.randomUnit()\r\n\t\t\t: lightDir.plus(V3.randomUnit().times(0.1 * Math.sqrt(Math.random()))).unit()\r\n\t\tquadMesh.drawShadow(dir.z < 0 ? dir.negated() : dir)\r\n\r\n\t\t// Draw the mesh with the ambient occlusion so far\r\n\t\tgl.enable(gl.DEPTH_TEST)\r\n\t\tgl.enable(gl.CULL_FACE)\r\n\t\tquadMesh.lightmapTexture!.bind(0)\r\n\t\ttextureMapShader.draw(mesh)\r\n\r\n\t\t// Draw depth map overlay\r\n\t\tgl.disable(gl.CULL_FACE)\r\n\t\tquadMesh.lightmapTexture!.bind(0)\r\n\t\tgl.viewport(10, 10, 10 + 256, 10 + 256)\r\n\t\ttextureShader.draw(texturePlane)\r\n\t\tgl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\r\n\r\n\t})\r\n}\r\n(gpuLightMap as any).info = 'LMB-drag to rotate camera.'","/// <reference path=\"../types.d.ts\" />\r\nimport { TSGLContext, Mesh, Shader } from 'tsgl'\r\nimport { V3, V } from 'ts3dutils'\r\n\r\n/**\r\n * OpenGL-style immediate mode.\r\n */\r\nexport function immediateMode(gl: TSGLContext) {\r\n\r\n\t// setup camera\r\n\tgl.disable(gl.CULL_FACE)\r\n\tgl.matrixMode(gl.PROJECTION)\r\n\tgl.loadIdentity()\r\n\tgl.perspective(90, gl.canvas.width / gl.canvas.height, 0.0001, 1000000)\r\n\tgl.lookAt(V(0, -3, 2), V3.O, V3.Z)\r\n\tgl.matrixMode(gl.MODELVIEW)\r\n\r\n\tconst mesh = Mesh.cube()\r\n\r\n\r\n\tgl.enable(gl.DEPTH_TEST)\r\n\tgl.clearColor(1, 1, 1, 0)\r\n\r\n\treturn gl.animate(function (abs, diff) {\r\n\r\n\r\n\t\tconst angleDeg = abs / 1000 * 45\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\t\tgl.loadIdentity()\r\n\t\t// gl.translate(0, 0, -5)\r\n\t\tgl.rotate(angleDeg, 0, 0, 1)\r\n\r\n\t\tgl.color(0.5, 0.5, 0.5)\r\n\t\tgl.lineWidth(1)\r\n\t\tgl.begin(gl.LINES)\r\n\t\tfor (let i = -10; i <= 10; i++) {\r\n\t\t\tgl.vertex(i, -10, 0)\r\n\t\t\tgl.vertex(i, +10, 0)\r\n\t\t\tgl.vertex(-10, i, 0)\r\n\t\t\tgl.vertex(+10, i, 0)\r\n\t\t}\r\n\t\tgl.end()\r\n\r\n\t\tgl.pointSize(10)\r\n\t\tgl.begin(gl.POINTS)\r\n\r\n\t\tgl.color(1, 0, 0)\r\n\t\tgl.vertex(1, 0, 0)\r\n\r\n\t\tgl.color(0, 1, 0)\r\n\t\tgl.vertex(0, 1, 0)\r\n\r\n\t\tgl.color(0, 0, 1)\r\n\t\tgl.vertex(0, 0, 1)\r\n\r\n\t\tgl.end()\r\n\r\n\t\tgl.lineWidth(2)\r\n\t\tgl.begin(gl.LINE_LOOP)\r\n\t\tgl.color('red')\r\n\t\tgl.vertex(1, 0, 0)\r\n\t\tgl.color('green')\r\n\t\tgl.vertex(0, 1, 0)\r\n\t\tgl.color('blue')\r\n\t\tgl.vertex(0, 0, 1)\r\n\t\tgl.end()\r\n\r\n\t\tgl.begin(gl.TRIANGLES)\r\n\t\tgl.color(1, 1, 0)\r\n\t\tgl.vertex(0.5, 0.5, 0)\r\n\t\tgl.color(0, 1, 1)\r\n\t\tgl.vertex(0, 0.5, 0.5)\r\n\t\tgl.color(1, 0, 1)\r\n\t\tgl.vertex(0.5, 0, 0.5)\r\n\t\tgl.end()\r\n\t})\r\n}","precision mediump float;\r\nuniform vec4 color;\r\nvoid main() {\r\n    gl_FragColor = color;\r\n}","precision mediump float;\r\nuniform mat4 ts_ModelViewProjectionMatrix;\r\nattribute vec4 ts_Vertex;\r\nvoid main() {\r\n    gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\r\n}","precision mediump float;\r\nvarying vec4 color;\r\nvoid main() {\r\n    gl_FragColor = color;\r\n}","precision mediump float;\r\nattribute vec4 ts_Vertex;\r\nconst int NUM_PS = 64;\r\nfloat q = 0.01;\r\nuniform vec4 ps[NUM_PS];\r\nvarying vec4 color;\r\nvec3 forceAtPos(vec3 coord) {\r\n    vec3 totalForce = vec3(0.0, 0.0, 0.0);\r\n    for (int i = 0; i < NUM_PS; i++) {\r\n        vec4 p = ps[i];\r\n        float pCharge = p.w;\r\n        vec3 coordToP = p.xyz - coord;\r\n        float r = length(coordToP);\r\n        float partialForceMagnitude = pCharge * q / r / r;\r\n        vec3 partialForce = normalize(coordToP) * partialForceMagnitude;\r\n        totalForce += partialForce;\r\n    }\r\n    return totalForce;\r\n}\r\nvoid main() {\r\n    //gl_FragColor = vec4(coord.x, coord.y, 0, 1);\r\n    vec4 pos = ts_Vertex;\r\n    vec3 fieldPos = pos.xyz;\r\n    vec3 fieldForce = forceAtPos(fieldPos);\r\n    color = vec4(1,0,0,1) * sqrt(length(fieldForce)) / 1.0;\r\n    gl_Position = vec4(\r\n        fieldPos * 2.0\r\n        + normalize(fieldForce) * pos.z\r\n        + vec3(-1, -1, -1), 1);\r\n}","/// <reference path=\"../types.d.ts\" />\r\nimport { TSGLContext, Mesh, Shader, DRAW_MODES } from 'tsgl'\r\nimport chroma from 'chroma-js'\r\nimport colorFS from '../shaders/colorFS.glslx'\r\nimport posVS from '../shaders/posVS.glslx'\r\nimport varyingColorFS from '../shaders/varyingColorFS.glslx'\r\nimport vectorFieldVS from '../shaders/vectorFieldVS.glslx'\r\nimport { Tuple4, V3, arrayFromFunction, AABB, V, M4, DEG, time } from 'ts3dutils'\r\n\r\n/**\r\n * Calculate and render magnetic field lines.\r\n */\r\nexport function mag(gl: TSGLContext) {\r\n\tconst cubeMesh = Mesh.cube()\r\n\t// simple pos/color\r\n\tconst shader = Shader.create(posVS, colorFS)\r\n\tconst vectorFieldShader = Shader.create(vectorFieldVS, varyingColorFS)\r\n\tgl.clearColor(1, 1, 1, 1)\r\n\r\n\ttype PointCharge = { pos: V3, charge: number }\r\n\r\n\tconst vec4 = (...args: number[]) => [...args] as Tuple4<number>\r\n\t// ps.push(\r\n\t//     vec4(0.2, 0.5, 0, 1),\r\n\t//     vec4(0.2, 0.8, 0, 1),\r\n\t//     vec4(0.8, 0.5, 0, -1),\r\n\t// )\r\n\r\n\r\n\t// given a magnetic field created by fieldCharges, calculate the field strength/dir at pos\r\n\tfunction fieldAtPos(fieldCharges: PointCharge[], pos: V3) {\r\n\t\tconst fieldChargeForces = fieldCharges.map(p => {\r\n\t\t\tconst posToP = pos.to(p.pos)\r\n\t\t\tconst r = posToP.length()\r\n\t\t\tconst partialForceMagnitude = p.charge / r / r\r\n\t\t\tconst partialForce = posToP.toLength(partialForceMagnitude)\r\n\t\t\treturn partialForce\r\n\t\t})\r\n\t\treturn V3.add(...fieldChargeForces)\r\n\t}\r\n\r\n\t/**\r\n\t * Iteratively calculate a field line\r\n\t * @param fieldCharges charge defining magnetic field\r\n\t * @param bounds within which to calc field lines\r\n\t * @param start start point of field line\r\n\t * @param dir step size to take. negative to plot field line in reverse\r\n\t */\r\n\tfunction* qPath(fieldCharges: PointCharge[], bounds: AABB, start: V3, dir: number) {\r\n\t\tlet pos = start, f, i = 0\r\n\t\twhile (true) {\r\n\t\t\tf = fieldAtPos(fieldCharges, pos)\r\n\t\t\tpos = pos.plus(f.toLength(dir))\r\n\r\n\t\t\tif (!bounds.containsPoint(pos) // pos outside bounds\r\n\t\t\t\t|| i++ > 1000 // to many iterations\r\n\t\t\t\t|| f.squared() > 2.5e7 // force to high, i.e. to close to charge\r\n\t\t\t) break\r\n\t\t\tyield pos\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns array of PointCharges to model a bar magnet.\r\n\t * @param count\r\n\t */\r\n\tfunction barMagnet(count = 4) {\r\n\t\treturn arrayFromFunction(count * count, i => {\r\n\t\t\tconst x = i % count\r\n\t\t\tconst y = (i / count) | 0\r\n\t\t\treturn { pos: V((0.5 + x) / count, (0.5 + y) / count, 0), charge: (+(x < count / 2) || -1) }\r\n\t\t})\r\n\t}\r\n\r\n\tconst enabledBarMagnets = [true, true, true, true, true]\r\n\tconst barMagnetMatrices = [\r\n\t\tM4.scale(0.2, 0.1, 0.02).rotateZ(20 * DEG).translate(0.5, 0.5, 0.1),\r\n\t\tM4.scale(0.1, 0.05, 0.02).rotateZ(60 * DEG).translate(0.2, 0.1),\r\n\t\tM4.scale(0.2, 0.02, 0.02).rotateY(-100 * DEG).rotateZ(120 * DEG).translate(0.2, 0.8),\r\n\t\tM4.scale(0.2, 0.1, 0.02).rotateX(90 * DEG).rotateZ(270 * DEG).translate(0.9, 0.4, 0.1),\r\n\t\tM4.scale(0.2, 0.1, 0.02).rotateX(90 * DEG).rotateZ(270 * DEG).translate(0.9, 0.9, 0.1),\r\n\t]\r\n\r\n\tconst bounds = new AABB(V3.O, V(1, 1, 0.3))\r\n\tlet linesDensity = 10\r\n\tconst linesMesh = new Mesh().addIndexBuffer('LINES')\r\n\r\n\tfunction calculateFieldLines() {\r\n\t\tconst ps: PointCharge[] = []\r\n\t\tbarMagnetMatrices.forEach((mat, index) => enabledBarMagnets[index] && ps.push(...barMagnet(6).map(p => {\r\n\t\t\tp.pos = mat.transformPoint(p.pos)\r\n\t\t\treturn p\r\n\t\t})))\r\n\r\n\t\tlinesMesh.LINES.clear()\r\n\t\tlinesMesh.vertices.clear()\r\n\t\tconsole.log('generation took (ms): ' + time(() => {\r\n\t\t\tfor (const [x, y, z] of grid3d(linesDensity, linesDensity, Math.ceil(0.4 * linesDensity))) {\r\n\t\t\t\tconst start = V(x, y, z * bounds.max.z)\r\n\t\t\t\tlinesMesh.vertices.push(start)\r\n\t\t\t\tconst STEP = 0.01\r\n\t\t\t\tfor (const p of qPath(ps, bounds, start, STEP)) {\r\n\t\t\t\t\tlinesMesh.vertices.push(p)\r\n\t\t\t\t\tlinesMesh.LINES.push(linesMesh.vertices.length - 2, linesMesh.vertices.length - 1)\r\n\t\t\t\t}\r\n\t\t\t\tlinesMesh.vertices.push(start)\r\n\t\t\t\tfor (const p of qPath(ps, bounds, start, -STEP)) {\r\n\t\t\t\t\tlinesMesh.vertices.push(p)\r\n\t\t\t\t\tlinesMesh.LINES.push(linesMesh.vertices.length - 2, linesMesh.vertices.length - 1)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}))\r\n\t\tlinesMesh.compile()\r\n\t}\r\n\r\n\tcalculateFieldLines()\r\n\r\n\tconst vectorFieldMesh = new Mesh()\r\n\r\n\tconst fieldLinesXSide = 64\r\n\tconst vectorFieldVectorLength = 2 * 0.9 / fieldLinesXSide\r\n\tvectorFieldMesh.vertices = ballGrid(fieldLinesXSide).flatMap(\r\n\t\tp => [new V3(p.x, p.y, -vectorFieldVectorLength / 2), new V3(p.x, p.y, vectorFieldVectorLength / 2)])\r\n\r\n\t// vectorFieldMesh.vertices = arrayFromFunction(fieldLinesXSide * fieldLinesXSide * 2, i => {\r\n\t//     const startOrEnd = i % 2\r\n\t//     const x = ((i / 2) | 0) % fieldLinesXSide\r\n\t//     const y = ((i / 2 / fieldLinesXSide) | 0) % fieldLinesXSide\r\n\t//     return new V3(x / fieldLinesXSide, y / fieldLinesXSide, (startOrEnd || -1) * 0.01)\r\n\t// })\r\n\tvectorFieldMesh.compile()\r\n\r\n\t// setup camera\r\n\tgl.matrixMode(gl.PROJECTION)\r\n\tgl.loadIdentity()\r\n\tgl.perspective(45, gl.canvas.width / gl.canvas.height, 0.1, 1000)\r\n\tgl.lookAt(V(0.5, 2, 1), V(0.5, 0.5), V3.Z)\r\n\tgl.matrixMode(gl.MODELVIEW)\r\n\tgl.clearColor(...chroma('white').gl())\r\n\r\n\tgl.enable(gl.DEPTH_TEST)\r\n\r\n\t// vectorFieldShader.uniforms({\r\n\t// \t'ps[0]': ps as any,\r\n\t// \tcolor: chroma('red').gl(),\r\n\t// })\r\n\r\n\tgl.canvas.tabIndex = 0\r\n\tgl.canvas.focus()\r\n\r\n\tgl.canvas.addEventListener('keypress', e => {\r\n\t\tconst index = e.key.charCodeAt(0) - '1'.charCodeAt(0)\r\n\t\tif (0 <= index && index <= 4) {\r\n\t\t\tenabledBarMagnets[index] = !enabledBarMagnets[index]\r\n\t\t\tcalculateFieldLines()\r\n\t\t}\r\n\r\n\t\tif (e.key == '+' && linesDensity < 50) {\r\n\t\t\tlinesDensity++\r\n\t\t\tcalculateFieldLines()\r\n\t\t}\r\n\r\n\t\tif (e.key == '-' && linesDensity > 1) {\r\n\t\t\tlinesDensity--\r\n\t\t\tcalculateFieldLines()\r\n\t\t}\r\n\t})\r\n\r\n\treturn gl.animate(function (abs, diff) {\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.multMatrix(M4.rotateLine(V(0.5, 0.5), V3.Z, abs / 5000))\r\n\t\t// gl.translate(-1, -1, -1)\r\n\t\t// gl.scale(2)\r\n\r\n\t\tshader.uniforms({ color: chroma('black').gl() }).draw(linesMesh, DRAW_MODES.LINES)\r\n\t\tbarMagnetMatrices.forEach((mat, index) => {\r\n\t\t\tif (enabledBarMagnets[index]) {\r\n\t\t\t\tgl.pushMatrix()\r\n\t\t\t\tgl.multMatrix(mat)\r\n\t\t\t\tgl.scale(0.5, 1, 1)\r\n\t\t\t\tshader.uniforms({ color: chroma('red').gl() }).draw(cubeMesh, DRAW_MODES.LINES)\r\n\t\t\t\tgl.translate(1, 0)\r\n\t\t\t\tshader.uniforms({ color: chroma('blue').gl() }).draw(cubeMesh, DRAW_MODES.LINES)\r\n\t\t\t\tgl.popMatrix()\r\n\t\t\t}\r\n\t\t})\r\n\t\tgl.scale(bounds.max)\r\n\t\tshader.uniforms({ color: chroma('grey').gl() }).draw(cubeMesh, DRAW_MODES.LINES)\r\n\t\t// vectorFieldShader.drawBuffers(vectorFieldMesh.vertexBuffers, undefined, DRAW_MODES.LINES)\r\n\t})\r\n}\r\n\r\n\r\n/**\r\n * Returns a 1d array of V3s in a 2d-grid. The V3s are all within [0; 1]²\r\n * The V3s are spaced like circles fit together as tight as possible. i.e. rows offset by half the x-spacing.\r\n * .   .   .\r\n *   .   .   .\r\n * .   .   .\r\n *\r\n * @param xCount\r\n */\r\nfunction ballGrid(xCount = 64) {\r\n\tconst xSpacing = 1 / xCount\r\n\tconst ySpacing = xSpacing * Math.sqrt(3) / 2\r\n\tconst yCount = (1 / ySpacing) | 0\r\n\treturn arrayFromFunction(xCount * yCount, i => {\r\n\t\tconst x = i % xCount\r\n\t\tconst y = (i / xCount) | 0\r\n\t\treturn new V3((x + (y % 2) * 0.5) / xCount, y / yCount, 0)\r\n\t})\r\n}\r\n\r\nfunction grid3d(xCount = 64, yCount = xCount, zCount = 1) {\r\n\treturn arrayFromFunction(xCount * yCount * zCount, i => {\r\n\t\tconst x = i % xCount\r\n\t\tconst y = (i / xCount) % yCount | 0\r\n\t\tconst z = (i / xCount / yCount) | 0\r\n\t\treturn new V3(x / xCount, y / yCount, z / zCount)\r\n\t})\r\n}\r\n\r\n(mag as any).info = 'Press keys 1-5 to toggle magnets, +/- to change to number of field lines.'","/// <reference path=\"../types.d.ts\" />\r\nimport { Mesh, Texture, Shader, TSGLContext } from 'tsgl'\r\nimport { V3, V } from 'ts3dutils'\r\n\r\n/**\r\n * Blend two textures while rendering them to a quad.\r\n */\r\nexport function multiTexture(gl: TSGLContext) {\r\n\tconst mesh = Mesh.plane()\r\n\tconst texture = Texture.fromURLSwitch('texture.png')\r\n\tconst texture2 = Texture.fromURLSwitch('texture2.png')\r\n\tconst shader = Shader.create<{ texture: 'SAMPLER_2D', texture2: 'SAMPLER_2D' }, {}>(`\r\n\tattribute vec2 ts_TexCoord;\r\n\tattribute vec4 ts_Vertex;\r\n\tuniform mat4 ts_ModelViewProjectionMatrix;\r\n  varying vec2 coord;\r\n  void main() {\r\n    coord = ts_TexCoord;\r\n    gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\r\n  }\r\n`, `\r\n\tprecision highp float;\r\n  uniform sampler2D texture;\r\n  uniform sampler2D texture2;\r\n  varying vec2 coord;\r\n  void main() {\r\n    //gl_FragColor = vec4(coord.x, coord.y, 0, 1);\r\n    gl_FragColor = texture2D(texture, coord) - texture2D(texture2, coord);\r\n  }\r\n`)\r\n\tgl.clearColor(1, 1, 1, 1)\r\n\r\n\t// setup camera\r\n\tgl.matrixMode(gl.PROJECTION)\r\n\tgl.loadIdentity()\r\n\tgl.perspective(40, gl.canvas.width / gl.canvas.height, 0.1, 1000)\r\n\tgl.lookAt(V(0, -2, 1.5), V3.O, V3.Z)\r\n\tgl.matrixMode(gl.MODELVIEW)\r\n\r\n\tgl.enable(gl.DEPTH_TEST)\r\n\r\n\treturn gl.animate(function (abs, diff) {\r\n\t\tconst angleDeg = abs / 1000 * 45\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\t\tgl.loadIdentity()\r\n\r\n\t\t//gl.translate(0, 0, -5)\r\n\t\tgl.rotate(angleDeg, 0, 0, 1)\r\n\t\tgl.translate(-0.5, -0.5)\r\n\r\n\t\ttexture.bind(0)\r\n\t\ttexture2.bind(1)\r\n\t\tshader.uniforms({\r\n\t\t\ttexture: 0,\r\n\t\t\ttexture2: 1,\r\n\t\t}).draw(mesh)\r\n\t})\r\n}","#version 300 es\r\nprecision highp float;\r\nconst float INFINITY = 1.0e9;\r\nin vec4 pos;\r\nuniform vec3 sphereCenters[8];\r\nuniform mat4 ts_ModelViewProjectionMatrixInverse;\r\nuniform float sphereRadii[8];\r\nconst int TRIANGLE_COUNT = 1024;\r\nout vec4 fragColor;\r\n\r\n\r\nuniform sampler2D vertices;\r\nuniform sampler2D texCoords;\r\nuniform sampler2D triangleTexture;\r\n\r\nfloat intersectSphere(vec3 origin, vec3 ray, vec3 sphereCenter, float sphereRadius) {\r\n\tvec3 toSphere = origin - sphereCenter;\r\n\tfloat a = dot(ray, ray);\r\n\tfloat b = 2.0 * dot(toSphere, ray);\r\n\tfloat c = dot(toSphere, toSphere) - sphereRadius * sphereRadius;\r\n\tfloat discriminant = b * b - 4.0 * a * c;\r\n\tif (discriminant > 0.0) {\r\n\t\tfloat t = (-b - sqrt(discriminant)) / (2.0 * a);\r\n\t\tif (t > 0.0) return t;\r\n\t}\r\n\treturn INFINITY;\r\n}\r\n\r\nstruct TriangleHitTest {\r\n\tfloat t;\r\n\tvec3 hit;\r\n\tfloat u;\r\n\tfloat v;\r\n};\r\nconst TriangleHitTest INFINITY_HIT = TriangleHitTest(INFINITY, vec3(0.0), 0.0, 0.0);\r\n\r\n\r\n// taken from https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm\r\nTriangleHitTest intersectTriangle(vec3 rayOrigin, vec3 rayVector, vec3 vertex0, vec3 vertex1, vec3 vertex2) {\r\n    const float EPSILON = 0.0000001;\r\n    vec3 edge1, edge2, h, s, q;\r\n    float a,f,u,v;\r\n    edge1 = vertex1 - vertex0;\r\n    edge2 = vertex2 - vertex0;\r\n    h = cross(rayVector, edge2);\r\n    a = dot(edge1, h);\r\n    if (a > -EPSILON && a < EPSILON)\r\n        return INFINITY_HIT;\r\n    f = 1.0/a;\r\n    s = rayOrigin - vertex0;\r\n    u = f * dot(s, h);\r\n    if (u < 0.0 || u > 1.0)\r\n        return INFINITY_HIT;\r\n    q = cross(s, edge1);\r\n    v = f * dot(rayVector, q);\r\n    if (v < 0.0 || u + v > 1.0)\r\n        return INFINITY_HIT;\r\n    // At this stage we can compute t to find out where the intersection point is on the line.\r\n    float t = f * dot(edge2, q);\r\n    if (t > 0.0001) // ray intersection\r\n    {\r\n        return TriangleHitTest(t, rayOrigin + rayVector * t, u, v);\r\n    }\r\n    else // This means that there is a line intersection but not a ray intersection.\r\n        return INFINITY_HIT;\r\n}\r\n\r\n// use texelFetch because we don't want to interpolate values\r\nvec3 vertexi(int i) {\r\n\treturn texelFetch(vertices, ivec2(i, 0), 0).xyz;\r\n}\r\nvec3 textcoordi(int i) {\r\n\treturn texelFetch(texCoords, ivec2(i, 0), 0).xyz;\r\n}\r\n\r\nvoid main() {\r\n\t// pos.xy is the pixel we are drawing in normalized device coordinates (NDC, from -1 to +1)\r\n\t// the starting ray in NDC is (origin=pos.xy, dir=Z)\r\n\t// with ts_ModelViewProjectionMatrixInverse we transform the start and end point into world coordinates\r\n\tvec3 rayStart = (ts_ModelViewProjectionMatrixInverse * vec4(pos.xy, 1.0, 1.0)).xyz;\r\n\tvec3 rayEnd = (ts_ModelViewProjectionMatrixInverse * vec4(pos.xy, -1.0, 1.0)).xyz;\r\n\tvec3 rayDir = rayEnd - rayStart;\r\n\r\n\t// start with a black fragment\r\n\tfragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n\r\n\t// mask is the fraction of the fragment we haven't calculated yet\r\n\tvec4 mask = vec4(1.0, 1.0, 1.0, 1.0);\r\n\r\n\tfor (int bounce = 0; bounce < 8; bounce++) {\r\n\t\t/* Find the closest intersection with the scene */\r\n\t\tvec3 closestHit;\r\n\t\tvec4 closestColor = vec4(0.0);\r\n\t\tfloat closestT = INFINITY;\r\n\t\tvec3 closestNormal;\r\n\t\tfloat closestSpecular = 0.0;\r\n\t\tfor (int s = 0; s < 8; s++) {\r\n\t\t\tif (sphereRadii[s] == 0.0) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tfloat sphereT = intersectSphere(rayStart, rayDir, sphereCenters[s], sphereRadii[s]);\r\n\t\t\tif (sphereT < closestT) {\r\n\t\t\t\tclosestT = sphereT;\r\n\t\t\t\tclosestHit = rayStart + rayDir * sphereT;\r\n\t\t\t\tclosestNormal = (closestHit - sphereCenters[s]) / sphereRadii[s];\r\n\t\t\t\tclosestSpecular = 0.95;\r\n\t\t\t\tclosestColor = vec4(0.0);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (int i = 0; i < TRIANGLE_COUNT; i++) {\r\n\t\t\tvec3 a = vertexi(i*3);\r\n\t\t\tvec3 b = vertexi(i*3+1);\r\n\t\t\tvec3 c = vertexi(i*3 + 2);\r\n\r\n\t\t\tif (a == vec3(0.0) && b == vec3(0.0)) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tTriangleHitTest hitTest = intersectTriangle(rayStart, rayDir, a, b, c);\r\n\t\t\tfloat triangleT = hitTest.t;\r\n\t\t\tif (triangleT < closestT) {\r\n\t\t\t\tclosestT = triangleT;\r\n\t\t\t\tvec3 ab = b - a;\r\n\t\t\t\tvec3 ac = c - a;\r\n\t\t\t\tclosestNormal = normalize(cross(ab, ac));\r\n\t\t\t\tclosestHit = hitTest.hit;\r\n\r\n\t\t\t\t// interpolate the texCoords of the three triangle vertices\r\n\t\t\t\tvec3 texCoordsAndSheen = textcoordi(i*3) * (1.0 - hitTest.u - hitTest.v) // a\r\n\t\t\t\t\t+ textcoordi(i*3+1) * (hitTest.u) // b\r\n\t\t\t\t\t+ textcoordi(i*3+2) * (hitTest.v); // c\r\n\t\t\t\tclosestColor = texture(triangleTexture, texCoordsAndSheen.xy);\r\n\t\t\t\tclosestSpecular = texCoordsAndSheen.z;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/* The background is white */\r\n\t\tif (closestT == INFINITY) {\r\n\t\t\tfragColor += mask;\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tfragColor += mask * (1.0 - closestSpecular) * closestColor;\r\n\t\tif (0.0 == closestSpecular) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\trayDir = reflect(rayDir, closestNormal);\r\n\t\trayStart = closestHit;\r\n\t\tmask *= closestSpecular;\r\n\t}\r\n}","/// <reference path=\"../types.d.ts\" />\n\nimport chroma from 'chroma-js'\nimport { AABB, arrayFromFunction, clamp, DEG, int, lerp, M4, TAU, time, Tuple4, V, V3 } from 'ts3dutils'\n\nimport { DRAW_MODES, Mesh, pushQuad, Shader, Texture, TSGLContext } from 'tsgl'\n\nconst { sin, PI } = Math\n\nimport rayTracerFS from '../shaders/rayTracerFS.glslx'\n\n/**\n * Realtime GPU ray tracing including reflection.\n */\nexport async function rayTracing(gl: TSGLContext) {\n\tlet angleX = 30\n\tlet angleY = 10\n\n\t// This is the mesh we tell WebGL to draw. It covers the whole view so each pixel will get a fragment shader call.\n\tconst mesh = Mesh.plane({ startX: -1, startY: -1, width: 2, height: 2 })\n\n\t// floor and dodecahedron are meshes we will ray-trace\n\t// add a vertex buffer \"specular\", which defines how reflective the mesh is.\n\t// specular=1 means it is perfectly reflective, specular=0 perfectly matte\n\t// meshes neeed coords vertex buffer as we will draw them with meshes\n\tconst floor = Mesh.plane({ startX: -4, startY: -4, width: 8, height: 8 })\n\t\t.addVertexBuffer('specular', 'specular')\n\t\t.rotateX(90 * DEG)\n\tfloor.specular = floor.vertices.map(_ => 0) // floor doesn't reflect\n\tconst cube = Mesh.cube().rotateX(20 * DEG).rotateY(30 * DEG).translate(2, 1, -2)\n\tconst dodecahedron = Mesh.sphere(0)\n\t\t.addVertexBuffer('specular', 'specular')\n\t\t.addVertexBuffer('coords', 'ts_TexCoord')\n\t\t.translate(3, 1)\n\t// d20 reflects most of the light\n\tdodecahedron.specular = dodecahedron.vertices.map(_ => 0.8)\n\t// all uv coordinates the same to pick a solid color from the texture\n\tdodecahedron.coords = dodecahedron.vertices.map(_ => [0, 0])\n\n\t// don't transform the vertices at all\n\t// out/in pos so we get the world position of the fragments\n\tconst shader = Shader.create(`#version 300 es\n\t\tprecision mediump float;\n\t\tin vec4 ts_Vertex;\n\t\tout vec4 pos;\n\t\tvoid main() {\n\t\t\tgl_Position = ts_Vertex;\n\t\t\tpos = ts_Vertex;\n\t\t}`, rayTracerFS)\n\n\t// define spheres which we will have the shader ray-trace\n\tconst sphereCenters = arrayFromFunction(8, i => [V(0.0, 1.6, 0.0), V(3, 3, 3), V(-3, 3, 3)][i] || V3.O)\n\tconst sphereRadii = arrayFromFunction(8, i => [1.5, 0.5, 0.5][i] || 0)\n\n\n\tconst numArcQuads = 16\n\tconst groundTilesPerSide = 5\n\t// Arc of randomly oriented quads\n\t// quadMesh.addCube(M4.multiplyMultiple(\n\t// \tM4.translate(0, 0, -0.2),\n\t// \tM4.rotateAB(V3.XYZ, V3.Z)))\n\tconst cubes: Mesh[] = arrayFromFunction(numArcQuads, i => {\n\t\tconst r = 1\n\t\tconst t = i / numArcQuads * TAU\n\t\tconst center = V(0, 2, 0).plus(V(0, 0, 3).times(Math.cos(t))).plus(V(0, 2).times(Math.sin(t)))\n\t\t// const center = V3.sphere(0, (i + Math.random()) / numArcQuads * Math.PI)\n\t\tconst a = V3.randomUnit()\n\t\tconst b = V3.randomUnit().cross(a).unit()\n\t\treturn Mesh.cube().transform(M4.multiplyMultiple(\n\t\t\tM4.translate(center),\n\t\t\tM4.forSys(a, b),\n\t\t\tM4.scale(r, r, r),\n\t\t\tM4.translate(-0.5, -0.5, -0.5)))\n\t})\n\n\t// texture for ray-traced mesh\n\tconst floorTexture = await Texture.fromURL('./mandelbrot.jpg')\n\n\tconst showMesh = floor.concat(dodecahedron)\n\tconst textureWidth = 1024\n\tconst textureHeight = 1\n\n\t// verticesTexture contains the mesh vertices\n\t// vertices are unpacked so we don't have an extra index buffer for the triangles\n\tconst verticesTexture = new Texture(textureWidth, textureHeight, { format: gl.RGB32F, type: gl.FLOAT })\n\tconst verticesBuffer = new Float32Array(textureWidth * textureHeight * 3)\n\tconst unindexedVertices = V3.pack(showMesh.TRIANGLES.map(i => showMesh.vertices[i]), verticesBuffer)\n\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB32F, textureWidth, textureHeight, 0, gl.RGB, gl.FLOAT, verticesBuffer)\n\n\t// uvTexture contains the uv coordinates for the vertices as wel as the specular value for each vertex\n\tconst uvTexture = new Texture(textureWidth, textureHeight, { format: gl.RGB2F, type: gl.FLOAT })\n\tconst uvBuffer = new Float32Array(textureWidth * textureHeight * 3)\n\tshowMesh.TRIANGLES.forEach((i, index) => {\n\t\tuvBuffer[index * 3] = showMesh.coords[i][0]\n\t\tuvBuffer[index * 3 + 1] = showMesh.coords[i][1]\n\t\tuvBuffer[index * 3 + 2] = showMesh.specular[i]\n\t})\n\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB32F, textureWidth, textureHeight, 0, gl.RGB, gl.FLOAT, uvBuffer)\n\n\tlet lastPos = V3.O\n\t// scene rotation\n\tgl.canvas.onmousemove = function (e) {\n\t\tconst pagePos = V(e.pageX, e.pageY)\n\t\tconst delta = lastPos.to(pagePos)\n\t\tif (e.buttons & 1) {\n\t\t\tangleY += delta.x\n\t\t\tangleX = clamp(angleX + delta.y, -90, 90)\n\t\t}\n\t\tlastPos = pagePos\n\t}\n\n\tgl.matrixMode(gl.PROJECTION)\n\tgl.loadIdentity()\n\n\tverticesTexture.bind(0)\n\tfloorTexture.bind(1)\n\tuvTexture.bind(2)\n\tshader.uniforms({\n\t\t'sphereCenters[0]': sphereCenters,\n\t\t'sphereRadii[0]': sphereRadii,\n\t\t'vertices': 0,\n\t\t'triangleTexture': 1,\n\t\t'texCoords': 2\n\t})\n\n\treturn gl.animate(function (abs, diff) {\n\n\t\t// Camera setup\n\t\tgl.matrixMode(gl.MODELVIEW)\n\t\tgl.loadIdentity()\n\t\t// gl.perspective(70, gl.canvas.width / gl.canvas.height, 0.1, 1000)\n\t\t// gl.lookAt(V(0, 200, 200), V(0, 0, 0), V3.Z)\n\t\tgl.translate(0, 0, -10)\n\t\tgl.rotate(angleX, 1, 0, 0)\n\t\tgl.rotate(angleY, 0, 1, 0)\n\t\tgl.scale(0.2)\n\n\t\tshader.draw(mesh)\n\n\t\t// Draw debug output to show that the raytraced scene lines up correctly with\n\t\t// the rasterized scene\n\t\tgl.color(0, 0, 0, 0.5)\n\t\tgl.enable(gl.BLEND)\n\t\tgl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\n\t\tgl.begin(gl.LINES)\n\t\tfor (let s = 4, i = -s; i <= s; i++) {\n\t\t\tgl.vertex(-s, 0, i)\n\t\t\tgl.vertex(s, 0, i)\n\t\t\tgl.vertex(i, 0, -s)\n\t\t\tgl.vertex(i, 0, s)\n\t\t}\n\t\tgl.end()\n\t\tgl.disable(gl.BLEND)\n\t})\n\n}\n(rayTracing as any).info = 'LMB-drag to rotate camera.'\n\n","/// <reference path=\"../types.d.ts\" />\r\n\r\nimport chroma from 'chroma-js'\r\nimport { AABB, arrayFromFunction, clamp, DEG, int, lerp, M4, TAU, time, Tuple4, V, V3 } from 'ts3dutils'\r\n\r\nimport { DRAW_MODES, TSGLContext, Mesh, pushQuad, Shader, Texture } from 'tsgl'\r\n\r\nconst { sin, PI } = Math\r\n\r\nimport gazeboJSON from '../../gazebo.json'\r\n\r\n/**\r\n * Render mesh to texture, then render that texture to another mesh.\r\n */\r\nexport function renderToTexture(gl: TSGLContext) {\r\n\tconst mesh = Mesh.load(gazeboJSON)\r\n\tconst sinVertices = arrayFromFunction(32, i => {\r\n\t\tconst x = lerp(-PI, PI, i / 31)\r\n\t\tconst y = sin(x)\r\n\t\treturn new V3(x / 7.64, y / 7.64, 0)\r\n\t})\r\n\tconst cyl = Mesh.offsetVertices(sinVertices, V3.Z, false)\r\n\tconst plane = Mesh.plane()\r\n\tconst texture = Texture.fromURLSwitch('texture.png')\r\n\tconst overlay = new Texture(1024, 1024)\r\n\tconst meshShader = Shader.create(`\r\n\tattribute vec3 ts_Normal;\r\n\tattribute vec4 ts_Vertex;\r\n\tuniform mat4 ts_ModelViewProjectionMatrix;\r\n  varying vec3 normal;\r\n  void main() {\r\n    normal = ts_Normal;\r\n    gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\r\n  }\r\n`, `\r\n\tprecision highp float;\r\n  varying vec3 normal;\r\n  void main() {\r\n    gl_FragColor = vec4(normal * 0.5 + 0.5, 1.0);\r\n  }\r\n`)\r\n\tconst planeShader = Shader.create(`\r\n\tattribute vec2 ts_TexCoord;\r\n\tattribute vec4 ts_Vertex;\r\n\tuniform mat4 ts_ModelViewProjectionMatrix;\r\n  varying vec2 coord;\r\n  void main() {\r\n    coord = ts_TexCoord.xy;\r\n    gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\r\n  }\r\n`, `\r\n\tprecision highp float;\r\n  uniform sampler2D texture;\r\n  uniform sampler2D overlay;\r\n  varying vec2 coord;\r\n  void main() {\r\n    gl_FragColor = (texture2D(overlay, coord) + texture2D(texture, coord)) / 2.0;\r\n  }\r\n`)\r\n\r\n\tgl.clearColor(1, 1, 1, 1)\r\n\tgl.enable(gl.DEPTH_TEST)\r\n\r\n\r\n\treturn gl.animate(function (abs, diff) {\r\n\t\tconst angleDeg = abs / 1000 * 20\r\n\r\n\t\tgl.pushMatrix()\r\n\t\toverlay.drawTo(function (gl: TSGLContext) {\r\n\t\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\t\t\tgl.matrixMode(gl.PROJECTION)\r\n\t\t\tgl.loadIdentity()\r\n\t\t\tgl.perspective(60, 1, 0.1, 1000)\r\n\t\t\tgl.lookAt(V(0, -2, 0.5), V(0, 0, 0.5), V3.Z)\r\n\t\t\tgl.matrixMode(gl.MODELVIEW)\r\n\t\t\tgl.loadIdentity()\r\n\t\t\tgl.rotate(angleDeg, 0, 0, 1)\r\n\t\t\tgl.rotate(90, 1, 0, 0)\r\n\t\t\tgl.scale(0.01, 0.01, 0.01)\r\n\t\t\tmeshShader.draw(mesh)\r\n\t\t})\r\n\t\tgl.popMatrix()\r\n\r\n\t\tgl.matrixMode(gl.PROJECTION)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.perspective(70, gl.canvas.width / gl.canvas.height, 0.1, 1000)\r\n\t\tgl.lookAt(V(0, -2, 1), V(0.5, 0, 0), V3.Z)\r\n\t\tgl.matrixMode(gl.MODELVIEW)\r\n\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\t\ttexture.bind(0)\r\n\t\toverlay.bind(1)\r\n\t\tplaneShader.uniforms({\r\n\t\t\ttexture: 0,\r\n\t\t\toverlay: 1,\r\n\t\t})\r\n\r\n\t\tgl.loadIdentity()\r\n\t\t//gl.rotate(angleDeg, 0, 0, 1)\r\n\t\t//gl.rotate(30 * DEG, 1, 0, 0)\r\n\t\t//gl.rotate(90, 0,0,1)\r\n\t\tplaneShader.draw(cyl)\r\n\r\n\t\tgl.loadIdentity()\r\n\t\tgl.rotate(90, 1, 0, 0)\r\n\t\tgl.translate(0.5, 0)\r\n\t\tplaneShader.draw(plane)\r\n\t})\r\n}","import { Mesh, TSGLContext, Shader } from 'tsgl'\r\nimport { V3, V } from 'ts3dutils'\r\n\r\n/**\r\n * Draw a rotating cube.\r\n */\r\nexport async function setupDemo(gl: TSGLContext) {\r\n\tconst mesh = Mesh.cube()\r\n\tconst shader = Shader.create<{ color: 'FLOAT_VEC4' }, {}>(`\r\nuniform mat4 ts_ModelViewProjectionMatrix;\r\nattribute vec4 ts_Vertex;\r\nvoid main() {\r\n    gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\r\n}`, `\r\nprecision highp float;\r\nuniform vec4 color;\r\nvoid main() {\r\n    gl_FragColor = color;\r\n}`)\r\n\r\n\t// setup camera\r\n\tgl.matrixMode(gl.PROJECTION)\r\n\tgl.loadIdentity()\r\n\tgl.perspective(70, gl.canvas.width / gl.canvas.height, 0.1, 1000)\r\n\tgl.lookAt(V(0, -2, 1.5), V3.O, V3.Z)\r\n\tgl.matrixMode(gl.MODELVIEW)\r\n\r\n\tgl.enable(gl.DEPTH_TEST)\r\n\r\n\treturn gl.animate(function (abs, diff) {\r\n\t\tconst angleDeg = abs / 1000 * 45\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.rotate(angleDeg, 0, 0, 1)\r\n\t\tgl.scale(1.5)\r\n\t\tgl.translate(-0.5, -0.5, -0.5)\r\n\r\n\t\tshader.uniforms({ color: [1, 1, 0, 1] }).draw(mesh)\r\n\t\tshader.uniforms({ color: [0, 0, 0, 1] }).draw(mesh, gl.LINES)\r\n\t})\r\n}\r\n","/// <reference path=\"../types.d.ts\" />\r\n\r\nimport chroma from 'chroma-js'\r\nimport { AABB, arrayFromFunction, clamp, DEG, int, lerp, M4, TAU, time, Tuple4, V, V3 } from 'ts3dutils'\r\n\r\nimport { DRAW_MODES, TSGLContext, Mesh, pushQuad, Shader, Texture } from 'tsgl'\r\n\r\nconst { sin, PI } = Math\r\n\r\nimport cessnaJSON from '../../cessna.json'\r\n\r\n\r\n/**\r\n * Draw shadow of a mesh using a shadow map.\r\n */\r\nexport function shadowMap(gl: TSGLContext) {\r\n\r\n\t//const mesh = await fetch('dodecahedron.stl')\r\n\t//    .then(r => r.blob())\r\n\t//    .then(Mesh.fromBinarySTL)\r\n\t//    .then(mesh => mesh.translate(0,1,0).scale(5).compile())\r\n\tconst mesh = Mesh.load(cessnaJSON)\r\n\r\n\tlet angleX = 20\r\n\tlet angleY = 20\r\n\tlet useBoundingSphere = true\r\n\tconst cube = Mesh.cube()\r\n\tconst sphere = Mesh.sphere(2).computeWireframeFromFlatTriangles().compile()\r\n\tconst plane = Mesh.plane().translate(-0.5, -0.5).scale(300, 300, 1)\r\n\tconst depthMap = new Texture(1024, 1024, { format: gl.RGBA })\r\n\tconst texturePlane = Mesh.plane()\r\n\tconst boundingSphere = mesh.getBoundingSphere()\r\n\tconst boundingBox = mesh.getAABB()\r\n\tconst frustrumCube = Mesh.cube().scale(2).translate(V3.XYZ.negated())\r\n\tconst colorShader = Shader.create(`\r\n\tuniform mat4 ts_ModelViewProjectionMatrix;\r\n\tattribute vec4 ts_Vertex;\r\n  void main() {\r\n    gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\r\n  }\r\n`, `\r\n\tprecision highp float;\r\n  uniform vec4 color;\r\n  void main() {\r\n    gl_FragColor = color;\r\n  }\r\n`)\r\n\tconst depthShader = Shader.create(`\r\n\tuniform mat4 ts_ModelViewProjectionMatrix;\r\n\tattribute vec4 ts_Vertex;\r\n  varying vec4 pos;\r\n  void main() {\r\n    gl_Position = pos = ts_ModelViewProjectionMatrix * ts_Vertex;\r\n  }\r\n`, `\r\n\tprecision highp float;\r\n  varying vec4 pos;\r\n  void main() {\r\n    float depth = pos.z / pos.w;\r\n    gl_FragColor = vec4(depth * 0.5 + 0.5);\r\n  }\r\n`)\r\n\tconst displayShader = Shader.create(`\r\n\tuniform mat4 ts_ModelViewMatrix;\r\n\tuniform mat3 ts_NormalMatrix;\r\n\tuniform mat4 ts_ModelViewProjectionMatrix;\r\n\tattribute vec4 ts_Vertex;\r\n\tattribute vec3 ts_Normal;\r\n  uniform mat4 shadowMapMatrix;\r\n  uniform vec3 light;\r\n  varying vec4 coord;\r\n  varying vec3 normal;\r\n  varying vec3 toLight;\r\n  void main() {\r\n    toLight = light - (ts_ModelViewMatrix * ts_Vertex).xyz;\r\n    normal = ts_NormalMatrix * ts_Normal;\r\n    gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\r\n    coord = shadowMapMatrix * gl_Position;\r\n  }\r\n`, `\r\n\tprecision highp float;\r\n  uniform sampler2D depthMap;\r\n  varying vec4 coord;\r\n  varying vec3 normal;\r\n  varying vec3 toLight;\r\n  void main() {\r\n    float shadow = 0.0;\r\n    if (coord.w > 0.0) {\r\n      float depth = 0.0;\r\n      vec2 sample = coord.xy / coord.w * 0.5 + 0.5;\r\n      if (clamp(sample, 0.0, 1.0) == sample) {\r\n        float sampleDepth = texture2D(depthMap, sample).r;\r\n        depth = (sampleDepth == 1.0) ? 1.0e9 : sampleDepth;\r\n      }\r\n      if (depth > 0.0) {\r\n        float bias = -0.002;\r\n        shadow = clamp(300.0 * (bias + coord.z / coord.w * 0.5 + 0.5 - depth), 0.0, 1.0);\r\n      }\r\n    }\r\n    float ambient = 0.1;\r\n    float diffuse = max(0.0, dot(normalize(toLight), normalize(normal)));\r\n    gl_FragColor = vec4((normal * 0.5 + 0.5) * mix(ambient, 1.0, diffuse * (1.0 - shadow)), 1.0);\r\n  }\r\n`)\r\n\tconst textureShader = Shader.create(`\r\n  varying vec2 coord;\r\n  attribute vec2 ts_TexCoord;\r\n  void main() {\r\n    coord = ts_TexCoord;\r\n    gl_Position = vec4(coord * 2.0 - 1.0, 0.0, 1.0);\r\n  }\r\n`, `\r\n\tprecision highp float;\r\n  uniform sampler2D texture;\r\n  varying vec2 coord;\r\n  void main() {\r\n    gl_FragColor = texture2D(texture, coord);\r\n  }\r\n`)\r\n\r\n\tlet lastPos = V3.O\r\n\t// scene rotation\r\n\tgl.canvas.onmousemove = function (e) {\r\n\t\tconst pagePos = V(e.pageX, e.pageY)\r\n\t\tconst delta = lastPos.to(pagePos)\r\n\t\tif (e.buttons & 1) {\r\n\t\t\tangleY += delta.x\r\n\t\t\tangleX = clamp(angleX + delta.y, -90, 90)\r\n\t\t}\r\n\t\tlastPos = pagePos\r\n\t}\r\n\r\n\r\n\tgl.canvas.contentEditable = 'true'\r\n\tgl.canvas.addEventListener('keypress', e => {\r\n\t\tuseBoundingSphere = !useBoundingSphere\r\n\t})\r\n\r\n\tgl.enable(gl.DEPTH_TEST)\r\n\r\n\tfunction cameraForBoundingSphere(light: V3, sphere: typeof boundingSphere) {\r\n\t\tconst distance = sphere.center.minus(light).length()\r\n\t\tconst angle = 2 * Math.asin(sphere.radius / distance)\r\n\t\tgl.matrixMode(gl.PROJECTION)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.perspective(angle / DEG, 1, distance - sphere.radius, distance + sphere.radius)\r\n\t\tgl.matrixMode(gl.MODELVIEW)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.lookAt(light, sphere.center, V3.Y)\r\n\t}\r\n\r\n\tfunction cameraForBoundingBox(light: V3, boundingBox: AABB) {\r\n\t\tconst center = boundingBox.min.plus(boundingBox.max).div(2)\r\n\t\tconst axisZ = center.minus(light).unit()\r\n\t\tconst axisX = axisZ.cross(new V3(0, 1, 0)).unit()\r\n\t\tconst axisY = axisX.cross(axisZ)\r\n\t\tlet near = Number.MAX_VALUE\r\n\t\tlet far = -Number.MAX_VALUE\r\n\t\tlet slopeNegX = 0\r\n\t\tlet slopePosX = 0\r\n\t\tlet slopeNegY = 0\r\n\t\tlet slopePosY = 0\r\n\r\n\t\t// Loop over all the points and find the maximum slope for each direction.\r\n\t\t// Incidentally, this algorithm works for convex hulls of any shape and will\r\n\t\t// return the optimal bounding frustum for every hull.\r\n\t\tconst bbPoints = boundingBox.corners()\r\n\t\tfor (const point of bbPoints) {\r\n\t\t\tconst toPoint = point.minus(light)\r\n\t\t\tconst dotZ = toPoint.dot(axisZ)\r\n\t\t\tconst slopeX = toPoint.dot(axisX) / dotZ\r\n\t\t\tconst slopeY = toPoint.dot(axisY) / dotZ\r\n\t\t\tslopeNegX = Math.min(slopeNegX, slopeX)\r\n\t\t\tslopeNegY = Math.min(slopeNegY, slopeY)\r\n\t\t\tslopePosX = Math.max(slopePosX, slopeX)\r\n\t\t\tslopePosY = Math.max(slopePosY, slopeY)\r\n\t\t\tnear = Math.min(near, dotZ)\r\n\t\t\tfar = Math.max(far, dotZ)\r\n\t\t}\r\n\r\n\t\t// Need to fit an oblique view frustum to get optimal bounds\r\n\t\tgl.matrixMode(gl.PROJECTION)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.frustum(slopeNegX * near, slopePosX * near, slopeNegY * near, slopePosY * near, near, far)\r\n\t\tgl.matrixMode(gl.MODELVIEW)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.lookAt(light, center, V3.Y)\r\n\t}\r\n\r\n\r\n\treturn gl.animate(function (abs, diff) {\r\n\t\tconst time = abs / 1000\r\n\t\t// Move the light around\r\n\t\tconst light = new V3(100 * Math.sin(time * 0.2), 25, 20 * Math.cos(time * 0.2))\r\n\r\n\t\t// Construct a camera looking from the light toward the object. The view\r\n\t\t// frustum is fit so it tightly encloses the bounding volume of the object\r\n\t\t// (sphere or box) to make best use of shadow map resolution. A frustum is\r\n\t\t// a pyramid shape with the apex chopped off.\r\n\t\tif (useBoundingSphere) {\r\n\t\t\tcameraForBoundingSphere(light, boundingSphere)\r\n\t\t} else {\r\n\t\t\tcameraForBoundingBox(light, boundingBox)\r\n\t\t}\r\n\r\n\t\t// Render the object viewed from the light using a shader that returns the\r\n\t\t// fragment depth.\r\n\t\tconst shadowMapMatrix = gl.projectionMatrix.times(gl.modelViewMatrix)\r\n\t\tdepthMap.unbind(0)\r\n\t\tdepthMap.drawTo(function () {\r\n\t\t\tgl.clearColor(1, 1, 1, 1)\r\n\t\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\t\t\tdepthShader.draw(mesh)\r\n\t\t})\r\n\r\n\t\tconst shadowMapMatrixInversed = shadowMapMatrix.inversed()\r\n\r\n\t\t// Set up the camera for the scene\r\n\t\tgl.clearColor(0, 0, 0, 1)\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\t\tgl.matrixMode(gl.PROJECTION)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.perspective(45, gl.canvas.width / gl.canvas.height, 1, 1000)\r\n\t\tgl.matrixMode(gl.MODELVIEW)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.translate(0, 0, -100)\r\n\t\tgl.rotate(angleX, 1, 0, 0)\r\n\t\tgl.rotate(angleY, 0, 1, 0)\r\n\r\n\t\t// Draw view frustum\r\n\t\tgl.pushMatrix()\r\n\t\tgl.translate(light)\r\n\t\tcolorShader.uniforms({\r\n\t\t\tcolor: [1, 1, 0, 1],\r\n\t\t}).draw(sphere, gl.LINES)\r\n\t\tgl.popMatrix()\r\n\r\n\t\tgl.pushMatrix()\r\n\t\tgl.multMatrix(shadowMapMatrixInversed)\r\n\t\tcolorShader.uniforms({\r\n\t\t\tcolor: [1, 1, 0, 1],\r\n\t\t}).draw(frustrumCube, gl.LINES)\r\n\t\tgl.popMatrix()\r\n\r\n\t\t// Draw the bounding volume\r\n\t\tgl.pushMatrix()\r\n\t\tif (useBoundingSphere) {\r\n\t\t\tgl.translate(boundingSphere.center)\r\n\t\t\tgl.scale(boundingSphere.radius)\r\n\t\t\tcolorShader.uniforms({\r\n\t\t\t\tcolor: [0, 1, 1, 1],\r\n\t\t\t}).draw(sphere, gl.LINES)\r\n\t\t} else {\r\n\t\t\tgl.translate(boundingBox.min)\r\n\t\t\tgl.scale(boundingBox.size())\r\n\t\t\tcolorShader.uniforms({\r\n\t\t\t\tcolor: [0, 1, 1, 1],\r\n\t\t\t}).draw(cube, gl.LINES)\r\n\t\t}\r\n\t\tgl.popMatrix()\r\n\r\n\t\t// Draw mesh\r\n\t\tdepthMap.bind(0)\r\n\t\tdisplayShader.uniforms({\r\n\t\t\tshadowMapMatrix: shadowMapMatrix.times(gl.projectionMatrix.times(gl.modelViewMatrix).inversed()),\r\n\t\t\tlight: gl.modelViewMatrix.transformPoint(light),\r\n\t\t\tdepthMap: 0,\r\n\t\t}).draw(mesh)\r\n\r\n\t\t// Draw plane\r\n\t\tgl.pushMatrix()\r\n\t\tgl.rotate(-90, 1, 0, 0)\r\n\t\tdisplayShader.draw(plane)\r\n\t\tgl.popMatrix()\r\n\r\n\t\t// Draw depth map overlay\r\n\t\tgl.viewport(10, 10, 10 + 256, 10 + 256)\r\n\t\ttextureShader.draw(texturePlane)\r\n\t\tgl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\r\n\t})\r\n}\r\n(shadowMap as any).info = 'Press any key to toggle between sphere- or AABB-based camera clipping.'"],"names":["floatHashCode","CustomMap","PI","abs","V","WGL","time","sin"],"mappings":"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C,CAAA;QAC5I,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAA;QAC7I,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;QACxI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;QAEvI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAA;QAC7I,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAA;QAC5I,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;QACzI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;QAEtI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;QAC1I,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;QAC3I,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;QACzI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;QAEtI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;QAC5I,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;QAC3I,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;QAC1I,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAA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G,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;QAC/D,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;QAC/D,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;QAChE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;QAEhE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;QACjE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;QACjE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;QACnE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;QAEnE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;QACpE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAA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EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,CAAA;QAC1C,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAA;QACrC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAA;QACrC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,CAAA;QAEpG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAA;QACrC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,CAAA;QAC1C,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAA;QACrC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,CAAA;QAEpG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAA;QACrC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAA;QACrC,CAAC,CAAC,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"}