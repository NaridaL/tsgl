{"version":3,"file":"demo.js","sources":["../../../javasetmap.ts/src/JavaMap.ts","../../ts3dutils/src/Vector.ts","../../ts3dutils/src/Matrix.ts","../../ts3dutils/src/NLA.ts","../../ts3dutils/src/V3.ts","../../ts3dutils/src/Transformable.ts","../../ts3dutils/src/M4.ts","../../ts3dutils/src/toSource.ts","../../ts3dutils/src/AABB.ts","../src/Buffer.ts","../node_modules/tslib/tslib.es6.js","../src/Mesh.ts","../src/Shader.ts","../src/Texture.ts","../src/KhronosGroupWebGLDebug.ts","../src/TSGLContext.ts","../src/shaders/posNormalColorVS.glslx","../src/demo/camera.ts","../src/demo/gpuLightMap.ts","../src/demo/immediateMode.ts","../src/shaders/varyingColorFS.glslx","../src/demo/mag.ts","../src/demo/multiTexture.ts","../src/shaders/rayTracerVS.glslx","../src/shaders/rayTracerFS.glslx","../src/demo/rayTracing.ts","../src/demo/renderToTexture.ts","../src/demo/setupDemo.ts","../src/demo/shadowMap.ts"],"sourcesContent":["import {Equalable, int} from './Equalable'\n\n/**\n * Java style map.\n */\nexport class JavaMap<K extends Equalable & {hashCodes?(): int[], like?(x: any): boolean }, V> implements Map<K, V> {\n    [Symbol.toStringTag]: 'Map' = 'Map'\n\n    toString() {\n        return '{' + Array.from(this.entries2()).map(({key, value}) => key + ':' + value).join(', ') + '}'\n    }\n\n    forEach(callbackfn: (value: V, index: K, map: Map<K, V>) => void, thisArg?: any): void {\n        for (const bucket of this._map.values()) {\n            for (const {key, value} of bucket) {\n                callbackfn.call(thisArg, value, key, this)\n            }\n        }\n    }\n\n    * keys(): IterableIterator<K> {\n        for (const bucket of this._map.values()) {\n            for (const {key} of bucket) {\n                yield key\n            }\n        }\n    }\n\n    * values(): IterableIterator<V> {\n        for (const bucket of this._map.values()) {\n            for (const {value} of bucket) {\n                yield value\n            }\n        }\n    }\n\n    protected _map: Map<int, { key: K, value: V }[]>\n    protected _size: int\n\n    constructor() {\n        this._map = new Map()\n        this._size = 0\n    }\n\n    [Symbol.iterator]() {\n        return this.entries()\n    }\n\n    set(key: K, value: V): this {\n        this.set2(key, value)\n        return this\n    }\n\n    /**\n     * Like {@link #set} except it returns true if key was new and false if the value was only updated.\n     *\n     */\n    set2(key: K, val: V): boolean {\n        const hashCode = key.hashCode(), bucket = this._map.get(hashCode)\n        //assert(hashCode === (hashCode | 0))\n        if (bucket) {\n            const pairIndex = bucket.findIndex(pair => pair.key.equals(key))\n            if (-1 == pairIndex) {\n                bucket.push({key: key, value: val})\n            } else {\n                bucket[pairIndex].value = val\n                return false\n            }\n        } else {\n            this._map.set(hashCode, [{key: key, value: val}])\n        }\n        this._size++\n        return true\n    }\n\n    has(key: K): boolean {\n        const hashCode = key.hashCode(), bucket = this._map.get(hashCode)\n        //assert(hashCode === (hashCode | 0))\n        return undefined !== bucket && bucket.some(pair => pair.key.equals(key))\n    }\n\n    get(key: K): V | undefined {\n        const\n                hashCode = key.hashCode(),\n                bucket = this._map.get(hashCode),\n                pair = bucket && bucket.find(pair => pair.key.equals(key))\n        return pair && pair.value\n    }\n\n    getLike(key: K) {\n        for (const hashCode of key.hashCodes!()) {\n            const bucket = this._map.get(hashCode)\n            const canonVal = bucket && bucket.find(x => x.key.like!(key))\n            if (canonVal) return canonVal\n        }\n    }\n\n    setLike(key: K, val: V) {\n        return !this.getLike(key) && this.set(key, val)\n    }\n\n    'delete'(key: K) {\n        const hashCode = key.hashCode(), bucket = this._map.get(hashCode)\n        if (bucket) {\n            const index = bucket.findIndex(x => x.key.equals(key))\n            if (-1 != index) {\n                if (1 == bucket.length) {\n                    this._map.delete(hashCode)\n                } else {\n                    bucket.splice(index, 1)\n                }\n                this._size--\n                return true\n            }\n        }\n        return false\n    }\n\n    deleteLike(key: K) {\n        for (const hashCode of key.hashCodes!()) {\n            const bucket = this._map.get(hashCode)\n            if (bucket) {\n                const index = bucket.findIndex(x => x.key.like!(key))\n                if (-1 != index) {\n                    const deleted = bucket[index]\n                    if (1 == bucket.length) {\n                        this._map.delete(hashCode)\n                    } else {\n                        bucket.splice(index, 1)\n                    }\n                    this._size--\n                    return deleted\n                }\n            }\n        }\n    }\n\n    * entries2(): IterableIterator<{ key: K, value: V }> {\n        for (const bucket of this._map.values()) {\n            yield* bucket\n        }\n    }\n\n    * entries(): IterableIterator<[K, V]> {\n        for (const bucket of this._map.values()) {\n            for (const {key, value} of bucket) {\n                yield [key, value]\n            }\n        }\n    }\n\n    clear() {\n        this._map.clear()\n        this._size = 0\n    }\n\n    get size() {\n        return this._size\n    }\n}\n","import { Matrix } from './Matrix'\nimport { assert, assertInst, assertNumbers, callsce, clamp, eq, eq0, FloatArray, int } from './NLA'\nimport { V3 } from './V3'\n\nexport class Vector {\n\tconstructor(readonly v: Float64Array) {\n\t\tassertInst(Float64Array, v)\n\t}\n\n\tstatic fromFunction(dims: int, f: (dim: int) => number): Vector {\n\t\tassertNumbers(dims)\n\t\tconst e = new Float64Array(dims)\n\t\tlet i = dims\n\t\twhile (i--) {\n\t\t\te[i] = f(i)\n\t\t}\n\t\treturn new Vector(e)\n\t}\n\n\tstatic random(dims: int): Vector {\n\t\treturn Vector.fromFunction(dims, i => Math.random())\n\t}\n\n\tstatic from(f64a: Float64Array): Vector\n\tstatic from(...args: number[]): Vector\n\tstatic from(...args: any[]): Vector {\n\t\tassert(\n\t\t\targs[0] instanceof Float64Array || args.every(a => 'number' == typeof a),\n\t\t\t'args[0] instanceof Float64Array || args.every(a => \"number\" == typeof a)',\n\t\t)\n\t\treturn new Vector(args[0] instanceof Float64Array ? args[0] : Float64Array.from(args))\n\t}\n\n\tstatic Zero(dims: int): Vector {\n\t\tassertNumbers(dims)\n\t\tlet i = 0\n\t\tconst n = new Float64Array(dims)\n\t\twhile (i--) {\n\t\t\tn[i] = 0\n\t\t}\n\t\treturn new Vector(n)\n\t}\n\n\tstatic Unit(dims: int, dir: int): Vector {\n\t\tassertNumbers(dims, dir)\n\t\tlet i = 0\n\t\tconst n = new Float64Array(dims)\n\t\twhile (i--) {\n\t\t\tn[i] = +(i == dir) // +true === 1, +false === 0\n\t\t}\n\t\treturn new Vector(n)\n\t}\n\n\t/**\n\t * Pack an array of Vectors into an array of numbers (Float32Array by default).\n\t *\n\t * @param vectors source array\n\t * @param dest destination array. If provided, must be large enough to fit v3count items.\n\t * @param srcStart starting index in source array\n\t * @param destStart starting index in destination array\n\t * @param vectorCount Number of V3s to copy.\n\t * @returns Packed array.\n\t */\n\tstatic pack<T extends FloatArray = Float32Array>(\n\t\tvectors: ReadonlyArray<Vector>,\n\t\tdest?: T,\n\t\tsrcStart: number = 0,\n\t\tdestStart: number = 0,\n\t\tvectorCount: number = vectors.length - srcStart,\n\t): T {\n\t\t//assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')\n\t\tconst dim = vectors[0].dim()\n\t\tconst result = dest || (new Float32Array(dim * vectorCount) as any) // TODO\n\t\tassert(\n\t\t\tresult.length - destStart >= vectorCount * dim,\n\t\t\t'dest.length - destStart >= v3count * 3',\n\t\t\tresult.length,\n\t\t\tdestStart,\n\t\t\tvectorCount * 3,\n\t\t)\n\n\t\tlet i = vectorCount,\n\t\t\tsrcIndex = srcStart,\n\t\t\tdestIndex = destStart\n\t\twhile (i--) {\n\t\t\tconst v = vectors[srcIndex++]\n\t\t\tfor (let d = 0; d < dim; d++) {\n\t\t\t\tresult[destIndex++] = v.v[d]\n\t\t\t}\n\t\t}\n\t\treturn result\n\t}\n\n\tstatic lerp(a: Vector, b: Vector, t: number) {\n\t\tassert(a.dim() == b.dim())\n\t\tconst n = new Float64Array(a.v.length)\n\t\tlet i = a.v.length\n\t\twhile (i--) {\n\t\t\tn[i] = a.v[i] * (1 - t) + b.v[i] * t\n\t\t}\n\t\treturn new Vector(n)\n\t}\n\n\tstatic add(...vs: Vector[]): Vector {\n\t\tconst dim = vs[0].v.length\n\t\tconst result = new Float64Array(dim)\n\t\tlet i = vs.length\n\t\twhile (i--) {\n\t\t\tlet d = dim\n\t\t\twhile (d--) {\n\t\t\t\tresult[d] += vs[i].v[d]\n\t\t\t}\n\t\t}\n\t\treturn new Vector(result)\n\t}\n\n\t[Symbol.iterator]() {\n\t\treturn this.v[Symbol.iterator]()\n\t}\n\n\tdim(): int {\n\t\treturn this.v.length\n\t}\n\n\te(index: int): number {\n\t\tif (0 > index || index >= this.v.length) {\n\t\t\tthrow new Error('array index out of bounds')\n\t\t}\n\t\treturn this.v[index]\n\t}\n\n\tplus(vector: Vector): Vector {\n\t\tconst u = this.v,\n\t\t\tv = vector.v\n\t\tconst n = new Float64Array(u.length)\n\t\tlet i = u.length\n\t\twhile (i--) {\n\t\t\tn[i] = u[i] + v[i]\n\t\t}\n\t\treturn new Vector(n)\n\t}\n\n\tminus(vector: Vector): Vector {\n\t\tconst u = this.v,\n\t\t\tv = vector.v\n\t\tconst n = new Float64Array(u.length)\n\t\tlet i = u.length\n\t\twhile (i--) {\n\t\t\tn[i] = u[i] - v[i]\n\t\t}\n\t\treturn new Vector(n)\n\t}\n\n\ttimes(factor: number): Vector {\n\t\tconst u = this.v\n\t\tconst n = new Float64Array(u.length)\n\t\tlet i = u.length\n\t\twhile (i--) {\n\t\t\tn[i] = u[i] * factor\n\t\t}\n\t\treturn new Vector(n)\n\t}\n\n\tdiv(val: number): Vector {\n\t\tconst u = this.v\n\t\tconst n = new Float64Array(u.length)\n\t\tlet i = u.length\n\t\twhile (i--) {\n\t\t\tn[i] = u[i] / val\n\t\t}\n\t\treturn new Vector(n)\n\t}\n\n\tdot(vector: Vector): number {\n\t\tassert(this.dim == vector.dim, 'passed vector must have the same dim')\n\t\tlet result = 0\n\t\tconst u = this.v,\n\t\t\tv = vector.v\n\t\tlet i = u.length\n\t\twhile (i--) {\n\t\t\tresult += u[i] * v[i]\n\t\t}\n\t\treturn result\n\t}\n\n\tcross(vector: Vector): Vector {\n\t\tassertInst(Vector, vector)\n\t\tconst n = new Float64Array(3)\n\t\tn[0] = this.v[1] * vector.v[2] - this.v[2] * vector.v[1]\n\t\tn[1] = this.v[2] * vector.v[0] - this.v[0] * vector.v[2]\n\t\tn[2] = this.v[0] * vector.v[1] - this.v[1] * vector.v[0]\n\n\t\treturn new Vector(n)\n\t}\n\n\tschur(vector: Vector): Vector {\n\t\tassertInst(Vector, vector)\n\t\tconst u = this.v,\n\t\t\tv = vector.v\n\t\tconst n = new Float64Array(u.length)\n\t\tlet i = u.length\n\t\twhile (i--) {\n\t\t\tn[i] = u[i] * v[i]\n\t\t}\n\t\treturn new Vector(n)\n\t}\n\n\tequals(obj: any): boolean {\n\t\tif (obj === this) return true\n\t\tif (obj.constructor !== Vector) return false\n\t\tif (this.v.length != obj.v.length) return false\n\t\tlet i = this.v.length\n\t\twhile (i--) {\n\t\t\tif (this.v[i] !== obj.v[i]) return false\n\t\t}\n\t\treturn true\n\t}\n\n\tlike(obj: any): boolean {\n\t\tif (obj === this) return true\n\t\tif (obj.constructor !== Vector) return false\n\t\tif (this.v.length != obj.v.length) return false\n\t\tlet i = this.v.length\n\t\twhile (i--) {\n\t\t\tif (!eq(this.v[i], obj.v[i])) return false\n\t\t}\n\t\treturn true\n\t}\n\n\tmap(f: (el: number, dim: number) => number): Vector {\n\t\treturn new Vector(this.v.map(f))\n\t}\n\n\ttoString(roundFunction?: (x: number) => any): string {\n\t\troundFunction = roundFunction || (v => +v.toFixed(6))\n\t\treturn 'Vector(' + this.v.map(roundFunction).join(', ') + ')'\n\t}\n\n\ttoSource() {\n\t\treturn callsce('VV', ...this.v)\n\t}\n\n\tget x() {\n\t\treturn this.v[0]\n\t}\n\tget y() {\n\t\treturn this.v[1]\n\t}\n\tget z() {\n\t\treturn this.v[2]\n\t}\n\tget w() {\n\t\treturn this.v[3]\n\t}\n\tangleTo(vector: Vector): number {\n\t\tassertInst(Vector, vector)\n\t\tassert(!this.isZero(), '!this.likeO()')\n\t\tassert(!vector.isZero(), '!vector.likeO()')\n\t\treturn Math.acos(clamp(this.dot(vector) / this.length() / vector.length(), -1, 1))\n\t}\n\n\t/**\n\t Returns true iff this is parallel to vector, using equals\n\t Throw a DebugError\n\t if vector is not a Vector or\n\t if this has a length of 0 or\n\t if vector has a length of 0\n\t */\n\tisParallelTo(vector: Vector): boolean {\n\t\tassertInst(Vector, vector)\n\t\tassert(!this.isZero(), '!this.likeO()')\n\t\tassert(!vector.isZero(), '!vector.likeO()')\n\t\t// a . b takes on values of +|a|*|b| (vectors same direction) to -|a|*|b| (opposite direction)\n\t\t// in both cases the vectors are paralle, so check if abs(a . b) == |a|*|b|\n\t\treturn eq(Math.sqrt(this.lengthSquared() * vector.lengthSquared()), Math.abs(this.dot(vector)))\n\t}\n\n\tisPerpendicularTo(vector: Vector): boolean {\n\t\tassertInst(Vector, vector)\n\t\tassert(!this.isZero(), '!this.likeO()')\n\t\tassert(!vector.isZero(), '!vector.likeO()')\n\t\treturn eq0(this.dot(vector))\n\t}\n\n\t/**\n\t Returns true iff the length of this vector is 0, as returned by NLA.isZero.\n\t Definition: Vector.prototype.isZero = () => NLA.isZero(this.length())\n\t */\n\tisZero(): boolean {\n\t\treturn eq0(this.length())\n\t}\n\n\t// Returns a new unit Vector (.length() === 1) with the same direction as this vector. Throws a\n\n\t/*/ Returns the length of this Vector, i.e. the euclidian norm.*/\n\tlength(): number {\n\t\treturn Math.hypot.apply(undefined, this.v)\n\t\t//return Math.sqrt(this.lengthSquared())\n\t}\n\n\tlengthSquared(): number {\n\t\tlet result = 0\n\t\tconst u = this.v\n\t\tlet i = u.length\n\t\twhile (i--) {\n\t\t\tresult += u[i] * u[i]\n\t\t}\n\t\treturn result\n\t}\n\n\t// NLA_DEBUGError if this has a length of 0.\n\tnormalized(): Vector {\n\t\tconst length = this.length()\n\t\tif (eq0(length)) {\n\t\t\tthrow new Error('cannot normalize zero vector')\n\t\t}\n\t\treturn this.div(this.length())\n\t}\n\n\tasRowMatrix(): Matrix {\n\t\treturn new Matrix(this.v.length, 1, this.v)\n\t}\n\n\tasColMatrix(): Matrix {\n\t\treturn new Matrix(1, this.v.length, this.v)\n\t}\n\n\t/**\n\t Returns a new Vector which is the projection of this vector onto the passed vector.\n\t Examples\n\t NLA.V(3, 4).projectedOn(NLA.V(1, 0)) // returns NLA.V(3, 0)\n\t NLA.V(3, 4).projectedOn(NLA.V(2, 0)) // returns NLA.V(3, 0)\n\t NLA.V(3, 4).projectedOn(NLA.V(-1, 0)) // returns NLA.V(-3, 0)\n\t NLA.V(3, 4).projectedOn(NLA.V(0, 1)) // returns NLA.V(0, 4)\n\t NLA.V(3, 4).projectedOn(NLA.V(1, 1)) // returns\n\t */\n\tprojectedOn(b: Vector): Vector {\n\t\tassertInst(Vector, b)\n\t\t// https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2\n\t\treturn b.times(this.dot(b) / b.dot(b))\n\t}\n\n\trejectedOn(b: Vector): Vector {\n\t\tassertInst(Vector, b)\n\t\t// https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2\n\t\treturn this.minus(b.times(this.dot(b) / b.dot(b)))\n\t}\n\n\tto(a: Vector): Vector {\n\t\treturn a.minus(this)\n\t}\n\n\t/**\n\t Returns true iff the length() of this vector is equal to 'length', using equals\n\t E.g. NLA.V(3, 4).hasLength(5) === true\n\t NLA.V(1, 1).hasLength(1) === false\n\t */\n\thasLength(length: number): boolean {\n\t\tassertNumbers(length)\n\t\treturn eq(length, this.length())\n\t}\n\n\tV3(): V3 {\n\t\t//assert(this.dim() == 3)\n\t\treturn new V3(this.v[0], this.v[1], this.v[2])\n\t}\n\n\t/**\n\t * Project into 3 dimensions.\n\t */\n\tp3(): V3 {\n\t\tassert(this.v.length == 4)\n\t\tconst w = this.v[3]\n\t\treturn new V3(this.v[0] / w, this.v[1] / w, this.v[2] / w)\n\t}\n\n\ttransposed() {\n\t\treturn new Matrix(this.v.length, 1, this.v)\n\t}\n\n\t/**\n\t * Create a new 4D Vector from a V3 and a weight.\n\t * @param v3\n\t * @param weight\n\t */\n\tstatic fromV3AndWeight(v3: V3, weight: number) {\n\t\treturn new Vector(new Float64Array([v3.x * weight, v3.y * weight, v3.z * weight, weight]))\n\t}\n}\n\nexport function VV(...values: number[]) {\n\treturn new Vector(new Float64Array(values))\n}\n\nexport function vArrGet(vArr: FloatArray, dim: int, i: int) {\n\tassert(vArr.length % dim == 0)\n\treturn new Vector(Float64Array.prototype.slice.call(vArr, i * dim, (i + 1) * dim))\n}\n\nexport function vArrSet(vArr: FloatArray, i: int, vector: Vector) {\n\tconst dim = vector.dim()\n\tassert(vArr.length % dim == 0)\n\tlet d = dim\n\twhile (d--) {\n\t\tvArr[i * dim + d] = vector.v[d]\n\t}\n}\n","import { Equalable } from 'javasetmap.ts'\nimport {\n\tarrayCopy,\n\tarrayCopyBlocks,\n\tarrayCopyStep,\n\tarrayFromFunction,\n\tarraySwap,\n\tassert,\n\tassertf,\n\tassertInst,\n\tassertNumbers,\n\tassertVectors,\n\teq,\n\teq0,\n\tFloatArray,\n\tfloatHashCode,\n\tint,\n\tNLA_DEBUG,\n\tNLA_PRECISION,\n} from './NLA'\nimport { Vector } from './Vector'\n\nexport class Matrix implements Equalable {\n\tm: Float64Array\n\twidth: number\n\theight: number\n\n\tconstructor(width: int, height: int, m: Float64Array) {\n\t\tassert(width * height == m.length, 'width * height == m.length', width, height, m.length)\n\t\tthis.m = m\n\t\tthis.width = width\n\t\tthis.height = height\n\t}\n\n\tstatic random(width: int, height: int): Matrix {\n\t\tassertNumbers(width, height)\n\t\treturn Matrix.fromFunction(width, height, (i, j) => Math.random())\n\t}\n\n\tstatic fromFunction(width: int, height: int, f: (row: int, col: int, elIndex: int) => number): Matrix {\n\t\tassertNumbers(width, height)\n\t\tconst m = new Float64Array(height * width)\n\t\tlet elIndex = height * width\n\t\twhile (elIndex--) {\n\t\t\tm[elIndex] = f(Math.floor(elIndex / width), elIndex % width, elIndex)\n\t\t}\n\t\treturn new Matrix(width, height, m)\n\t}\n\n\tstatic identityN(dim: int): Matrix {\n\t\tassertNumbers(dim)\n\t\tconst m = new Float64Array(dim * dim)\n\t\t// Float64Arrays are init to 0\n\t\tlet elIndex = dim * (dim + 1)\n\t\twhile (elIndex) {\n\t\t\telIndex -= dim + 1\n\t\t\tm[elIndex] = 1\n\t\t}\n\t\treturn new Matrix(dim, dim, m)\n\t}\n\n\tstatic permutation(dim: int, i: int, k: int): Matrix {\n\t\tassertNumbers(dim, i, k)\n\t\tconst m = new Float64Array(dim * dim)\n\t\t// Float64Array are init to 0\n\t\tlet elIndex = dim * (dim + 1)\n\t\twhile (elIndex) {\n\t\t\telIndex -= dim + 1\n\t\t\tm[elIndex] = 1\n\t\t}\n\t\tm[i * dim + i] = 0\n\t\tm[k * dim + k] = 0\n\t\tm[i * dim + k] = 1\n\t\tm[k * dim + i] = 1\n\t\treturn new Matrix(dim, dim, m)\n\t}\n\n\tstatic fromRowArrays(...args: FloatArray[]): Matrix {\n\t\treturn Matrix.fromRowArrays2(args)\n\t}\n\n\tstatic fromRowArrays2(arrays: FloatArray[]) {\n\t\tif (0 == arrays.length) {\n\t\t\tthrow new Error('cannot have 0 vector')\n\t\t}\n\t\tconst height = arrays.length\n\t\tconst width = arrays[0].length\n\t\tconst m = new Float64Array(height * width)\n\t\tarrayCopy(arrays[0], 0, m, 0, width)\n\t\tfor (let rowIndex = 1; rowIndex < height; rowIndex++) {\n\t\t\tif (arrays[rowIndex].length != width) {\n\t\t\t\tthrow new Error('all row arrays must be the same length')\n\t\t\t}\n\t\t\tarrayCopy(arrays[rowIndex], 0, m, rowIndex * width, width)\n\t\t}\n\t\treturn new Matrix(width, height, m)\n\t}\n\n\tstatic fromColVectors(colVectors: Vector[]): Matrix {\n\t\treturn Matrix.fromColArrays(colVectors.map(v => v.v))\n\t}\n\n\tstatic forWidthHeight(width: int, height: int): Matrix {\n\t\treturn new Matrix(width, height, new Float64Array(width * height))\n\t}\n\n\tstatic fromColArrays(colArrays: FloatArray[]): Matrix {\n\t\tif (0 == colArrays.length) {\n\t\t\tthrow new Error('cannot have 0 vector')\n\t\t}\n\t\tconst width = colArrays.length\n\t\tconst height = colArrays[0].length\n\t\tconst m = new Float64Array(height * width)\n\t\tarrayCopyStep(colArrays[0], 0, 1, m, 0, width, height)\n\t\tfor (let colIndex = 1; colIndex < width; colIndex++) {\n\t\t\tif (colArrays[colIndex].length != height) {\n\t\t\t\tthrow new Error('all col arrays must be the same length')\n\t\t\t}\n\t\t\tarrayCopyStep(colArrays[colIndex], 0, 1, m, colIndex, width, height)\n\t\t}\n\t\treturn new Matrix(width, height, m)\n\t}\n\n\t/**\n\t * Numerically calculate all the partial derivatives of f at x0.\n\t *\n\t * @param f\n\t * @param x0\n\t * @param fx0 f(x0), pass it if you have it already\n\t * @param EPSILON\n\t */\n\tstatic jacobi(\n\t\tf: (x: FloatArray) => FloatArray,\n\t\tx0: FloatArray,\n\t\tfx0: FloatArray = f(x0),\n\t\tEPSILON: number = 1e-6,\n\t): Matrix {\n\t\tconst jacobi = Matrix.forWidthHeight(x0.length, fx0.length)\n\t\tfor (let colIndex = 0; colIndex < x0.length; colIndex++) {\n\t\t\tx0[colIndex] += EPSILON\n\t\t\tconst fx = f(x0)\n\t\t\tfor (let rowIndex = 0; rowIndex < fx0.length; rowIndex++) {\n\t\t\t\tconst value = (fx[rowIndex] - fx0[rowIndex]) / EPSILON\n\t\t\t\tjacobi.setEl(rowIndex, colIndex, value)\n\t\t\t}\n\t\t\tx0[colIndex] -= EPSILON\n\t\t}\n\t\treturn jacobi\n\t}\n\n\tstatic copy<T extends Matrix>(src: T, result: T = src.new()): T {\n\t\tassertInst(Matrix, src, result)\n\t\tassert(src.width == result.width)\n\t\tassert(src.height == result.height)\n\t\tassert(result != src, 'result != src')\n\t\tconst s = src.m,\n\t\t\td = result.m\n\t\tlet i = s.length\n\t\twhile (i--) {\n\t\t\td[i] = s[i]\n\t\t}\n\t\treturn result\n\t}\n\n\te(rowIndex: number, colIndex: number): number {\n\t\tassertNumbers(rowIndex, colIndex)\n\t\tif (NLA_DEBUG && (rowIndex >= this.height || colIndex >= this.width)) {\n\t\t\tthrow new Error(\n\t\t\t\t'index ' + rowIndex + ', ' + colIndex + ' is out of bounds (' + this.width + ' x ' + this.height + ')',\n\t\t\t)\n\t\t}\n\t\treturn this.m[rowIndex * this.width + colIndex]\n\t}\n\n\tsetEl(rowIndex: number, colIndex: number, val: number): void {\n\t\tassertNumbers(rowIndex, colIndex, val)\n\t\tassert(0 <= rowIndex && rowIndex < this.height, 'rowIndex out of bounds ' + rowIndex)\n\t\tassert(0 <= colIndex && colIndex < this.width, 'colIndex out of bounds ' + colIndex)\n\t\tthis.m[rowIndex * this.width + colIndex] = val\n\t}\n\n\tplus(m: this): this {\n\t\tassert(this.width == m.width)\n\t\tassert(this.height == m.height)\n\t\tconst r = this.new()\n\t\tlet i = this.m.length\n\t\twhile (i--) r.m[i] = this.m[i] + m.m[i]\n\t\treturn r\n\t}\n\n\tminus(m: Matrix): Matrix {\n\t\tassert(this.width == m.width)\n\t\tassert(this.height == m.height)\n\t\tconst r = this.new()\n\t\tlet i = this.m.length\n\t\twhile (i--) r.m[i] = this.m[i] - m.m[i]\n\t\treturn r\n\t}\n\n\tmulScalar(factor: number): this {\n\t\tconst r = this.new()\n\t\tlet i = this.m.length\n\t\twhile (i--) r.m[i] = this.m[i] * factor\n\t\treturn r\n\t}\n\n\tdivScalar(scalar: number): this {\n\t\tconst r = this.new()\n\t\tlet i = this.m.length\n\t\twhile (i--) r.m[i] = this.m[i] / scalar\n\t\treturn r\n\t}\n\n\tnew(): this {\n\t\treturn new Matrix(this.width, this.height, new Float64Array(this.width * this.height)) as this\n\t}\n\n\ttoString(f?: (el: number) => string, colNames?: ReadonlyArray<string>, rowNames?: ReadonlyArray<string>): string {\n\t\tf = f || (v => v.toFixed(6))\n\t\tassert(typeof f(0) == 'string', '' + typeof f(0))\n\t\tassert(!colNames || colNames.length == this.width)\n\t\tassert(!rowNames || rowNames.length == this.height)\n\t\tconst rounded: string[] = Array.from(this.m).map(f)\n\t\tconst rows = arrayFromFunction(this.height, rowIndex =>\n\t\t\trounded.slice(rowIndex * this.width, (rowIndex + 1) * this.width),\n\t\t) // select matrix row\n\t\tif (colNames) {\n\t\t\trows.unshift(Array.from(colNames))\n\t\t}\n\t\tif (rowNames) {\n\t\t\trows.forEach((row, rowIndex) => row.unshift(rowNames[rowIndex - (colNames ? 1 : 0)] || ''))\n\t\t}\n\t\tconst colWidths = arrayFromFunction(this.width, colIndex => rows.map(row => row[colIndex].length).max())\n\t\treturn rows\n\t\t\t.map((row, rowIndex) =>\n\t\t\t\trow\n\t\t\t\t\t.map((x, colIndex) => {\n\t\t\t\t\t\t// pad numbers with spaces to col width\n\t\t\t\t\t\tconst padder =\n\t\t\t\t\t\t\t(rowIndex == 0 && colNames) || (colIndex == 0 && rowNames)\n\t\t\t\t\t\t\t\t? String.prototype.padEnd\n\t\t\t\t\t\t\t\t: String.prototype.padStart\n\t\t\t\t\t\treturn padder.call(x, colWidths[colIndex])\n\t\t\t\t\t})\n\t\t\t\t\t.join('  '),\n\t\t\t)\n\t\t\t.map(x => x + '\\n')\n\t\t\t.join('') // join rows\n\t}\n\n\trow(rowIndex: int): Vector {\n\t\tconst v = new Float64Array(this.width)\n\t\tarrayCopy(this.m, rowIndex * this.width, v, 0, this.width)\n\t\treturn new Vector(v)\n\t}\n\n\tcol(colIndex: int): Vector {\n\t\tconst v = new Float64Array(this.height)\n\t\tarrayCopyStep(this.m, colIndex, this.width, v, 0, 1, this.height)\n\t\treturn new Vector(v)\n\t}\n\n\tdim(): { width: int; height: int } {\n\t\treturn { width: this.width, height: this.height }\n\t}\n\n\tdimString(): string {\n\t\treturn this.width + 'x' + this.height\n\t}\n\n\tequals(obj: any): boolean {\n\t\tif (obj.constructor != this.constructor) return false\n\t\tif (this.width != obj.width || this.height != obj.height) return false\n\t\tlet elIndex = this.m.length\n\t\twhile (elIndex--) {\n\t\t\tif (this.m[elIndex] != obj.m[elIndex]) return false\n\t\t}\n\t\treturn true\n\t}\n\n\tequalsMatrix(matrix: Matrix, precision?: number): boolean {\n\t\tprecision = precision || NLA_PRECISION\n\t\tif (!(matrix instanceof Matrix)) throw new Error('not a matrix')\n\t\tif (this.width != matrix.width || this.height != matrix.height) return false\n\t\tlet elIndex = this.m.length\n\t\twhile (elIndex--) {\n\t\t\tif (Math.abs(this.m[elIndex] - matrix.m[elIndex]) >= precision) return false\n\t\t}\n\t\treturn true\n\t}\n\n\thashCode(): int {\n\t\tlet result = 0\n\t\tlet elIndex = this.m.length\n\t\twhile (elIndex--) {\n\t\t\tresult = result * 31 + floatHashCode(this.m[elIndex])\n\t\t}\n\t\treturn result\n\t}\n\n\t// todo rename\n\tisZero(): boolean {\n\t\tlet elIndex = this.m.length\n\t\twhile (elIndex--) {\n\t\t\tif (!eq0(this.m[elIndex])) {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n\tisOrthogonal(): boolean {\n\t\treturn (\n\t\t\tthis.isSquare() &&\n\t\t\tthis.transposed()\n\t\t\t\t.times(this)\n\t\t\t\t.equalsMatrix(Matrix.identityN(this.width))\n\t\t)\n\t}\n\n\t/**\n\t * Returns L, U, P such that L * U == P * this\n\t */\n\tluDecomposition(): { L: Matrix; U: Matrix; P: Matrix } {\n\t\tassertf(() => this.isSquare(), this.dim().toSource())\n\t\tconst dim = this.width\n\t\tconst uRowArrays = this.asRowArrays(Float64Array)\n\t\tconst lRowArrays = arrayFromFunction(dim, row => new Float64Array(dim))\n\t\tconst pRowArrays = Matrix.identityN(dim).asRowArrays(Float64Array)\n\t\tlet currentRowIndex = 0\n\t\tfor (let colIndex = 0; colIndex < dim; colIndex++) {\n\t\t\t// find largest value in colIndex\n\t\t\tlet maxAbsValue = 0,\n\t\t\t\tpivotRowIndex = -1,\n\t\t\t\tnumberOfNonZeroRows: number = 0\n\t\t\tfor (let rowIndex = currentRowIndex; rowIndex < dim; rowIndex++) {\n\t\t\t\tconst el: number = uRowArrays[rowIndex][colIndex]\n\t\t\t\tnumberOfNonZeroRows += +(0 != el)\n\t\t\t\tif (Math.abs(el) > maxAbsValue) {\n\t\t\t\t\tmaxAbsValue = Math.abs(el)\n\t\t\t\t\tpivotRowIndex = rowIndex\n\t\t\t\t}\n\t\t\t}\n\t\t\t// TODO: check with isZero\n\t\t\tif (0 == maxAbsValue) {\n\t\t\t\t// column contains only zeros\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tassert(-1 !== pivotRowIndex)\n\t\t\t// swap rows\n\t\t\tarraySwap(uRowArrays, currentRowIndex, pivotRowIndex)\n\t\t\tarraySwap(lRowArrays, currentRowIndex, pivotRowIndex)\n\t\t\tarraySwap(pRowArrays, currentRowIndex, pivotRowIndex)\n\t\t\tlRowArrays[colIndex][colIndex] = 1\n\n\t\t\tif (1 < numberOfNonZeroRows) {\n\t\t\t\t// subtract pivot (now current) row from all below it\n\t\t\t\tfor (let rowIndex = currentRowIndex + 1; rowIndex < dim; rowIndex++) {\n\t\t\t\t\tconst l = uRowArrays[rowIndex][colIndex] / uRowArrays[currentRowIndex][colIndex]\n\t\t\t\t\tlRowArrays[rowIndex][colIndex] = l\n\t\t\t\t\t// subtract pivot row * l from row 'rowIndex'\n\t\t\t\t\tfor (let colIndex2 = colIndex; colIndex2 < dim; colIndex2++) {\n\t\t\t\t\t\tuRowArrays[rowIndex][colIndex2] -= l * uRowArrays[currentRowIndex][colIndex2]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcurrentRowIndex++ // this doesn't increase if pivot was zero\n\t\t}\n\t\treturn {\n\t\t\tL: Matrix.fromRowArrays2(lRowArrays),\n\t\t\tU: Matrix.fromRowArrays2(uRowArrays),\n\t\t\tP: Matrix.fromRowArrays2(pRowArrays),\n\t\t}\n\t}\n\n\tgauss(): { L: Matrix; U: Matrix; P: Matrix } {\n\t\tconst width = this.width,\n\t\t\theight = this.height\n\t\tconst uRowArrays = this.asRowArrays(Float64Array)\n\t\tconst lRowArrays = arrayFromFunction(height, row => new Float64Array(width))\n\t\tconst pRowArrays = Matrix.identityN(height).asRowArrays(Float64Array)\n\t\tlet currentRowIndex = 0\n\t\tfor (let colIndex = 0; colIndex < width; colIndex++) {\n\t\t\t// console.log('currentRowIndex', currentRowIndex)\t// find largest value in colIndex\n\t\t\tlet maxAbsValue = 0,\n\t\t\t\tpivotRowIndex = -1,\n\t\t\t\tnumberOfNonZeroRows = 0\n\t\t\tfor (let rowIndex = currentRowIndex; rowIndex < height; rowIndex++) {\n\t\t\t\tconst el = uRowArrays[rowIndex][colIndex]\n\t\t\t\tnumberOfNonZeroRows += +(0 != el)\n\t\t\t\tif (Math.abs(el) > maxAbsValue) {\n\t\t\t\t\tmaxAbsValue = Math.abs(el)\n\t\t\t\t\tpivotRowIndex = rowIndex\n\t\t\t\t}\n\t\t\t}\n\t\t\t// TODO: check with isZero\n\t\t\tif (0 == maxAbsValue) {\n\t\t\t\t// column contains only zeros\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tassert(-1 !== pivotRowIndex)\n\t\t\t// swap rows\n\t\t\tarraySwap(uRowArrays, currentRowIndex, pivotRowIndex)\n\t\t\tarraySwap(lRowArrays, currentRowIndex, pivotRowIndex)\n\t\t\tarraySwap(pRowArrays, currentRowIndex, pivotRowIndex)\n\t\t\tlRowArrays[currentRowIndex][colIndex] = 1\n\n\t\t\tif (1 < numberOfNonZeroRows) {\n\t\t\t\t// subtract pivot (now current) row from all below it\n\t\t\t\tfor (let rowIndex = currentRowIndex + 1; rowIndex < height; rowIndex++) {\n\t\t\t\t\tconst l = uRowArrays[rowIndex][colIndex] / uRowArrays[currentRowIndex][colIndex]\n\t\t\t\t\tlRowArrays[rowIndex][colIndex] = l\n\t\t\t\t\t// subtract pivot row * l from row 'rowIndex'\n\t\t\t\t\tfor (let colIndex2 = colIndex; colIndex2 < width; colIndex2++) {\n\t\t\t\t\t\tuRowArrays[rowIndex][colIndex2] -= l * uRowArrays[currentRowIndex][colIndex2]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcurrentRowIndex++ // this doesn't increase if pivot was zero\n\t\t}\n\t\treturn {\n\t\t\tL: Matrix.fromRowArrays2(lRowArrays),\n\t\t\tU: Matrix.fromRowArrays2(uRowArrays),\n\t\t\tP: Matrix.fromRowArrays2(pRowArrays),\n\t\t}\n\t}\n\n\tqrDecompositionGivensRotation(): { Q: Matrix; R: Matrix } {\n\t\tfunction sigma(c: number, s: number) {\n\t\t\tif (0 == c) {\n\t\t\t\treturn 1\n\t\t\t}\n\t\t\tif (Math.abs(s) < Math.abs(c)) {\n\t\t\t\treturn 0.5 * Math.sign(c) * s\n\t\t\t}\n\t\t\treturn (2 * Math.sign(s)) / c\n\t\t}\n\n\t\tfunction matrixForCS(dim: int, i: int, k: int, c: number, s: number) {\n\t\t\tconst m = Matrix.identityN(dim)\n\t\t\tm.setEl(i, i, c)\n\t\t\tm.setEl(k, k, c)\n\t\t\tm.setEl(i, k, s)\n\t\t\tm.setEl(k, i, -s)\n\t\t\treturn m\n\t\t}\n\n\t\tlet qTransposed = Matrix.identityN(this.height)\n\t\tfor (let colIndex = 0; colIndex < this.width; colIndex++) {\n\t\t\t// find largest value in colIndex\n\t\t\tfor (let rowIndex = colIndex + 1; rowIndex < this.height; rowIndex++) {\n\t\t\t\t//console.log('row ', rowIndex, 'col ', colIndex)\n\t\t\t\tconst xi = this.e(colIndex, colIndex)\n\t\t\t\tconst xk = this.e(rowIndex, colIndex)\n\t\t\t\tif (xk == 0) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tconst r = Math.sqrt(xi * xi + xk * xk)\n\t\t\t\tconst c = xi / r\n\t\t\t\tconst s = xk / r\n\n\t\t\t\t// apply transformation on every column:\n\t\t\t\tfor (let col2 = colIndex; col2 < this.width; col2++) {\n\t\t\t\t\tconst x1 = this.e(colIndex, col2) * c + this.e(rowIndex, col2) * s\n\t\t\t\t\tconst x2 = this.e(rowIndex, col2) * c - this.e(colIndex, col2) * s\n\t\t\t\t\tthis.setEl(colIndex, col2, x1)\n\t\t\t\t\tthis.setEl(rowIndex, col2, x2)\n\t\t\t\t}\n\t\t\t\t//console.log('r ', r, 'c ', c, 's ', s, 'sigma', sigma(c, s))\n\t\t\t\t//console.log(this.toString(),'cs\\n', matrixForCS(this.height, colIndex, rowIndex, c, s).toString())\n\t\t\t\tqTransposed = matrixForCS(this.height, colIndex, rowIndex, c, s).times(qTransposed)\n\t\t\t}\n\t\t}\n\t\t//console.log(qTransposed.transposed().toString(), this.toString(),\n\t\t// qTransposed.transposed().times(this).toString())\n\t\treturn { Q: qTransposed.transposed(), R: this }\n\t}\n\n\tisPermutation(): boolean {\n\t\tif (!this.isSquare()) return false\n\t\tif (this.m.some(value => !eq0(value) && !eq(1, value))) return false\n\n\t\tconst rows = this.asRowArrays(Array)\n\t\tif (rows.some(row => row.filter(value => eq(1, value)).length != 1)) return false\n\n\t\tconst cols = this.asColArrays(Array)\n\t\tif (cols.some(col => col.filter(value => eq(1, value)).length != 1)) return false\n\n\t\treturn true\n\t}\n\n\tisDiagonal(precision?: number): boolean {\n\t\tlet i = this.m.length\n\t\twhile (i--) {\n\t\t\tif (0 !== i % (this.width + 1) && !eq0(this.m[i])) return false\n\t\t}\n\t\treturn true\n\t}\n\n\tisIdentity(precision?: number): boolean {\n\t\treturn this.isLowerUnitriangular(precision) && this.isUpperTriangular(precision)\n\t}\n\n\tisUpperTriangular(precision: number = NLA_PRECISION) {\n\t\tif (!this.isSquare()) return false\n\t\tfor (let rowIndex = 1; rowIndex < this.height; rowIndex++) {\n\t\t\tfor (let colIndex = 0; colIndex < rowIndex; colIndex++) {\n\t\t\t\tif (!eq0(this.m[rowIndex * this.width + colIndex], precision)) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n\tisSymmetric(precision = NLA_PRECISION) {\n\t\tif (!this.isSquare()) return false\n\t\tfor (let rowIndex = 0; rowIndex < this.height - 1; rowIndex++) {\n\t\t\tfor (let colIndex = rowIndex + 1; colIndex < this.width; colIndex++) {\n\t\t\t\tconst a = this.m[rowIndex * this.width + colIndex]\n\t\t\t\tconst b = this.m[colIndex * this.width + rowIndex]\n\t\t\t\tif (!eq(a, b, precision)) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n\t/**\n\t * Returns x, so that this * x = b\n\t * More efficient than calculating the inverse for few (~ <= this.height) values\n\t */\n\tsolveLinearSystem(b: Vector): Vector {\n\t\tconst lup = this.luDecomposition()\n\t\t// console.log(lup.L.toString())\n\t\t// console.log(lup.U.toString())\n\t\t// console.log(lup.P.toString())\n\t\tconst y = lup.L.solveForwards(lup.P.timesVector(b))\n\t\tconst x = lup.U.solveBackwards(y)\n\t\treturn x\n\t}\n\n\tisLowerUnitriangular(precision?: number): boolean {\n\t\tprecision = 'number' == typeof precision ? precision : NLA_PRECISION\n\t\tif (!this.isSquare()) return false\n\t\tfor (let rowIndex = 0; rowIndex < this.height - 1; rowIndex++) {\n\t\t\tfor (let colIndex = rowIndex; colIndex < this.width; colIndex++) {\n\t\t\t\tconst el = this.m[rowIndex * this.width + colIndex]\n\t\t\t\tif (rowIndex == colIndex ? !eq(1, el, precision) : !eq0(el, precision)) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n\tisLowerTriangular(): boolean {\n\t\tif (!this.isSquare()) return false\n\t\tfor (let rowIndex = 0; rowIndex < this.height - 1; rowIndex++) {\n\t\t\tfor (let colIndex = rowIndex + 1; colIndex < this.width; colIndex++) {\n\t\t\t\tif (!eq0(this.m[rowIndex * this.width + colIndex])) {\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\n\tsolveBackwards(x: Vector): Vector {\n\t\tassertVectors(x)\n\t\tassert(this.height == x.dim(), 'this.height == x.dim()')\n\t\tassert(this.isUpperTriangular(), 'this.isUpperTriangular()\\n' + this.str)\n\t\tconst v = new Float64Array(this.width)\n\t\tlet rowIndex = this.height\n\t\twhile (rowIndex--) {\n\t\t\tlet temp = x.v[rowIndex]\n\t\t\tfor (let colIndex = rowIndex + 1; colIndex < this.width; colIndex++) {\n\t\t\t\ttemp -= v[colIndex] * this.e(rowIndex, colIndex)\n\t\t\t}\n\t\t\tv[rowIndex] = temp / this.e(rowIndex, rowIndex)\n\t\t}\n\t\treturn new Vector(v)\n\t}\n\n\tsolveBackwardsMatrix(matrix: Matrix): Matrix {\n\t\tconst colVectors = new Array(matrix.width)\n\t\tlet i = matrix.width\n\t\twhile (i--) {\n\t\t\tcolVectors[i] = this.solveBackwards(matrix.col(i))\n\t\t}\n\t\treturn Matrix.fromColVectors(colVectors)\n\t}\n\n\tsolveForwardsMatrix(matrix: Matrix): Matrix {\n\t\tconst colVectors = new Array(matrix.width)\n\t\tlet i = matrix.width\n\t\twhile (i--) {\n\t\t\tcolVectors[i] = this.solveForwards(matrix.col(i))\n\t\t}\n\t\treturn Matrix.fromColVectors(colVectors)\n\t}\n\n\tsolveForwards(x: Vector): Vector {\n\t\tassertVectors(x)\n\t\tassert(this.height == x.dim(), 'this.height == x.dim()')\n\t\tassertf(() => this.isLowerTriangular(), this.toString())\n\t\tconst v = new Float64Array(this.width)\n\t\tfor (let rowIndex = 0; rowIndex < this.height; rowIndex++) {\n\t\t\tlet temp = x.v[rowIndex]\n\t\t\tfor (let colIndex = 0; colIndex < rowIndex; colIndex++) {\n\t\t\t\ttemp -= v[colIndex] * this.e(rowIndex, colIndex)\n\t\t\t}\n\t\t\tv[rowIndex] = temp / this.e(rowIndex, rowIndex)\n\t\t}\n\t\treturn new Vector(v)\n\t}\n\n\t/**\n\t * Calculates rank of matrix.\n\t * Number of linearly independant row/column vectors.\n\t * Is equal to the unmber of dimensions the image of the affine transformation represented this matrix has.\n\t */\n\trank(): int {\n\t\tconst U = this.gauss().U\n\t\t//console.log(R.toString())\n\t\tlet rowIndex = this.height\n\t\twhile (rowIndex-- && U.row(rowIndex).isZero()) {\n\t\t\tconsole.log('RANK' + U.row(rowIndex).toString() + U.row(rowIndex).isZero())\n\t\t}\n\t\treturn rowIndex + 1\n\t}\n\n\trowsIndependent(): boolean {\n\t\treturn this.height == this.rank()\n\t}\n\n\tcolsIndependent(): boolean {\n\t\treturn this.width == this.rank()\n\t}\n\n\tasRowArrays<T extends FloatArray>(arrayConstructor: new (length: int) => T): T[] {\n\t\tarrayConstructor = arrayConstructor || (Float64Array as any)\n\t\tlet rowIndex = this.height\n\t\tconst result = new Array(this.height)\n\t\twhile (rowIndex--) {\n\t\t\tresult[rowIndex] = this.rowArray(rowIndex, arrayConstructor)\n\t\t}\n\t\treturn result\n\t}\n\n\tasColArrays<T extends FloatArray>(arrayConstructor: new (length: int) => T): T[] {\n\t\tarrayConstructor = arrayConstructor || (Float64Array as any)\n\t\tconst result = new Array(this.width)\n\t\tlet colIndex = this.width\n\t\twhile (colIndex--) {\n\t\t\tresult[colIndex] = this.colArray(colIndex, arrayConstructor)\n\t\t}\n\t\treturn result\n\t}\n\n\trowArray<T extends FloatArray>(rowIndex: int, arrayConstructor: new (length: int) => T): T {\n\t\tarrayConstructor = arrayConstructor || (Float64Array as any)\n\t\tconst result = new arrayConstructor(this.width)\n\t\tarrayCopy(this.m, rowIndex * this.width, result, 0, this.width)\n\t\treturn result\n\t}\n\n\tcolArray<T extends FloatArray>(colIndex: int, arrayConstructor: new (length: int) => T): T {\n\t\tarrayConstructor = arrayConstructor || (Float64Array as any)\n\t\tconst result = new arrayConstructor(this.width)\n\t\tarrayCopyStep(this.m, colIndex, this.height, result, 0, 1, this.height)\n\t\treturn result\n\t}\n\n\tsubMatrix(firstColIndex: int, subWidth: int, firstRowIndex: int, subHeight: int): Matrix {\n\t\tassert(firstColIndex + subWidth <= this.width && firstRowIndex + subHeight <= this.height)\n\t\tconst m = new Float64Array(subWidth * subHeight)\n\t\tarrayCopyBlocks(this.m, firstColIndex, this.width, m, 0, subWidth, subHeight, subWidth)\n\t\treturn new Matrix(subWidth, subHeight, m)\n\t}\n\n\tmap(fn: (el: number, elIndex: number, array: Float64Array) => number): Matrix {\n\t\treturn new Matrix(this.width, this.height, this.m.map(fn))\n\t}\n\n\tdimEquals(matrix: Matrix): boolean {\n\t\tassertInst(Matrix, matrix)\n\t\treturn this.width == matrix.width && this.height == matrix.height\n\t}\n\n\tinversed(): Matrix {\n\t\tif (this.isSquare()) {\n\t\t\tif (2 == this.width) return this.inversed2()\n\t\t\tif (3 == this.width) return this.inversed3()\n\t\t\tif (4 == this.width) return this.inversed4()\n\t\t}\n\t\tconst lup = this.luDecomposition()\n\t\tconst y = lup.L.solveForwardsMatrix(lup.P)\n\t\tconsole.log(y)\n\t\tconst inverse = lup.U.solveBackwardsMatrix(y)\n\t\treturn inverse\n\t}\n\n\tinversed2(): Matrix {\n\t\tassertf(() => 2 == this.width && 2 == this.height)\n\t\tconst result = Matrix.forWidthHeight(2, 2),\n\t\t\tm = this.m,\n\t\t\tr = result.m\n\n\t\tconst det = m[0] * m[3] - m[1] * r[2]\n\n\t\tr[0] = m[3] / det\n\t\tr[1] = -m[2] / det\n\n\t\tr[2] = -m[1] / det\n\t\tr[3] = m[0] / det\n\n\t\treturn result\n\t}\n\n\tinversed3(): Matrix {\n\t\tassertf(() => 3 == this.width && 3 == this.height)\n\t\tconst result = Matrix.forWidthHeight(3, 3),\n\t\t\tm = this.m,\n\t\t\tr = result.m\n\n\t\tr[0] = m[4] * m[8] - m[5] * m[7]\n\t\tr[1] = -m[1] * m[8] + m[2] * m[7]\n\t\tr[2] = m[1] * m[5] - m[2] * m[4]\n\n\t\tr[3] = -m[3] * m[8] + m[5] * m[6]\n\t\tr[4] = m[0] * m[8] - m[2] * m[6]\n\t\tr[5] = -m[0] * m[5] + m[2] * m[3]\n\n\t\tr[6] = m[3] * m[7] - m[4] * m[6]\n\t\tr[7] = -m[0] * m[7] + m[1] * m[6]\n\t\tr[8] = m[0] * m[4] - m[1] * m[3]\n\n\t\tconst det = m[0] * r[0] + m[1] * r[3] + m[2] * r[6]\n\t\tlet i = 9\n\t\twhile (i--) {\n\t\t\tr[i] /= det\n\t\t}\n\n\t\treturn result\n\t}\n\n\t// prettier-ignore\n\tinversed4(result?: Matrix): Matrix {\n\t\t!result || (assertInst(Matrix, result) && assert(result.width == this.width && result.height == this.height))\n\t\tassert(this != result, 'matrix != result')\n\t\tresult = result || new Matrix(4, 4, new Float64Array(16))\n\t\tconst m = this.m,\n\t\t\tr = result.m\n\n\t\t// first compute transposed cofactor matrix:\n\t\t// cofactor of an element is the determinant of the 3x3 matrix gained by removing the column and row belonging\n\t\t// to the element\n\t\tr[0] = m[5] * m[10] * m[15] - m[5] * m[14] * m[11] - m[6] * m[9] * m[15]\n\t\t\t+ m[6] * m[13] * m[11] + m[7] * m[9] * m[14] - m[7] * m[13] * m[10]\n\t\tr[1] = -m[1] * m[10] * m[15] + m[1] * m[14] * m[11] + m[2] * m[9] * m[15]\n\t\t\t- m[2] * m[13] * m[11] - m[3] * m[9] * m[14] + m[3] * m[13] * m[10]\n\t\tr[2] = m[1] * m[6] * m[15] - m[1] * m[14] * m[7] - m[2] * m[5] * m[15]\n\t\t\t+ m[2] * m[13] * m[7] + m[3] * m[5] * m[14] - m[3] * m[13] * m[6]\n\t\tr[3] = -m[1] * m[6] * m[11] + m[1] * m[10] * m[7] + m[2] * m[5] * m[11]\n\t\t\t- m[2] * m[9] * m[7] - m[3] * m[5] * m[10] + m[3] * m[9] * m[6]\n\n\n\t\tr[4] = -m[4] * m[10] * m[15] + m[4] * m[14] * m[11] + m[6] * m[8] * m[15]\n\t\t\t- m[6] * m[12] * m[11] - m[7] * m[8] * m[14] + m[7] * m[12] * m[10]\n\t\tr[5] = m[0] * m[10] * m[15] - m[0] * m[14] * m[11] - m[2] * m[8] * m[15]\n\t\t\t+ m[2] * m[12] * m[11] + m[3] * m[8] * m[14] - m[3] * m[12] * m[10]\n\t\tr[6] = -m[0] * m[6] * m[15] + m[0] * m[14] * m[7] + m[2] * m[4] * m[15]\n\t\t\t- m[2] * m[12] * m[7] - m[3] * m[4] * m[14] + m[3] * m[12] * m[6]\n\t\tr[7] = m[0] * m[6] * m[11] - m[0] * m[10] * m[7] - m[2] * m[4] * m[11]\n\t\t\t+ m[2] * m[8] * m[7] + m[3] * m[4] * m[10] - m[3] * m[8] * m[6]\n\n\n\t\tr[8] = m[4] * m[9] * m[15] - m[4] * m[13] * m[11] - m[5] * m[8] * m[15]\n\t\t\t+ m[5] * m[12] * m[11] + m[7] * m[8] * m[13] - m[7] * m[12] * m[9]\n\t\tr[9] = -m[0] * m[9] * m[15] + m[0] * m[13] * m[11] + m[1] * m[8] * m[15]\n\t\t\t- m[1] * m[12] * m[11] - m[3] * m[8] * m[13] + m[3] * m[12] * m[9]\n\t\tr[10] = m[0] * m[5] * m[15] - m[0] * m[13] * m[7] - m[1] * m[4] * m[15]\n\t\t\t+ m[1] * m[12] * m[7] + m[3] * m[4] * m[13] - m[3] * m[12] * m[5]\n\t\tr[11] = -m[0] * m[5] * m[11] + m[0] * m[9] * m[7] + m[1] * m[4] * m[11]\n\t\t\t- m[1] * m[8] * m[7] - m[3] * m[4] * m[9] + m[3] * m[8] * m[5]\n\n\n\t\tr[12] = -m[4] * m[9] * m[14] + m[4] * m[13] * m[10] + m[5] * m[8] * m[14]\n\t\t\t- m[5] * m[12] * m[10] - m[6] * m[8] * m[13] + m[6] * m[12] * m[9]\n\t\tr[13] = m[0] * m[9] * m[14] - m[0] * m[13] * m[10] - m[1] * m[8] * m[14]\n\t\t\t+ m[1] * m[12] * m[10] + m[2] * m[8] * m[13] - m[2] * m[12] * m[9]\n\t\tr[14] = -m[0] * m[5] * m[14] + m[0] * m[13] * m[6] + m[1] * m[4] * m[14]\n\t\t\t- m[1] * m[12] * m[6] - m[2] * m[4] * m[13] + m[2] * m[12] * m[5]\n\t\tr[15] = m[0] * m[5] * m[10] - m[0] * m[9] * m[6] - m[1] * m[4] * m[10]\n\t\t\t+ m[1] * m[8] * m[6] + m[2] * m[4] * m[9] - m[2] * m[8] * m[5]\n\n\t\t// calculate determinant using laplace expansion (cf https://en.wikipedia.org/wiki/Laplace_expansion),\n\t\t// as we already have the cofactors. We multiply a column by a row as the cofactor matrix is transposed.\n\t\tconst det = m[0] * r[0] + m[1] * r[4] + m[2] * r[8] + m[3] * r[12]\n\t\t// assert(!isZero(det), 'det may not be zero, i.e. the matrix is not invertible')\n\t\tlet i = 16\n\t\twhile (i--) {\n\t\t\tr[i] /= det\n\t\t}\n\t\treturn result\n\t}\n\n\tcanMultiply(matrix: Matrix): boolean {\n\t\tassertInst(Matrix, matrix)\n\t\treturn this.width == matrix.height\n\t}\n\n\ttimes(matrix: Matrix): Matrix {\n\t\tassertInst(Matrix, matrix)\n\t\tassert(this.canMultiply(matrix), `Cannot multiply this {this.dimString()} by matrix {matrix.dimString()}`)\n\t\tconst nWidth = matrix.width,\n\t\t\tnHeight = this.height,\n\t\t\tn = this.width\n\t\tconst nM = new Float64Array(nWidth * nHeight)\n\t\tlet nRowIndex = nHeight\n\t\twhile (nRowIndex--) {\n\t\t\tlet nColIndex = nWidth\n\t\t\twhile (nColIndex--) {\n\t\t\t\tlet result = 0\n\t\t\t\tlet i = n\n\t\t\t\twhile (i--) {\n\t\t\t\t\tresult += this.m[nRowIndex * n + i] * matrix.m[i * nWidth + nColIndex]\n\t\t\t\t}\n\t\t\t\tnM[nRowIndex * nWidth + nColIndex] = result\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(nWidth, nHeight, nM)\n\t}\n\n\ttimesVector(v: Vector): Vector {\n\t\tassertVectors(v)\n\t\tassert(this.width == v.dim())\n\t\tconst nHeight = this.height,\n\t\t\tn = this.width\n\t\tconst nM = new Float64Array(nHeight)\n\t\tlet nRowIndex = nHeight\n\t\twhile (nRowIndex--) {\n\t\t\tlet result = 0\n\t\t\tlet i = n\n\t\t\twhile (i--) {\n\t\t\t\tresult += this.m[nRowIndex * n + i] * v.v[i]\n\t\t\t}\n\t\t\tnM[nRowIndex] = result\n\t\t}\n\t\treturn new Vector(nM)\n\t}\n\n\ttransposed(): Matrix {\n\t\tconst tWidth = this.height,\n\t\t\ttHeight = this.width\n\t\tconst tM = new Float64Array(tWidth * tHeight)\n\t\tlet tRowIndex = tHeight\n\t\twhile (tRowIndex--) {\n\t\t\tlet tColIndex = tWidth\n\t\t\twhile (tColIndex--) {\n\t\t\t\ttM[tRowIndex * tWidth + tColIndex] = this.m[tColIndex * tHeight + tRowIndex]\n\t\t\t}\n\t\t}\n\t\treturn new Matrix(tWidth, tHeight, tM)\n\t}\n\n\t/**\n\t * In-place transpose.\n\t */\n\ttranspose(): void {\n\t\tconst h = this.height,\n\t\t\tw = this.width,\n\t\t\ttM = this.m\n\t\tlet tRowIndex = h\n\t\twhile (tRowIndex--) {\n\t\t\tlet tColIndex = Math.min(tRowIndex, w)\n\t\t\twhile (tColIndex--) {\n\t\t\t\tconst temp = tM[tRowIndex * w + tColIndex]\n\t\t\t\ttM[tRowIndex * w + tColIndex] = tM[tColIndex * h + tRowIndex]\n\t\t\t\ttM[tColIndex * h + tRowIndex] = temp\n\t\t\t}\n\t\t}\n\t\tthis.width = h\n\t\tthis.height = w\n\t}\n\n\tisSquare(): boolean {\n\t\treturn this.height == this.width\n\t}\n\n\tdiagonal(): Vector {\n\t\tif (!this.isSquare()) {\n\t\t\tthrow new Error('!!')\n\t\t}\n\t\tconst v = new Float64Array(this.width)\n\t\tlet elIndex = this.width * (this.width + 1)\n\t\tlet vIndex = this.width\n\t\twhile (vIndex--) {\n\t\t\telIndex -= this.width + 1\n\t\t\tv[vIndex] = this.m[elIndex]\n\t\t}\n\t\treturn new Vector(v)\n\t}\n\n\tmaxEl(): number {\n\t\treturn Math.max.apply(undefined, this.m)\n\t}\n\n\tminEl(): number {\n\t\treturn Math.min.apply(undefined, this.m)\n\t}\n\n\tmaxAbsColSum(): number {\n\t\tlet result = 0\n\t\tlet colIndex = this.width\n\t\twhile (colIndex--) {\n\t\t\tlet absSum = 0\n\t\t\tlet rowIndex = this.height\n\t\t\twhile (rowIndex--) {\n\t\t\t\tabsSum += Math.abs(this.m[rowIndex * this.width + colIndex])\n\t\t\t}\n\t\t\tresult = Math.max(result, absSum)\n\t\t}\n\t\treturn result\n\t}\n\n\tmaxAbsRowSum(): number {\n\t\tlet result = 0\n\t\tlet rowIndex = this.height\n\t\twhile (rowIndex--) {\n\t\t\tlet absSum = 0\n\t\t\tlet colIndex = this.width\n\t\t\twhile (colIndex--) {\n\t\t\t\tabsSum += Math.abs(this.m[rowIndex * this.width + colIndex])\n\t\t\t}\n\t\t\tresult = Math.max(result, absSum)\n\t\t}\n\t\treturn result\n\t}\n\n\tgetTriangularDeterminant(): number {\n\t\tassert(this.isUpperTriangular() || this.isLowerTriangular(), 'not a triangular matrix')\n\n\t\tlet product = 1\n\t\tlet elIndex = this.width * (this.width + 1)\n\t\twhile (elIndex) {\n\t\t\telIndex -= this.width + 1\n\t\t\tproduct *= this.m[elIndex]\n\t\t}\n\t\treturn product\n\t}\n\n\t/**\n\t * Calculates the determinant by first calculating the LU decomposition. If you already have that, use\n\t * U.getTriangularDeterminant()\n\t */\n\tgetDeterminant(): number {\n\t\t// PA = LU\n\t\t// det(A) * det(B) = det(A * B)\n\t\t// det(P) == 1 (permutation matrix)\n\t\t// det(L) == 1 (main diagonal is 1s\n\t\t// =>  det(A) == det(U)\n\t\treturn this.luDecomposition().U.getTriangularDeterminant()\n\t}\n\n\thasFullRank(): boolean {\n\t\treturn Math.min(this.width, this.height) == this.rank()\n\t}\n\n\tpermutationAsIndexMap(): int[] {\n\t\tassertf(() => this.isPermutation())\n\t\tconst result = new Array(this.height)\n\t\tlet i = this.height\n\t\twhile (i--) {\n\t\t\tconst searchIndexStart = i * this.width\n\t\t\tlet searchIndex = searchIndexStart\n\t\t\twhile (this.m[searchIndex] < 0.5) searchIndex++\n\t\t\tresult[i] = searchIndex - searchIndexStart\n\t\t}\n\t\treturn result\n\t}\n\n\tgetDependentRowIndexes(gauss: { L: Matrix; U: Matrix; P: Matrix } = this.gauss()): int[] {\n\t\tconst { L, U, P } = gauss\n\t\t// rows which end up as zero vectors in U are not linearly independent\n\t\tconst dependents = new Array(this.height)\n\t\tlet uRowIndex = this.height\n\t\twhile (uRowIndex--) {\n\t\t\tconst uRow = U.row(uRowIndex)\n\t\t\tif (uRow.length() < NLA_PRECISION) {\n\t\t\t\tdependents[uRowIndex] = true\n\t\t\t} else {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// figure out from which other rows the rows which end up as zero vectors are created by\n\t\tlet lRowIndex = this.height\n\t\twhile (lRowIndex--) {\n\t\t\tif (dependents[lRowIndex]) {\n\t\t\t\tlet lColIndex = Math.min(lRowIndex, this.width)\n\t\t\t\twhile (lColIndex--) {\n\t\t\t\t\tif (0 !== L.e(lRowIndex, lColIndex)) {\n\t\t\t\t\t\tdependents[lColIndex] = true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconsole.log('m\\n', this.toString(x => '' + x))\n\t\tconsole.log('L\\n', L.toString(x => '' + x))\n\t\tconsole.log('U\\n', U.toString(x => '' + x))\n\t\tconsole.log('P\\n', P.toString(x => '' + x))\n\t\t// gauss algorithm permutes the order of the rows, so map our results back to the original indices\n\t\tconst indexMap = P.permutationAsIndexMap()\n\t\tconst dependentRowIndexes = dependents.map((b, index) => b && indexMap[index]).filter(x => x != undefined)\n\t\treturn dependentRowIndexes\n\t}\n\n\tlerp(b: Matrix, t: number, result = this.new()): this {\n\t\tassertInst(Matrix, this, b, result)\n\t\tassert(this.width == b.width && this.height == b.height)\n\t\tconst s = 1 - t\n\t\tlet i = this.m.length\n\t\twhile (i--) {\n\t\t\tresult.m[i] = s * this.m[i] + t * b.m[i]\n\t\t}\n\t\treturn result\n\t}\n}\n","// @ts-ignore\nimport toSource from 'tosource'\n\nimport { Matrix } from './Matrix'\nimport { V, V3 } from './V3'\nimport { Vector } from './Vector'\n\nconst { abs, sign } = Math\nexport const PI = Math.PI\nexport const TAU = 2 * PI\nexport type int = number\nexport type colorstr = string // e.g. '#abcdef\nexport type raddd = number\nexport type FloatArray = Float32Array | Float64Array | number[]\n\n/** @define {boolean} */\nexport const NLA_DEBUG = true\nexport const NLA_PRECISION = 1 / (1 << 26)\nconsole.log('NLA_PRECISION', NLA_PRECISION)\nconsole.log('NLA_DEBUG', NLA_DEBUG)\n\nlet oldConsole: any = undefined\nexport function disableConsole() {\n\toldConsole = console.log\n\tconsole.log = function() {}\n}\nexport function enableConsole() {\n\tif (oldConsole) {\n\t\tconsole.log = oldConsole\n\t}\n}\nexport function hasConstructor<T>(instance: any, cons: { new (...args: any[]): T }): instance is T {\n\treturn instance.constructor == cons\n}\n\nexport function getIntervals(ts: number[], min: number, max: number): [number, number][] {\n\tts.sort((a, b) => a - b)\n\tif (!eq(ts[0], min)) {\n\t\tts.splice(0, 0, min)\n\t}\n\tif (!eq(ts.last, max)) {\n\t\tts.push(max)\n\t}\n\treturn arrayFromFunction(ts.length - 1, i => [ts[i], ts[i + 1]] as [number, number])\n}\n\nexport function assertVectors(...vectors: (Vector | V3)[]) {\n\tif (NLA_DEBUG) {\n\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\tif (!(arguments[i] instanceof V3 || arguments[i] instanceof Vector)) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'assertVectors arguments[' +\n\t\t\t\t\t\ti +\n\t\t\t\t\t\t'] is not a vector. ' +\n\t\t\t\t\t\ttypeof arguments[i] +\n\t\t\t\t\t\t' == typeof ' +\n\t\t\t\t\t\targuments[i],\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\nexport function assertInst<T>(what: Function & { prototype: T }, ...objs: T[]) {\n\tif (NLA_DEBUG) {\n\t\tfor (let i = 0; i < objs.length; i++) {\n\t\t\tif (!(objs[i] instanceof what)) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'assertInst objs[' +\n\t\t\t\t\t\ti +\n\t\t\t\t\t\t'] is not a ' +\n\t\t\t\t\t\twhat.prototype.name +\n\t\t\t\t\t\t'. ' +\n\t\t\t\t\t\tobjs[i].constructor.name +\n\t\t\t\t\t\tobjs[i],\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\nexport function assertNumbers(...numbers: number[]) {\n\tif (NLA_DEBUG) {\n\t\tfor (let i = 0; i < numbers.length; i++) {\n\t\t\tif ('number' !== typeof numbers[i]) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'assertNumbers arguments[' +\n\t\t\t\t\t\ti +\n\t\t\t\t\t\t'] is not a number. ' +\n\t\t\t\t\t\ttypeof numbers[i] +\n\t\t\t\t\t\t' == typeof ' +\n\t\t\t\t\t\tnumbers[i],\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n\treturn true\n}\nexport function assert(value: any, ...messages: (any | (() => string))[]): value is true {\n\tif (NLA_DEBUG && !value) {\n\t\tthrow new Error(\n\t\t\t'assert failed: ' +\n\t\t\t\tmessages.map(message => ('function' === typeof message ? message() : message || '')).join('\\n'),\n\t\t)\n\t}\n\treturn true\n}\nexport function assertNever(value?: never): never {\n\tthrow new Error()\n}\nexport function assertf(f: () => any, ...messages: (any | (() => any))[]) {\n\tif (!f()) {\n\t\tthrow new Error(\n\t\t\t'assertf failed: ' +\n\t\t\t\tf.toString() +\n\t\t\t\tmessages.map(message => ('function' === typeof message ? message() : message || '')).join('\\n'),\n\t\t)\n\t}\n}\n\nexport function lerp(a: number, b: number, t: number) {\n\treturn a * (1 - t) + b * t\n}\nconst originalNumberToString = Number.prototype.toString\nNumber.prototype.toString = function(radix) {\n\tif (PI == this) {\n\t\treturn 'PI'\n\t}\n\treturn originalNumberToString.call(this, radix)\n}\n\nexport const eq0 = (x: number, EPS: number = NLA_PRECISION): boolean => Math.abs(x) <= EPS\nexport const eq = (x: number, y: number, EPS: number = NLA_PRECISION): boolean => Math.abs(x - y) <= EPS\nexport const lt = (x: number, y: number, EPS: number = NLA_PRECISION): boolean => x - y < -EPS\nexport const gt = (x: number, y: number, EPS: number = NLA_PRECISION): boolean => y - x < -EPS\nexport const le = (x: number, y: number, EPS: number = NLA_PRECISION): boolean => x - y <= EPS\nexport const ge = (x: number, y: number, EPS: number = NLA_PRECISION): boolean => y - x <= EPS\n\nexport const eqAngle = (x: number, y: number): boolean => zeroAngle(x - y)\nexport const zeroAngle = (x: number): boolean =>\n\t((x % (2 * Math.PI)) + 2 * Math.PI + NLA_PRECISION) % (2 * Math.PI) < 2 * NLA_PRECISION\nexport const snap = (x: number, to: number): number => (Math.abs(x - to) <= NLA_PRECISION ? to : x)\nexport const snap2 = (x: number, ...to: number[]): number =>\n\tto.reduce((x, to) => (Math.abs(x - to) <= NLA_PRECISION ? to : x), x)\nexport const snapEPS = (x: number, EPS: number, ...to: number[]): number =>\n\tto.reduce((x, to) => (Math.abs(x - to) <= EPS ? to : x), x)\nexport const snap0 = (x: number, EPS = NLA_PRECISION): number => (Math.abs(x) <= EPS ? 0 : x)\nexport const canonAngle = (x: number): number => ((x % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI)\n\n/** @deprecated */ export const eq02 = eq0\n/** @deprecated */ export const eq2 = eq\n\n/**\n * Decimal adjustment of a number.\n *\n * @param f  The type of adjustment.\n * @param value The number.\n * @param exp The exponent (the 10 logarithm of the adjustment base).\n * @returns The adjusted value.\n */\nfunction decimalAdjust(f: (x: number) => number, value: number, exp: number): number {\n\t// If the exp is undefined or zero...\n\tif (typeof exp === 'undefined' || +exp === 0) {\n\t\treturn f(value)\n\t}\n\tvalue = +value\n\texp = +exp\n\t// If the value is not a number or the exp is not an integer...\n\tif (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {\n\t\treturn NaN\n\t}\n\t// Shift\n\tlet vs = value.toString().split('e')\n\tvalue = f(+(vs[0] + 'e' + (vs[1] ? +vs[1] - exp : -exp)))\n\t// Shift back\n\tvs = value.toString().split('e')\n\treturn +(vs[0] + 'e' + (vs[1] ? +vs[1] + exp : exp))\n}\n\nexport const round10: (value: number, exp: number) => number = decimalAdjust.bind(undefined, Math.round)\nexport const floor10: (value: number, exp: number) => number = decimalAdjust.bind(undefined, Math.floor)\nexport const ceil10: (value: number, exp: number) => number = decimalAdjust.bind(undefined, Math.ceil)\n\nexport const GOLDEN_RATIO = (1 + Math.sqrt(5)) / 2\n\nexport function mod(a: number, b: number) {\n\treturn ((a % b) + b) % b\n}\nexport function arraySwap(arr: any[], i: int, j: int) {\n\tconst temp = arr[i]\n\tarr[i] = arr[j]\n\tarr[j] = temp\n}\nexport function arrayCopy<T extends ArrayLike<{}>>(src: T, sstart: int, dst: T, dstart: int, length: int): void {\n\tdstart += length\n\tlength += sstart\n\twhile (length-- > sstart) {\n\t\tdst[--dstart] = src[length]\n\t}\n}\nexport function clamp(val: number, min: number, max: number) {\n\tassertNumbers(val, min, max)\n\treturn Math.max(min, Math.min(max, val))\n}\n\nexport function between(val: number, min: number, max: number) {\n\treturn min <= val && val <= max\n}\nexport function fuzzyBetween(val: number, min: number, max: number) {\n\treturn le(min, val) && le(val, max)\n}\n\nexport function mapPush<T, U>(map: Map<T, U[]>, key: T, val: U) {\n\tconst array = map.get(key)\n\tif (array) {\n\t\tarray.push(val)\n\t} else {\n\t\tmap.set(key, [val])\n\t}\n}\n\nexport function arrayCopyStep<T>(\n\tsrc: FloatArray,\n\tsstart: int,\n\tsstep: int,\n\tdst: FloatArray,\n\tdstart: int,\n\tdstep: int,\n\tcount: int,\n): void {\n\tlet srcIndex = sstart + count * sstep\n\tlet dIndex = dstart + count * dstep\n\twhile (srcIndex > sstart) {\n\t\tdst[(dIndex -= dstep)] = src[(srcIndex -= sstep)]\n\t}\n}\nexport function arrayCopyBlocks<T>(\n\tsrc: FloatArray,\n\tsstart: int,\n\tsstep: int,\n\tdst: FloatArray,\n\tdstart: int,\n\tdstep: int,\n\tblockSize: int,\n\tblockCount: int,\n): void {\n\tfor (let i = 0; i < blockCount; i++) {\n\t\tarrayCopy(src, sstart + sstep * i, dst, dstart + dstep * i, blockSize)\n\t}\n}\nexport function arrayRange(startInclusive: int, endExclusive: int, step: int = 1) {\n\tassertNumbers(startInclusive, step)\n\t//console.log(Math.ceil((endExclusive - startInclusive) / step))\n\tconst arrLength = Math.ceil((endExclusive - startInclusive) / step)\n\tconst result = new Array(arrLength) // '- startInclusive' so that chunk in the last row will also be selected, even\n\t// if the row is not complete\n\tfor (let i = startInclusive, index = 0; index < arrLength; i += step, index++) {\n\t\tresult[index] = i\n\t}\n\treturn result\n}\n\nexport function arraySamples(t0: number, t1: number, count: int = 64) {\n\treturn arrayFromFunction(count, i => lerp(t0, t1, i / (count - 1)))\n}\n\nexport function arrayFromFunction<T>(length: 1, f: (i: int, total: int) => T): [T]\nexport function arrayFromFunction<T>(length: 2, f: (i: int, total: int) => T): [T, T]\nexport function arrayFromFunction<T>(length: 3, f: (i: int, total: int) => T): [T, T, T]\nexport function arrayFromFunction<T>(length: 4, f: (i: int, total: int) => T): [T, T, T, T]\nexport function arrayFromFunction<T>(length: 5, f: (i: int, total: int) => T): [T, T, T, T, T]\nexport function arrayFromFunction<T>(length: int, f: (i: int, total: int) => T): T[]\nexport function arrayFromFunction<T>(length: int, f: (i: int, total: int) => T): T[] {\n\tassertNumbers(length)\n\tassert('function' == typeof f)\n\tconst a = new Array(length)\n\tlet elIndex = length\n\twhile (elIndex--) {\n\t\ta[elIndex] = f(elIndex, length)\n\t}\n\treturn a\n}\n\nexport function fuzzyUniques(vals: number[]): number[] {\n\tconst round = (val: number) => Math.floor(val * (1 << 26)) / (1 << 26)\n\tconst map = new Map()\n\tfor (let i = 0; i < vals.length; i++) {\n\t\tconst val = vals[i],\n\t\t\troundVal = round(val)\n\t\tlet key\n\t\tif (\n\t\t\t!map.has(roundVal) &&\n\t\t\t!((key = map.get(roundVal - 1 / (1 << 26))) && eq(key, val)) &&\n\t\t\t!((key = map.get(roundVal + 1 / (1 << 26))) && eq(key, val))\n\t\t) {\n\t\t\tmap.set(roundVal, val)\n\t\t}\n\t}\n\treturn Array.from(map.values())\n}\n\nexport function fuzzyUniquesF<T>(vals: T[], f: (o: T) => number): T[] {\n\tconst round = (val: number) => Math.floor(val * (1 << 26)) / (1 << 26)\n\tconst map = new Map()\n\tfor (let i = 0; i < vals.length; i++) {\n\t\tconst val = vals[i],\n\t\t\troundVal = round(f(val))\n\t\tlet key\n\t\tif (\n\t\t\t!map.has(roundVal) &&\n\t\t\t!((key = map.get(roundVal - 1 / (1 << 26))) && eq(key, f(val))) &&\n\t\t\t!((key = map.get(roundVal + 1 / (1 << 26))) && eq(key, f(val)))\n\t\t) {\n\t\t\tmap.set(roundVal, val)\n\t\t}\n\t}\n\treturn Array.from(map.values())\n}\n\nexport function addOwnProperties(target: any, props: any, ...exclude: string[]) {\n\tObject.getOwnPropertyNames(props).forEach(key => {\n\t\t//console.log(props, key)\n\t\tif (!exclude.includes(key)) {\n\t\t\tif (target.hasOwnProperty(key)) {\n\t\t\t\tconsole.warn('target ', target, ' already has property ', key, target[key])\n\t\t\t}\n\t\t\tObject.defineProperty(target, key, Object.getOwnPropertyDescriptor(props, key)!)\n\t\t}\n\t})\n}\n\n//function defineClass(name, parent, constructor, props, statics) {\n//\tassertf(() => 'function' == typeof constructor, 'function' == typeof constructor)\n//\tconstructor.prototype = defineObject(parent && parent.prototype, props)\n//\tconstructor.prototype.constructor = constructor\n//\tObject.defineProperty(constructor.prototype, 'name', {value: name})\n//\tstatics && addOwnProperties(constructor, statics)\n//\treturn constructor\n//}\nexport let defaultRoundFunction = (x: number) => x // Math.round10(x, -4)\n\nexport function forceFinite(val: string): number {\n\tconst valNum = parseFloat(val.replace(',', '.').replace(/^[^0-9,\\.\\-]/, ''))\n\treturn Number.isFinite(valNum) ? valNum : 0\n}\n\nexport const MINUS = (a: number, b: number) => a - b\n\nexport function floatHashCode(f: number) {\n\treturn ~~(f * (1 << 28))\n}\n\n/**\n * combinations(2) will generate\n * [0,0] [0,1] [1,1] [0,2] [1,2] [2,2]\n */\nexport function* combinations(n: int): IterableIterator<{ i: number; j: number }> {\n\tfor (let i = 0; i < n; i++) {\n\t\tfor (let j = i; j < n; j++) {\n\t\t\tyield { i: i, j: j }\n\t\t}\n\t}\n}\n\n/* The arithmetic-geometric mean of two non-negative numbers */\nexport function arithmeticGeometricMean(x: number, y: number): number {\n\tassertf(() => lt(0, x))\n\tassertf(() => lt(0, y))\n\tlet a = x,\n\t\tg = y\n\tlet i = 30\n\twhile (i-- && a != g) {\n\t\t;[a, g] = [(a + g) / 2, Math.sqrt(a * g)]\n\t}\n\tassert(i != -1)\n\n\treturn a\n}\n\n/**\n * incomplete elliptic integral of the first kind\n * EllipticF(phi, k2) = INT[0; phi] 1 / sqrt(1 - k2 * sin²(phi)) dphi\n */\nexport function EllipticF(phi: number, k2: number): number {\n\treturn gaussLegendreQuadrature24(phi => Math.pow(1 - k2 * Math.sin(phi) ** 2, -0.5), 0, phi)\n}\n\n/**\n * incomplete elliptic integral of the second kind\n * EllipticE(phi, k2) = INT[0; phi] sqrt(1 - k2 * sin²(phi)) dphi\n */\nexport function EllipticE(phi: number, k2: number): number {\n\treturn gaussLegendreQuadrature24(phi => Math.pow(1 - k2 * Math.sin(phi) ** 2, 0.5), 0, phi)\n}\n\nexport const DEG = 0.017453292519943295\nexport function rad2deg(rad: number): number {\n\t//  discuss at: http://phpjs.org/functions/deg2rad/\n\t// original by: Enrique Gonzalez\n\t// improved by: Thomas Grainger (http://graingert.co.uk)\n\t//   example 1: deg2rad(45)\n\t//   returns 1: 0.7853981633974483\n\n\treturn rad / DEG\n}\n\n/**\n * numberToStr(2/3) == '0.6p'\n * numberToStr(7/12) == '0.583p'\n * numberToStr(2/7) == '0.285714pppppp'\n * numberToStr(NLA_PRECISION) == '0+'\n * numberToStr(-NLA_PRECISION) == '0-'\n * numberToStr(2-NLA_PRECISION) == '2-'\n * numberToStr(0) == '0='\n *\n */\nexport function numberToStr(value: number, length: int) {\n\tlet minAbsDiff = Infinity,\n\t\tclosestValue: number | undefined = undefined,\n\t\tclosestValueStr: string | undefined = undefined\n\tfunction test(testValue: number, testValueStr: string) {\n\t\tconst absDiff = Math.abs(testValue - value)\n\t\tconsole.log(testValue, testValueStr, absDiff)\n\t\tif (absDiff < minAbsDiff) {\n\t\t\tminAbsDiff = absDiff\n\t\t\tclosestValue = testValue\n\t\t\tclosestValueStr = testValueStr\n\t\t}\n\t\treturn 0 == absDiff\n\t}\n\n\tfunction overline(str: string) {\n\t\treturn str\n\t\t\t.split('')\n\t\t\t.map(c => c + '\\u0304')\n\t\t\t.join('')\n\t}\n\n\tif (test(parseFloat(value.toFixed(length)), value.toFixed(length))) return closestValueStr + '='\n\n\tconst valueStr = '' + value\n\tconst toDecimal = valueStr.substr(0, valueStr.indexOf('.') + 1)\n\tconst decimals = valueStr.substr(valueStr.indexOf('.') + 1)\n\n\tfor (let startPos = 0; startPos < length; startPos++) {\n\t\tfor (let endPos = startPos + 1; endPos <= length; endPos++) {\n\t\t\tconst prefixDecimals = decimals.substr(0, startPos)\n\t\t\tconst period = decimals.substr(startPos, endPos)\n\t\t\tconst testValue = parseFloat(\n\t\t\t\ttoDecimal + prefixDecimals + period.repeat(Math.ceil((17 - startPos) / period.length)),\n\t\t\t)\n\t\t\tif (test(testValue, toDecimal + prefixDecimals + overline(period))) return closestValueStr + '='\n\t\t}\n\t}\n\n\treturn closestValueStr + (closestValue! < value ? '-' : '+')\n}\n\nexport function time(f: () => void) {\n\tconst start = performance.now()\n\tf()\n\treturn performance.now() - start\n}\n\nexport type Tuple2<T> = [T, T]\nexport type Tuple3<T> = [T, T, T]\nexport type Tuple4<T> = [T, T, T, T]\nexport type Tuple5<T> = [T, T, T, T, T]\nexport type Tuple6<T> = [T, T, T, T, T, T]\nexport type Tuple7<T> = [T, T, T, T, T, T, T]\nexport type Tuple8<T> = [T, T, T, T, T, T, T, T]\n//console.log(numberToStr(29 / 99, 4))\n//console.log(numberToStr(77 / 99, 4))\n\n// interface Object {\n//    cw(f: (x: any) => any): any\n// }\n//Object.prototype.cw = function (f) {\n//    return f(this)\n//}\n//Object.construct = function <T>(cons: {new(...args: any[]): T}, args: any[]) {\n//    return f(this)\n//}\ndeclare global {\n\tinterface Object {\n\t\tsce: string\n\t\tstr: string\n\t\ttoSource(): string\n\t}\n\tinterface ObjectConstructor {\n\t\tconstruct<T>(cons: { new (...args: any[]): T }, args: any[]): T\n\t\tmap<T, S, K extends string>(\n\t\t\to: { [k in K]: T },\n\t\t\tf: (this: undefined, v: T, key: string, o: { [k in K]: T }) => S,\n\t\t): { [k in K]: S }\n\t\tmap<T, S, K extends string, C>(\n\t\t\to: { [k in K]: T },\n\t\t\tf: (this: C, v: T, key: string, o: { [k in K]: T }) => S,\n\t\t\tcontext: C,\n\t\t): { [k in K]: S }\n\t}\n\t// tslint:disable-next-line:class-name\n\tinterface __NLAReadonlyArray<T> {\n\t\tbinaryIndexOf<S>(searchElement: S, cmp?: (a: T, b: S) => number): int\n\n\t\tconcatenated(): T\n\n\t\tflatMap<U>(f: (el: T, elIndex: int, arr: this) => U | ReadonlyArray<U>): U[]\n\n\t\t/**\n\t\t * this.length == 0\n\t\t */\n\t\tisEmpty(): boolean\n\n\t\t/**\n\t\t * this[this.length - 1]\n\t\t */\n\t\treadonly last: T\n\n\t\t/**\n\t\t * this[index % this.length]\n\t\t */\n\t\temod(index: int): T\n\n\t\t/**\n\t\t * this.map(f).filter(v => v)\n\t\t */\n\t\tmapFilter<U>(f: (el: T, elIndex: int, arr: this) => U | undefined | false | null): U[]\n\n\t\t/**\n\t\t * Math.max.apply(undefined, this)\n\t\t */\n\t\tmax(this: number[]): number\n\n\t\t/**\n\t\t * Math.min.apply(undefined, this)\n\t\t */\n\t\tmin(this: number[]): number\n\n\t\tindexWithMax(f: (el: T, elIndex: int, arr: this) => number): int\n\n\t\tsum(this: number[]): number\n\n\t\tabsSum(): number\n\n\t\tsliceStep(start: int, end: int, step: int, chunkSize?: int): T[]\n\n\t\tunique(): T[]\n\n\t\twithMax(f: (el: T, elIndex: int, arr: this) => number): T\n\n\t\tequals(this: { equals(obj: any): boolean }[], obj: any): boolean\n\n\t\thashCode(this: { hashCode(): int }[]): int\n\n\t\tsplicePure(start: int, end: int, ...items: T[]): T[]\n\t}\n\tinterface Array<T> extends __NLAReadonlyArray<T> {\n\t\tbinaryInsert(this: number[], newEl: number, cmp?: (a: number, b: number) => number): void\n\n\t\tbinaryInsert(newEl: T, cmp: (a: T, b: T) => number): void\n\n\t\t/**\n\t\t * this.length == 0\n\t\t */\n\t\tisEmpty(): boolean\n\n\t\t/**\n\t\t * this[this.length - 1]\n\t\t */\n\t\tlast: T\n\n\t\tremove(el: T): boolean\n\n\t\tbagRemove(el: T): boolean\n\t\tbagRemoveIndex(el: T): boolean\n\t\tbagToggle(el: T): boolean\n\n\t\tremoveIndex(index: int): T\n\n\t\tremoveMatch(matcher: (el: T) => boolean): T | undefined\n\n\t\tremoveAll(els: T[]): void\n\n\t\tsumInPlaceTree(): number\n\n\t\ttoggle(el: T): void\n\n\t\tclear(...newItems: T[]): void\n\n\t\t//filter<U extends T>(pred: (a: T) => a is U): U[]\n\n\t\tmap<U>(this: [T], callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): [U]\n\t\tmap<U>(this: Tuple2<T>, callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): Tuple2<U>\n\t\tmap<U>(this: Tuple3<T>, callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): Tuple3<U>\n\t\tmap<U>(this: Tuple4<T>, callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): Tuple4<U>\n\t\tmap<U>(this: Tuple5<T>, callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): Tuple5<U>\n\t\tmap<U>(this: Tuple6<T>, callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): Tuple6<U>\n\t\tmap<U>(this: Tuple7<T>, callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): Tuple7<U>\n\t\tmap<U>(this: Tuple8<T>, callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): Tuple8<U>\n\t}\n\tinterface ReadonlyArray<T> extends __NLAReadonlyArray<T> {}\n\n\tinterface String {\n\t\tcapitalizeFirstLetter(): string\n\t\tequals(x: any): boolean\n\t}\n}\nObject.map = function<T, S, K extends string>(\n\to: { [k in K]: T },\n\tf: (v: T, key: string, o: { [k in K]: T }) => S,\n\tcontext: any = undefined,\n): { [k in K]: S } {\n\tconst result = {} as { [k in K]: S }\n\tfor (const key in o) {\n\t\tresult[key] = f.call(context, o[key], key, o)\n\t}\n\treturn result\n}\nArray.prototype.emod = function(i) {\n\treturn this[i % this.length]\n}\nArray.prototype.sliceStep = function(start, end, step, chunkSize = 1) {\n\tassertNumbers(start, step)\n\tstart < 0 && (start = this.length + start)\n\tend <= 0 && (end = this.length + end)\n\tconst resultLength = Math.ceil((end - start) / step)\n\tconst result = new Array(resultLength) // '- start' so that chunk in the last row\n\t// will also be selected, even if the row is\n\t// not complete\n\tlet index = 0\n\tfor (let i = start; i < end; i += step) {\n\t\tfor (let j = i; j < Math.min(i + chunkSize, end); j++) {\n\t\t\tresult[index++] = this[j]\n\t\t}\n\t}\n\tassert(resultLength == index)\n\treturn result\n}\nArray.prototype.splicePure = function(start = 0, deleteCount = 0, ...items) {\n\tconst arrayLength = this.length\n\tconst _deleteCount = deleteCount < 0 ? 0 : deleteCount\n\tlet _start\n\tif (start < 0) {\n\t\tif (Math.abs(start) > arrayLength) {\n\t\t\t_start = 0\n\t\t} else {\n\t\t\t_start = arrayLength + start\n\t\t}\n\t} else if (start > arrayLength) {\n\t\t_start = arrayLength\n\t} else {\n\t\t_start = start\n\t}\n\tconst newLength = this.length - _deleteCount + items.length\n\tconst result = new Array(newLength)\n\tlet dst = newLength\n\tlet src = this.length\n\twhile (src-- > _start + _deleteCount) {\n\t\tresult[--dst] = this[src]\n\t}\n\tsrc = items.length\n\twhile (src--) {\n\t\tresult[--dst] = items[src]\n\t}\n\tsrc = _start\n\twhile (src--) {\n\t\tresult[--dst] = items[src]\n\t}\n\treturn result\n}\nArray.prototype.equals = function(obj: any): boolean {\n\tif (this === obj) return true\n\tif (Object.getPrototypeOf(obj) !== Array.prototype) return false\n\tif (this.length !== obj.length) return false\n\tfor (let i = 0; i < this.length; i++) {\n\t\tif (!equals(this[i], obj[i])) return false\n\t}\n\treturn true\n}\nexport function equals(a: any, b: any) {\n\treturn 'object' === typeof a ? a.equals(b) : a === b\n}\nArray.prototype.hashCode = function(): int {\n\tlet result = 0\n\tfor (let i = 0; i < this.length; i++) {\n\t\tresult = (result * 31 + hashCode(this[i])) | 0\n\t}\n\treturn result | 0\n}\nexport function hashCode(o: any) {\n\tif ('number' === typeof o || undefined === o) {\n\t\treturn o | 0\n\t} else {\n\t\treturn null === o ? 0 : o.hashCode()\n\t}\n}\nArray.prototype.mapFilter = function(f) {\n\tconst length = this.length,\n\t\tresult = []\n\tfor (let i = 0; i < length; i++) {\n\t\tif (i in this) {\n\t\t\tconst val = f(this[i], i, this)\n\t\t\tif (val) {\n\t\t\t\tresult.push(val)\n\t\t\t}\n\t\t}\n\t}\n\treturn result\n}\nArray.prototype.flatMap = function(f) {\n\treturn Array.prototype.concat.apply([], this.map(f))\n}\nArray.prototype.clear = function(...newItems) {\n\treturn this.splice(0, this.length, ...newItems)\n}\n/**\n *\n * @returns Array.prototype.concat.apply([], this)\n */\nArray.prototype.concatenated = function() {\n\treturn Array.prototype.concat.apply([], this)\n}\nArray.prototype.min = function() {\n\tlet i = this.length,\n\t\tmax = Infinity\n\twhile (i--) {\n\t\tconst val = this[i]\n\t\tif (max > val) max = val\n\t}\n\treturn max\n}\nArray.prototype.max = function() {\n\t// faster and no limit on array size, see https://jsperf.com/math-max-apply-vs-loop/2\n\tlet i = this.length,\n\t\tmax = -Infinity\n\twhile (i--) {\n\t\tconst val = this[i]\n\t\tif (max < val) max = val\n\t}\n\treturn max\n}\nArray.prototype.indexWithMax = function(f) {\n\tif (this.length == 0) {\n\t\treturn -1\n\t}\n\tlet i = this.length,\n\t\tresult = -1,\n\t\tmaxVal = -Infinity\n\twhile (i--) {\n\t\tconst val = f(this[i], i, this)\n\t\tif (val > maxVal) {\n\t\t\tmaxVal = val\n\t\t\tresult = i\n\t\t}\n\t}\n\treturn result\n}\nArray.prototype.withMax = function(f) {\n\tlet i = this.length,\n\t\tresult = undefined,\n\t\tmaxVal = -Infinity\n\twhile (i--) {\n\t\tconst el = this[i],\n\t\t\tval = f(el, i, this)\n\t\tif (val > maxVal) {\n\t\t\tmaxVal = val\n\t\t\tresult = el\n\t\t}\n\t}\n\treturn result\n}\n\n/**\n Returns the sum of the absolute values of the components of this vector.\n E.g. V(1, -2, 3) === abs(1) + abs(-2) + abs(3) === 1 + 2 + 3 === 6\n */\nArray.prototype.absSum = function() {\n\tlet i = this.length\n\tlet result = 0\n\twhile (i--) {\n\t\tresult += Math.abs(this[i])\n\t}\n\treturn result\n}\n\nArray.prototype.sum = function() {\n\tlet i = this.length\n\tlet result = 0\n\twhile (i--) {\n\t\tresult += this[i]\n\t}\n\treturn result\n}\n\nArray.prototype.sumInPlaceTree = function() {\n\tif (0 == this.length) return 0\n\tlet l = this.length\n\twhile (l != 1) {\n\t\tconst lHalfFloor = Math.floor(l / 2)\n\t\tconst lHalfCeil = Math.ceil(l / 2)\n\t\tfor (let i = 0; i < lHalfFloor; i++) {\n\t\t\tthis[i] += this[i + lHalfCeil]\n\t\t}\n\t\tl = lHalfCeil\n\t}\n\treturn this[0]\n}\n\nArray.prototype.isEmpty = function() {\n\treturn 0 == this.length\n}\n\nArray.prototype.unique = function() {\n\tconst uniqueSet = new Set(this)\n\treturn Array.from(uniqueSet)\n}\n\nArray.prototype.remove = function(o) {\n\tconst index = this.indexOf(o)\n\tif (index != -1) {\n\t\tthis.splice(index, 1)\n\t\treturn true\n\t}\n\treturn false\n}\n\nArray.prototype.removeIndex = function(i) {\n\tconst result = this[i]\n\tthis.splice(i, 1)\n\treturn result\n}\nArray.prototype.bagRemoveIndex = function(i) {\n\tconst result = this[i]\n\tif (i == this.length - 1) {\n\t\tthis.pop()\n\t} else {\n\t\tthis[i] = this.pop()\n\t}\n\treturn result\n}\n\nArray.prototype.removeMatch = function<T>(matcher: (el: T) => boolean) {\n\tconst index = this.findIndex(matcher)\n\tif (-1 != index) {\n\t\treturn this.removeIndex(index)\n\t}\n}\n\nArray.prototype.removeAll = function(o) {\n\tlet i = o.length\n\twhile (i--) {\n\t\tthis.remove(o[i])\n\t}\n}\n\nArray.prototype.toggle = function(o) {\n\tconst index = this.indexOf(o)\n\tif (index != -1) {\n\t\tthis.splice(index, 1)\n\t\treturn false\n\t} else {\n\t\tthis.push(o)\n\t\treturn true\n\t}\n}\nArray.prototype.bagToggle = function(o) {\n\tconst index = this.indexOf(o)\n\tif (index != -1) {\n\t\tthis.bagRemoveIndex(index)\n\t\treturn false\n\t} else {\n\t\tthis.push(o)\n\t\treturn true\n\t}\n}\n\nArray.prototype.binaryIndexOf = function(searchElement, cmp = (a: any, b: any) => a - b) {\n\tlet minIndex = 0\n\tlet maxIndex = this.length - 1\n\tlet currentIndex\n\tlet currentElement\n\n\twhile (minIndex <= maxIndex) {\n\t\tcurrentIndex = ((minIndex + maxIndex) / 2) | 0\n\t\tcurrentElement = this[currentIndex]\n\n\t\tif (cmp(currentElement, searchElement) < 0) {\n\t\t\tminIndex = currentIndex + 1\n\t\t} else if (cmp(currentElement, searchElement) > 0) {\n\t\t\tmaxIndex = currentIndex - 1\n\t\t} else {\n\t\t\treturn currentIndex\n\t\t}\n\t}\n\n\treturn -minIndex - 1\n}\n\nArray.prototype.binaryInsert = function(el: any, cmp = MINUS) {\n\tlet minIndex = 0\n\tlet maxIndex = this.length\n\tlet currentIndex\n\tlet currentElement\n\n\twhile (minIndex < maxIndex) {\n\t\tcurrentIndex = ~~((minIndex + maxIndex) / 2)\n\t\tcurrentElement = this[currentIndex]\n\n\t\tif (cmp(currentElement, el) < 0) {\n\t\t\tminIndex = currentIndex + 1\n\t\t} else {\n\t\t\tmaxIndex = currentIndex\n\t\t}\n\t}\n\n\tthis.splice(minIndex, 0, el)\n}\nObject.defineProperty(Array.prototype, 'last', {\n\tget() {\n\t\treturn this[this.length - 1]\n\t},\n\tset(val) {\n\t\tthis[this.length - 1] = val\n\t},\n})\n\nString.prototype.capitalizeFirstLetter = function() {\n\treturn this.charAt(0).toUpperCase() + this.slice(1)\n}\nString.prototype.equals = function(x: any) {\n\treturn this == x\n}\n\nexport function SCE(o: any) {\n\tswitch (typeof o) {\n\t\tcase 'undefined':\n\t\t\treturn 'undefined'\n\t\tcase 'function':\n\t\t\treturn o.toString()\n\t\tcase 'number':\n\t\t\treturn '' + o\n\t\tcase 'string':\n\t\t\treturn JSON.stringify(o)\n\t\tcase 'object':\n\t\t\tif (null == o) {\n\t\t\t\treturn 'null'\n\t\t\t} else {\n\t\t\t\treturn o.sce\n\t\t\t}\n\t\tdefault:\n\t\t\tthrow new Error()\n\t}\n}\nexport function STR(o: any) {\n\treturn o.str\n}\nObject.defineProperty(Object.prototype, 'sce', {\n\tget: function() {\n\t\treturn this.toSource()\n\t},\n})\nObject.defineProperty(Object.prototype, 'str', {\n\tget: function() {\n\t\treturn this.toString()\n\t},\n})\n\n//const NLA = {}\n//for (let key in ARRAY_UTILITIES) {\n//    const nlaName = 'array' + key.capitalizeFirstLetter()\n//    assert(!NLA[nlaName])\n//    NLA[nlaName] = (arr, ...rest) => ARRAY_UTILITIES[key].apply(arr, rest)\n//}\n\nexport function isCCW(vertices: V3[], normal: V3) {\n\tconst dsa = doubleSignedArea(vertices, normal)\n\tassert(0 != dsa)\n\treturn dsa < 0\n}\nexport function doubleSignedArea(vertices: V3[], normal: V3) {\n\tassert(!normal.likeO(), '!normal.likeO()')\n\tconst absMaxDim = normal.maxAbsDim()\n\t// order is important, coord0 and coord1 must be set so that coord0, coord1 and maxDim span a right-hand coordinate\n\t// system var [coord0, coord1] = [['y', 'z'], ['z', 'x'], ['x', 'y']][maxAbsDim]\n\tconst doubleSignedArea = vertices\n\t\t.map((v0, i, vertices) => {\n\t\t\tconst v1 = vertices[(i + 1) % vertices.length]\n\t\t\t//return (v1[coord0] - v0[coord0]) * (v1[coord1] + v0[coord1])\n\t\t\tswitch (absMaxDim) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn (v1.y - v0.y) * (v1.z + v0.z)\n\t\t\t\tcase 1:\n\t\t\t\t\treturn (v1.z - v0.z) * (v1.x + v0.x)\n\t\t\t\tcase 2:\n\t\t\t\t\treturn (v1.x - v0.x) * (v1.y + v0.y)\n\t\t\t}\n\t\t})\n\t\t.reduce((a, b) => a + b)\n\treturn snap(doubleSignedArea * Math.sign(normal.e(absMaxDim)), 0)\n}\n\n/**\n * solves x² + px + q = 0\n */\nexport function pqFormula(p: number, q: number): number[] {\n\t// 4 times the discriminant:in\n\tconst discriminantX4 = (p * p) / 4 - q\n\tif (discriminantX4 < -NLA_PRECISION) {\n\t\treturn []\n\t} else if (discriminantX4 <= NLA_PRECISION) {\n\t\treturn [-p / 2]\n\t} else {\n\t\tconst root = Math.sqrt(discriminantX4)\n\t\treturn [-p / 2 - root, -p / 2 + root]\n\t}\n}\n\n/**\n * from pomax' library\n * solves ax³ + bx² + cx + d = 0\n * This function from pomax' utils\n * @returns 0-3 roots\n */\nexport function solveCubicReal2(a: number, b: number, c: number, d: number): number[] {\n\tif (eq0(a)) {\n\t\tif (eq0(b)) {\n\t\t\treturn [-d / c]\n\t\t} else {\n\t\t\treturn pqFormula(c / b, d / b)\n\t\t}\n\t}\n\tconst divisor = a\n\ta = b / divisor\n\tb = c / divisor\n\tc = d / divisor\n\tconst p = (3 * b - a * a) / 3,\n\t\tpDiv3 = p / 3,\n\t\tpDiv3Pow3 = pDiv3 * pDiv3 * pDiv3,\n\t\tq = (2 * a * a * a - 9 * a * b + 27 * c) / 27,\n\t\tqDiv2 = q / 2,\n\t\tdiscriminant = qDiv2 * qDiv2 + pDiv3Pow3\n\t// 18abcd - 4b³d + b²c² - 4ac³ - 27a²d²\n\tif (discriminant < -NLA_PRECISION / 8) {\n\t\tconst r = Math.sqrt(-pDiv3Pow3),\n\t\t\tt = -q / (2 * r),\n\t\t\tcosphi = t < -1 ? -1 : t > 1 ? 1 : t, // clamp t to [-1;1]\n\t\t\tphi = Math.acos(cosphi),\n\t\t\tt1 = 2 * Math.cbrt(r)\n\t\tconst x1 = t1 * Math.cos(phi / 3) - a / 3\n\t\tconst x2 = t1 * Math.cos((phi + 2 * Math.PI) / 3) - a / 3\n\t\tconst x3 = t1 * Math.cos((phi + 4 * Math.PI) / 3) - a / 3\n\t\treturn [x1, x2, x3]\n\t} else if (discriminant <= NLA_PRECISION / 8) {\n\t\tif (0 == qDiv2) {\n\t\t\t// TODO: compare with likeO?\n\t\t\treturn [-a / 3]\n\t\t}\n\t\tconst u1 = qDiv2 < 0 ? Math.cbrt(-qDiv2) : -Math.cbrt(qDiv2)\n\t\tconst x1 = 2 * u1 - a / 3\n\t\tconst x2 = -u1 - a / 3\n\t\treturn [x1, x2]\n\t} else {\n\t\tconst sd = Math.sqrt(discriminant)\n\t\tconst u1 = Math.cbrt(-qDiv2 + sd)\n\t\tconst v1 = Math.cbrt(qDiv2 + sd)\n\t\treturn [u1 - v1 - a / 3]\n\t}\n}\nexport function checkDerivate(\n\tf: (x: number) => number,\n\tdf: (x: number) => number,\n\ta: number,\n\tb: number,\n\tmaxFaults: int = 0,\n) {\n\tconst eps = 1e-4\n\tlet faults = 0\n\tfor (let t = a; t < b; t += (b - a) / 100) {\n\t\tconst dfdt = df(t)\n\t\tconst df2 = (f(t + eps) - f(t)) / eps\n\t\tassert((faults += +!eq2(df2, dfdt, 0.1)) <= maxFaults, `df2 == ${df2} != ${df(t)} = df(t)`)\n\t}\n}\nexport function getRoots(\n\tf: (x: number) => number,\n\ta: number,\n\tb: number,\n\tstepSize: number,\n\tdf: (x: number) => number,\n): number[] {\n\tconst STEPS = (b - a) / stepSize\n\tconst results: number[] = []\n\tfor (let startT = a; startT <= b; startT += stepSize) {\n\t\tconst dt = stepSize * abs(df(startT))\n\t\tif (abs(f(startT)) <= dt) {\n\t\t\t//const t = newtonIterate1d(f, startT, 16)\n\t\t\tlet t = newtonIterateWithDerivative(f, startT, 16, df)\n\t\t\tif (!eq0(f(t)) || eq0(df(t))) {\n\t\t\t\tconst a = startT - dt,\n\t\t\t\t\tb = startT + dt\n\t\t\t\tt = newtonIterate1d(df, startT, 16)\n\t\t\t\t//if (f(a) * f(b) < 0) {\n\t\t\t\t//    t = bisect(f, a, b, 16)\n\t\t\t\t//} else if (df(a) * df(b) < 0) {\n\t\t\t\t//    t = bisect(df, a, b, 16)\n\t\t\t\t//}\n\t\t\t}\n\t\t\tif (eq0(f(t)) && !results.some(r => eq(r, t))) {\n\t\t\t\tresults.push(t)\n\t\t\t}\n\t\t}\n\t}\n\treturn results\n}\n\nexport function bisect(f: (x: number) => number, a: number, b: number, steps: int) {\n\tassert(a < b)\n\tlet fA = f(a),\n\t\tfB = f(b)\n\twhile (steps--) {\n\t\tconst c = (b + a) / 2\n\t\tconst fC = f(c)\n\t\tif (sign(fA) == sign(fC)) {\n\t\t\ta = c\n\t\t\tfA = fC\n\t\t} else {\n\t\t\tb = c\n\t\t\tfB = fC\n\t\t}\n\t}\n\tassert(a <= (b + a) / 2)\n\tassert(b >= (b + a) / 2)\n\treturn lerp(a, b, 0.5)\n}\nexport function newtonIterate(\n\tf: (x: number[]) => number[],\n\tx: number[],\n\tsteps: int = 4,\n\tEPSILON?: number,\n\tstepize = 1,\n) {\n\tEPSILON = EPSILON || 1e-8\n\n\tfor (let i = 0; i < steps; i++) {\n\t\tconst fx = f(x)\n\t\tconst dfdx = Matrix.jacobi(f, x, fx, EPSILON)\n\t\tassert(!dfdx.isZero())\n\t\tconst dx = dfdx.solveLinearSystem(new Vector(new Float64Array(fx))).v\n\t\tassert(!isNaN(dx[0]))\n\t\t//console.log('fx / dfdx', fx / dfdx)\n\t\tfor (let j = 0; j < x.length; j++) x[j] -= dx[j] * stepize\n\t}\n\treturn x\n}\n\nexport function newtonIterate1d(\n\tf: (x: number) => number,\n\txStart: number,\n\tsteps: number | undefined,\n\tdf: (x: number) => number,\n): number\nexport function newtonIterate1d(f: (x: number) => number, xStart: number, steps: number, EPSILON?: number): number\nexport function newtonIterate1d(\n\tf: (x: number) => number,\n\txStart: number,\n\tsteps: number = 8,\n\tepsOrDf: number | ((x: number) => number) = 1e-8,\n): number {\n\tif ('number' === typeof epsOrDf) {\n\t\tlet x = xStart\n\n\t\tfor (let i = 0; i < steps; i++) {\n\t\t\tconst fx = f(x)\n\t\t\tconst dfdx = (f(x + epsOrDf) - fx) / epsOrDf\n\t\t\t//console.log('fx / dfdx', fx / dfdx)\n\t\t\tx = x - fx / dfdx\n\t\t}\n\t\treturn x\n\t} else {\n\t\treturn newtonIterateWithDerivative(f, xStart, steps, epsOrDf)\n\t}\n}\nexport function newtonIterateWithDerivative(\n\tf: (x: number) => number,\n\txStart: number,\n\tsteps: number = 4,\n\tdf: (x: number) => number,\n) {\n\tlet x = xStart\n\tfor (let i = 0; i < steps; i++) {\n\t\tconst fx = f(x)\n\t\tconst dfdx = df(x)\n\t\tif (isNaN(fx) || isNaN(dfdx)) {\n\t\t\tconsole.log()\n\t\t\t//console.log('fx / dfdx', fx / dfdx)\n\t\t}\n\t\tx = x - fx / dfdx\n\t\tif (isNaN(fx)) {\n\t\t\tconsole.log()\n\t\t\t//console.log('fx / dfdx', fx / dfdx)\n\t\t}\n\t}\n\treturn x\n}\nexport function newtonIterateWithDerivative2(\n\tfAndDf: (x: number) => [number, number],\n\txStart: number,\n\tsteps: number = 8,\n\txMin = -Infinity,\n\txMax = Infinity,\n) {\n\tassert(steps % 1 == 0)\n\tlet x = xStart\n\tfor (let i = 0; i < steps; i++) {\n\t\tconst [fx, dfdx] = fAndDf(x)\n\t\tif (isNaN(fx) || isNaN(dfdx)) {\n\t\t\tconsole.log()\n\t\t\t//console.log('fx / dfdx', fx / dfdx)\n\t\t}\n\t\tx = x - fx / dfdx\n\t\tif (0 == dfdx || x < xMin || xMax < x) {\n\t\t\treturn undefined\n\t\t}\n\t}\n\treturn x\n}\nexport function newtonIterateSmart(\n\tf: (x: number) => number,\n\txStart: number,\n\tsteps: number = 4,\n\tdf: (x: number) => number,\n\tmindf = 1e-6,\n) {\n\tlet x = xStart\n\tfor (let i = 0; i < steps; i++) {\n\t\tconst fx = f(x)\n\t\tconst dfdx = df(x)\n\t\tif (abs(dfdx) < mindf && abs(fx) < mindf) {\n\t\t\treturn newtonIterate1d(df, x)\n\t\t}\n\t\tif (isNaN(fx) || isNaN(dfdx)) {\n\t\t\tconsole.log()\n\t\t\t//console.log('fx / dfdx', fx / dfdx)\n\t\t}\n\t\tx = x - fx / dfdx\n\t\tif (isNaN(fx)) {\n\t\t\tconsole.log()\n\t\t\t//console.log('fx / dfdx', fx / dfdx)\n\t\t}\n\t}\n\treturn x\n}\nexport function newtonIterate2d(\n\tf1: (s: number, t: number) => number,\n\tf2: (s: number, t: number) => number,\n\tsStart: number,\n\ttStart: number,\n\tsteps?: number,\n): V3 | undefined {\n\tconst EPSILON = 1e-6\n\tsteps = steps || 4\n\tlet s = sStart,\n\t\tt = tStart,\n\t\tf1ts,\n\t\tf2ts\n\tdo {\n\t\t/*\n         | a b |-1                   |  d -b |\n         | c d |   = 1 / (ad - bc) * | -c  a |\n         */\n\t\tf1ts = f1(s, t)\n\t\tf2ts = f2(s, t)\n\t\t/*\n         let df1s = (f1(s + EPSILON, t) - f1ts) / EPSILON, df1t = (f1(s, t + EPSILON) - f1ts) / EPSILON,\n         df2s = (f2(s + EPSILON, t) - f2ts) / EPSILON, df2t = (f2(s, t + EPSILON) - f2ts) / EPSILON\n         let det = df1s * df2t - df1t * df2s\n         s = s - ( df2t * f1ts - df1t * f2ts) / det\n         t = t - (-df2s * f1ts + df1s * f2ts) / det\n         */\n\t\t// TODO: is this even more accurate?\n\t\tconst df1s = f1(s + EPSILON, t) - f1ts,\n\t\t\tdf1t = f1(s, t + EPSILON) - f1ts,\n\t\t\tdf2s = f2(s + EPSILON, t) - f2ts,\n\t\t\tdf2t = f2(s, t + EPSILON) - f2ts\n\t\tconst det = (df1s * df2t - df1t * df2s) / EPSILON\n\t\tconst ds = (df2t * f1ts - df1t * f2ts) / det\n\t\tconst dt = (-df2s * f1ts + df1s * f2ts) / det\n\t\ts -= ds\n\t\tt -= dt\n\t} while (--steps && f1ts ** 2 + f2ts ** 2 > NLA_PRECISION)\n\tif (f1ts ** 2 + f2ts ** 2 > NLA_PRECISION) {\n\t\tconsole.log(f1ts ** 2 + f2ts ** 2)\n\t\treturn undefined\n\t}\n\treturn new V3(s, t, 0)\n}\nexport function newtonIterate2dWithDerivatives(\n\tf: (s: number, t: number) => number,\n\tg: (s: number, t: number) => number,\n\tsStart: number,\n\ttStart: number,\n\tsteps: int,\n\tdfds: (s: number, t: number) => number,\n\tdfdt: (s: number, t: number) => number,\n\tdgds: (s: number, t: number) => number,\n\tdgdt: (s: number, t: number) => number,\n): V3 | undefined {\n\tsteps = steps || 4\n\tlet s = sStart,\n\t\tt = tStart\n\tconst eps = 1e-6\n\tlet f1ts, f2ts\n\tdo {\n\t\t/*\n         | a b |-1                   |  d -b |\n         | c d |   = 1 / (ad - bc) * | -c  a |\n         */\n\t\tf1ts = f(s, t)\n\t\tf2ts = g(s, t)\n\t\tconst df1s = dfds(s, t),\n\t\t\tdf1t = dfdt(s, t),\n\t\t\tdf2s = dgds(s, t),\n\t\t\tdf2t = dgdt(s, t)\n\t\t// TODO: is this even more accurate?\n\t\tconst det = df1s * df2t - df1t * df2s\n\t\tconst ds = (df2t * f1ts - df1t * f2ts) / det\n\t\tconst dt = (-df2s * f1ts + df1s * f2ts) / det\n\t\ts -= ds\n\t\tt -= dt\n\t} while (--steps && f1ts * f1ts + f2ts * f2ts > NLA_PRECISION / 32)\n\tif (!steps) {\n\t\t//console.log(f1ts * f1ts + f2ts * f2ts)\n\t\treturn undefined\n\t}\n\treturn V(s, t, 0)\n}\n\nexport const gaussLegendre24Xs: ReadonlyArray<number> = [\n\t-0.0640568928626056260850430826247450385909,\n\t0.0640568928626056260850430826247450385909,\n\t-0.1911188674736163091586398207570696318404,\n\t0.1911188674736163091586398207570696318404,\n\t-0.3150426796961633743867932913198102407864,\n\t0.3150426796961633743867932913198102407864,\n\t-0.4337935076260451384870842319133497124524,\n\t0.4337935076260451384870842319133497124524,\n\t-0.5454214713888395356583756172183723700107,\n\t0.5454214713888395356583756172183723700107,\n\t-0.6480936519369755692524957869107476266696,\n\t0.6480936519369755692524957869107476266696,\n\t-0.7401241915785543642438281030999784255232,\n\t0.7401241915785543642438281030999784255232,\n\t-0.8200019859739029219539498726697452080761,\n\t0.8200019859739029219539498726697452080761,\n\t-0.8864155270044010342131543419821967550873,\n\t0.8864155270044010342131543419821967550873,\n\t-0.9382745520027327585236490017087214496548,\n\t0.9382745520027327585236490017087214496548,\n\t-0.9747285559713094981983919930081690617411,\n\t0.9747285559713094981983919930081690617411,\n\t-0.9951872199970213601799974097007368118745,\n\t0.9951872199970213601799974097007368118745,\n]\nexport const gaussLegendre24Weights: ReadonlyArray<number> = [\n\t0.1279381953467521569740561652246953718517,\n\t0.1279381953467521569740561652246953718517,\n\t0.1258374563468282961213753825111836887264,\n\t0.1258374563468282961213753825111836887264,\n\t0.121670472927803391204463153476262425607,\n\t0.121670472927803391204463153476262425607,\n\t0.1155056680537256013533444839067835598622,\n\t0.1155056680537256013533444839067835598622,\n\t0.1074442701159656347825773424466062227946,\n\t0.1074442701159656347825773424466062227946,\n\t0.0976186521041138882698806644642471544279,\n\t0.0976186521041138882698806644642471544279,\n\t0.086190161531953275917185202983742667185,\n\t0.086190161531953275917185202983742667185,\n\t0.0733464814110803057340336152531165181193,\n\t0.0733464814110803057340336152531165181193,\n\t0.0592985849154367807463677585001085845412,\n\t0.0592985849154367807463677585001085845412,\n\t0.0442774388174198061686027482113382288593,\n\t0.0442774388174198061686027482113382288593,\n\t0.0285313886289336631813078159518782864491,\n\t0.0285313886289336631813078159518782864491,\n\t0.0123412297999871995468056670700372915759,\n\t0.0123412297999871995468056670700372915759,\n]\nexport function gaussLegendreQuadrature24(f: (x: number) => number, startT: number, endT: number): number {\n\t//let result = 0\n\t//for (let i = 0; i < gaussLegendre24Xs.length; i++) {\n\t//\t// gauss-legendre goes from -1 to 1, so we need to scale\n\t//\tlet t = startT + (gaussLegendre24Xs[i] + 1) / 2 * (endT - startT)\n\t//\tresult += gaussLegendre24Weights[i] * f(t)\n\t//}\n\t//const result = NLA\n\t//\t\t.arrayFromFunction(24, i => startT + (gaussLegendre24Xs[i] + 1) / 2 * (endT - startT))\n\t//\t\t.map((t, i) => gaussLegendre24Weights[i] * f(t))\n\t//\t\t.sumInPlaceTree()\n\t//99.54182500782605\n\t//99.54182500782602\n\t// again, [-1,1], so div by 2\n\t//return result // 2 * (endT - startT)\n\n\treturn (glq24_11(t => f(startT + ((t + 1) / 2) * (endT - startT))) / 2) * (endT - startT)\n}\n\n/**\n * Calculate the integral of f in the interval [-1;1].\n * @param f\n */\nexport function glq24_11(f: (x: number) => number): number {\n\treturn arrayFromFunction(24, i => gaussLegendre24Weights[i] * f(gaussLegendre24Xs[i])).sumInPlaceTree()\n}\nexport function glqInSteps(f: (x: number) => number, startT: number, endT: number, steps: int) {\n\tconst dt = (endT - startT) / steps\n\treturn (\n\t\t(arrayFromFunction(steps, i => glq24_11(t => f(startT + dt * i + ((t + 1) / 2) * dt))).sumInPlaceTree() / 2) *\n\t\tdt\n\t)\n}\n\nexport function midpointRuleQuadrature(\n\tf: (x: number) => number,\n\tstartT: number,\n\tendT: number,\n\tsteps: int = 32,\n): number {\n\tconst dt = (endT - startT) / steps\n\treturn (\n\t\tarrayFromFunction(steps, i => startT + dt / 2 + dt * i)\n\t\t\t.map(f)\n\t\t\t.sumInPlaceTree() * dt\n\t)\n}\n\nexport function callsce(name: string, ...params: any[]) {\n\treturn name + '(' + params.map(SCE).join(',') + ')'\n}\n","import { Equalable, JavaMap as CustomMap } from 'javasetmap.ts'\nimport {\n\tassert,\n\tassertf,\n\tassertInst,\n\tassertNumbers,\n\tassertVectors,\n\tdefaultRoundFunction,\n\teq,\n\teq0,\n\teq2,\n\tFloatArray,\n\tint,\n\tNLA_PRECISION,\n\traddd,\n} from './NLA'\n\n/**\n * Immutable 3d-vector/point.\n */\nexport class V3 implements Equalable {\n\tstatic readonly O: V3 = new V3(0, 0, 0)\n\tstatic readonly X: V3 = new V3(1, 0, 0)\n\tstatic readonly Y: V3 = new V3(0, 1, 0)\n\tstatic readonly Z: V3 = new V3(0, 0, 1)\n\tstatic readonly XY: V3 = new V3(1, 1, 0)\n\tstatic readonly XYZ: V3 = new V3(1, 1, 1)\n\tstatic readonly INF: V3 = new V3(Infinity, Infinity, Infinity)\n\tstatic readonly UNITS: V3[] = [V3.X, V3.Y, V3.Z]\n\tstatic readonly NAMEMAP = new CustomMap<V3, string>()\n\t\t.set(V3.O, 'V3.O')\n\t\t.set(V3.X, 'V3.X')\n\t\t.set(V3.Y, 'V3.Y')\n\t\t.set(V3.Z, 'V3.Z')\n\t\t.set(V3.XYZ, 'V3.XYZ')\n\t\t.set(V3.INF, 'V3.INF')\n\n\tconstructor(readonly x: number, readonly y: number, readonly z: number) {\n\t\tassertNumbers(x, y, z)\n\t}\n\n\tget [0]() {\n\t\treturn this.x\n\t}\n\tget [1]() {\n\t\treturn this.y\n\t}\n\tget [2]() {\n\t\treturn this.z\n\t}\n\n\tstatic random(): V3 {\n\t\treturn new V3(Math.random(), Math.random(), Math.random())\n\t}\n\n\tstatic parallel(a: V3, b: V3) {\n\t\treturn a.dot(b) - a.length() * b.length()\n\t}\n\n\t/**\n\t * See http://math.stackexchange.com/questions/44689/how-to-find-a-random-axis-or-unit-vector-in-3d\n\t * @returns A random point on the unit sphere with uniform distribution across the surface.\n\t */\n\tstatic randomUnit(): V3 {\n\t\tconst zRotation = Math.random() * 2 * Math.PI\n\t\tconst z = Math.random() * 2 - 1\n\t\tconst zRadius = Math.sqrt(1 - z ** 2)\n\t\treturn new V3(zRadius * Math.cos(zRotation), zRadius * Math.sin(zRotation), z)\n\t}\n\n\t//noinspection JSUnusedLocalSymbols\n\t/**\n\t * Documentation stub. You want {@see V3#sphere}\n\t */\n\tstatic fromAngles(theta: number, phi: number): V3 {\n\t\tthrow new Error()\n\t}\n\n\tstatic fromFunction(f: (dim: number) => number) {\n\t\treturn new V3(f(0), f(1), f(2))\n\t}\n\n\tstatic min(a: V3, b: V3): V3 {\n\t\treturn new V3(Math.min(a.x, b.x), Math.min(a.y, b.y), Math.min(a.z, b.z))\n\t}\n\n\tstatic max(a: V3, b: V3): V3 {\n\t\treturn new V3(Math.max(a.x, b.x), Math.max(a.y, b.y), Math.max(a.z, b.z))\n\t}\n\n\tstatic lerp(a: V3, b: V3, t: number): V3 {\n\t\treturn new V3(a.x * (1 - t) + b.x * t, a.y * (1 - t) + b.y * t, a.z * (1 - t) + b.z * t)\n\t}\n\n\tstatic fromArray(a: number[]): V3 {\n\t\treturn new V3(a[0], a[1], a[2])\n\t}\n\n\tstatic angleBetween(a: V3, b: V3): number {\n\t\treturn a.angleTo(b)\n\t}\n\n\tstatic zip(f: (...args: number[]) => number, ...args: V3[]): V3 {\n\t\tassert(f instanceof Function)\n\t\treturn new V3(\n\t\t\tf.apply(undefined, args.map(x => x.x)),\n\t\t\tf.apply(undefined, args.map(x => x.y)),\n\t\t\tf.apply(undefined, args.map(x => x.z)),\n\t\t)\n\t}\n\n\tstatic normalOnPoints(a: V3, b: V3, c: V3): V3 {\n\t\tassertVectors(a, b, c)\n\t\treturn a.to(b).cross(a.to(c))\n\t}\n\n\tstatic add(...vs: V3[]): V3 {\n\t\tassertVectors.apply(undefined, vs)\n\t\tlet x = 0,\n\t\t\ty = 0,\n\t\t\tz = 0\n\t\tlet i = vs.length\n\t\twhile (i--) {\n\t\t\tx += vs[i].x\n\t\t\ty += vs[i].y\n\t\t\tz += vs[i].z\n\t\t}\n\t\treturn new V3(x, y, z)\n\t}\n\n\tstatic sub(...vs: V3[]): V3 {\n\t\tassertVectors.apply(undefined, vs)\n\t\tlet x = vs[0].x,\n\t\t\ty = vs[0].y,\n\t\t\tz = vs[0].z\n\t\tlet i = vs.length\n\t\twhile (i--) {\n\t\t\tx -= vs[i].x\n\t\t\ty -= vs[i].y\n\t\t\tz -= vs[i].z\n\t\t}\n\t\treturn new V3(x, y, z)\n\t}\n\n\t/**\n\t * Pack an array of V3s into an array of numbers (Float32Array by default).\n\t *\n\t * @param v3arr source array\n\t * @param dest destination array. If provided, must be large enough to fit v3count items.\n\t * @param srcStart starting index in source array\n\t * @param destStart starting index in destination array\n\t * @param v3count Number of V3s to copy.\n\t * @returns Packed array.\n\t */\n\tstatic pack<T extends FloatArray = Float32Array>(\n\t\tv3arr: ReadonlyArray<V3>,\n\t\tdest?: T,\n\t\tsrcStart: number = 0,\n\t\tdestStart: number = 0,\n\t\tv3count: number = v3arr.length - srcStart,\n\t): T {\n\t\t//assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')\n\t\tconst result = dest || (new Float32Array(3 * v3count) as any) // TODO\n\t\tassert(\n\t\t\tresult.length - destStart >= v3count * 3,\n\t\t\t'dest.length - destStart >= v3count * 3',\n\t\t\tresult.length,\n\t\t\tdestStart,\n\t\t\tv3count * 3,\n\t\t)\n\n\t\tlet i = v3count,\n\t\t\tsrcIndex = srcStart,\n\t\t\tdestIndex = destStart\n\t\twhile (i--) {\n\t\t\tconst v = v3arr[srcIndex++]\n\t\t\tresult[destIndex++] = v.x\n\t\t\tresult[destIndex++] = v.y\n\t\t\tresult[destIndex++] = v.z\n\t\t}\n\t\treturn result\n\t}\n\n\tstatic unpack(\n\t\tpackedArray: FloatArray,\n\t\tdest?: V3[],\n\t\tsrcStart: number = 0,\n\t\tdestStart: number = 0,\n\t\tv3count: number = (packedArray.length - srcStart) / 3,\n\t) {\n\t\t//assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')\n\t\tconst result = dest || new Array(v3count)\n\t\tassert(result.length - destStart >= v3count, 'dest.length - destStart >= v3count')\n\n\t\tlet i = v3count,\n\t\t\tsrcIndex = srcStart,\n\t\t\tdestIndex = destStart\n\t\twhile (i--) {\n\t\t\tresult[destIndex++] = new V3(packedArray[srcIndex++], packedArray[srcIndex++], packedArray[srcIndex++])\n\t\t}\n\t\treturn result\n\t}\n\n\tstatic packXY<T extends FloatArray = Float32Array>(\n\t\tv3arr: V3[],\n\t\tdest?: T,\n\t\tsrcStart: number = 0,\n\t\tdestStart: number = 0,\n\t\tv3count: number = v3arr.length - srcStart,\n\t): T {\n\t\t//assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')\n\t\tconst result = dest || (new Float32Array(2 * v3count) as any)\n\t\tassert(result.length - destStart >= v3count, 'dest.length - destStart >= v3count')\n\n\t\tlet i = v3count,\n\t\t\tsrcIndex = srcStart,\n\t\t\tdestIndex = destStart\n\t\twhile (i--) {\n\t\t\tconst v = v3arr[srcIndex++]\n\t\t\tresult[destIndex++] = v.x\n\t\t\tresult[destIndex++] = v.y\n\t\t}\n\t\treturn result\n\t}\n\n\tstatic unpackXY(\n\t\tsrc: FloatArray,\n\t\tdest?: V3[],\n\t\tsrcStart: int = 0,\n\t\tdestStart: int = 0,\n\t\tv3count: int = Math.min(src.length / 2, (dest && dest.length) || Infinity) - destStart,\n\t): V3[] {\n\t\t//assert (v3arr.every(v3 => v3 instanceof V3), 'v3arr.every(v3 => v3 instanceof V3)')\n\t\tdest = dest || new Array(v3count)\n\t\tassert(dest.length - destStart >= v3count, 'dest.length - destStart >= v3count')\n\t\tassert(src.length - srcStart >= v3count * 2, 'dest.length - destStart >= v3count')\n\n\t\tlet i = v3count,\n\t\t\tsrcIndex = srcStart,\n\t\t\tdestIndex = destStart\n\t\twhile (i--) {\n\t\t\tdest[destIndex++] = new V3(src[srcIndex++], src[srcIndex++], 0)\n\t\t}\n\t\treturn dest\n\t}\n\n\tstatic perturbed(v: V3, delta?: number): V3 {\n\t\treturn v.perturbed(delta)\n\t}\n\n\tstatic polar(radius: number, phi: raddd, z: number = 0): V3 {\n\t\treturn new V3(radius * Math.cos(phi), radius * Math.sin(phi), z)\n\t}\n\n\t/**\n\t *\n\t * @param longitude angle in XY plane\n\t * @param latitude \"height\"/z dir angle\n\t */\n\tstatic sphere(longitude: raddd, latitude: raddd, length = 1): V3 {\n\t\treturn new V3(\n\t\t\tlength * Math.cos(latitude) * Math.cos(longitude),\n\t\t\tlength * Math.cos(latitude) * Math.sin(longitude),\n\t\t\tlength * Math.sin(latitude),\n\t\t)\n\t}\n\n\tstatic inverseLerp(a: V3, b: V3, x: V3) {\n\t\tconst ab = a.to(b)\n\t\treturn a.to(x).dot(ab) / ab.squared()\n\t}\n\n\tperturbed(delta: number = NLA_PRECISION * 0.8): V3 {\n\t\treturn this.map(x => x + (Math.random() - 0.5) * delta)\n\t}\n\n\t*[Symbol.iterator]() {\n\t\tyield this.x\n\t\tyield this.y\n\t\tyield this.z\n\t}\n\n\te(index: int): number {\n\t\tassert(index >= 0 && index < 3)\n\t\treturn 0 == index ? this.x : 1 == index ? this.y : this.z\n\t}\n\n\tnegated(): V3 {\n\t\treturn new V3(-this.x, -this.y, -this.z)\n\t}\n\n\tabs(): V3 {\n\t\treturn new V3(Math.abs(this.x), Math.abs(this.y), Math.abs(this.z))\n\t}\n\n\tplus(a: V3): V3 {\n\t\tassertVectors(a)\n\t\treturn new V3(this.x + a.x, this.y + a.y, this.z + a.z)\n\t}\n\n\t/**\n\t * Hadarmard product (or Schur product)\n\t * Element-wise multiplication of two vectors.\n\t * @see https://en.wikipedia.org/wiki/Hadamard_product_(matrices)\n\t *\n\t */\n\tschur(a: V3): V3 {\n\t\treturn new V3(this.x * a.x, this.y * a.y, this.z * a.z)\n\t}\n\n\t/**\n\t * Element-wise division.\n\t */\n\tdivv(a: V3): V3 {\n\t\treturn new V3(this.x / a.x, this.y / a.y, this.z / a.z)\n\t}\n\n\t/**\n\t * See also {@link to} which is a.minus(this)\n\t */\n\tminus(a: V3): V3 {\n\t\tassertVectors(a)\n\t\treturn new V3(this.x - a.x, this.y - a.y, this.z - a.z)\n\t}\n\n\tto(a: V3): V3 {\n\t\tassertVectors(a)\n\t\treturn a.minus(this)\n\t}\n\n\ttimes(factor: number): V3 {\n\t\tassertNumbers(factor)\n\t\treturn new V3(this.x * factor, this.y * factor, this.z * factor)\n\t}\n\n\tdiv(a: number): V3 {\n\t\tassertNumbers(a)\n\t\treturn new V3(this.x / a, this.y / a, this.z / a)\n\t}\n\n\t/**\n\t * Dot product.\n\t * @see https://en.wikipedia.org/wiki/Dot_product\n\t */\n\tdot(a: V3): number {\n\t\tassertInst(V3, a)\n\t\treturn this.x * a.x + this.y * a.y + this.z * a.z\n\t}\n\n\t/**\n\t * Linearly interpolate\n\t */\n\tlerp(b: V3, t: number): V3 {\n\t\tassertVectors(b)\n\t\tassertNumbers(t)\n\t\treturn V3.lerp(this, b, t)\n\t}\n\n\tsquared(): number {\n\t\treturn this.dot(this)\n\t}\n\n\tdistanceTo(a: V3): number {\n\t\tassertVectors(a)\n\t\t//return this.minus(a).length()\n\t\treturn Math.hypot(this.x - a.x, this.y - a.y, this.z - a.z)\n\t}\n\n\tdistanceToSquared(a: V3): number {\n\t\tassertVectors(a)\n\t\treturn this.minus(a).squared()\n\t}\n\n\t///**\n\t// * See also {@see #setTo} for the individual\n\t// *\n\t// * @param v\n\t// */\n\t//assign(v) {\n\t//\tassertVectors(v)\n\t//\tthis.x = v.x\n\t//\tthis.y = v.y\n\t//\tthis.z = v.z\n\t//}\n\t//\n\t///**\n\t// * See also {@see #assign} for the V3 version\n\t// *\n\t// * @param x\n\t// * @param y\n\t// * @param z\n\t// */\n\t//setTo(x, y, z = 0) {\n\t//\tthis.x = x\n\t//\tthis.y = y\n\t//\tthis.z = z\n\t//}\n\n\ttoSource(): string {\n\t\treturn V3.NAMEMAP.get(this) || this.toString()\n\t}\n\n\tnonParallelVector(): V3 {\n\t\tconst abs = this.abs()\n\t\tif (abs.x <= abs.y && abs.x <= abs.z) {\n\t\t\treturn V3.X\n\t\t} else if (abs.y <= abs.x && abs.y <= abs.z) {\n\t\t\treturn V3.Y\n\t\t} else {\n\t\t\treturn V3.Z\n\t\t}\n\t}\n\n\tslerp(b: V3, t: number): V3 {\n\t\tassertVectors(b)\n\t\tassertNumbers(t)\n\t\tconst sin = Math.sin\n\t\tconst omega = this.angleTo(b)\n\t\treturn this.times(sin((1 - t) * omega) / sin(omega)).plus(b.times(sin(t * omega) / sin(omega)))\n\t}\n\n\tmin(b: V3): V3 {\n\t\treturn new V3(Math.min(this.x, b.x), Math.min(this.y, b.y), Math.min(this.z, b.z))\n\t}\n\n\tmax(b: V3): V3 {\n\t\treturn new V3(Math.max(this.x, b.x), Math.max(this.y, b.y), Math.max(this.z, b.z))\n\t}\n\n\tequals(v: any): boolean {\n\t\treturn this == v || (this.x == v.x && this.y == v.y && this.z == v.z)\n\t}\n\n\t/**\n\t *\n\t * The cross product is defined as:\n\t * a x b = |a| * |b| * sin(phi) * n\n\t * where |.| is the euclidean norm, phi is the angle between the vectors\n\t * and n is a unit vector perpendicular to both a and b.\n\t *\n\t * The cross product is zero for parallel vectors.\n\t * @see https://en.wikipedia.org/wiki/Cross_product\n\t */\n\tcross(v: V3): V3 {\n\t\treturn new V3(this.y * v.z - this.z * v.y, this.z * v.x - this.x * v.z, this.x * v.y - this.y * v.x)\n\t}\n\n\t//noinspection JSMethodCanBeStatic\n\t/**\n\t * Documentation stub. You want {@link unit}\n\t */\n\tnormalized(): V3 {\n\t\tthrow new Error('documentation stub. use .unit()')\n\t}\n\n\tminElement(): number {\n\t\treturn Math.min(this.x, this.y, this.z)\n\t}\n\n\tmaxElement(): number {\n\t\treturn Math.max(this.x, this.y, this.z)\n\t}\n\n\ttoArray(n: int = 3): number[] {\n\t\treturn [this.x, this.y, this.z].slice(0, n)\n\t}\n\n\t/**\n\t * Get a perpendicular vector.\n\t * For vectors in the XY-Plane, returns vector rotated 90° CCW.\n\t */\n\tgetPerpendicular(): V3 {\n\t\tif (eq0(this.x) && eq0(this.y)) {\n\t\t\tif (eq0(this.z)) {\n\t\t\t\tthrow new Error('zero vector')\n\t\t\t}\n\t\t\t// v is Vector(0, 0, v.z)\n\t\t\treturn V3.Y\n\t\t}\n\t\treturn new V3(-this.y, this.x, 0)\n\t}\n\n\t//noinspection JSMethodCanBeStatic\n\tdim(): int {\n\t\treturn 3\n\t}\n\n\tels(): number[] {\n\t\treturn [this.x, this.y, this.z]\n\t}\n\n\tangleXY(): number {\n\t\treturn Math.atan2(this.y, this.x)\n\t}\n\n\tlengthXY(): number {\n\t\treturn Math.hypot(this.x, this.y)\n\t\t//return Math.sqrt(this.x * this.x + this.y * this.y)\n\t}\n\n\tsquaredXY(): number {\n\t\treturn this.x * this.x + this.y * this.y\n\t}\n\n\txy(): V3 {\n\t\treturn new V3(this.x, this.y, 0)\n\t}\n\n\t/**\n\t * Transform this vector element-wise by way of function f. Returns V3(f(x), f(y), f(z))\n\t * @param f function to apply to elements (number -> number)\n\t */\n\tmap(f: (el: number, dim: 'x' | 'y' | 'z') => number): V3 {\n\t\treturn new V3(f(this.x, 'x'), f(this.y, 'y'), f(this.z, 'z'))\n\t}\n\n\ttoString(roundFunction?: (x: number) => any): string {\n\t\troundFunction = roundFunction || defaultRoundFunction\n\t\treturn V3.NAMEMAP.get(this) || 'V(' + [this.x, this.y, this.z].map(roundFunction).join(', ') + ')' //+ this.id\n\t}\n\n\tangleTo(b: V3): number {\n\t\tassert(1 == arguments.length)\n\t\tassertVectors(b)\n\t\tassert(!this.likeO())\n\t\tassert(!b.likeO())\n\t\treturn Math.acos(Math.min(1, this.dot(b) / this.length() / b.length()))\n\t}\n\n\t/**\n\t *\n\t * phi = angle between A and B\n\t * alpha = angle between n and normal1\n\t *\n\t * A . B = ||A|| * ||B|| * cos(phi)\n\t * A x B = ||A|| * ||B|| * sin(phi) * n (n = unit vector perpendicular)\n\t * (A x B) . normal1 = ||A|| * ||B|| * sin(phi) * cos(alpha)\n\t */\n\tangleRelativeNormal(vector: V3, normal1: V3): number {\n\t\tassert(2 == arguments.length)\n\t\tassertVectors(vector, normal1)\n\t\tassertf(() => normal1.hasLength(1))\n\t\t//assert(vector.isPerpendicularTo(normal1), 'vector.isPerpendicularTo(normal1)' + vector.sce + normal1.sce)\n\t\t//assert(this.isPerpendicularTo(normal1), 'this.isPerpendicularTo(normal1)' + this.dot(vector)) //\n\t\t// -0.000053600770598683675\n\t\treturn Math.atan2(this.cross(vector).dot(normal1), this.dot(vector))\n\t}\n\n\t/**\n\t Returns true iff this is parallel to vector, i.e. this * s == vector, where s is a pos or neg number, using equals\n\t Throw a DebugError\n\t if vector is not a Vector or\n\t if this has a length of 0 or\n\t if vector has a length of 0\n\t */\n\tisParallelTo(vector: V3): boolean {\n\t\tassertVectors(vector)\n\t\tassert(!this.likeO())\n\t\tassert(!vector.likeO())\n\t\t// a . b takes on values of +|a|*|b| (vectors same direction) to -|a|*|b| (opposite direction)\n\t\t// in both cases the vectors are parallel, so check if abs(a . b) == |a|*|b|\n\t\tconst dot = this.dot(vector)\n\t\treturn eq(this.squared() * vector.squared(), dot * dot)\n\t}\n\n\tisPerpendicularTo(vector: V3): boolean {\n\t\tassertVectors(vector)\n\t\tassert(!this.likeO(), '!this.likeO()')\n\t\tassert(!vector.likeO(), '!vector.likeO()')\n\t\treturn eq0(this.dot(vector))\n\t}\n\n\tisReverseDirTo(other: V3): boolean {\n\t\tassertVectors(other)\n\t\tassert(!this.likeO())\n\t\tassert(!other.likeO())\n\t\t// a . b takes on values of +|a|*|b| (vectors same direction) to -|a|*|b| (opposite direction)\n\t\t// in both cases the vectors are parallel, so check if abs(a . b) == |a|*|b|\n\t\tconst dot = this.dot(other)\n\t\treturn eq(Math.sqrt(this.squared() * other.squared()), dot)\n\t}\n\n\t/**\n\t * Returns the length of this Vector, i.e. the euclidean norm.\n\t *\n\t * Note that the partial derivatives of the euclidean norm at point x are equal to the\n\t * components of the unit vector x.\n\t */\n\tlength(): number {\n\t\treturn Math.hypot(this.x, this.y, this.z)\n\t\t//return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)\n\t}\n\n\t/**\n\t * Definition: V3.likeO == V3.like(V3.O)\n\t */\n\tlikeO(): boolean {\n\t\treturn this.like(V3.O)\n\t}\n\n\t/**\n\t * eq(this.x, obj.x) && eq(this.y, obj.y) && eq(this.z, obj.z)\n\t * @param obj\n\t */\n\tlike(obj: any): boolean {\n\t\tif (obj === this) return true\n\t\tif (!(obj instanceof V3)) return false\n\t\treturn eq(this.x, obj.x) && eq(this.y, obj.y) && eq(this.z, obj.z)\n\t}\n\n\t/**\n\t * equivalent to this.like(v) || this.negated().like(v)\n\t */\n\tlikeOrReversed(v: V3): boolean {\n\t\treturn eq(Math.abs(this.dot(v)), Math.sqrt(this.squared() * v.squared()))\n\t}\n\n\t/**\n\t * Returns a new unit Vector (.length() === 1) with the same direction as this vector. Throws a\n\t * DebugError if this has a length of 0.\n\t */\n\tunit(): V3 {\n\t\tassert(!this.likeO(), 'cannot normalize zero vector')\n\t\treturn this.div(this.length())\n\t}\n\n\t/**\n\t * Returns a new V3 equal to this scaled so that its length is equal to newLength.\n\t *\n\t * Passing a negative newLength will flip the vector.\n\t */\n\ttoLength(newLength: number): V3 {\n\t\tassertNumbers(newLength)\n\t\treturn this.times(newLength / this.length())\n\t}\n\n\t/**\n\t Returns a new Vector which is the projection of this vector onto the passed vector.\n\t Examples\n\t V(3, 4).projectedOn(V(1, 0)) // returns V(3, 0)\n\t V(3, 4).projectedOn(V(2, 0)) // returns V(3, 0)\n\t V(3, 4).projectedOn(V(-1, 0)) // returns V(-3, 0)\n\t V(3, 4).projectedOn(V(0, 1)) // returns V(0, 4)\n\t V(3, 4).projectedOn(V(1, 1)) // returns\n\t */\n\tprojectedOn(b: V3): V3 {\n\t\tassertVectors(b)\n\t\t// https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2\n\t\treturn b.times(this.dot(b) / b.dot(b))\n\t}\n\n\trejectedFrom(b: V3): V3 {\n\t\tassertVectors(b)\n\t\t// https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2\n\t\treturn this.minus(b.times(this.dot(b) / b.dot(b)))\n\t}\n\n\trejectedFrom1(b1: V3): V3 {\n\t\tassertVectors(b1)\n\t\tassert(b1.hasLength(1))\n\t\t// https://en.wikipedia.org/wiki/Vector_projection#Vector_projection_2\n\t\treturn this.minus(b1.times(this.dot(b1)))\n\t}\n\n\t/**\n\t * Returns the length of this vector rejected from the unit vector b.\n\t *\n\t *       /|\n\t * this / |    ^\n\t *     /__|    | b\n\t *      r\n\t *  Returns length of r (r === this.rejectedFrom(b))\n\t */\n\trejectedLength(b: V3): number {\n\t\tassertVectors(b)\n\t\treturn Math.sqrt(this.dot(this) - this.dot(b) ** 2 / b.dot(b))\n\t}\n\n\t/**\n\t * Returns the length of this vector rejected from the unit vector b1.\n\t *\n\t *       /|\n\t * this / |    ^\n\t *     /__|    | b1\n\t *      r\n\t *  Returns length of r (r === this.rejectedFrom(b1))\n\t */\n\trejected1Length(b1: V3): number {\n\t\tassertVectors(b1)\n\t\tassert(b1.hasLength(1))\n\t\treturn Math.sqrt(this.dot(this) - this.dot(b1) ** 2)\n\t}\n\n\t/**\n\t Returns true iff the length() of this vector is equal to 'length', using eq\n\t E.g. V(3, 4).hasLength(5) === true\n\t V(1, 1).hasLength(1) === false\n\t */\n\thasLength(length: number): boolean {\n\t\tassertNumbers(length)\n\t\treturn eq(length, this.length())\n\t}\n\n\t/**\n\t Returns the sum of the absolute values of the components of this vector.\n\t E.g. V(1, -2, 3) === abs(1) + abs(-2) + abs(3) === 1 + 2 + 3 === 6\n\t */\n\tabsSum(): number {\n\t\treturn Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z)\n\t}\n\n\t/**\n\t * returns max(|x|, |y|, |z|)\n\t */\n\tmaxAbsElement(): number {\n\t\treturn Math.max(Math.abs(this.x), Math.abs(this.y), Math.abs(this.z))\n\t}\n\n\t/**\n\t * returns min(|x|, |y|, |z|)\n\t */\n\tminAbsElement(): number {\n\t\treturn Math.min(Math.abs(this.x), Math.abs(this.y), Math.min(this.z))\n\t}\n\n\tmaxAbsDim(): 0 | 1 | 2 {\n\t\tconst xAbs = Math.abs(this.x),\n\t\t\tyAbs = Math.abs(this.y),\n\t\t\tzAbs = Math.abs(this.z)\n\t\treturn xAbs >= yAbs ? (xAbs >= zAbs ? 0 : 2) : yAbs >= zAbs ? 1 : 2\n\t}\n\n\tminAbsDim(): 0 | 1 | 2 {\n\t\tconst xAbs = Math.abs(this.x),\n\t\t\tyAbs = Math.abs(this.y),\n\t\t\tzAbs = Math.abs(this.z)\n\t\treturn xAbs < yAbs ? (xAbs < zAbs ? 0 : 2) : yAbs < zAbs ? 1 : 2\n\t}\n\n\twithElement(dim: 'x' | 'y' | 'z', el: number) {\n\t\tassert(['x', 'y', 'z'].includes(dim), '' + dim)\n\t\tassertNumbers(el)\n\t\tif ('x' == dim) {\n\t\t\treturn new V3(el, this.y, this.z)\n\t\t}\n\t\tif ('y' == dim) {\n\t\t\treturn new V3(this.x, el, this.z)\n\t\t}\n\t\treturn new V3(this.x, this.y, el)\n\t}\n\n\thashCode(): int {\n\t\tfunction floatHashCode(f: number) {\n\t\t\treturn ~~(f * (1 << 28))\n\t\t}\n\n\t\treturn ~~((floatHashCode(this.x) * 31 + floatHashCode(this.y)) * 31 + floatHashCode(this.z))\n\t}\n\n\thashCodes() {\n\t\t//function floatHashCode(f) {\n\t\t//\treturn ~~(f * (1 << 28))\n\t\t//}\n\n\t\t// compare hashCode.floatHashCode\n\t\t// the following ops are equivalent to\n\t\t// floatHashCode((el - NLA_PRECISION) % (2 * NLA_PRECISION))\n\t\t// this results in the hashCode for the (out of 8 possible) cube with the lowest hashCode\n\t\t// the other 7 can be calculated by adding constants\n\t\tconst xHC = ~~(this.x * (1 << 28) - 0.5),\n\t\t\tyHC = ~~(this.y * (1 << 28) - 0.5),\n\t\t\tzHC = ~~(this.z * (1 << 28) - 0.5),\n\t\t\thc = ~~((xHC * 31 + yHC) * 31 + zHC)\n\t\treturn [\n\t\t\t~~hc,\n\t\t\t~~(hc + 961),\n\t\t\t~~(hc + 31),\n\t\t\t~~(hc + 31 + 961),\n\t\t\t~~(hc + 1),\n\t\t\t~~(hc + 1 + 961),\n\t\t\t~~(hc + 1 + 31),\n\t\t\t~~(hc + 1 + 31 + 961),\n\t\t]\n\t}\n\n\t//static areDisjoint(it: Iterable<V3>): boolean {\n\t//\tconst vSet = new CustomSet\n\t//\tfor (const v of it) {\n\t//\t\tif (!v.equals(vSet.canonicalizeLike(v))) {\n\t//\t\t\t// like value already in set\n\t//\t\t\treturn false\n\t//\t\t}\n\t//\t}\n\t//\treturn true\n\t//}\n\n\tcompareTo(other: V3): number {\n\t\tif (this.x != other.x) {\n\t\t\treturn this.x - other.x\n\t\t} else if (this.y != other.y) {\n\t\t\treturn this.y - other.y\n\t\t} else {\n\t\t\treturn this.z - other.z\n\t\t}\n\t}\n\n\tcompareTo2(other: V3, eps: number = NLA_PRECISION): number {\n\t\tif (!eq2(this.x, other.x, eps)) {\n\t\t\treturn this.x - other.x\n\t\t} else if (!eq2(this.y, other.y, eps)) {\n\t\t\treturn this.y - other.y\n\t\t} else if (!eq2(this.z, other.z, eps)) {\n\t\t\treturn this.z - other.z\n\t\t} else {\n\t\t\treturn 0\n\t\t}\n\t}\n\n\ttoAngles(): { theta: raddd; phi: raddd } {\n\t\treturn {\n\t\t\ttheta: Math.atan2(this.y, this.x),\n\t\t\tphi: Math.asin(this.z / this.length()),\n\t\t}\n\t}\n}\n\n/**\n * Utility method for creating V3s\n *\n * Example usage:\n *\n *     V(1, 2, 3)\n *     V([1, 2, 3])\n *     V({ x: 1, y: 2, z: 3 })\n *     V(1, 2) * assumes z=0\n *     V([1, 2]) // assumes z=0\n *\n */\nexport function V(x: number, y: number, z?: number): V3\nexport function V(arr: [number, number, number] | [number, number]): V3\nexport function V(obj: { x: number; y: number; z?: number }): V3\nexport function V(a: any, b?: any, c?: any): V3 {\n\tif (arguments.length == 3) {\n\t\treturn new V3(parseFloat(a), parseFloat(b), parseFloat(c))\n\t} else if (arguments.length == 2) {\n\t\treturn new V3(parseFloat(a), parseFloat(b), 0)\n\t} else if (arguments.length == 1) {\n\t\tif (typeof a == 'object') {\n\t\t\tif (a instanceof V3) {\n\t\t\t\t// immutable, so\n\t\t\t\treturn a\n\t\t\t} else if (a instanceof Array || a instanceof Float32Array || a instanceof Float64Array) {\n\t\t\t\tif (2 == a.length) {\n\t\t\t\t\treturn new V3(parseFloat(a[0]), parseFloat(a[1]), 0)\n\t\t\t\t} else if (3 == a.length) {\n\t\t\t\t\treturn new V3(parseFloat(a[0]), parseFloat(a[1]), parseFloat(a[2]))\n\t\t\t\t}\n\t\t\t} else if ('x' in a && 'y' in a) {\n\t\t\t\treturn new V3(parseFloat(a.x), parseFloat(a.y), 'z' in a ? parseFloat(a.z) : 0)\n\t\t\t}\n\t\t}\n\t}\n\tthrow new Error('invalid arguments' + arguments)\n}\n","import { M4 } from './M4'\nimport { callsce, raddd } from './NLA'\nimport { V3 } from './V3'\n\nexport const P3YZ = { normal1: V3.X, w: 0 }\nexport const P3ZX = { normal1: V3.Y, w: 0 }\nexport const P3XY = { normal1: V3.Z, w: 0 }\n\nexport abstract class Transformable {\n\tmirror(plane: { normal1: V3; w: number }): this {\n\t\treturn this.transform(M4.mirror(plane))\n\t}\n\n\tmirroredX(): this {\n\t\treturn this.mirror(P3YZ)\n\t}\n\n\tmirrorY(): this {\n\t\treturn this.mirror(P3ZX)\n\t}\n\n\tmirrorZ(): this {\n\t\treturn this.mirror(P3XY)\n\t}\n\n\tproject(plane: { normal1: V3; w: number }): this {\n\t\treturn this.transform(M4.project(plane))\n\t}\n\n\tprojectXY(): this {\n\t\treturn this.transform(M4.project(P3XY))\n\t}\n\n\tprojectYZ(): this {\n\t\treturn this.transform(M4.project(P3YZ))\n\t}\n\n\tprojectZX(): this {\n\t\treturn this.transform(M4.project(P3ZX))\n\t}\n\n\ttranslate(x: number, y?: number, z?: number): this\n\ttranslate(v: V3): this\n\ttranslate(...args: any[]): this {\n\t\treturn this.transform(M4.translate.apply(undefined, args), callsce.call(undefined, '.translate', ...args))\n\t}\n\n\tscale(x: number, y?: number, z?: number): this\n\tscale(f: V3): this\n\tscale(...args: any[]): this {\n\t\treturn this.transform(M4.scale.apply(undefined, args), callsce.call(undefined, '.scale', ...args))\n\t}\n\n\trotateX(radians: raddd): this {\n\t\treturn this.transform(M4.rotateX(radians), `.rotateX(${radians})`)\n\t}\n\n\trotateY(radians: raddd): this {\n\t\treturn this.transform(M4.rotateY(radians), `.rotateY(${radians})`)\n\t}\n\n\trotateZ(radians: raddd): this {\n\t\treturn this.transform(M4.rotateZ(radians), `.rotateZ(${radians})`)\n\t}\n\n\trotate(rotationCenter: V3, rotationAxis: V3, radians: raddd): this {\n\t\treturn this.transform(\n\t\t\tM4.rotateLine(rotationCenter, rotationAxis, radians),\n\t\t\tcallsce('.rotate', rotationCenter, rotationAxis, radians),\n\t\t)\n\t}\n\n\trotateAB(from: V3, to: V3): this {\n\t\treturn this.transform(M4.rotateAB(from, to), callsce('.rotateAB', from, to))\n\t}\n\n\teulerZXZ(alpha: raddd, beta: raddd, gamma: raddd): this {\n\t\tthrow new Error()\n\t\t//return this.transform(M4.eulerZXZ(alpha, beta, gamma))\n\t}\n\n\tshearX(y: number, z: number): this {\n\t\t// prettier-ignore\n\t\treturn this.transform(new M4([\n\t\t\t1, y, z, 0,\n\t\t\t0, 1, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1]))\n\t}\n\n\tfoo(): this {\n\t\treturn this.transform(M4.FOO)\n\t}\n\n\tbar(): this {\n\t\treturn this.transform(M4.BAR)\n\t}\n\n\tabstract transform(m4: M4, desc?: string): this\n\n\tvisit<R>(visitor: { [name: string]: (this: Transformable) => R }): R\n\tvisit<R, A>(visitor: { [name: string]: (this: Transformable, a: A) => R }, a: A): R\n\tvisit<R, A, B>(visitor: { [name: string]: (this: Transformable, a: A, b: B) => R }, a: A, b: B): R\n\tvisit<R, A, B, C>(visitor: { [name: string]: (this: Transformable, a: A, b: B, c: C) => R }, a: A, b: B, c: C): R\n\tvisit<R, A, B, C, D>(\n\t\tvisitor: { [name: string]: (this: Transformable, a: A, b: B, c: C, d: D) => R },\n\t\ta: A,\n\t\tb: B,\n\t\tc: C,\n\t\td: D,\n\t): R\n\tvisit(visitor: { [name: string]: (this: Transformable, ...args: any[]) => any }, ...args: any[]) {\n\t\tlet proto = Object.getPrototypeOf(this)\n\t\t// walk up the prototype chain until we find a defined function in o\n\t\twhile (!visitor.hasOwnProperty(proto.constructor.name) && proto !== Transformable.prototype) {\n\t\t\tproto = Object.getPrototypeOf(proto)\n\t\t}\n\t\tif (visitor.hasOwnProperty(proto.constructor.name)) {\n\t\t\treturn visitor[proto.constructor.name].apply(this, args)\n\t\t} else {\n\t\t\tthrow new Error('No implementation for ' + this.constructor.name)\n\t\t}\n\t}\n}\n","import { JavaMap } from 'javasetmap.ts'\n\nimport { Matrix } from './Matrix'\nimport {\n\taddOwnProperties,\n\tarrayFromFunction,\n\tassert,\n\tassertf,\n\tassertInst,\n\tassertNumbers,\n\tassertVectors,\n\tcallsce,\n\tDEG,\n\teq,\n\teq0,\n\tint,\n\tNLA_PRECISION,\n\traddd,\n\tsolveCubicReal2,\n} from './NLA'\nimport { Transformable } from './Transformable'\nimport { V3 } from './V3'\nimport { VV } from './Vector'\n\nconst { PI, abs } = Math\n\nexport class M4 extends Matrix {\n\t/**\n\t * A simple (consists of integers), regular, non-orthogonal matrix, useful mainly for testing.\n\t * M4.BAR = M4.FOO.inverse()\n\t */\n\t// prettier-ignore\n\tstatic readonly FOO = new M4(\n\t\t0, 1, 1, 2,\n\t\t0.3, 0.4, 0.8, 13,\n\t\t2.1, 3.4, 5.5, 8.9,\n\t\t0, 0, 0, 1)\n\tstatic readonly BAR = M4.FOO.inversed()\n\tstatic readonly IDENTITY = M4.identity()\n\tstatic readonly YZX = M4.forSys(V3.Y, V3.Z, V3.X)\n\tstatic readonly ZXY = M4.forSys(V3.Z, V3.X, V3.Y)\n\t// prettier-ignore\n\tstatic IDENTITY3 = new M4(\n\t\t1, 0, 0, 0,\n\t\t0, 1, 0, 0,\n\t\t0, 0, 1, 0,\n\t\t0, 0, 0, 0,\n\t)\n\tstatic readonly temp0 = new M4()\n\tstatic readonly temp1 = new M4()\n\tstatic readonly temp2 = new M4()\n\treadonly m: Float64Array\n\n\t/**\n\t * Takes 16 arguments in row-major order, which can be passed individually, as a list, or even as\n\t * four lists, one for each row. If the arguments are omitted then the identity matrix is constructed instead.\n\t */\n\tconstructor(...var_args: (number | number[])[]) {\n\t\tlet m\n\t\tif (0 == arguments.length) {\n\t\t\tm = new Float64Array(16)\n\t\t} else {\n\t\t\tconst flattened = Array.prototype.concat.apply([], arguments)\n\t\t\tassert(flattened.length == 16, 'flattened.length == 16 ' + flattened.length)\n\t\t\tm = new Float64Array(flattened)\n\t\t}\n\t\tsuper(4, 4, m)\n\t}\n\n\tget X(): V3 {\n\t\treturn this.transformVector(V3.X)\n\t}\n\n\tget Y(): V3 {\n\t\treturn this.transformVector(V3.Y)\n\t}\n\n\tget Z(): V3 {\n\t\treturn this.transformVector(V3.Z)\n\t}\n\n\tget O(): V3 {\n\t\treturn this.getTranslation()\n\t}\n\n\t/**\n\t * Returns the matrix that when multiplied with `matrix` results in the\n\t * identity matrix. You can optionally pass an existing matrix in `result`\n\t * to avoid allocating a new matrix. This implementation is from the Mesa\n\t * OpenGL function `__gluInvertMatrixd()` found in `project.c`.\n\t */\n\tstatic inverse(matrix: M4, result?: M4): M4 {\n\t\treturn matrix.inversed4(result || new M4()) as M4\n\t}\n\n\t/**\n\t * Returns `matrix`, exchanging columns for rows. You can optionally pass an\n\t * existing matrix in `result` to avoid allocating a new matrix.\n\t */\n\tstatic transpose(matrix: M4, result?: M4): M4 {\n\t\tassertInst(M4, matrix)\n\t\t!result || assertInst(M4, result)\n\t\tassert(matrix != result, 'matrix != result')\n\t\tresult = result || new M4()\n\t\tconst m = matrix.m,\n\t\t\tr = result.m\n\t\tr[0] = m[0]\n\t\tr[1] = m[4]\n\t\tr[2] = m[8]\n\t\tr[3] = m[12]\n\t\tr[4] = m[1]\n\t\tr[5] = m[5]\n\t\tr[6] = m[9]\n\t\tr[7] = m[13]\n\t\tr[8] = m[2]\n\t\tr[9] = m[6]\n\t\tr[10] = m[10]\n\t\tr[11] = m[14]\n\t\tr[12] = m[3]\n\t\tr[13] = m[7]\n\t\tr[14] = m[11]\n\t\tr[15] = m[15]\n\t\treturn result\n\t}\n\n\t/**\n\t * Returns the concatenation of the transforms for `left` and `right`.\n\t */\n\tstatic multiply(left: M4, right: M4, result?: M4): M4 {\n\t\tassertInst(M4, left, right)\n\t\t!result || assertInst(M4, result)\n\t\tassert(left != result, 'left != result')\n\t\tassert(right != result, 'right != result')\n\t\tresult = result || new M4()\n\t\tconst a = left.m,\n\t\t\tb = right.m,\n\t\t\tr = result.m\n\n\t\tr[0] = a[0] * b[0] + a[1] * b[4] + (a[2] * b[8] + a[3] * b[12])\n\t\tr[1] = a[0] * b[1] + a[1] * b[5] + (a[2] * b[9] + a[3] * b[13])\n\t\tr[2] = a[0] * b[2] + a[1] * b[6] + (a[2] * b[10] + a[3] * b[14])\n\t\tr[3] = a[0] * b[3] + a[1] * b[7] + (a[2] * b[11] + a[3] * b[15])\n\n\t\tr[4] = a[4] * b[0] + a[5] * b[4] + (a[6] * b[8] + a[7] * b[12])\n\t\tr[5] = a[4] * b[1] + a[5] * b[5] + (a[6] * b[9] + a[7] * b[13])\n\t\tr[6] = a[4] * b[2] + a[5] * b[6] + (a[6] * b[10] + a[7] * b[14])\n\t\tr[7] = a[4] * b[3] + a[5] * b[7] + (a[6] * b[11] + a[7] * b[15])\n\n\t\tr[8] = a[8] * b[0] + a[9] * b[4] + (a[10] * b[8] + a[11] * b[12])\n\t\tr[9] = a[8] * b[1] + a[9] * b[5] + (a[10] * b[9] + a[11] * b[13])\n\t\tr[10] = a[8] * b[2] + a[9] * b[6] + (a[10] * b[10] + a[11] * b[14])\n\t\tr[11] = a[8] * b[3] + a[9] * b[7] + (a[10] * b[11] + a[11] * b[15])\n\n\t\tr[12] = a[12] * b[0] + a[13] * b[4] + (a[14] * b[8] + a[15] * b[12])\n\t\tr[13] = a[12] * b[1] + a[13] * b[5] + (a[14] * b[9] + a[15] * b[13])\n\t\tr[14] = a[12] * b[2] + a[13] * b[6] + (a[14] * b[10] + a[15] * b[14])\n\t\tr[15] = a[12] * b[3] + a[13] * b[7] + (a[14] * b[11] + a[15] * b[15])\n\n\t\treturn result\n\t}\n\n\tstatic forSys(e0: V3, e1: V3, e2: V3 = e0.cross(e1), origin: V3 = V3.O): M4 {\n\t\tassertVectors(e0, e1, e2, origin)\n\t\t// prettier-ignore\n\t\treturn new M4(\n\t\t\te0.x, e1.x, e2.x, origin.x,\n\t\t\te0.y, e1.y, e2.y, origin.y,\n\t\t\te0.z, e1.z, e2.z, origin.z,\n\t\t\t0, 0, 0, 1)\n\t}\n\n\tstatic forRows(n0: V3, n1: V3, n2: V3, n3: V3 = V3.O): M4 {\n\t\tassertVectors(n0, n1, n2, n3)\n\t\t// prettier-ignore\n\t\treturn new M4(\n\t\t\tn0.x, n0.y, n0.z, 0,\n\t\t\tn1.x, n1.y, n1.z, 0,\n\t\t\tn2.x, n2.y, n2.z, 0,\n\t\t\tn3.x, n3.y, n3.z, 1)\n\t}\n\n\t/**\n\t * Returns an identity matrix. You can optionally pass an existing matrix in `result` to avoid allocating a new\n\t * matrix. This emulates the OpenGL function `glLoadIdentity()`\n\t *\n\t * Unless initializing a matrix to be modified, use M4.IDENTITY\n\t */\n\tstatic identity(result: M4 = new M4()): M4 {\n\t\tassertInst(M4, result)\n\t\tconst m = result.m\n\t\tm[0] = m[5] = m[10] = m[15] = 1\n\t\tm[1] = m[2] = m[3] = m[4] = m[6] = m[7] = m[8] = m[9] = m[11] = m[12] = m[13] = m[14] = 0\n\n\t\treturn result\n\t}\n\n\t/**\n\t * Creates a new M4 initialized by a user defined callback function\n\t *\n\t * @param f signature: (elRow, elCol, elIndex) =>\n\t *     el, where elIndex is the row-major index, i.e. eLindex == elRow * 4 + elCol\n\t * @param result\n\t */\n\tstatic fromFunction4(f: (elRow: number, elCol: number, elIndex: number) => number, result: M4 = new M4()): M4 {\n\t\tassert(typeof f == 'function')\n\t\tassertInst(M4, result)\n\t\tconst m = result.m\n\t\tlet i = 16\n\t\twhile (i--) {\n\t\t\tm[i] = f(Math.floor(i / 4), i % 4, i)\n\t\t}\n\t\treturn result\n\t}\n\n\t/**\n\t Returns a perspective transform matrix, which makes far away objects appear smaller than nearby objects. The\n\t `aspect` argument should be the width divided by the height of your viewport and `fov` is the top-to-bottom angle\n\t of the field of view in degrees. You can optionally pass an existing matrix in `result` to avoid allocating a new\n\t matrix. This emulates the OpenGL function `gluPerspective()`.\n\t * {@see perspectiveRad}\n\t * perspectiveRad\n\t * @param fovDegrees in degrees\n\t * @param aspect aspect ratio = width/height of viewport\n\t */\n\tstatic perspective(fovDegrees: number, aspect: number, near: number, far: number, result: M4 = new M4()): M4 {\n\t\treturn M4.perspectiveRad(fovDegrees * DEG, aspect, near, far, result)\n\t}\n\n\tstatic perspectiveRad(fov: raddd, aspect: number, near: number, far: number, result: M4 = new M4()): M4 {\n\t\tassertInst(M4, result)\n\t\tassertNumbers(fov, aspect, near, far)\n\t\tconst y = Math.tan(fov / 2) * near\n\t\tconst x = y * aspect\n\t\treturn M4.frustum(-x, x, -y, y, near, far, result)\n\t}\n\n\t// the OpenGL function `glFrustum()`.\n\tstatic frustum(\n\t\tleft: number,\n\t\tright: number,\n\t\tbottom: number,\n\t\ttop: number,\n\t\tnear: number,\n\t\tfar: number,\n\t\tresult?: M4,\n\t): M4 {\n\t\tassertNumbers(left, right, bottom, top, near, far)\n\t\tassert(0 < near, '0 < near')\n\t\tassert(near < far, 'near < far')\n\t\t!result || assertInst(M4, result)\n\t\tresult = result || new M4()\n\t\tconst m = result.m\n\n\t\tm[0] = (2 * near) / (right - left)\n\t\tm[1] = 0\n\t\tm[2] = (right + left) / (right - left)\n\t\tm[3] = 0\n\n\t\tm[4] = 0\n\t\tm[5] = (2 * near) / (top - bottom)\n\t\tm[6] = (top + bottom) / (top - bottom)\n\t\tm[7] = 0\n\n\t\tm[8] = 0\n\t\tm[9] = 0\n\t\tm[10] = -(far + near) / (far - near)\n\t\tm[11] = (-2 * far * near) / (far - near)\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = -1\n\t\tm[15] = 0\n\n\t\treturn result\n\t}\n\n\t/**\n\t * Returns a new M4 representing the a projection through/towards a point onto a plane.\n\t */\n\tstatic projectPlanePoint(p: V3, plane: { normal1: V3; w: number }, result: M4 = new M4()): M4 {\n\t\tassertVectors(p, plane.normal1)\n\t\tassertInst(M4, result)\n\t\tconst m = result.m\n\t\tconst n = plane.normal1,\n\t\t\tw = plane.w\n\t\tconst np = n.dot(p)\n\n\t\tm[0] = p.x * n.x + w - np\n\t\tm[1] = p.x * n.y\n\t\tm[2] = p.x * n.z\n\t\tm[3] = -w * p.x\n\n\t\tm[4] = p.y * n.x\n\t\tm[5] = p.y * n.y + w - np\n\t\tm[6] = p.y * n.z\n\t\tm[7] = -w * p.y\n\n\t\tm[8] = p.z * n.x\n\t\tm[9] = p.z * n.y\n\t\tm[10] = p.z * n.z + w - np\n\t\tm[11] = -w * p.z\n\n\t\tm[12] = n.x\n\t\tm[13] = n.y\n\t\tm[14] = n.z\n\t\tm[15] = -np\n\n\t\treturn result\n\t}\n\n\t/**\n\t * Orthographic/orthogonal projection. Transforms the cuboid with the dimensions X: [left right] Y: [bottom, top]\n\t * Z: [near far] to the cuboid X: [-1, 1] Y [-1, 1] Z [-1, 1]\n\t */\n\tstatic ortho(\n\t\tleft: number,\n\t\tright: number,\n\t\tbottom: number,\n\t\ttop: number,\n\t\tnear: number,\n\t\tfar: number,\n\t\tresult: M4 = new M4(),\n\t): M4 {\n\t\tassertNumbers(left, right, bottom, top, near, far)\n\t\tassertInst(M4, result)\n\t\tconst m = result.m\n\n\t\tm[0] = 2 / (right - left)\n\t\tm[1] = 0\n\t\tm[2] = 0\n\t\tm[3] = -(right + left) / (right - left)\n\n\t\tm[4] = 0\n\t\tm[5] = 2 / (top - bottom)\n\t\tm[6] = 0\n\t\tm[7] = -(top + bottom) / (top - bottom)\n\n\t\tm[8] = 0\n\t\tm[9] = 0\n\t\tm[10] = -2 / (far - near)\n\t\tm[11] = -(far + near) / (far - near)\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\n\t\treturn result\n\t}\n\n\t/**\n\t * This emulates the OpenGL function `glScale()`. You can optionally pass an existing matrix in `result` to avoid\n\t * allocating a new matrix.\n\t */\n\tstatic scale(x: number, y: number, z?: number, result?: M4): M4\n\n\tstatic scale(scale: number, result?: M4): M4\n\n\tstatic scale(v: V3, result?: M4): M4\n\n\tstatic scale(...args: any[]): M4 {\n\t\tlet x, y, z, result\n\t\tif (args[0] instanceof V3) {\n\t\t\tassert(args.length <= 2)\n\t\t\t;({ x, y, z } = args[0])\n\t\t\tresult = args[1]\n\t\t} else if ('number' != typeof args[1]) {\n\t\t\tx = y = z = args[0]\n\t\t\tresult = args[1]\n\t\t} else {\n\t\t\tassert(args.length <= 4)\n\t\t\tx = args[0]\n\t\t\ty = args[1]\n\t\t\tz = undefined != args[2] ? args[2] : 1\n\t\t\tresult = args[3]\n\t\t}\n\t\tundefined == result && (result = new M4())\n\t\tassertInst(M4, result)\n\t\tassertNumbers(x, y, z)\n\n\t\tconst m = result.m\n\n\t\tm[0] = x\n\t\tm[1] = 0\n\t\tm[2] = 0\n\t\tm[3] = 0\n\n\t\tm[4] = 0\n\t\tm[5] = y\n\t\tm[6] = 0\n\t\tm[7] = 0\n\n\t\tm[8] = 0\n\t\tm[9] = 0\n\t\tm[10] = z\n\t\tm[11] = 0\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\n\t\treturn result\n\t}\n\n\t/**\n\t * This emulates the OpenGL function `glTranslate()`. You can optionally pass\n\t * an existing matrix in `result` to avoid allocating a new matrix.\n\t */\n\tstatic translate(x: number, y?: number, z?: number, result?: M4): M4\n\n\tstatic translate(v: V3, result?: M4): M4\n\n\tstatic translate(...args: any[]): M4 {\n\t\tlet x, y, z, result\n\t\tif (args[0] instanceof V3) {\n\t\t\tassert(args.length <= 2)\n\t\t\t;({ x, y, z } = args[0])\n\t\t\tresult = args[1]\n\t\t} else {\n\t\t\tassert(args.length <= 4)\n\t\t\tx = args[0]\n\t\t\ty = undefined != args[1] ? args[1] : 0\n\t\t\tz = undefined != args[2] ? args[2] : 0\n\t\t\tresult = args[3]\n\t\t}\n\t\tundefined == result && (result = new M4())\n\t\tassertInst(M4, result)\n\t\tassertNumbers(x, y, z)\n\n\t\tconst m = result.m\n\n\t\tm[0] = 1\n\t\tm[1] = 0\n\t\tm[2] = 0\n\t\tm[3] = x\n\n\t\tm[4] = 0\n\t\tm[5] = 1\n\t\tm[6] = 0\n\t\tm[7] = y\n\n\t\tm[8] = 0\n\t\tm[9] = 0\n\t\tm[10] = 1\n\t\tm[11] = z\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\n\t\treturn result\n\t}\n\n\t/**\n\t * Returns a matrix that rotates by `a` degrees around the vector (x, y, z). You can optionally pass an existing\n\t * matrix in `result` to avoid allocating a new matrix. This emulates the OpenGL function `glRotate()`.\n\t */\n\t//static rotation(radians: raddd, x: number, y: number, z: number, result?: M4): M4\n\tstatic rotate(radians: raddd, v: { x: number; y: number; z: number }, result?: M4): M4 {\n\t\tundefined == result && (result = new M4())\n\t\tassertInst(M4, result)\n\t\tlet { x, y, z } = v\n\t\tassert(!new V3(x, y, z).likeO(), '!V(x, y, z).likeO()')\n\t\tconst m = result.m\n\n\t\tconst d = Math.sqrt(x * x + y * y + z * z)\n\t\tx /= d\n\t\ty /= d\n\t\tz /= d\n\t\tconst cos = Math.cos(radians),\n\t\t\tsin = Math.sin(radians),\n\t\t\tt = 1 - cos\n\n\t\tm[0] = x * x * t + cos\n\t\tm[1] = x * y * t - z * sin\n\t\tm[2] = x * z * t + y * sin\n\t\tm[3] = 0\n\n\t\tm[4] = y * x * t + z * sin\n\t\tm[5] = y * y * t + cos\n\t\tm[6] = y * z * t - x * sin\n\t\tm[7] = 0\n\n\t\tm[8] = z * x * t - y * sin\n\t\tm[9] = z * y * t + x * sin\n\t\tm[10] = z * z * t + cos\n\t\tm[11] = 0\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\n\t\treturn result\n\t}\n\n\tstatic readonly NAMEMAP = new JavaMap<M4, string>()\n\t\t.set(M4.IDENTITY3, 'M4.IDENTITY3')\n\t\t.set(M4.FOO, 'M4.FOO')\n\t\t.set(M4.BAR, 'M4.BAR')\n\t\t.set(M4.IDENTITY, 'M4.IDENTITY')\n\t\t.set(M4.ZXY, 'M4.ZXY')\n\t\t.set(M4.YZX, 'M4.YZX')\n\n\t/**\n\t * Returns a matrix that puts the camera at the eye point `ex, ey, ez` looking\n\t * toward the center point `cx, cy, cz` with an up direction of `ux, uy, uz`.\n\t * You can optionally pass an existing matrix in `result` to avoid allocating\n\t * a new matrix. This emulates the OpenGL function `gluLookAt()`.\n\t */\n\tstatic lookAt(eye: V3, focus: V3, up: V3, result?: M4): M4 {\n\t\tassert(3 == arguments.length || 4 == arguments.length, '3 == arguments.length || 4 == arguments.length')\n\t\tassertVectors(eye, focus, up)\n\t\t!result || assertInst(M4, result)\n\n\t\tresult = result || new M4()\n\t\tconst m = result.m\n\n\t\tconst f = eye.minus(focus).unit()\n\t\tconst s = up.cross(f).unit()\n\t\tconst t = f.cross(s).unit()\n\n\t\tm[0] = s.x\n\t\tm[1] = s.y\n\t\tm[2] = s.z\n\t\tm[3] = -s.dot(eye)\n\n\t\tm[4] = t.x\n\t\tm[5] = t.y\n\t\tm[6] = t.z\n\t\tm[7] = -t.dot(eye)\n\n\t\tm[8] = f.x\n\t\tm[9] = f.y\n\t\tm[10] = f.z\n\t\tm[11] = -f.dot(eye)\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\n\t\treturn result\n\t}\n\n\t/**\n\t * Create a rotation matrix for rotating around the X axis\n\t */\n\tstatic rotateX(radians: raddd): M4 {\n\t\tassertNumbers(radians)\n\t\tconst sin = Math.sin(radians),\n\t\t\tcos = Math.cos(radians)\n\t\tconst els = [1, 0, 0, 0, 0, cos, -sin, 0, 0, sin, cos, 0, 0, 0, 0, 1]\n\t\treturn new M4(els)\n\t}\n\n\t/**\n\t * Create a rotation matrix for rotating around the Y axis\n\t */\n\tstatic rotateY(radians: raddd): M4 {\n\t\tconst sin = Math.sin(radians),\n\t\t\tcos = Math.cos(radians)\n\t\tconst els = [cos, 0, sin, 0, 0, 1, 0, 0, -sin, 0, cos, 0, 0, 0, 0, 1]\n\t\treturn new M4(els)\n\t}\n\n\t/**\n\t * Create a rotation matrix for rotating around the Z axis\n\t */\n\tstatic rotateZ(radians: raddd): M4 {\n\t\tconst sin = Math.sin(radians),\n\t\t\tcos = Math.cos(radians)\n\t\tconst els = [cos, -sin, 0, 0, sin, cos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\n\t\treturn new M4(els)\n\t}\n\n\t/**\n\t * New rotation matrix such that result.transformVector(a).isParallelTo(b) through smallest rotation.\n\t * Performs no scaling.\n\t */\n\tstatic rotateAB(a: V3, b: V3, result?: M4): M4 {\n\t\t// see http://inside.mines.edu/fs_home/gmurray/ArbitraryAxisRotation/\n\t\tassertVectors(a, b)\n\t\t!result || assertInst(M4, result)\n\t\tconst rotationAxis = a.cross(b),\n\t\t\trotationAxisLength = rotationAxis.length()\n\t\tif (eq0(rotationAxisLength)) {\n\t\t\treturn M4.identity(result)\n\t\t}\n\t\tconst radians = Math.atan2(rotationAxisLength, a.dot(b))\n\t\treturn M4.rotateLine(V3.O, rotationAxis, radians, result)\n\t}\n\n\t/**\n\t * Matrix for rotation about arbitrary line defined by an anchor point and direction.\n\t * rotationAxis does not need to be unit\n\t */\n\tstatic rotateLine(rotationAnchor: V3, rotationAxis: V3, radians: raddd, result?: M4): M4 {\n\t\t// see http://inside.mines.edu/fs_home/gmurray/ArbitraryAxisRotation/\n\t\tassertVectors(rotationAnchor, rotationAxis)\n\t\tassertNumbers(radians)\n\t\t!result || assertInst(M4, result)\n\t\tresult = result || new M4()\n\t\trotationAxis = rotationAxis.unit()\n\n\t\tconst ax = rotationAnchor.x,\n\t\t\tay = rotationAnchor.y,\n\t\t\taz = rotationAnchor.z,\n\t\t\tdx = rotationAxis.x,\n\t\t\tdy = rotationAxis.y,\n\t\t\tdz = rotationAxis.z\n\t\tconst m = result.m,\n\t\t\tcos = Math.cos(radians),\n\t\t\tsin = Math.sin(radians)\n\n\t\tm[0] = dx * dx + (dy * dy + dz * dz) * cos\n\t\tm[1] = dx * dy * (1 - cos) - dz * sin\n\t\tm[2] = dx * dz * (1 - cos) + dy * sin\n\t\tm[3] = (ax * (dy * dy + dz * dz) - dx * (ay * dy + az * dz)) * (1 - cos) + (ay * dz - az * dy) * sin\n\n\t\tm[4] = dx * dy * (1 - cos) + dz * sin\n\t\tm[5] = dy * dy + (dx * dx + dz * dz) * cos\n\t\tm[6] = dy * dz * (1 - cos) - dx * sin\n\t\tm[7] = (ay * (dx * dx + dz * dz) - dy * (ax * dx + az * dz)) * (1 - cos) + (az * dx - ax * dz) * sin\n\n\t\tm[8] = dx * dz * (1 - cos) - dy * sin\n\t\tm[9] = dy * dz * (1 - cos) + dx * sin\n\t\tm[10] = dz * dz + (dx * dx + dy * dy) * cos\n\t\tm[11] = (az * (dx * dx + dy * dy) - dz * (ax * dx + ay * dy)) * (1 - cos) + (ax * dy - ay * dx) * sin\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\n\t\treturn result\n\t}\n\n\t/**\n\t * Create an affine matrix for mirroring into an arbitrary plane:\n\t */\n\tstatic mirror(plane: { normal1: V3; w: number }, result: M4 = new M4()): M4 {\n\t\tassertVectors(plane.normal1)\n\t\tassertInst(M4, result)\n\t\tconst [nx, ny, nz] = plane.normal1\n\t\tconst w = plane.w\n\t\tconst m = result.m\n\n\t\tm[0] = 1.0 - 2.0 * nx * nx\n\t\tm[1] = -2.0 * ny * nx\n\t\tm[2] = -2.0 * nz * nx\n\t\tm[3] = 2.0 * nx * w\n\n\t\tm[4] = -2.0 * nx * ny\n\t\tm[5] = 1.0 - 2.0 * ny * ny\n\t\tm[6] = -2.0 * nz * ny\n\t\tm[7] = 2.0 * ny * w\n\n\t\tm[8] = -2.0 * nx * nz\n\t\tm[9] = -2.0 * ny * nz\n\t\tm[10] = 1.0 - 2.0 * nz * nz\n\t\tm[11] = 2.0 * nz * w\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\t\treturn result\n\t}\n\n\tisMirror(precision = NLA_PRECISION) {\n\t\tconst m = this.m\n\t\tconst nx = Math.sqrt((1 - m[0]) / 2)\n\t\tconst ny = Math.sqrt((1 - m[5]) / 2)\n\t\tconst nz = Math.sqrt((1 - m[10]) / 2)\n\n\t\treturn (\n\t\t\teq(m[1], -2.0 * ny * nx, precision) &&\n\t\t\teq(m[2], -2.0 * nz * nx, precision) &&\n\t\t\teq(m[4], -2.0 * nx * ny, precision) &&\n\t\t\teq(m[6], -2.0 * nz * ny, precision) &&\n\t\t\teq(m[8], -2.0 * nx * nz, precision) &&\n\t\t\teq(m[9], -2.0 * ny * nz, precision) &&\n\t\t\teq(m[12], 0, precision) &&\n\t\t\teq(m[13], 0, precision) &&\n\t\t\teq(m[14], 0, precision) &&\n\t\t\teq(m[15], 1, precision) &&\n\t\t\teq(m[3] * ny, m[7] * nx, precision) &&\n\t\t\teq(m[7] * nz, m[11] * ny, precision) &&\n\t\t\teq(m[11] * nx, m[3] * nz, precision)\n\t\t)\n\t}\n\n\t/**\n\t *\n\t * @param plane\n\t * @param dir Projection direction. Optional, if not specified plane normal1 will be used.\n\t * @param result {@see M4}\n\t */\n\tstatic project(plane: { normal1: V3; w: number }, dir: V3 = plane.normal1, result: M4 = new M4()): M4 {\n\t\t// TODO: doc\n\t\t/**\n\t\t * plane.normal1 DOT (p + lambda * dir) = w (1)\n\t\t * extract lambda:\n\t\t * plane.normal1 DOT p + lambda * plane.normal1 DOT dir = w\n\t\t * lambda = (w - plane.normal1 DOT p) / plane.normal1 DOT dir\n\t\t * result = p + lambda * dir\n\t\t * result = p + dir * (w - plane.normal1 DOT p) / plane.normal1 DOT dir\n\t\t * result =  w * dir / (plane.normal1 DOT dir) + p - plane.normal1 DOT p * dir / (plane.normal1 DOT dir) *\n\t\t *\n\n\t\t a + d * (w - n . a) / (nd)\n\t\t a + dw - d * na\n\t\t */\n\t\tassertVectors(dir, plane.normal1)\n\t\tassertInst(M4, result)\n\t\tconst w = plane.w\n\t\tconst m = result.m\n\t\tconst nd = plane.normal1.dot(dir)\n\t\tconst { x: nx, y: ny, z: nz } = plane.normal1\n\t\tconst { x: dx, y: dy, z: dz } = dir.div(nd)\n\t\t/*\n\t\t rejectedFrom: return this.minus(b.times(this.dot(b) / b.dot(b)))\n\t\t return M4.forSys(\n\t\t V3.X.rejectedFrom(plane.normal1),\n\t\t V3.Y.rejectedFrom(plane.normal1),\n\t\t V3.Z.rejectedFrom(plane.normal1),\n\t\t plane.anchor,\n\t\t result\n\t\t )\n\t\t */\n\n\t\tm[0] = 1.0 - nx * dx\n\t\tm[1] = -ny * dx\n\t\tm[2] = -nz * dx\n\t\tm[3] = dx * w\n\n\t\tm[4] = -nx * dy\n\t\tm[5] = 1.0 - ny * dy\n\t\tm[6] = -nz * dy\n\t\tm[7] = dy * w\n\n\t\tm[8] = -nx * dz\n\t\tm[9] = -ny * dz\n\t\tm[10] = 1.0 - nz * dz\n\t\tm[11] = dz * w\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\n\t\treturn result\n\t}\n\n\tstatic lineProjection(line: { anchor: V3; dir1: V3 }, result: M4 = new M4()): M4 {\n\t\tassertVectors(line.anchor, line.dir1)\n\t\tassertInst(M4, result)\n\t\tconst ax = line.anchor.x,\n\t\t\tay = line.anchor.y,\n\t\t\taz = line.anchor.z\n\t\tconst dx = line.dir1.x,\n\t\t\tdy = line.dir1.y,\n\t\t\tdz = line.dir1.z\n\t\tconst m = result.m\n\n\t\t/*\n\t\t projectedOn: return b.times(this.dot(b) / b.dot(b))\n\t\t */\n\n\t\tm[0] = dx * dx\n\t\tm[1] = dx * dy\n\t\tm[2] = dx * dz\n\t\tm[3] = ax\n\n\t\tm[4] = dy * dx\n\t\tm[5] = dy * dy\n\t\tm[6] = dy * dz\n\t\tm[7] = ay\n\n\t\tm[8] = dz * dx\n\t\tm[9] = dz * dy\n\t\tm[10] = dz * dz\n\t\tm[11] = az\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\t\treturn result\n\t}\n\n\tstatic multiplyMultiple(...m4s: M4[]): M4 {\n\t\tif (0 == m4s.length) return M4.identity()\n\t\tlet temp = M4.identity(),\n\t\t\tresult = m4s[0].copy()\n\t\tfor (let i = 1; i < m4s.length; i++) {\n\t\t\tM4.multiply(result, m4s[i], temp)\n\t\t\t;[temp, result] = [result, temp]\n\t\t}\n\t\treturn result\n\t}\n\n\tstatic pointInversion(p: V3, result: M4 = new M4()): M4 {\n\t\tassertVectors(p)\n\t\tassertInst(M4, result)\n\t\tconst m = result.m\n\n\t\tm[0] = -1\n\t\tm[1] = 0\n\t\tm[2] = 0\n\t\tm[3] = 2 * p.x\n\n\t\tm[4] = 0\n\t\tm[5] = -1\n\t\tm[6] = 0\n\t\tm[7] = 2 * p.y\n\n\t\tm[8] = 0\n\t\tm[9] = 0\n\t\tm[10] = -1\n\t\tm[11] = 2 * p.z\n\n\t\tm[12] = 0\n\t\tm[13] = 0\n\t\tm[14] = 0\n\t\tm[15] = 1\n\t\treturn result\n\t}\n\n\t// ### GL.Matrix.frustum(left, right, bottom, top, near, far[, result])\n\t//\n\t// Sets up a viewing frustum, which is shaped like a truncated pyramid with the\n\t// camera where the point of the pyramid would be. You can optionally pass an\n\t// existing matrix in `result` to avoid allocating a new matrix. This emulates\n\n\t/**\n\t * Returns a new M4 which is equal to the inverse of this.\n\t */\n\tinversed(): M4 {\n\t\treturn M4.inverse(this)\n\t}\n\n\t/**\n\t * Matrix trace is defined as the sum of the elements of the main diagonal.\n\t */\n\ttrace(): number {\n\t\treturn this.m[0] + this.m[5] + this.m[10] + this.m[15]\n\t}\n\n\tas3x3(): M4 {\n\t\tconst result = M4.copy(this),\n\t\t\tm = result.m\n\n\t\tm[3] = m[7] = m[11] = m[12] = m[13] = m[14] = 0\n\t\tm[15] = 1\n\t\treturn result\n\t}\n\n\ttransform(m4: M4): this {\n\t\treturn m4.times(this) as this\n\t}\n\n\trealEigenValues3(): number[] {\n\t\tconst m = this.m\n\t\tassert(0 == m[12] && 0 == m[13] && 0 == m[14])\n\t\t// determinant of (this - λI):\n\t\t// | a-λ  b   c  |\n\t\t// |  d  e-λ  f  | = -λ^3 + λ^2 (a+e+i) + λ (-a e-a i+b d+c g-e i+f h) + a(ei - fh) - b(di - fg) + c(dh - eg)\n\t\t// |  g   h  i-λ |\n\n\t\tconst [a, b, c, , d, e, f, , g, h, i] = m\n\t\t// det(this - λI) = -λ^3 +λ^2 (a+e+i) + λ (-a e-a i-b d+c g-e i+f h)+ (a e i-a f h-b d i+b f g+c d h-c e g)\n\t\tconst s = -1\n\t\tconst t = a + e + i // equivalent to trace of matrix\n\t\tconst u = -a * e - a * i + b * d + c * g - e * i + f * h // equivalent to 1/2 (trace(this²) - trace²(A))\n\t\tconst w = a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g) // equivalent to matrix determinant\n\n\t\tconsole.log(s, t, u, w)\n\t\treturn solveCubicReal2(s, t, u, w)\n\t}\n\n\trealEigenVectors3(): V3[] {\n\t\tconst eigenValues = this.realEigenValues3()\n\t\tconst this3x3 = this.times(M4.IDENTITY3)\n\t\tconsole.log(this.toString())\n\t\tconsole.log(this3x3.toString())\n\t\tlet mats = eigenValues.map(ev => M4.IDENTITY3.scale(-ev).plus(this3x3))\n\t\tconsole.log(mats.map(m => m.determinant3()))\n\t\tconsole.log(mats.map(m => '' + m.toString(v => '' + v)).join('\\n\\n'))\n\t\tconsole.log(mats.map(m => '' + m.gauss().U.toString(v => '' + v)).join('\\n\\n'))\n\t\tconsole.log('mats.map(m=>m.rank())', mats.map(m => m.rank()))\n\t\tif (1 == eigenValues.length) {\n\t\t\tconsole.log(mats[0].toString())\n\t\t\tassertf(() => 0 == mats[0].rank())\n\t\t\t// col vectors\n\t\t\treturn arrayFromFunction(3, col => new V3(this.m[col], this.m[4 + col], this.m[8 + col]))\n\t\t}\n\t\tif (2 == eigenValues.length) {\n\t\t\t// one matrix should have rank 1, the other rank 2\n\t\t\tif (1 == mats[0].rank()) {\n\t\t\t\tmats = [mats[1], mats[0]]\n\t\t\t}\n\t\t\tassertf(() => 2 == mats[0].rank())\n\t\t\tassertf(() => 1 == mats[1].rank())\n\n\t\t\t// mat[0] has rank 2, mat[1] has rank 1\n\t\t\tconst gauss0 = mats[0].gauss().U\n\t\t\tconst eigenVector0 = gauss0\n\t\t\t\t.row(0)\n\t\t\t\t.cross(gauss0.row(1))\n\t\t\t\t.V3()\n\t\t\t\t.unit()\n\n\t\t\tconst planeNormal = mats[1]\n\t\t\t\t.gauss()\n\t\t\t\t.U.row(0)\n\t\t\t\t.V3()\n\t\t\tconst eigenVector1 = planeNormal.getPerpendicular().unit()\n\t\t\tconst eigenVector2 = eigenVector0.cross(eigenVector1).rejectedFrom(planeNormal)\n\n\t\t\treturn [eigenVector0, eigenVector1, eigenVector2]\n\t\t}\n\t\tif (3 == eigenValues.length) {\n\t\t\tmats.forEach((mat, i) => assert(2 == mat.rank(), i + ': ' + mat.rank()))\n\t\t\t// the (A - lambda I) matrices map to a plane. This means, that there is an entire line in R³ which maps to\n\t\t\t// the point V3.O\n\t\t\treturn mats.map(mat => {\n\t\t\t\tconst gauss = mat.gauss().U\n\t\t\t\treturn gauss\n\t\t\t\t\t.row(0)\n\t\t\t\t\t.cross(gauss.row(1))\n\t\t\t\t\t.V3()\n\t\t\t\t\t.unit()\n\t\t\t})\n\t\t}\n\t\tthrow new Error('there cannot be more than 3 eigen values')\n\t}\n\n\t/**\n\t * U * SIGMA * VSTAR = this\n\t * U and VSTAR are orthogonal matrices\n\t * SIGMA is a diagonal matrix\n\t */\n\tsvd3(): { U: M4; SIGMA: M4; VSTAR: M4 } {\n\t\tfunction matrixForCS(i: int, k: int, c: number, s: number) {\n\t\t\tconst m = M4.identity()\n\t\t\tm.setEl(i, i, c)\n\t\t\tm.setEl(k, k, c)\n\t\t\tm.setEl(i, k, s)\n\t\t\tm.setEl(k, i, -s)\n\t\t\treturn m\n\t\t}\n\n\t\tconst A = this.as3x3()\n\t\tlet S = A.transposed().times(A),\n\t\t\tV = M4.identity()\n\t\tconsole.log(S.str)\n\t\tfor (let it = 0; it < 16; it++) {\n\t\t\tconsole.log('blahg\\n', V.times(S).times(V.transposed()).str)\n\t\t\tassert(\n\t\t\t\tV.times(S)\n\t\t\t\t\t.times(V.transposed())\n\t\t\t\t\t.likeM4(A.transposed().times(A)),\n\t\t\t\tV.times(S).times(V.transposed()).str,\n\t\t\t\tA.transposed().times(A).str,\n\t\t\t)\n\t\t\tlet maxOffDiagonal = 0,\n\t\t\t\tmaxOffDiagonalIndex = 1,\n\t\t\t\tj = 10\n\t\t\twhile (j--) {\n\t\t\t\tconst val = Math.abs(S.m[j])\n\t\t\t\tif (j % 4 != Math.floor(j / 4) && val > maxOffDiagonal) {\n\t\t\t\t\tmaxOffDiagonal = val\n\t\t\t\t\tmaxOffDiagonalIndex = j\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst i = Math.floor(maxOffDiagonalIndex / 4),\n\t\t\t\tk = maxOffDiagonalIndex % 4\n\t\t\tconst a_ii = S.m[5 * i],\n\t\t\t\ta_kk = S.m[5 * k],\n\t\t\t\ta_ik = S.m[maxOffDiagonalIndex]\n\t\t\tconst phi = a_ii === a_kk ? PI / 4 : Math.atan((2 * a_ik) / (a_ii - a_kk)) / 2\n\t\t\tconsole.log(maxOffDiagonalIndex, i, k, 'phi', phi)\n\t\t\tconst cos = Math.cos(phi),\n\t\t\t\tsin = Math.sin(phi)\n\t\t\tconst givensRotation = matrixForCS(i, k, cos, -sin)\n\t\t\tassert(\n\t\t\t\tgivensRotation\n\t\t\t\t\t.transposed()\n\t\t\t\t\t.times(givensRotation)\n\t\t\t\t\t.likeIdentity(),\n\t\t\t)\n\t\t\tconsole.log(givensRotation.str)\n\t\t\tV = V.times(givensRotation)\n\t\t\tS = M4.multiplyMultiple(givensRotation.transposed(), S, givensRotation)\n\t\t\tconsole.log(S.str)\n\t\t}\n\n\t\tconst sigma = S.map((el, elIndex) => (elIndex % 5 == 0 ? Math.sqrt(el) : 0))\n\t\treturn {\n\t\t\tU: M4.multiplyMultiple(A, V, sigma.map((el, elIndex) => (elIndex % 5 == 0 ? 1 / el : 0))),\n\t\t\tSIGMA: sigma,\n\t\t\tVSTAR: V.transposed(),\n\t\t}\n\t}\n\n\tmap(fn: (el: number, elIndex: number, array: Float64Array) => number): M4 {\n\t\treturn M4.fromFunction4((x, y, i) => fn(this.m[i], i, this.m))\n\t}\n\n\tlikeM4(m4: M4): boolean {\n\t\tassertInst(M4, m4)\n\t\treturn this.m.every((el, index) => eq(el, m4.m[index]))\n\t}\n\n\t/**\n\t * Returns a new M4 equal to the transpose of this.\n\t */\n\ttransposed(): M4 {\n\t\treturn M4.transpose(this)\n\t}\n\n\t/**\n\t * Returns a new M4 which equal to (this * matrix) (in that order)\n\t */\n\ttimes(matrix: M4): M4 {\n\t\treturn M4.multiply(this, matrix)\n\t}\n\n\t/**\n\t * In a perspective projection, parallel lines meet in a vanishing point.\n\t *\n\t * Returns undefined if there is no vanishing point, either because this is not a perspective transform,\n\t * or because the passed dir is perpendicular to the projections direction.\n\t *\n\t * @param dir\n\t */\n\tvanishingPoint(dir: V3) {\n\t\tassertVectors(dir)\n\t\tconst m = this.m\n\t\tconst vx = dir.x,\n\t\t\tvy = dir.y,\n\t\t\tvz = dir.z\n\t\tconst w = vx * m[12] + vy * m[13] + vz * m[14]\n\t\tif (eq0(w)) return undefined\n\t\tconst x = vx * m[0] + vy * m[1] + vz * m[2]\n\t\tconst y = vx * m[4] + vy * m[5] + vz * m[6]\n\t\tconst z = vx * m[8] + vy * m[9] + vz * m[10]\n\t\treturn new V3(x / w, y / w, z / w)\n\t}\n\n\t/**\n\t * Transforms the vector as a point with a w coordinate of 1. This means translations will have an effect, for\n\t * example.\n\t */\n\ttransformPoint(v: V3): V3 {\n\t\tassertVectors(v)\n\t\tconst m = this.m\n\t\tconst vx = v.x,\n\t\t\tvy = v.y,\n\t\t\tvz = v.z\n\t\tconst x = vx * m[0] + vy * m[1] + vz * m[2] + m[3]\n\t\tconst y = vx * m[4] + vy * m[5] + vz * m[6] + m[7]\n\t\tconst z = vx * m[8] + vy * m[9] + vz * m[10] + m[11]\n\t\tconst w = vx * m[12] + vy * m[13] + vz * m[14] + m[15]\n\t\t// scale such that fourth element becomes 1:\n\t\treturn new V3(x / w, y / w, z / w)\n\t}\n\n\t/**\n\t * Transforms the vector as a vector with a w coordinate of 0. This means translations will have no effect, for\n\t * example. Will throw an exception if the calculated w component != 0. This occurs for example when attempting\n\t * to transform a vector with a perspective matrix.\n\t */\n\ttransformVector(v: V3, checkW = true): V3 {\n\t\tassertVectors(v)\n\t\tconst m = this.m\n\t\tconst w = v.x * m[12] + v.y * m[13] + v.z * m[14]\n\t\tcheckW && assert(eq0(w), () => 'w === 0 needs to be true for this to make sense (w =' + w + this.str)\n\t\treturn new V3(\n\t\t\tm[0] * v.x + m[1] * v.y + m[2] * v.z,\n\t\t\tm[4] * v.x + m[5] * v.y + m[6] * v.z,\n\t\t\tm[8] * v.x + m[9] * v.y + m[10] * v.z,\n\t\t)\n\t}\n\n\ttransformVector2(v: V3, anchor: V3): V3 {\n\t\t// v and anchor define a line(t) = anchor + t v\n\t\t// we can view the calculation of the transformed vector as the derivative of the transformed line at t = 0\n\t\t// d/dt (this * line(t)) (0)\n\t\tassertVectors(v, anchor)\n\t\tconst transformedAnchor = this.timesVector(VV(anchor.x, anchor.y, anchor.z, 1))\n\t\tconst transformedVector = this.timesVector(VV(v.x, v.y, v.z, 0))\n\t\treturn transformedVector\n\t\t\t.times(transformedAnchor.w)\n\t\t\t.minus(transformedAnchor.times(transformedVector.w))\n\t\t\t.div(transformedAnchor.w ** 2)\n\t\t\t.V3()\n\t}\n\n\ttransformedPoints(vs: ReadonlyArray<V3>): V3[] {\n\t\treturn vs.map(v => this.transformPoint(v))\n\t}\n\n\ttransformedVectors(vs: ReadonlyArray<V3>): V3[] {\n\t\treturn vs.map(v => this.transformVector(v))\n\t}\n\n\tnew() {\n\t\treturn new M4() as this\n\t}\n\n\tcopy(): M4 {\n\t\treturn M4.copy<M4>(this)\n\t}\n\n\tisRegular(): boolean {\n\t\treturn !eq0(this.determinant())\n\t}\n\n\tisAxisAligned(): boolean {\n\t\tconst m = this.m\n\t\treturn (\n\t\t\t1 >= +!eq0(m[0]) + +!eq0(m[1]) + +!eq0(m[2]) &&\n\t\t\t1 >= +!eq0(m[4]) + +!eq0(m[5]) + +!eq0(m[6]) &&\n\t\t\t1 >= +!eq0(m[8]) + +!eq0(m[9]) + +!eq0(m[10])\n\t\t)\n\t}\n\n\t/**\n\t * A matrix M is orthogonal iff M * M^T = I\n\t * I being the identity matrix.\n\t *\n\t * @returns If this matrix is orthogonal or very close to it. Comparison of the identity matrix and\n\t * this * this^T is done with {@link #likeM4}\n\t */\n\tisOrthogonal(): boolean {\n\t\t// return this.transposed().times(this).likeM4(M4.IDENTITY)\n\t\tM4.transpose(this, M4.temp0)\n\t\tM4.multiply(this, M4.temp0, M4.temp1)\n\t\treturn M4.IDENTITY.likeM4(M4.temp1)\n\t}\n\n\t/**\n\t * A matrix M is symmetric iff M == M^T\n\t * I being the identity matrix.\n\t *\n\t * @returns If this matrix is symmetric or very close to it. Comparison of the identity matrix and\n\t * this * this^T is done with {@link #likeM4}\n\t */\n\tisSymmetric(): boolean {\n\t\tM4.transpose(this, M4.temp0)\n\t\treturn this.likeM4(M4.temp0)\n\t}\n\n\t/**\n\t * A matrix M is normal1 iff M * M^-T == M^T * M TODO: ^-T?\n\t * I being the identity matrix.\n\t *\n\t * @returns If this matrix is symmetric or very close to it. Comparison of the identity matrix and\n\t * this * this^T is done with {@link #likeM4}\n\t */\n\tisNormal(): boolean {\n\t\tM4.transpose(this, M4.temp0) // temp0 = this^-T\n\t\tM4.multiply(this, M4.temp0, M4.temp1) // temp1 = this * this^-T\n\t\tM4.multiply(M4.temp0, this, M4.temp2) // temp2 = this^-T * this\n\t\treturn M4.temp1.likeM4(M4.temp2)\n\t}\n\n\t/**\n\t * Determinant of matrix.\n\t *\n\t * Notes:\n\t *      For matrices A and B\n\t *      det(A * B) = det(A) * det(B)\n\t *      det(A^-1) = 1 / det(A)\n\t */\n\tdeterminant(): number {\n\t\t/*\n\t\t | a b c d |\n\t\t | e f g h |\n\t\t | i j k l |\n\t\t | m n o p |\n\t\t */\n\t\tconst $ = this.m,\n\t\t\ta = $[0],\n\t\t\tb = $[1],\n\t\t\tc = $[2],\n\t\t\td = $[3],\n\t\t\te = $[4],\n\t\t\tf = $[5],\n\t\t\tg = $[6],\n\t\t\th = $[7],\n\t\t\ti = $[8],\n\t\t\tj = $[9],\n\t\t\tk = $[10],\n\t\t\tl = $[11],\n\t\t\tm = $[12],\n\t\t\tn = $[13],\n\t\t\to = $[14],\n\t\t\tp = $[15],\n\t\t\tklop = k * p - l * o,\n\t\t\tjlnp = j * p - l * n,\n\t\t\tjkno = j * o - k * n,\n\t\t\tilmp = i * p - l * m,\n\t\t\tikmo = i * o - k * m,\n\t\t\tijmn = i * n - j * m\n\t\treturn (\n\t\t\ta * (f * klop - g * jlnp + h * jkno) -\n\t\t\tb * (e * klop - g * ilmp + h * ikmo) +\n\t\t\tc * (e * jlnp - f * ilmp + h * ijmn) -\n\t\t\td * (e * jkno - f * ikmo + g * ijmn)\n\t\t)\n\t}\n\n\tdeterminant3(): number {\n\t\tconst [a, b, c, , d, e, f, , g, h, i] = this.m\n\t\tconst det = a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g)\n\t\treturn det\n\t}\n\n\t/**\n\t * determine whether this matrix is a mirroring transformation\n\t */\n\tisMirroring(): boolean {\n\t\t/*\n\t\t var u = V(this.m[0], this.m[4], this.m[8])\n\t\t var v = V(this.m[1], this.m[5], this.m[9])\n\t\t var w = V(this.m[2], this.m[6], this.m[10])\n\n\t\t // for a true orthogonal, non-mirrored base, u.cross(v) == w\n\t\t // If they have an opposite direction then we are mirroring\n\t\t var mirrorvalue = u.cross(v).dot(w)\n\t\t var ismirror = (mirrorvalue < 0)\n\t\t return ismirror\n\t\t */\n\n\t\treturn this.determinant() < 0 // TODO: also valid for 4x4?\n\t}\n\n\t/**\n\t * Get the translation part of this matrix, i.e. the result of this.transformPoint(V3.O)\n\t */\n\tgetTranslation(): V3 {\n\t\tconst m = this.m,\n\t\t\tw = m[15]\n\t\treturn new V3(m[3] / w, m[7] / w, m[11] / w)\n\t}\n\n\t/**\n\t * Returns this matrix scaled so that the determinant is 1.\n\t * det(c * A) = (c ** n) * det(A) for n x n matrices,\n\t * so we need to divide by the 4th root of the determinant\n\t */\n\tnormalized(): M4 {\n\t\tconst detAbs = abs(this.determinant())\n\t\treturn 1 == detAbs ? this : this.divScalar(detAbs ** 0.25)\n\t}\n\n\t/**\n\t * Returns this matrix scaled so that the determinant is 1.\n\t * det(c * A) = (c ** n) * det(A) for n x n matrices,\n\t * so we need to divide by the 4th root of the determinant\n\t */\n\tnormalized2(): M4 {\n\t\tconst div = this.m[15]\n\t\treturn 1 == div ? this : this.divScalar(div ** 0.25)\n\t}\n\n\t/**\n\t * Returns if the matrix has the following form (within NLA_PRECISION):\n\t * a b c 0\n\t * c d e 0\n\t * f g h 0\n\t * 0 0 0 1\n\t */\n\tlike3x3(): boolean {\n\t\tconst m = this.m\n\t\treturn eq(1, m[15]) && eq0(m[12]) && eq0(m[13]) && eq0(m[14]) && eq0(m[3]) && eq0(m[7]) && eq0(m[11])\n\t}\n\n\tisNoProj(): boolean {\n\t\tconst m = this.m\n\t\treturn 0 == m[12] && 0 == m[13] && 0 == m[14] && 1 == m[15]\n\t}\n\n\tlikeIdentity(): boolean {\n\t\treturn this.m.every((val, i) => (((i / 4) | 0) == i % 4 ? eq(1, val) : eq0(val)))\n\t}\n\n\tisIdentity(): boolean {\n\t\treturn this.m.every((val, i) => (((i / 4) | 0) == i % 4 ? 1 == val : 0 == val))\n\t}\n\n\ttoString(f?: (number: number) => string = v => v.toFixed(6).replace(/([0.])(?=0*$)/g, ' ')): string {\n\t\tassert(typeof f(0) == 'string', '' + typeof f(0))\n\t\t// slice this.m to convert it to an Array (from TypeArray)\n\t\tconst rounded = Array.prototype.slice.call(this.m).map(f) as string[]\n\t\tconst colWidths = [0, 1, 2, 3].map(colIndex =>\n\t\t\trounded\n\t\t\t\t.sliceStep(colIndex, 0, 4)\n\t\t\t\t.map(x => x.length)\n\t\t\t\t.max(),\n\t\t)\n\t\treturn [0, 1, 2, 3]\n\t\t\t.map(rowIndex =>\n\t\t\t\trounded\n\t\t\t\t\t.slice(rowIndex * 4, rowIndex * 4 + 4) // select matrix row\n\t\t\t\t\t.map((x, colIndex) => ' '.repeat(colWidths[colIndex] - x.length) + x) // pad numbers with\n\t\t\t\t\t// spaces to col width\n\t\t\t\t\t.join(' '),\n\t\t\t)\n\t\t\t.join('\\n') // join rows\n\t}\n\n\t/**\n\t * Wether this matrix is a translation matrix, i.e. of the form\n\t * ```\n\t *\t1, 0, 0, x,\n\t *\t0, 1, 0, y,\n\t *\t0, 0, 1, z,\n\t *\t0, 0, 0, 1\n\t * ```\n\t */\n\tisTranslation(): boolean {\n\t\t// 2: any value, otherwise same value\n\t\t// prettier-ignore\n\t\tconst mask = [\n\t\t\t1, 0, 0, 2,\n\t\t\t0, 1, 0, 2,\n\t\t\t0, 0, 1, 2,\n\t\t\t0, 0, 0, 1]\n\t\treturn mask.every((expected, index) => expected == 2 || expected == this.m[index])\n\t}\n\n\t/**\n\t * Wether this matrix is a translation matrix, i.e. of the form\n\t * ```\n\t *\ts, 0, 0, 0,\n\t *\t0, t, 0, 0,\n\t *\t0, 0, v, 0,\n\t *\t0, 0, 0, 1\n\t * ```\n\t */\n\tisScaling(): boolean {\n\t\t// prettier-ignore\n\t\tconst mask = [\n\t\t\t2, 0, 0, 0,\n\t\t\t0, 2, 0, 0,\n\t\t\t0, 0, 2, 0,\n\t\t\t0, 0, 0, 1]\n\t\treturn mask.every((expected, index) => expected == 2 || expected == this.m[index])\n\t}\n\n\tisZRotation(): boolean {\n\t\t// prettier-ignore\n\t\tconst mask = [\n\t\t\t2, 2, 0, 0,\n\t\t\t2, 2, 0, 0,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1]\n\t\treturn (\n\t\t\tmask.every((expected, index) => expected == 2 || expected == this.m[index]) &&\n\t\t\t(eq(1, this.m[0] ** 2 + this.m[1] ** 2) && this.m[0] == this.m[5] && this.m[1] == -this.m[4])\n\t\t)\n\t}\n\n\ttoSource(): string {\n\t\tconst name = M4.NAMEMAP.get(this)\n\t\tif (name) {\n\t\t\treturn name\n\t\t} else if (this.isTranslation()) {\n\t\t\treturn callsce('M4.translate', this.O)\n\t\t} else if (this.isScaling()) {\n\t\t\treturn callsce('M4.scale', this.m[0], this.m[5], this.m[10])\n\t\t} else if (this.isNoProj()) {\n\t\t\treturn !this.O.equals(V3.O)\n\t\t\t\t? callsce('M4.forSys', this.X, this.Y, this.Z, this.O)\n\t\t\t\t: callsce('M4.forSys', this.X, this.Y, this.Z)\n\t\t} else if (this.isMirror(0)) {\n\t\t\tconst m = this.m\n\t\t\tconst nx = Math.sqrt((1 - m[0]) / 2)\n\t\t\tconst ny = Math.sqrt((1 - m[5]) / 2)\n\t\t\tconst nz = Math.sqrt((1 - m[10]) / 2)\n\t\t\tconst w = m[3] / 2.0 / nx\n\t\t\treturn callsce('M4.mirror', { normal1: new V3(nx, ny, nz), w })\n\t\t} else {\n\t\t\tconst m = this.m\n\t\t\t// prettier-ignore\n\t\t\treturn 'new M4(' +\n\t\t\t\t'\\n\\t' + m[0] + ',\\t' + m[1] + ',\\t' + m[2] + ',\\t' + m[3] + ',' +\n\t\t\t\t'\\n\\t' + m[4] + ',\\t' + m[5] + ',\\t' + m[6] + ',\\t' + m[7] + ',' +\n\t\t\t\t'\\n\\t' + m[8] + ',\\t' + m[9] + ',\\t' + m[10] + ',\\t' + m[11] + ',' +\n\t\t\t\t'\\n\\t' + m[12] + ',\\t' + m[13] + ',\\t' + m[14] + ',\\t' + m[15] + ')'\n\t\t}\n\t}\n\n\txyAreaFactor(): number {\n\t\treturn this.transformVector(V3.X)\n\t\t\t.cross(this.transformVector(V3.Y))\n\t\t\t.length()\n\t}\n}\n\nM4.prototype.height = 4\nM4.prototype.width = 4\n\nexport interface M4 extends Transformable {}\naddOwnProperties(M4.prototype, Transformable.prototype, 'constructor')\n","declare global {\n\tinterface Object {\n\t\ttoSource(): string\n\t}\n}\nconst KEYWORD_REGEXP = new RegExp(\n\t'^(' +\n\t\t'abstract|boolean|break|byte|case|catch|char|class|const|continue|debugger|' +\n\t\t'default|delete|do|double|else|enum|export|extends|false|final|finally|' +\n\t\t'float|for|function|goto|if|implements|import|in|instanceof|int|interface|' +\n\t\t'long|native|new|null|package|private|protected|public|return|short|static|' +\n\t\t'super|switch|synchronized|this|throw|throws|transient|true|try|typeof|' +\n\t\t'undefined|var|void|volatile|while|with' +\n\t\t')$',\n)\nfunction stringIsLegalKey(key: string) {\n\treturn /^[a-z_$][0-9a-z_$]*$/gi.test(key) && !KEYWORD_REGEXP.test(key)\n}\n\nconst seen: {}[] = []\nexport function toSource(o: {}, indent = 0) {\n\tif (undefined === o) return 'undefined'\n\tif (null === o) return 'null'\n\treturn o.toSource()\n}\nfunction addToSourceMethodToPrototype<T>(clazz: new (...args: {}[]) => T, method: (this: T) => string) {\n\tif (!clazz.prototype.toSource) {\n\t\tObject.defineProperty(clazz.prototype, 'toSource', {\n\t\t\tvalue: method,\n\t\t\twritable: true,\n\t\t\tconfigurable: true,\n\t\t\tenumerable: false,\n\t\t})\n\t}\n}\n\naddToSourceMethodToPrototype(Boolean, Boolean.prototype.toString)\naddToSourceMethodToPrototype(Function, Function.prototype.toString)\naddToSourceMethodToPrototype(Number, Number.prototype.toString)\naddToSourceMethodToPrototype(RegExp, RegExp.prototype.toString)\naddToSourceMethodToPrototype(Date, function() {\n\treturn 'new Date(' + this.getTime() + ')'\n})\naddToSourceMethodToPrototype(String, function() {\n\treturn JSON.stringify(this)\n})\naddToSourceMethodToPrototype(Array, function() {\n\tif (seen.includes(this)) {\n\t\treturn 'CIRCULAR_REFERENCE'\n\t}\n\tseen.push(this)\n\tlet result = '['\n\tfor (let i = 0; i < this.length; i++) {\n\t\tresult += '\\n\\t' + toSource(this[i]).replace(/\\r\\n|\\n|\\r/g, '$&\\t')\n\t\tif (i !== this.length - 1) {\n\t\t\tresult += ','\n\t\t}\n\t}\n\tresult += 0 === this.length ? ']' : '\\n]'\n\tseen.pop()\n\treturn result\n})\naddToSourceMethodToPrototype(Object, function() {\n\tif (seen.includes(this)) {\n\t\treturn 'CIRCULAR_REFERENCE'\n\t}\n\tseen.push(this)\n\tlet result = '{'\n\tconst keys = Object.keys(this).sort()\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst k = keys[i]\n\t\tresult +=\n\t\t\t'\\n\\t' +\n\t\t\t(stringIsLegalKey(k) ? k : JSON.stringify(k)) +\n\t\t\t': ' +\n\t\t\ttoSource((this as any)[k]).replace(/\\r\\n|\\n|\\r/g, '$&\\t')\n\t\tif (i !== keys.length - 1) {\n\t\t\tresult += ','\n\t\t}\n\t}\n\tresult += 0 === keys.length ? '}' : '\\n}'\n\tseen.pop()\n\treturn result\n})\n","import { M4 } from './M4'\nimport { assert, assertInst, assertNumbers, assertVectors, callsce, clamp, lt, NLA_PRECISION } from './NLA'\nimport { Transformable } from './Transformable'\nimport { V3 } from './V3'\n\nexport class AABB extends Transformable {\n\tconstructor(public min: V3 = V3.INF, public max: V3 = V3.INF.negated()) {\n\t\tsuper()\n\t\tassertVectors(min, max)\n\t}\n\n\tstatic forXYZ(x: number, y: number, z: number): AABB {\n\t\treturn new AABB(V3.O, new V3(x, y, z))\n\t}\n\n\tstatic forAABBs(aabbs: Iterable<AABB>): AABB {\n\t\tconst result = new AABB()\n\t\tfor (const aabb of aabbs) {\n\t\t\tresult.addAABB(aabb)\n\t\t}\n\t\treturn result\n\t}\n\n\taddPoint(p: V3): this {\n\t\tassertVectors(p)\n\t\tthis.min = this.min.min(p)\n\t\tthis.max = this.max.max(p)\n\t\treturn this\n\t}\n\n\taddPoints(ps: V3[]): this {\n\t\tps.forEach(p => this.addPoint(p))\n\t\treturn this\n\t}\n\n\taddAABB(aabb: AABB): this {\n\t\tassertInst(AABB, aabb)\n\t\tthis.addPoint(aabb.min)\n\t\tthis.addPoint(aabb.max)\n\t\treturn this\n\t}\n\n\t/**\n\t * Returns the largest AABB contained in this which doesn't overlap with aabb\n\t * @param aabb\n\t */\n\twithoutAABB(aabb: AABB): AABB {\n\t\tassertInst(AABB, aabb)\n\t\tlet min, max\n\t\tconst volume = this.volume(),\n\t\t\tsize = this.size()\n\t\tlet remainingVolume = -Infinity\n\t\tfor (let i = 0; i < 3; i++) {\n\t\t\tconst dim = ['x', 'y', 'z'][i] as 'x' | 'y' | 'z'\n\t\t\tconst cond = aabb.min[dim] - this.min[dim] > this.max[dim] - aabb.max[dim]\n\t\t\tconst dimMin = cond ? this.min[dim] : Math.max(this.min[dim], aabb.max[dim])\n\t\t\tconst dimMax = !cond ? this.max[dim] : Math.min(this.max[dim], aabb.min[dim])\n\t\t\tconst newRemainingVolume = ((dimMax - dimMin) * volume) / size[dim]\n\t\t\tif (newRemainingVolume > remainingVolume) {\n\t\t\t\tremainingVolume = newRemainingVolume\n\t\t\t\tmin = this.min.withElement(dim, dimMin)\n\t\t\t\tmax = this.max.withElement(dim, dimMax)\n\t\t\t}\n\t\t}\n\t\treturn new AABB(min, max)\n\t}\n\n\tgetIntersectionAABB(aabb: AABB): AABB {\n\t\tassertInst(AABB, aabb)\n\t\treturn new AABB(this.min.max(aabb.min), this.max.min(aabb.max))\n\t}\n\n\ttouchesAABB(aabb: AABB): boolean {\n\t\tassertInst(AABB, aabb)\n\t\treturn !(\n\t\t\tthis.min.x > aabb.max.x ||\n\t\t\tthis.max.x < aabb.min.x ||\n\t\t\tthis.min.y > aabb.max.y ||\n\t\t\tthis.max.y < aabb.min.y ||\n\t\t\tthis.min.z > aabb.max.z ||\n\t\t\tthis.max.z < aabb.min.z\n\t\t)\n\t}\n\n\ttouchesAABBfuzzy(aabb: AABB, precisision = NLA_PRECISION): boolean {\n\t\tassertInst(AABB, aabb)\n\t\treturn !(\n\t\t\tlt(aabb.max.x, this.min.x, precisision) ||\n\t\t\tlt(this.max.x, aabb.min.x, precisision) ||\n\t\t\tlt(aabb.max.y, this.min.y, precisision) ||\n\t\t\tlt(this.max.y, aabb.min.y, precisision) ||\n\t\t\tlt(aabb.max.z, this.min.z, precisision) ||\n\t\t\tlt(this.max.z, aabb.min.z, precisision)\n\t\t)\n\t}\n\n\tintersectsAABB(aabb: AABB): boolean {\n\t\tassertInst(AABB, aabb)\n\t\treturn !(\n\t\t\tthis.min.x >= aabb.max.x ||\n\t\t\tthis.max.x <= aabb.min.x ||\n\t\t\tthis.min.y >= aabb.max.y ||\n\t\t\tthis.max.y <= aabb.min.y ||\n\t\t\tthis.min.z >= aabb.max.z ||\n\t\t\tthis.max.z <= aabb.min.z\n\t\t)\n\t}\n\n\tintersectsAABB2d(aabb: AABB): boolean {\n\t\tassertInst(AABB, aabb)\n\t\treturn !(\n\t\t\tthis.min.x >= aabb.max.x ||\n\t\t\tthis.max.x <= aabb.min.x ||\n\t\t\tthis.min.y >= aabb.max.y ||\n\t\t\tthis.max.y <= aabb.min.y\n\t\t)\n\t}\n\n\tcontainsPoint(p: V3): boolean {\n\t\tassertVectors(p)\n\t\treturn (\n\t\t\tthis.min.x <= p.x &&\n\t\t\tthis.min.y <= p.y &&\n\t\t\tthis.min.z <= p.z &&\n\t\t\tthis.max.x >= p.x &&\n\t\t\tthis.max.y >= p.y &&\n\t\t\tthis.max.z >= p.z\n\t\t)\n\t}\n\n\tcontainsSphere(center: V3, radius: number) {\n\t\tassertVectors(center)\n\t\tassertNumbers(radius)\n\t\treturn this.distanceToPoint(center) > radius\n\t}\n\n\tintersectsSphere(center: V3, radius: number) {\n\t\tassertVectors(center)\n\t\tassertNumbers(radius)\n\t\treturn this.distanceToPoint(center) <= radius\n\t}\n\n\tdistanceToPoint(p: V3) {\n\t\tassertVectors(p)\n\t\tconst x = p.x,\n\t\t\ty = p.y,\n\t\t\tz = p.z\n\t\tconst min = this.min,\n\t\t\tmax = this.max\n\t\tif (this.containsPoint(p)) {\n\t\t\treturn Math.max(min.x - x, x - max.x, min.y - y, y - max.y, min.z - z, z - max.z)\n\t\t}\n\t\treturn p.distanceTo(new V3(clamp(x, min.x, max.x), clamp(y, min.y, max.y), clamp(z, min.z, max.z)))\n\t}\n\n\tcontainsAABB(aabb: AABB) {\n\t\tassertInst(AABB, aabb)\n\t\treturn this.containsPoint(aabb.min) && this.containsPoint(aabb.max)\n\t}\n\n\tlikeAABB(aabb: AABB): boolean {\n\t\tassertInst(AABB, aabb)\n\t\treturn this.min.like(aabb.min) && this.max.like(aabb.max)\n\t}\n\n\tintersectsLine(line: { anchor: V3; dir1: V3; tMin: number; tMax: number }): boolean {\n\t\tassertVectors(line.anchor, line.dir1)\n\t\tconst dir = line.dir1.map(el => el || Number.MIN_VALUE)\n\t\tconst minTs = this.min.minus(line.anchor).divv(dir)\n\t\tconst maxTs = this.max.minus(line.anchor).divv(dir)\n\t\tconst tMin = minTs.min(maxTs).maxElement(),\n\t\t\ttMax = minTs.max(maxTs).minElement()\n\t\treturn tMin <= tMax && !(tMax < line.tMin || line.tMax < tMin)\n\t}\n\n\thasVolume(): boolean {\n\t\treturn this.min.x <= this.max.x && this.min.y <= this.max.y && this.min.z <= this.max.z\n\t}\n\n\tvolume(): number {\n\t\tif (!this.hasVolume()) {\n\t\t\treturn -1\n\t\t}\n\t\tconst v = this.max.minus(this.min)\n\t\treturn v.x * v.y * v.z\n\t}\n\n\tsize(): V3 {\n\t\treturn this.max.minus(this.min)\n\t}\n\n\tgetCenter(): V3 {\n\t\treturn this.min.plus(this.max).div(2)\n\t}\n\n\ttransform(m4: M4): this {\n\t\tassertInst(M4, m4)\n\t\tassert(m4.isAxisAligned())\n\t\tconst aabb = new AABB()\n\t\taabb.addPoint(m4.transformPoint(this.min))\n\t\taabb.addPoint(m4.transformPoint(this.max))\n\t\treturn aabb as this\n\t}\n\n\tofTransformed(m4: M4): AABB {\n\t\tassertInst(M4, m4)\n\t\tconst aabb = new AABB()\n\t\taabb.addPoints(m4.transformedPoints(this.corners()))\n\t\treturn aabb\n\t}\n\n\tcorners(): V3[] {\n\t\tconst min = this.min,\n\t\t\tmax = this.max\n\t\treturn [\n\t\t\tmin,\n\t\t\tnew V3(min.x, min.y, max.z),\n\t\t\tnew V3(min.x, max.y, min.z),\n\t\t\tnew V3(min.x, max.y, max.z),\n\n\t\t\tnew V3(max.x, min.y, min.z),\n\t\t\tnew V3(max.x, min.y, max.z),\n\t\t\tnew V3(max.x, max.y, min.z),\n\t\t\tmax,\n\t\t]\n\t}\n\n\ttoString(): string {\n\t\treturn callsce('new AABB', this.min, this.max)\n\t}\n\n\ttoSource(): string {\n\t\treturn this.toString()\n\t}\n\n\t/**\n\t * Return the matrix which transforms the AABB from V3.O to V3.XYZ to this AABB.\n\t */\n\tgetM4(): M4 {\n\t\treturn M4.translate(this.min).times(M4.scale(this.size()))\n\t}\n}\n","import {assert, int, NLA_DEBUG, V3} from 'ts3dutils'\nimport {currentGL, TSGLContext} from './index'\n\nimport GL = WebGLRenderingContextStrict\nconst WGL = WebGLRenderingContext as any as WebGLRenderingContextStrict.Constants\n\nexport class Buffer {\n\tbuffer: WebGLBuffer | undefined\n\tdata: any[]\n\n\t/** Number of elements in buffer. 2 V3s is still 2, not 6. */\n\tcount: int\n\n\t/** Space between elements in buffer. 3 for V3s. */\n\tspacing: 1 | 2 | 3 | 4\n\n\thasBeenCompiled: boolean\n\n\tname?: string\n\n\tmaxValue?: number\n\n\t/**\n\t * Provides a simple method of uploading data to a GPU buffer. Example usage:\n\t *\n\t *     const vertices = new Buffer(WGL.ARRAY_BUFFER, Float32Array)\n\t *     vertices.data = [[0, 0, 0], [1, 0, 0], [0, 1, 0], [1, 1, 0]]\n\t *     vertices.compile()\n\t *\n\t *     const indices = new Buffer(WGL.ELEMENT_ARRAY_BUFFER, Uint16Array)\n\t *     indices.data = [[0, 1, 2], [2, 1, 3]]\n\t *     indices.compile()\n\t *\n\t * Specifies the target to which the buffer object is bound.\n\t * The symbolic constant must be GL_ARRAY_BUFFER or GL_ELEMENT_ARRAY_BUFFER.\n\t */\n\tconstructor(readonly target: GL.BufferTarget, readonly type: typeof Float32Array | typeof Uint16Array) {\n\t\tassert(target == WGL.ARRAY_BUFFER || target == WGL.ELEMENT_ARRAY_BUFFER, 'target == WGL.ARRAY_BUFFER || target == WGL.ELEMENT_ARRAY_BUFFER')\n\t\tassert(type == Float32Array || type == Uint16Array, 'type == Float32Array || type == Uint16Array')\n\t\tthis.buffer = undefined\n\t\tthis.type = type\n\t\tthis.data = []\n\t\tthis.count = 0\n\t\tthis.spacing = 1\n\t\tthis.hasBeenCompiled = false\n\t}\n\n\t/**\n\t * Upload the contents of `data` to the GPU in preparation for rendering. The data must be a list of lists\n\t * where each inner list has the same length. For example, each element of data for vertex normals would be a\n\t * list of length three. This will remember the data length and element length for later use by shaders.\n\t *\n\t * This could have used `[].concat.apply([], this.data)` to flatten the array but Google\n\t * Chrome has a maximum number of arguments so the concatenations are chunked to avoid that limit.\n\t *\n\t * @param usage Either `WGL.STATIC_DRAW` or `WGL.DYNAMIC_DRAW`. Defaults to `WGL.STATIC_DRAW`\n\t */\n\tcompile(usage: GL.BufferDataUsage = WGL.STATIC_DRAW, gl: TSGLContext = currentGL()): void {\n\t\tassert(WGL.STATIC_DRAW == usage || WGL.DYNAMIC_DRAW == usage, 'WGL.STATIC_DRAW == type || WGL.DYNAMIC_DRAW == type')\n\t\tthis.buffer = this.buffer || gl.createBuffer()!\n\t\tlet buffer: Float32Array | Uint16Array\n\t\tif (this.data.length == 0) {\n\t\t\tconsole.warn('empty buffer ' + this.name)\n\t\t\t//console.trace()\n\t\t}\n\t\tif (this.data.length == 0 || this.data[0] instanceof V3) {\n\t\t\tassert(!(this.data[0] instanceof V3) || this.type == Float32Array)\n\t\t\tV3.pack(this.data, buffer = new this.type(this.data.length * 3) as Float32Array) // asserts that all\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t // elements are V3s\n\t\t\tthis.spacing = 3\n\t\t\tthis.count = this.data.length\n\t\t\tthis.maxValue = 0\n\t\t} else {\n\t\t\t//assert(Array != this.data[0].constructor, this.name + this.data[0])\n\t\t\tif (Array.isArray(this.data[0])) {\n\t\t\t\tconst bufferLength = this.data.length * this.data[0].length\n\t\t\t\tbuffer = new this.type(bufferLength)\n\t\t\t\tlet i = this.data.length, destPtr = bufferLength\n\t\t\t\twhile (i--) {\n\t\t\t\t\tconst subArray = this.data[i]\n\t\t\t\t\tlet j = subArray.length\n\t\t\t\t\twhile (j--) {\n\t\t\t\t\t\tbuffer[--destPtr] = subArray[j]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tassert(0 == destPtr)\n\t\t\t} else {\n\t\t\t\tbuffer = new this.type(this.data)\n\t\t\t}\n\n\t\t\tconst spacing = this.data.length ? buffer.length / this.data.length : 0\n\t\t\tassert(spacing % 1 == 0, `buffer ${this.name} elements not of consistent size, average size is ` + spacing)\n\t\t\tif (NLA_DEBUG) {\n\t\t\t\tif (10000 <= buffer.length) {\n\t\t\t\t\tthis.maxValue = 0\n\t\t\t\t} else {\n\t\t\t\t\tthis.maxValue = Math.max.apply(undefined, buffer)\n\t\t\t\t}\n\t\t\t}\n\t\t\tassert([1, 2, 3, 4].includes(spacing))\n\t\t\tthis.spacing = spacing as 1 | 2 | 3 | 4\n\t\t\tthis.count = this.data.length\n\t\t}\n\t\tgl.bindBuffer(this.target, this.buffer)\n\t\tgl.bufferData(this.target, buffer, usage)\n\t\tthis.hasBeenCompiled = true\n\t}\n}","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\n\tAABB, arrayFromFunction, assert, assertVectors, int, lerp, M4, NLA_PRECISION, raddd, Transformable, Tuple3, V, V3, eq0,\n} from 'ts3dutils'\n\nimport {currentGL, GL_COLOR, pushQuad, TSGLContext, Buffer} from './index'\n\nconst {cos, sin, PI, min, max} = Math\n\nconst WGL = WebGLRenderingContext as any as WebGLRenderingContextStrict.Constants\n\nexport interface MeshData {\n\tnormals: V3[]\n\tcoords: [number, number][]\n\tcolors: GL_COLOR[]\n\tTRIANGLES: int[]\n\tLINES: int[]\n}\nexport type MeshWith<T extends keyof MeshData = never> = Mesh & Pick<MeshData, T>\n\n/**\n * @example new Mesh()\n *        .addIndexBuffer('TRIANGLES')\n *        .addIndexBuffer('LINES')\n *        .addVertexBuffer('normals', 'ts_Normal')\n */\nexport class Mesh extends Transformable {\n\thasBeenCompiled: boolean = false\n\tvertexBuffers: { [name: string]: Buffer } = {}\n\tindexBuffers: { [name: string]: Buffer } = {}\n\n\tvertices: V3[]\n\tnormals?: V3[]\n\n\tconstructor() {\n\t\tsuper()\n\t\tthis.addVertexBuffer('vertices', 'ts_Vertex')\n\t}\n\n\t/**\n\t * Calculate area, volume and centroid of the mesh.\n\t *\n\t * The area is the sum of the areas of the triangles.\n\t *\n\t * For closed meshes, the volume is the contained volume. If the volume is inside-out, i.e. the face normals point\n\t * inwards, the returned value is negative. In general, this calculates the sum of the z-direction shadow volumes\n\t * of the triangles. The z-dir shadow volume is the cut-off prism with the triangle projected onto the XY plane as\n\t * the base face and the triangle itself as the top face.\n\t *\n\t * The centroid is the \"mean point of all points inside the volume\". If a uniform density is assumed, this is\n\t * equivalent to the center of gravity. In general, this calculates the weighted average of the centroids of all the\n\t * triangle shadow volumes.\n\t */\n\tcalcVolume(this: Mesh & { TRIANGLES: int[] }): { volume: number, centroid: V3, area: number } {\n\t\tlet totalVolumeX2 = 0, totalCentroidWithZX2 = V3.O, totalAreaX2 = 0\n\t\tconst triangles = this.TRIANGLES\n\t\tconst vertices = this.vertices\n\t\tfor (let i = 0; i < triangles.length; i += 3) {\n\t\t\tconst ai = triangles[i + 0], bi = triangles[i + 1], ci = triangles[i + 2]\n\t\t\tconst a = vertices[ai], b = vertices[bi], c = vertices[ci]\n\t\t\tconst ab = b.minus(a), ac = c.minus(a)\n\t\t\tconst normal = ab.cross(ac)\n\t\t\t//const centroidZ = (v0.z + v1.z + v2.z) / 3\n\t\t\tconst faceCentroid = V3.add(a, b, c).div(3)\n\t\t\t//totalVolume += centroidZ * (area === v01.cross(v02).length() / 2) * v01.cross(v02).unit().z\n\t\t\ttotalVolumeX2 += faceCentroid.z * normal.z\n\t\t\tconst faceAreaX2 = normal.length()\n\t\t\ttotalAreaX2 += faceAreaX2\n\n\t\t\t// NB: the shadow volume centroid does NOT have the same XY coordinates\n\t\t\t// as the face centroid.\n\t\t\t// calculate the weighted centroid of the shadow volume:\n\t\t\t// faceShadowCentroid = INTEGRATE [0; 1] (\n\t\t\t//   INTEGRATE [0; 1 - s] (\n\t\t\t//     normal.z *\n\t\t\t//     ((1 - s - t) a + s b + t c) *\n\t\t\t//     ((1 - s - t) a + s b + t c).z\n\t\t\t//   ) dt\n\t\t\t// ) ds\n\t\t\t// = (a (2 a.z + b.z + c.z) + b (a.z + 2 b.z + c.z) + c (a.z + b.z + 2 c.z)) / 24\n\t\t\tconst faceShadowCentroid = V3.add(\n\t\t\t\ta.times(2 * a.z + b.z + c.z),\n\t\t\t\tb.times(a.z + 2 * b.z + c.z),\n\t\t\t\tc.times(a.z + b.z + 2 * c.z),\n\t\t\t).times(normal.z) // 1/24 factor is done at very end\n\t\t\ttotalCentroidWithZX2 = totalCentroidWithZX2.plus(faceShadowCentroid)\n\t\t}\n\t\t// sumInPlaceTree adds negligible additional accuracy for XY sphere\n\t\tconst volume = totalVolumeX2 / 2\n\t\treturn {\n\t\t\tvolume,\n\t\t\tcentroid: eq0(volume) ? V3.O: totalCentroidWithZX2.div(24*volume).schur(new V3(1, 1, 0.5)),\n\t\t\tarea: totalAreaX2 / 2\n\t\t}\n\t}\n\n\t/**\n\t * Add a new vertex buffer with a list as a property called `name` on this object and map it to\n\t * the attribute called `attribute` in all shaders that draw this mesh.\n\t * @example new Mesh().addVertexBuffer('coords', 'ts_TexCoord')\n\t */\n\taddVertexBuffer<K extends string>(name: K, attribute: string): this & { [k in K]: any[] } {\n\t\tassert(!this.vertexBuffers[attribute], 'Buffer ' + attribute + ' already exists.')\n\t\t//assert(!this[name])\n\t\tthis.hasBeenCompiled = false\n\t\tassert('string' == typeof name)\n\t\tassert('string' == typeof attribute)\n\t\tconst buffer = this.vertexBuffers[attribute] = new Buffer(WGL.ARRAY_BUFFER, Float32Array)\n\t\tbuffer.name = name\n\t\t;(this as any)[name] = []\n\t\treturn this as any\n\t}\n\n\t/**\n\t * Add a new index buffer.\n\t * @example new Mesh().addIndexBuffer('TRIANGLES')\n\t * @example new Mesh().addIndexBuffer('LINES')\n\t */\n\taddIndexBuffer<K extends string>(name: K): this & { [k in K]: int[] } {\n\t\tthis.hasBeenCompiled = false\n\t\tconst buffer = this.indexBuffers[name] = new Buffer(WGL.ELEMENT_ARRAY_BUFFER, Uint16Array)\n\t\tbuffer.name = name\n\t\t;(this as any)[name] = []\n\t\treturn this as any\n\t}\n\n\tconcat<T extends Mesh>(...others: T[]): T {\n\t\tconst mesh = new Mesh() as any\n\t\t;[this as Mesh].concat(others).forEach((oldMesh: any) => {\n\t\t\tconst startIndex = mesh.vertices ? mesh.vertices.length : 0\n\t\t\tObject.getOwnPropertyNames(oldMesh.vertexBuffers).forEach(attribute => {\n\t\t\t\tconst bufferName = this.vertexBuffers[attribute].name!\n\t\t\t\tif (!mesh.vertexBuffers[attribute]) {\n\t\t\t\t\tmesh.addVertexBuffer(bufferName, attribute)\n\t\t\t\t}\n\t\t\t\tmesh[bufferName].push(...oldMesh[bufferName])\n\t\t\t})\n\t\t\tObject.getOwnPropertyNames(oldMesh.indexBuffers).forEach(name => {\n\t\t\t\tif (!mesh.indexBuffers[name]) {\n\t\t\t\t\tmesh.addIndexBuffer(name)\n\t\t\t\t}\n\t\t\t\tmesh[name].push(...(oldMesh[name] as int[]).map(index => index + startIndex))\n\t\t\t})\n\t\t})\n\t\treturn mesh\n\t}\n\n\t/**\n\t * Upload all attached buffers to the GPU in preparation for rendering. This doesn't need to be called every\n\t * frame, only needs to be done when the data changes.\n\t *\n\t * Sets `this.hasBeenCompiled` to true.\n\t */\n\tcompile(gl: TSGLContext = currentGL()) {\n\t\t// figure out shortest vertex buffer to make sure indexBuffers are in bounds\n\t\tlet minVertexBufferLength = Infinity// TODO, _minBufferName\n\t\tObject.getOwnPropertyNames(this.vertexBuffers).forEach(attribute => {\n\t\t\tconst buffer = this.vertexBuffers[attribute]\n\t\t\tbuffer.data = (this as any)[buffer.name!]\n\t\t\tbuffer.compile(undefined, gl)\n\t\t\tif ((this as any)[buffer.name!].length < minVertexBufferLength) {\n\t\t\t\t// _minBufferName = attribute\n\t\t\t\tminVertexBufferLength = (this as any)[buffer.name!].length\n\t\t\t}\n\t\t})\n\n\t\tfor (const name in this.indexBuffers) {\n\t\t\tconst buffer = this.indexBuffers[name]\n\t\t\tbuffer.data = (this as any)[buffer.name!]\n\t\t\tbuffer.compile(undefined, gl)\n\t\t\t// if (NLA_DEBUG && buffer.maxValue >= minVertexBufferLength) {\n\t\t\t// \tthrow new Error(`max index value for buffer ${name}\n\t\t\t// \tis too large ${buffer.maxValue} min Vbuffer size: ${minVertexBufferLength} ${minBufferName}`)\n\t\t\t// }\n\t\t}\n\t\tthis.hasBeenCompiled = true\n\t\treturn this\n\t}\n\n\tstatic async fromBinarySTL(stl: Blob) {\n\t\treturn new Promise<Mesh & { normals: V3[] }>((resolve, reject) => {\n\t\t\tconst mesh = new Mesh()\n\t\t\t\t.addVertexBuffer('normals', 'ts_Normal')\n\t\t\tconst fileReader = new FileReader()\n\t\t\tfileReader.onerror = reject\n\t\t\tfileReader.onload = function (_progressEvent) {\n\t\t\t\tconst dataView = new DataView(this.result)\n\t\t\t\tconst HEADER_BYTE_SIZE = 80\n\t\t\t\tconst triangleCount = dataView.getUint32(HEADER_BYTE_SIZE, true)\n\t\t\t\tmesh.normals.length = triangleCount * 3\n\t\t\t\tmesh.vertices.length = triangleCount * 3\n\t\t\t\tlet i = triangleCount * 3, bufferPtr = HEADER_BYTE_SIZE + 4\n\n\t\t\t\tfunction readV3() {\n\t\t\t\t\tconst x = dataView.getFloat32(bufferPtr, true)\n\t\t\t\t\tbufferPtr += 4\n\t\t\t\t\tconst y = dataView.getFloat32(bufferPtr, true)\n\t\t\t\t\tbufferPtr += 4\n\t\t\t\t\tconst z = dataView.getFloat32(bufferPtr, true)\n\t\t\t\t\tbufferPtr += 4\n\t\t\t\t\treturn new V3(x, y, z)\n\t\t\t\t}\n\n\t\t\t\twhile (i) {\n\t\t\t\t\ti -= 3\n\t\t\t\t\tconst normal = readV3()\n\t\t\t\t\tmesh.normals[i + 0] = normal\n\t\t\t\t\tmesh.normals[i + 1] = normal\n\t\t\t\t\tmesh.normals[i + 2] = normal\n\t\t\t\t\tmesh.vertices[i + 0] = readV3()\n\t\t\t\t\tmesh.vertices[i + 1] = readV3()\n\t\t\t\t\tmesh.vertices[i + 2] = readV3()\n\n\t\t\t\t\tbufferPtr += 2\n\t\t\t\t}\n\t\t\t\tresolve(mesh)\n\t\t\t}\n\t\t\tfileReader.readAsArrayBuffer(stl)\n\t\t})\n\t}\n\n\ttoBinarySTL(this: Mesh & { TRIANGLES: number[] }): Blob {\n\t\tif (!this.TRIANGLES) throw new Error('TRIANGLES must be defined.')\n\t\tconst HEADER_BYTE_SIZE = 80, FLOAT_BYTE_SIZE = 4\n\t\tconst triangles = this.TRIANGLES\n\t\tconst triangleCount = triangles.length / 3\n\t\tconst buffer = new ArrayBuffer(HEADER_BYTE_SIZE + 4 + triangleCount * (4 * 3 * FLOAT_BYTE_SIZE + 2))\n\t\tconst dataView = new DataView(buffer)\n\t\tdataView.setUint32(HEADER_BYTE_SIZE, triangleCount, true)\n\t\tlet bufferPtr = HEADER_BYTE_SIZE + 4\n\t\tlet i = triangles.length\n\t\twhile (i) {\n\t\t\ti -= 3\n\t\t\tconst a = this.vertices[triangles[i]], b = this.vertices[triangles[i + 1]],\n\t\t\t\tc = this.vertices[triangles[i + 2]]\n\t\t\tconst normal = V3.normalOnPoints(a, b, c)\n\n\t\t\t;[normal, a, b, c].forEach(v => {\n\t\t\t\tdataView.setFloat32(bufferPtr, v.x, true)\n\t\t\t\tbufferPtr += 4\n\t\t\t\tdataView.setFloat32(bufferPtr, v.y, true)\n\t\t\t\tbufferPtr += 4\n\t\t\t\tdataView.setFloat32(bufferPtr, v.z, true)\n\t\t\t\tbufferPtr += 4\n\t\t\t})\n\t\t\t// skip 2 bytes, already initalized to zero\n\t\t\tbufferPtr += 2\n\t\t}\n\t\tassert(bufferPtr == buffer.byteLength, bufferPtr + ' ' + buffer.byteLength)\n\t\treturn new Blob([buffer], {type: 'application/octet-stream'})\n\n\t}\n\n\t/**\n\t * Transform all vertices by `matrix` and all normals by the inverse transpose of `matrix`.\n\t *\n\t * Index buffer data is referenced.\n\t */\n\ttransform(m4: M4): this {\n\t\tconst mesh = new Mesh()\n\t\tmesh.vertices = m4.transformedPoints(this.vertices)\n\t\tif (this.normals) {\n\t\t\tmesh.addVertexBuffer('normals', 'ts_Normal')\n\t\t\tconst invTrans = m4.as3x3().inversed().transposed().normalized()\n\t\t\tmesh.normals = this.normals.map(n => invTrans.transformVector(n).unit())\n\t\t\t// mesh.normals.forEach(n => assert(n.hasLength(1)))\n\t\t}\n\t\tfor (const name in this.indexBuffers) {\n\t\t\tmesh.addIndexBuffer(name)\n\t\t\t;(mesh as any)[name] = (this as any)[name]\n\t\t}\n\t\tfor (const attribute in this.vertexBuffers) {\n\t\t\tif ('ts_Vertex' !== attribute && 'ts_Normal' !== attribute) {\n\t\t\t\tconst name = this.vertexBuffers[attribute].name!\n\t\t\t\tmesh.addVertexBuffer(name, attribute)\n\t\t\t\t;(mesh as any)[name] = (this as any)[name]\n\t\t\t}\n\t\t}\n\t\tthis.hasBeenCompiled && mesh.compile()\n\t\treturn mesh as this\n\t}\n\n\t/**\n\t * Computes a new normal for each vertex from the average normal of the neighboring triangles. This means\n\t * adjacent triangles must share vertices for the resulting normals to be smooth.\n\t */\n\tcomputeNormalsFromFlatTriangles(this: Mesh & { TRIANGLES: int[] }): this & { normals: V3[] } {\n\t\tif (!this.normals) this.addVertexBuffer('normals', 'ts_Normal')\n\t\t// tslint:disable:no-string-literal\n\t\t//this.vertexBuffers['ts_Normal'].data = arrayFromFunction(this.vertices.length, i => V3.O)\n\n\t\tconst TRIANGLES = this.TRIANGLES, vertices = this.vertices, normals = this.normals!\n\t\tnormals.length = vertices.length\n\t\tfor (let i = 0; i < TRIANGLES.length; i += 3) {\n\t\t\tconst ai = TRIANGLES[i], bi = TRIANGLES[i + 1], ci = TRIANGLES[i + 2]\n\t\t\tconst a = vertices[ai]\n\t\t\tconst b = vertices[bi]\n\t\t\tconst c = vertices[ci]\n\t\t\tconst normal = b.minus(a).cross(c.minus(a)).unit()\n\t\t\tnormals[ai] = normals[ai].plus(normal)\n\t\t\tnormals[bi] = normals[bi].plus(normal)\n\t\t\tnormals[ci] = normals[ci].plus(normal)\n\t\t}\n\t\tfor (let i = 0; i < vertices.length; i++) {\n\t\t\tnormals[i] = normals[i].unit()\n\t\t}\n\t\tthis.hasBeenCompiled = false\n\t\treturn this as any\n\t}\n\n\n\t/**\n\t * Populate the specified index buffer (default 'LINES') from the `triangles` index buffer.\n\t */\n\tcomputeWireframeFromFlatTriangles(this: Mesh & { TRIANGLES: int[] }): this & { LINES: int[] }\n\tcomputeWireframeFromFlatTriangles<T extends string>(this: Mesh & { TRIANGLES: int[] },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tindexBufferName: T): this & { [k in T]: int[] }\n\tcomputeWireframeFromFlatTriangles(this: any, indexBufferName: string = 'LINES'): this {\n\t\tif (!this.TRIANGLES) throw new Error('TRIANGLES must be defined.')\n\t\tconst canonEdges = new Set()\n\n\t\tfunction canonEdge(i0: int, i1: int) {\n\t\t\tconst iMin = min(i0, i1), iMax = max(i0, i1)\n\t\t\treturn (iMin << 16) | iMax\n\t\t}\n\n\t\t// function uncanonEdge(key) {\n\t\t// \treturn [key >> 16, key & 0xffff]\n\t\t// }\n\t\tconst t = this.TRIANGLES\n\t\tfor (let i = 0; i < t.length; i += 3) {\n\t\t\tcanonEdges.add(canonEdge(t[i + 0], t[i + 1]))\n\t\t\tcanonEdges.add(canonEdge(t[i + 1], t[i + 2]))\n\t\t\tcanonEdges.add(canonEdge(t[i + 2], t[i + 0]))\n\t\t}\n\t\tconst data = indexBufferName\n\t\tif (!this[data]) this.addIndexBuffer(indexBufferName)\n\t\t//this.LINES = new Array(canonEdges.size)\n\t\tcanonEdges.forEach(val => this[data].push(val >> 16, val & 0xffff))\n\t\tthis.hasBeenCompiled = false\n\t\treturn this\n\t}\n\n\tcomputeWireframeFromFlatTrianglesClosedMesh(this: Mesh & { TRIANGLES: int[] }): this & { LINES: int[] }\n\tcomputeWireframeFromFlatTrianglesClosedMesh<T extends string>(this: Mesh & { TRIANGLES: int[] },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  indexBufferName: T): this & { [k in T]: int[] }\n\tcomputeWireframeFromFlatTrianglesClosedMesh(this: any, indexBufferName: string = 'LINES'): this {\n\t\tif (!this.TRIANGLES) throw new Error('TRIANGLES must be defined.')\n\t\tif (!this.LINES) this.addIndexBuffer('LINES')\n\t\tconst tris = this.TRIANGLES\n\t\tif (!this[indexBufferName]) this.addIndexBuffer(indexBufferName)\n\t\tconst lines = this[indexBufferName]\n\t\tfor (let i = 0; i < tris.length; i += 3) {\n\t\t\tif (tris[i + 0] < tris[i + 1]) lines.push(tris[i + 0], tris[i + 1])\n\t\t\tif (tris[i + 1] < tris[i + 2]) lines.push(tris[i + 1], tris[i + 2])\n\t\t\tif (tris[i + 2] < tris[i + 0]) lines.push(tris[i + 2], tris[i + 0])\n\t\t}\n\t\tthis.hasBeenCompiled = false\n\t\treturn this\n\t}\n\n\tcomputeNormalLines(this: Mesh & { normals: V3[] }, length: number): this & { LINES: int[] }\n\tcomputeNormalLines<T extends string>(this: Mesh & { normals: V3[] },\n\t\t\t\t\t\t\t\t\t\t length: number, indexBufferName: T): this & { [k in T]: int[] }\n\tcomputeNormalLines(this: any, length: number = 1, indexBufferName: string = 'LINES') {\n\t\tif (!this.normals) {\n\t\t\tthrow new Error('normals must be defined.')\n\t\t}\n\t\tconst vs = this.vertices, si = this.vertices.length\n\t\tif (!this[indexBufferName]) this.addIndexBuffer(indexBufferName)\n\n\t\tfor (let i = 0; i < this.normals.length; i++) {\n\t\t\tvs[si + i] = vs[i].plus(this.normals[i].toLength(length))\n\t\t\tthis[indexBufferName].push(si + i, i)\n\t\t}\n\t\tthis.hasBeenCompiled = false\n\t\treturn this\n\t}\n\n\tgetAABB(): AABB {\n\t\treturn new AABB().addPoints(this.vertices)\n\t}\n\n\tgetBoundingSphere(): { center: V3, radius: number } {\n\t\tconst sphere = {center: this.getAABB().getCenter(), radius: 0}\n\t\tfor (let i = 0; i < this.vertices.length; i++) {\n\t\t\tsphere.radius = Math.max(sphere.radius, this.vertices[i].minus(sphere.center).length())\n\t\t}\n\t\treturn sphere\n\t}\n\n\t/**\n\t * Generates a square mesh in the XY plane.\n\t * Texture coordinates (buffer \"coords\") are set to go from 0 to 1 in either direction.\n\t *\n\t * @param {Object=} options\n\t * @param {number=} options.detail Defaults to 1\n\t * @param {number=} options.detailX Defaults to options.detail. Number of subdivisions in X direction.\n\t * @param {number=} options.detailY Defaults to options.detail. Number of subdivisions in Y direction.j\n\t * @param {number=} options.width defaults to 1\n\t * @param {number=} options.height defaults to 1\n\t * @param {number=} options.startX defaults to 0\n\t * @param {number=} options.startY defaults to 0\n\t */\n\tstatic plane(options: {\n\t\tdetail?: int,\n\t\tdetailX?: int,\n\t\tdetailY?: int,\n\t\twidth?: number,\n\t\theight?: number,\n\t\tstartX?: number,\n\t\tstartY?: number\n\t} = {}) {\n\t\tconst detailX = options.detailX || options.detail || 1\n\t\tconst detailY = options.detailY || options.detail || 1\n\t\tconst startX = options.startX || 0\n\t\tconst startY = options.startY || 0\n\t\tconst width = options.width || 1\n\t\tconst height = options.height || 1\n\t\tconst mesh = new Mesh()\n\t\t\t.addIndexBuffer('LINES')\n\t\t\t.addIndexBuffer('TRIANGLES')\n\t\t\t.addVertexBuffer('normals', 'ts_Normal')\n\t\t\t.addVertexBuffer('coords', 'ts_TexCoord')\n\n\t\tfor (let j = 0; j <= detailY; j++) {\n\t\t\tconst t = j / detailY\n\t\t\tfor (let i = 0; i <= detailX; i++) {\n\t\t\t\tconst s = i / detailX\n\t\t\t\tmesh.vertices.push(new V3(startX + s * width, startY + t * height, 0))\n\t\t\t\tmesh.coords.push([s, t])\n\t\t\t\tmesh.normals.push(V3.Z)\n\t\t\t\tif (i < detailX && j < detailY) {\n\t\t\t\t\tconst offset = i + j * (detailX + 1)\n\t\t\t\t\tmesh.TRIANGLES.push(\n\t\t\t\t\t\toffset, offset + detailX + 1, offset + 1,\n\t\t\t\t\t\toffset + detailX + 1, offset + detailX + 2, offset + 1)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < detailX; i++) {\n\t\t\tmesh.LINES.push(i, i + 1)\n\t\t\tmesh.LINES.push((detailX + 1) * detailY + i, (detailX + 1) * detailY + i + 1)\n\t\t}\n\t\tfor (let j = 0; j < detailY; j++) {\n\t\t\tmesh.LINES.push(detailX * j, detailX * (j + 1) + 1)\n\t\t\tmesh.LINES.push(detailX * (j + 1), detailX * (j + 2) + 1)\n\t\t}\n\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\t// unique corners of a unit cube. Used by Mesh.cube to generate a cube mesh.\n\tstatic UNIT_CUBE_CORNERS = [\n\t\tV3.O,\n\t\tnew V3(0, 0, 1),\n\t\tnew V3(0, 1, 0),\n\t\tnew V3(0, 1, 1),\n\n\t\tnew V3(1, 0, 0),\n\t\tnew V3(1, 0, 1),\n\t\tnew V3(1, 1, 0),\n\t\tV3.XYZ,\n\t]\n\n\t/**\n\t * Generates a unit cube (1x1x1) starting at the origin and extending into the (+ + +) octant.\n\t * I.e. box from V3.O to V3(1,1,1)\n\t * Creates line (only cube edges), triangle, vertex and normal1 buffers.\n\t */\n\tstatic cube() {\n\t\tconst mesh = new Mesh()\n\t\t\t.addVertexBuffer('normals', 'ts_Normal')\n\t\t\t.addIndexBuffer('TRIANGLES')\n\t\t\t.addIndexBuffer('LINES')\n\n\t\t// basically indexes for faces of the cube. vertices each need to be added 3 times,\n\t\t// as they have different normals depending on the face being rendered\n\t\tconst VERTEX_CORNERS = [\n\t\t\t0, 1, 2, 3, // X = 0\n\t\t\t4, 5, 6, 7, // X = 1\n\n\t\t\t0, 4, 1, 5, // Y = 0\n\t\t\t2, 6, 3, 7, // Y = 1\n\n\t\t\t2, 6, 0, 4, // Z = 0\n\t\t\t3, 7, 1, 5, // Z = 1\n\t\t]\n\t\tmesh.vertices = VERTEX_CORNERS.map(i => Mesh.UNIT_CUBE_CORNERS[i])\n\t\tmesh.normals = [V3.X.negated(), V3.X, V3.Y.negated(), V3.Y, V3.Z.negated(), V3.Z].flatMap(v => [v, v, v, v])\n\t\tfor (let i = 0; i < 6 * 4; i += 4) {\n\t\t\tpushQuad(mesh.TRIANGLES, 0 != i % 8,\n\t\t\t\tVERTEX_CORNERS[i], VERTEX_CORNERS[i + 1], VERTEX_CORNERS[i + 2], VERTEX_CORNERS[i + 3])\n\t\t}\n\t\t// indexes of LINES relative to UNIT_CUBE_CORNERS. Mapped to VERTEX_CORNERS.indexOf\n\t\t// so they make sense in the context of the mesh\n\t\tmesh.LINES = [\n\t\t\t0, 1,\n\t\t\t0, 2,\n\t\t\t1, 3,\n\t\t\t2, 3,\n\n\t\t\t0, 4,\n\t\t\t1, 5,\n\t\t\t2, 6,\n\t\t\t3, 7,\n\n\t\t\t4, 5,\n\t\t\t4, 6,\n\t\t\t5, 7,\n\t\t\t6, 7,\n\t\t].map(i => VERTEX_CORNERS.indexOf(i))\n\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\tstatic isocahedron() {\n\t\treturn Mesh.sphere(0)\n\t}\n\n\tstatic sphere2(las: int, longs: int) {\n\t\tconst baseVertices = arrayFromFunction(las, i => {\n\t\t\tconst angle = i / (las - 1) * PI - PI / 2\n\t\t\treturn new V3(0, cos(angle), sin(angle))\n\t\t})\n\t\treturn Mesh.rotation(baseVertices, {anchor: V3.O, dir1: V3.Z}, 2 * PI, longs, true, baseVertices)\n\t}\n\n\t/**\n\t * Returns a sphere mesh with radius 1 created by subdividing the faces of a isocahedron (20-sided) recursively\n\t * The sphere is positioned at the origin\n\t * @param subdivisions\n\t *      How many recursive divisions to do. A subdivision divides a triangle into 4,\n\t *      so the total number of triangles is 20 * 4^subdivisions\n\t * @returns\n\t *      Contains vertex and normal1 buffers and index buffers for triangles and LINES\n\t */\n\tstatic sphere(subdivisions: int = 3) {\n\t\tconst golden = (1 + Math.sqrt(5)) / 2, u = new V3(1, golden, 0).unit(), s = u.x, t = u.y\n\t\t// base vertices of isocahedron\n\t\tconst vertices = [\n\t\t\tnew V3(-s, t, 0),\n\t\t\tnew V3(s, t, 0),\n\t\t\tnew V3(-s, -t, 0),\n\t\t\tnew V3(s, -t, 0),\n\n\t\t\tnew V3(0, -s, t),\n\t\t\tnew V3(0, s, t),\n\t\t\tnew V3(0, -s, -t),\n\t\t\tnew V3(0, s, -t),\n\n\t\t\tnew V3(t, 0, -s),\n\t\t\tnew V3(t, 0, s),\n\t\t\tnew V3(-t, 0, -s),\n\t\t\tnew V3(-t, 0, s)]\n\t\t// base triangles of isocahedron\n\t\tconst triangles = [\n\t\t\t// 5 faces around point 0\n\t\t\t0, 11, 5,\n\t\t\t0, 5, 1,\n\t\t\t0, 1, 7,\n\t\t\t0, 7, 10,\n\t\t\t0, 10, 11,\n\n\t\t\t// 5 adjacent faces\n\t\t\t1, 5, 9,\n\t\t\t5, 11, 4,\n\t\t\t11, 10, 2,\n\t\t\t10, 7, 6,\n\t\t\t7, 1, 8,\n\n\t\t\t// 5 faces around point 3\n\t\t\t3, 9, 4,\n\t\t\t3, 4, 2,\n\t\t\t3, 2, 6,\n\t\t\t3, 6, 8,\n\t\t\t3, 8, 9,\n\n\t\t\t// 5 adjacent faces\n\t\t\t4, 9, 5,\n\t\t\t2, 4, 11,\n\t\t\t6, 2, 10,\n\t\t\t8, 6, 7,\n\t\t\t9, 8, 1,\n\t\t]\n\n\t\t/**\n\t\t * Tesselates triangle a b c\n\t\t * a b c must already be in vertices with the indexes ia ib ic\n\t\t * res is the number of subdivisions to do. 0 just results in triangle and line indexes being added to the\n\t\t * respective buffers.\n\t\t */\n\t\tfunction tesselateRecursively(a: V3, b: V3, c: V3, res: int, vertices: V3[], triangles: int[],\n\t\t\t\t\t\t\t\t\t  ia: int, ib: int, ic: int, lines: int[]) {\n\t\t\tif (0 == res) {\n\t\t\t\ttriangles.push(ia, ib, ic)\n\t\t\t\tif (ia < ib) lines.push(ia, ib)\n\t\t\t\tif (ib < ic) lines.push(ib, ic)\n\t\t\t\tif (ic < ia) lines.push(ic, ia)\n\t\t\t} else {\n\t\t\t\t// subdivide the triangle abc into 4 by adding a vertex (with the correct distance from the origin)\n\t\t\t\t// between each segment ab, bc and cd, then calling the function recursively\n\t\t\t\tconst abMid1 = a.plus(b).toLength(1), bcMid1 = b.plus(c).toLength(1), caMid1 = c.plus(a).toLength(1)\n\t\t\t\t// indexes of new vertices:\n\t\t\t\tconst iabm = vertices.length, ibcm = iabm + 1, icam = iabm + 2\n\t\t\t\tvertices.push(abMid1, bcMid1, caMid1)\n\t\t\t\ttesselateRecursively(abMid1, bcMid1, caMid1, res - 1, vertices, triangles, iabm, ibcm, icam, lines)\n\t\t\t\ttesselateRecursively(a, abMid1, caMid1, res - 1, vertices, triangles, ia, iabm, icam, lines)\n\t\t\t\ttesselateRecursively(b, bcMid1, abMid1, res - 1, vertices, triangles, ib, ibcm, iabm, lines)\n\t\t\t\ttesselateRecursively(c, caMid1, bcMid1, res - 1, vertices, triangles, ic, icam, ibcm, lines)\n\t\t\t}\n\t\t}\n\n\t\tconst mesh = new Mesh()\n\t\t\t.addVertexBuffer('normals', 'ts_Normal')\n\t\t\t.addIndexBuffer('TRIANGLES')\n\t\t\t.addIndexBuffer('LINES')\n\t\tmesh.vertices.push(...vertices)\n\t\tsubdivisions = undefined == subdivisions ? 4 : subdivisions\n\t\tfor (let i = 0; i < 20; i++) {\n\t\t\tconst [ia, ic, ib] = triangles.slice(i * 3, i * 3 + 3)\n\t\t\ttesselateRecursively(vertices[ia], vertices[ic], vertices[ib], subdivisions, mesh.vertices, mesh.TRIANGLES, ia, ic, ib, mesh.LINES)\n\t\t}\n\n\t\tmesh.normals = mesh.vertices\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\tstatic aabb(aabb: AABB) {\n\t\tconst matrix = M4.multiplyMultiple(\n\t\t\tM4.translate(aabb.min),\n\t\t\tM4.scale(aabb.size().max(new V3(NLA_PRECISION, NLA_PRECISION, NLA_PRECISION))))\n\t\tconst mesh = Mesh.cube().transform(matrix)\n\t\t// mesh.vertices = aabb.corners()\n\t\tmesh.computeNormalLines(20)\n\t\tmesh.compile()\n\n\t\treturn mesh\n\t}\n\n\n\tstatic offsetVertices(vertices: V3[], offset: V3, close: boolean): Mesh & { TRIANGLES: int[], coords: [number, number][] }\n\tstatic offsetVertices(vertices: V3[], offset: V3, close: boolean, normals: V3[]): Mesh & { TRIANGLES: int[], coords: [number, number][], normals: V3[] }\n\tstatic offsetVertices(vertices: V3[], offset: V3, close: boolean, normals?: V3[]) {\n\t\tassertVectors.apply(undefined, vertices)\n\t\tassertVectors(offset)\n\n\t\tconst mesh = new Mesh()\n\t\t\t.addIndexBuffer('TRIANGLES')\n\t\t\t.addVertexBuffer('coords', 'ts_TexCoord')\n\t\tnormals && mesh.addVertexBuffer('normals', 'ts_Normal')\n\t\tmesh.vertices = vertices.concat(vertices.map(v => v.plus(offset)))\n\t\tconst vl = vertices.length\n\t\tmesh.coords = arrayFromFunction(vl * 2, (i): [number, number] => [(i % vl) / vl, (i / vl) | 0])\n\n\t\tconst triangles = mesh.TRIANGLES\n\t\tfor (let i = 0; i < vertices.length - 1; i++) {\n\t\t\tpushQuad(triangles, false,\n\t\t\t\ti, i + 1,\n\t\t\t\tvertices.length + i, vertices.length + i + 1)\n\t\t}\n\t\tif (close) {\n\t\t\tpushQuad(triangles, false, vertices.length - 1, 0, vertices.length * 2 - 1, vertices.length)\n\t\t}\n\t\tif (normals) {\n\t\t\tmesh.normals = normals.concat(normals)\n\t\t}\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\t// Creates a new $Mesh by rotating $vertices by $totalRads around $lineAxis (according to the right-hand\n\t// rule). $steps is the number of steps to take. $close is whether the vertices of the first and last step\n\t// should be connected by triangles. If $normals is set (pass an array of V3s of the same length as $vertices),\n\t// these will also be rotated and correctly added to the mesh.\n\t// @example const precious = Mesh.rotation([V(10, 0, -2), V(10, 0, 2), V(11, 0, 2), V(11, 0, -2)], , L3.Z, 512)\n\tstatic rotation(vertices: V3[], lineAxis: { anchor: V3, dir1: V3 }, totalRads: raddd, steps: int, close = true, normals?: V3[]) {\n\t\tconst mesh = new Mesh().addIndexBuffer('TRIANGLES')\n\t\tnormals && mesh.addVertexBuffer('normals', 'ts_Normal')\n\t\tconst vc = vertices.length, vTotal = vc * steps\n\n\t\tconst rotMat = new M4()\n\t\tconst triangles = mesh.TRIANGLES\n\t\tfor (let i = 0; i < steps; i++) {\n\t\t\t// add triangles\n\t\t\tconst rads = totalRads / steps * i\n\t\t\tM4.rotateLine(lineAxis.anchor, lineAxis.dir1, rads, rotMat)\n\t\t\tmesh.vertices.push(...rotMat.transformedPoints(vertices))\n\n\t\t\tnormals && mesh.normals!.push(...rotMat.transformedVectors(normals))\n\t\t\tif (close || i !== steps - 1) {\n\t\t\t\tfor (let j = 0; j < vc - 1; j++) {\n\t\t\t\t\tpushQuad(triangles, false,\n\t\t\t\t\t\ti * vc + j + 1, i * vc + j,\n\t\t\t\t\t\t((i + 1) * vc + j + 1) % vTotal, ((i + 1) * vc + j) % vTotal)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n\n\tstatic parametric(pF: (d: number, z: number) => V3, pN: undefined,\n\t\tsMin: number, sMax: number, tMin: number, tMax: number, sRes: number, tRes: number): Mesh & { TRIANGLES: int[] }\n\tstatic parametric(pF: (d: number, z: number) => V3, pN: ((d: number, z: number) => V3),\n\t\tsMin: number, sMax: number, tMin: number, tMax: number, sRes: number, tRes: number): Mesh & { normals: V3[], TRIANGLES: int[] }\n\tstatic parametric(pF: (d: number, z: number) => V3, pN: ((d: number, z: number) => V3) | undefined,\n\t\tsMin: number, sMax: number, tMin: number, tMax: number, sRes: number, tRes: number) {\n\t\tconst mesh = new Mesh()\n\t\t\t.addIndexBuffer('TRIANGLES')\n\t\t\t.addVertexBuffer('normals', 'ts_Normal')\n\t\tfor (let si = 0; si <= sRes; si++) {\n\t\t\tconst s = lerp(sMin, sMax, si / sRes)\n\t\t\tfor (let ti = 0; ti <= tRes; ti++) {\n\t\t\t\tconst t = lerp(tMin, tMax, ti / tRes)\n\t\t\t\tmesh.vertices.push(pF(s, t))\n\t\t\t\tpN && mesh.normals.push(pN(s, t))\n\t\t\t\tif (ti < tRes && si < sRes) {\n\t\t\t\t\tconst offset = ti + si * (tRes + 1)\n\t\t\t\t\tpushQuad(mesh.TRIANGLES, false,\n\t\t\t\t\t\toffset, offset + tRes + 1, offset + 1, offset + tRes + 2)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn mesh\n\t}\n\n\tstatic load(json: { vertices: Tuple3<number>[], triangles?: Tuple3<number>[], normals?: Tuple3<number>[] }) {\n\t\tconst mesh = new Mesh()\n\t\tif (Array.isArray(json.vertices[0])) {\n\t\t\tmesh.vertices = json.vertices.map(x => V(x))\n\t\t} else {\n\t\t\tthrow new Error()\n\t\t}\n\t\tif (json.triangles) {\n\t\t\tmesh.addIndexBuffer('TRIANGLES')\n\t\t\t;(mesh as any).TRIANGLES = json.triangles\n\t\t}\n\t\tif (json.normals) {\n\t\t\tmesh.addVertexBuffer('normals', 'ts_Normal')\n\t\t\t;(mesh as any).normals = json.normals\n\t\t}\n\t\tmesh.compile()\n\t\treturn mesh\n\t}\n}","/* tslint:disable:no-string-literal */\nimport {assert, assertf, assertInst, assertVectors, int, M4, NLA_DEBUG, V3} from 'ts3dutils'\n\nimport {currentGL, GL_COLOR, TSGLContext, Buffer, Mesh} from './index'\n\nimport GL = WebGLRenderingContextStrict\nconst WGL = WebGLRenderingContext as any as WebGLRenderingContextStrict.Constants\n\n/**\n * These are all the draw modes usable in OpenGL ES\n */\nconst DRAW_MODE_NAMES = {\n\t[WGL.POINTS]: 'POINTS',\n\t[WGL.LINES]: 'LINES',\n\t[WGL.LINE_STRIP]: 'LINE_STRIP',\n\t[WGL.LINE_LOOP]: 'LINE_LOOP',\n\t[WGL.TRIANGLES]: 'TRIANGLES',\n\t[WGL.TRIANGLE_STRIP]: 'TRIANGLE_STRIP',\n\t[WGL.TRIANGLE_FAN]: 'TRIANGLE_FAN',\n}\nconst DRAW_MODE_CHECKS: { [type: string]: (x: int) => boolean } = {\n\t[WGL.POINTS]: _ => true,\n\t[WGL.LINES]: x => 0 == x % 2, // divisible by 2\n\t[WGL.LINE_STRIP]: x => x > 2, // need at least 2\n\t[WGL.LINE_LOOP]: x => x > 2, // more like > 3, but oh well\n\t[WGL.TRIANGLES]: x => 0 == x % 3, // divisible by 3\n\t[WGL.TRIANGLE_STRIP]: x => x > 3,\n\t[WGL.TRIANGLE_FAN]: x => x > 3,\n}\n\nexport const SHADER_VAR_TYPES = ['FLOAT', 'FLOAT_MAT2', 'FLOAT_MAT3', 'FLOAT_MAT4', 'FLOAT_VEC2', 'FLOAT_VEC3', 'FLOAT_VEC4', 'INT', 'INT_VEC2', 'INT_VEC3', 'INT_VEC4', 'UNSIGNED_INT']\n\n\nexport function isArray<T>(obj: any): obj is T[] {\n\treturn Array == obj.constructor || Float32Array == obj.constructor || Float64Array == obj.constructor\n}\n\nexport interface UniformTypesMap {\n\tFLOAT_VEC4: GL_COLOR | V3\n\tFLOAT_VEC3: [number, number, number] | V3\n\tFLOAT_VEC2: [number, number] | V3\n\tFLOAT: number\n\tINT: int\n\tFLOAT_MAT4: M4 | number[]\n\tFLOAT_MAT3: M4 | number[]\n\tSAMPLER_2D: int\n\tBOOL: boolean\n}\nexport type UniformTypes = keyof UniformTypesMap\n\nfunction isFloatArray(obj: any): obj is number[] | Float64Array | Float32Array {\n\treturn Float32Array == obj.constructor || Float64Array == obj.constructor ||\n\t\tArray.isArray(obj) && obj.every(x => 'number' == typeof x)\n}\n\nfunction isIntArray(x: any) {\n\tif ([Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Uint16Array, Int32Array, Uint32Array]\n\t\t\t.some(y => x instanceof y)) {\n\t\treturn true\n\t}\n\treturn (x instanceof Float32Array || x instanceof Float64Array || Array.isArray(x)) &&\n\t\t(x as number[]).every(x => Number.isInteger(x))\n}\n\nexport type ShaderType<UniformTypes, AttributeTypes = {}> = string & { T?: UniformTypes, A?: AttributeTypes }\nexport type VarTypeMap = { [name: string]: UniformTypes }\nexport type ShaderSource<U extends VarTypeMap, IN extends VarTypeMap, OUT extends VarTypeMap, kind extends 'vertex' | 'fragment'> = string & { U: U, IN: IN, OUT: OUT, kind: kind }\n\n//const x:UniformTypes = undefined as 'FLOAT_VEC4' | 'FLOAT_VEC3'\nexport class Shader<UniformTypes extends VarTypeMap = any, AttributeTypes extends VarTypeMap = any> {\n\tprogram: WebGLProgram\n\tactiveMatrices: { [matrixName: string ]: boolean }\n\tattributeLocations: { [attributeName: string ]: number }\n\tconstantAttributes: { [attributeName: string ]: boolean }\n\tuniformLocations: { [uniformName: string ]: WebGLUniformLocation }\n\tuniformInfos: { [uniformName: string ]: GL.WebGLActiveInfo<GL.UniformType> }\n\tprojectionMatrixVersion = -1\n\tmodelViewMatrixVersion = -1\n\tgl: TSGLContext\n\n\t/**\n\t * Create shader drom typed vertex and fragment source. Weird generic arguments are because\n\t * the vertex shader is required to have the OUT types the fragment shader needs as IN,\n\t * but not vice-versa.\n\t */\n\tstatic create<\n\tFragSrc extends ShaderSource<{}, {}, {}, 'fragment'>,\n\tVertSrc extends ShaderSource<{}, {}, FragSrc['IN'], 'vertex'>>(\n\t\tvertexSource: VertSrc, fragmentSource: FragSrc, gl?: TSGLContext\n\t): Shader<VertSrc['U'] & FragSrc['U'], VertSrc['IN']>\n\t/**\n\t * Create shader from typed vertex and untyped fragment source. Uniform of the fragment shader\n\t * can optionally be manually specified.\n\t */\n\tstatic create<FU extends VarTypeMap, VertSrc extends ShaderSource<{}, {}, {}, 'vertex'>>(vertexSource: VertSrc, fragmentSource: string & { IN?: undefined }, gl?: TSGLContext): Shader<FU & VertSrc['U'], VertSrc['IN']>\n\t/**\n\t * Create shader from untyped vertex and typed fragment source. Uniform and attribute types of the shader\n\t * can optionally be manually specified.\n\t */\n\tstatic create<VU extends VarTypeMap, VA extends VarTypeMap, FragSrc extends ShaderSource<{}, {}, {}, 'vertex'>>(vertexSource: string & { IN?: undefined }, fragmentSource: FragSrc, gl?: TSGLContext): Shader<VU & FragSrc['U'], VA>\n\t/**\n\t * Create shader from untyped vertex and fragment source. Uniform and attribute types of the shader\n\t * can optionally be manually specified.\n\t */\n\tstatic create<U extends VarTypeMap = {}, A extends VarTypeMap = {}>(vertexSource: string & { IN?: undefined }, fragmentSource: string & { IN?: undefined }, gl?: TSGLContext): Shader<U, A>\n\tstatic create(vertexSource: string, fragmentSource: string, gl?: TSGLContext) {\n\t\treturn new Shader(vertexSource, fragmentSource, gl) as any\n\t}\n\n\t/**\n\t * Provides a convenient wrapper for WebGL shaders. A few uniforms and attributes,\n\t * prefixed with `gl_`, are automatically added to all shader sources to make\n\t * simple shaders easier to write.\n\t * Headers for the following variables are automatically prepended to the passed source. The correct variables\n\t * are also automatically passed to the shader when drawing.\n\t *\n\t * For vertex and fragment shaders:\n\t uniform mat3 ts_NormalMatrix;\n\t uniform mat4 ts_ModelViewMatrix;\n\t uniform mat4 ts_ProjectionMatrix;\n\t uniform mat4 ts_ModelViewProjectionMatrix;\n\t uniform mat4 ts_ModelViewMatrixInverse;\n\t uniform mat4 ts_ProjectionMatrixInverse;\n\t uniform mat4 ts_ModelViewProjectionMatrixInverse;\n\t *\n\t *\n\t * Example usage:\n\t *\n\t *  const shader = new GL.Shader(\n\t *      `void main() { gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex; }`,\n\t *      `uniform vec4 color; void main() { gl_FragColor = color; }`)\n\t *\n\t *  shader.uniforms({ color: [1, 0, 0, 1] }).draw(mesh)\n\t *\n\t * Compiles a shader program using the provided vertex and fragment shaders.\n\t */\n\tprotected constructor(vertexSource: string, fragmentSource: string, gl = currentGL()) {\n\t\t// const versionRegex = /^(?:\\s+|\\/\\/[\\s\\S]*?[\\r\\n]+|\\/\\*[\\s\\S]*?\\*\\/)+(#version\\s+(\\d+)\\s+es)/\n\t\t// Headers are prepended to the sources to provide some automatic functionality.\n\t\tconst header = `\n\t\tuniform mat3 ts_NormalMatrix;\n\t\tuniform mat4 ts_ModelViewMatrix;\n\t\tuniform mat4 ts_ProjectionMatrix;\n\t\tuniform mat4 ts_ModelViewProjectionMatrix;\n\t\tuniform mat4 ts_ModelViewMatrixInverse;\n\t\tuniform mat4 ts_ProjectionMatrixInverse;\n\t\tuniform mat4 ts_ModelViewProjectionMatrixInverse;\n\t`\n\t\tconst matrixNames = header.match(/\\bts_\\w+/g)\n\n\t\t// Compile and link errors are thrown as strings.\n\t\tfunction compileSource(type: GL.ShaderType, source: string) {\n\t\t\tconst shader = gl.createShader(type)!\n\t\t\tgl.shaderSource(shader, source)\n\t\t\tgl.compileShader(shader)\n\t\t\tif (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n\t\t\t\tthrow new Error('compile error: ' + gl.getShaderInfoLog(shader))\n\t\t\t}\n\t\t\treturn shader\n\t\t}\n\n\n\t\tthis.gl = gl\n\t\tthis.program = gl.createProgram()!\n\t\tgl.attachShader(this.program, compileSource(gl.VERTEX_SHADER, vertexSource))\n\t\tgl.attachShader(this.program, compileSource(gl.FRAGMENT_SHADER, fragmentSource))\n\t\tgl.linkProgram(this.program)\n\t\tif (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n\t\t\tthrow new Error('link error: ' + gl.getProgramInfoLog(this.program))\n\t\t}\n\t\tthis.attributeLocations = {}\n\t\tthis.uniformLocations = {}\n\t\tthis.constantAttributes = {}\n\n\t\t// Check for the use of built-in matrices that require expensive matrix\n\t\t// multiplications to compute, and record these in `activeMatrices`.\n\t\tthis.activeMatrices = {}\n\t\tmatrixNames && matrixNames.forEach(name => {\n\t\t\tif (gl.getUniformLocation(this.program, name)) {\n\t\t\t\tthis.activeMatrices[name] = true\n\t\t\t}\n\t\t})\n\n\t\tthis.uniformInfos = {}\n\t\tfor (let i = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS); i-- > 0;) {\n\t\t\t// see https://www.khronos.org/registry/OpenGL-Refpages/es2.0/xhtml/glGetActiveUniform.xml\n\t\t\t// this.program has already been checked\n\t\t\t// i is in bounds\n\t\t\tconst info = gl.getActiveUniform(this.program, i)!\n\t\t\tthis.uniformInfos[info.name] = info\n\t\t}\n\t}\n\n\n\t/**\n\t * Set a uniform for each property of `uniforms`. The correct `viewerGL.uniform*()` method is inferred from the\n\t * value types and from the stored uniform sampler flags.\n\t */\n\tuniforms(uniforms: Partial<{ [K in keyof UniformTypes]: UniformTypesMap[UniformTypes[K]] }>): this {\n\t\tconst gl = this.gl\n\t\tgl.useProgram(this.program)\n\n\t\tfor (const name in uniforms) {\n\t\t\tconst location = this.uniformLocations[name] || gl.getUniformLocation(this.program, name)\n\t\t\t// !location && console.warn(name + ' uniform is not used in shader')\n\t\t\tif (!location) continue\n\t\t\tthis.uniformLocations[name] = location\n\t\t\tlet value: any = uniforms[name] as any\n\t\t\tconst info = this.uniformInfos[name]\n\t\t\tif (NLA_DEBUG) {\n\t\t\t\t// TODO: better errors\n\t\t\t\tif (gl.SAMPLER_2D == info.type || gl.SAMPLER_CUBE == info.type || gl.INT == info.type) {\n\t\t\t\t\tif (1 == info.size) {\n\t\t\t\t\t\tassert(Number.isInteger(value))\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert(isIntArray(value) && value.length == info.size, 'value must be int array if info.size != 1')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tassert(gl.FLOAT != info.type ||\n\t\t\t\t\t(1 == info.size && 'number' === typeof value || isFloatArray(value) ))\n\t\t\t\tassert(gl.FLOAT_VEC3 != info.type ||\n\t\t\t\t\t(1 == info.size && value instanceof V3 ||\n\t\t\t\t\t\tArray.isArray(value) && info.size == value.length && assertVectors(...value)))\n\t\t\t\tassert(gl.FLOAT_VEC4 != info.type || 1 != info.size || isFloatArray(value) && value.length == 4)\n\t\t\t\tassert(gl.FLOAT_MAT4 != info.type || value instanceof M4, () => value.toSource())\n\t\t\t\tassert(gl.FLOAT_MAT3 != info.type || value.length == 9 || value instanceof M4)\n\t\t\t}\n\t\t\tif (value instanceof V3) {\n\t\t\t\tvalue = value.toArray()\n\t\t\t}\n\t\t\tif (gl.FLOAT_VEC4 == info.type && info.size != 1) {\n\t\t\t\tif (value instanceof Float32Array || value instanceof Float64Array) {\n\t\t\t\t\tgl.uniform4fv(location, value instanceof Float32Array ? value : Float32Array.from(value))\n\t\t\t\t} else {\n\t\t\t\t\tgl.uniform4fv(location, value.concatenated())\n\t\t\t\t}\n\t\t\t} else if (gl.FLOAT == info.type && info.size != 1) {\n\t\t\t\tgl.uniform1fv(location, value)\n\t\t\t} else if (gl.FLOAT_VEC3 == info.type && info.size != 1) {\n\t\t\t\tgl.uniform3fv(location, V3.pack(value))\n\t\t\t} else if (value.length) {\n\t\t\t\tswitch (value.length) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tgl.uniform1fv(location, value)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tgl.uniform2fv(location, value)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tgl.uniform3fv(location, value)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tgl.uniform4fv(location, value)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t// Matrices are automatically transposed, since WebGL uses column-major\n\t\t\t\t\t// indices instead of row-major indices.\n\t\t\t\t\tcase 9:\n\t\t\t\t\t\tgl.uniformMatrix3fv(location, false, new Float32Array([\n\t\t\t\t\t\t\tvalue[0], value[3], value[6],\n\t\t\t\t\t\t\tvalue[1], value[4], value[7],\n\t\t\t\t\t\t\tvalue[2], value[5], value[8],\n\t\t\t\t\t\t]))\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 16:\n\t\t\t\t\t\tgl.uniformMatrix4fv(location, false, new Float32Array([\n\t\t\t\t\t\t\tvalue[0], value[4], value[8], value[12],\n\t\t\t\t\t\t\tvalue[1], value[5], value[9], value[13],\n\t\t\t\t\t\t\tvalue[2], value[6], value[10], value[14],\n\t\t\t\t\t\t\tvalue[3], value[7], value[11], value[15],\n\t\t\t\t\t\t]))\n\t\t\t\t\t\tbreak\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error('don\\'t know how to load uniform \"' + name + '\" of length ' + value.length)\n\t\t\t\t}\n\t\t\t} else if ('number' == typeof value) {\n\t\t\t\tif (gl.SAMPLER_2D == info.type || gl.SAMPLER_CUBE == info.type || gl.INT == info.type) {\n\t\t\t\t\tgl.uniform1i(location, value)\n\t\t\t\t} else {\n\t\t\t\t\tgl.uniform1f(location, value)\n\t\t\t\t}\n\t\t\t} else if ('boolean' == typeof value) {\n\t\t\t\tgl.uniform1i(location, +value)\n\t\t\t} else if (value instanceof M4) {\n\t\t\t\tconst m = value.m\n\t\t\t\tif (gl.FLOAT_MAT4 == info.type) {\n\t\t\t\t\tgl.uniformMatrix4fv(location, false, [\n\t\t\t\t\t\tm[0], m[4], m[8], m[12],\n\t\t\t\t\t\tm[1], m[5], m[9], m[13],\n\t\t\t\t\t\tm[2], m[6], m[10], m[14],\n\t\t\t\t\t\tm[3], m[7], m[11], m[15]])\n\t\t\t\t} else if (gl.FLOAT_MAT3 == info.type) {\n\t\t\t\t\tgl.uniformMatrix3fv(location, false, [\n\t\t\t\t\t\tm[0], m[4], m[8],\n\t\t\t\t\t\tm[1], m[5], m[9],\n\t\t\t\t\t\tm[2], m[6], m[10]])\n\t\t\t\t} else if (gl.FLOAT_MAT2 == info.type) {\n\t\t\t\t\tgl.uniformMatrix2fv(location, false, new Float32Array([\n\t\t\t\t\t\tm[0], m[4],\n\t\t\t\t\t\tm[1], m[5]]))\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(`Can't assign M4 to ${info.type}`)\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new Error('attempted to set uniform \"' + name + '\" to invalid value ' + value)\n\t\t\t}\n\t\t}\n\n\t\treturn this\n\t}\n\n\tattributes(attributes: Partial<{ [K in keyof AttributeTypes]: UniformTypesMap[AttributeTypes[K]] }>): this {\n\t\tconst gl = this.gl\n\t\tgl.useProgram(this.program)\n\n\t\tfor (const name in attributes) {\n\t\t\tconst location = this.attributeLocations[name] || gl.getAttribLocation(this.program, name)\n\t\t\tif (location == -1) {\n\t\t\t\tif (!name.startsWith('ts_')) {\n\t\t\t\t\tconsole.warn(`Vertex buffer ${name} was not bound because the attribute is not active.`)\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tthis.attributeLocations[name] = location\n\t\t\tgl.disableVertexAttribArray(location)\n\t\t\tlet value = attributes[name]\n\t\t\tif (value instanceof V3) {\n\t\t\t\tvalue = value.toArray()\n\t\t\t}\n\t\t\tif ('number' === typeof value) {\n\t\t\t\tgl.vertexAttrib1f(location, value)\n\t\t\t} else {\n\t\t\t\tgl.vertexAttrib4fv(location, value as number[])\n\t\t\t\t// switch ((value as number[]).length) {\n\t\t\t\t// \tcase 1:\n\t\t\t\t// \t\tgl.vertexAttrib1fv(location, value as number[])\n\t\t\t\t// \t\tbreak\n\t\t\t\t// \tcase 2:\n\t\t\t\t// \t\tgl.vertexAttrib2fv(location, value as number[])\n\t\t\t\t// \t\tbreak\n\t\t\t\t// \tcase 3:\n\t\t\t\t// \t\tgl.vertexAttrib3fv(location, value as number[])\n\t\t\t\t// \t\tbreak\n\t\t\t\t// \tcase 4:\n\t\t\t\t// \t\tbreak\n\t\t\t\t// }\n\t\t\t}\n\t\t\tthis.constantAttributes[name] = true\n\t\t}\n\t\treturn this\n\t}\n\n\t/**\n\t * Sets all uniform matrix attributes, binds all relevant buffers, and draws the mesh geometry as indexed\n\t * triangles or indexed LINES. Set `mode` to `gl.LINES` (and either add indices to `LINES` or call\n\t * `computeWireframe()`) to draw the mesh in wireframe.\n\t *\n\t * @param mesh\n\t * @param mode Defaults to 'TRIANGLES'. Must be passed as string so the correct index buffer can be\n\t *     automatically drawn.\n\t * @param start int\n\t * @param count int\n\t */\n\tdraw(mesh: Mesh, mode: GL.DrawMode = WGL.TRIANGLES, start?: int, count?: int): this {\n\t\tassert(mesh.hasBeenCompiled, 'mesh.hasBeenCompiled')\n\t\tassert(undefined != DRAW_MODE_NAMES[mode])\n\t\tconst modeName: string = DRAW_MODE_NAMES[mode]\n\t\t// assert(mesh.indexBuffers[modeStr], `mesh.indexBuffers[${modeStr}] undefined`)\n\t\treturn this.drawBuffers(mesh.vertexBuffers, mesh.indexBuffers[modeName], mode, start, count)\n\t}\n\n\t/**\n\t * Sets all uniform matrix attributes, binds all relevant buffers, and draws the\n\t * indexed mesh geometry. The `vertexBuffers` argument is a map from attribute\n\t * names to `Buffer` objects of type `WGL.ARRAY_BUFFER`, `indexBuffer` is a `Buffer`\n\t * object of type `WGL.ELEMENT_ARRAY_BUFFER`, and `mode` is a WebGL primitive mode\n\t * like `WGL.TRIANGLES` or `WGL.LINES`. This method automatically creates and caches\n\t * vertex attribute pointers for attributes as needed.\n\t */\n\tdrawBuffers(vertexBuffers: { [attributeName: string]: Buffer },\n\t\t\t\tindexBuffer: Buffer | undefined,\n\t\t\t\tmode: GL.DrawMode = WGL.TRIANGLES,\n\t\t\t\tstart: int = 0, count?: int): this {\n\t\tconst gl = this.gl\n\t\tassert(undefined != DRAW_MODE_NAMES[mode])\n\t\tassertf(() => 1 <= Object.keys(vertexBuffers).length)\n\t\tObject.keys(vertexBuffers).forEach(key => assertInst(Buffer, vertexBuffers[key]))\n\n\t\t// Only varruct up the built-in matrices that are active in the shader\n\t\tconst on = this.activeMatrices\n\t\tconst modelViewMatrixInverse = (on['ts_ModelViewMatrixInverse'] || on['ts_NormalMatrix'])\n\t\t\t//&& this.modelViewMatrixVersion != gl.modelViewMatrixVersion\n\t\t\t&& gl.modelViewMatrix.inversed()\n\t\tconst projectionMatrixInverse = on['ts_ProjectionMatrixInverse']\n\t\t\t//&& this.projectionMatrixVersion != gl.projectionMatrixVersion\n\t\t\t&& gl.projectionMatrix.inversed()\n\t\tconst modelViewProjectionMatrix = (on['ts_ModelViewProjectionMatrix'] || on['ts_ModelViewProjectionMatrixInverse'])\n\t\t\t//&& (this.projectionMatrixVersion != gl.projectionMatrixVersion || this.modelViewMatrixVersion !=\n\t\t\t// gl.modelViewMatrixVersion)\n\t\t\t&& gl.projectionMatrix.times(gl.modelViewMatrix)\n\n\t\tconst uni: { [matrixName: string ]: M4 } = {} // Uniform Matrices\n\t\ton['ts_ModelViewMatrix']\n\t\t&& this.modelViewMatrixVersion != gl.modelViewMatrixVersion\n\t\t&& (uni['ts_ModelViewMatrix'] = gl.modelViewMatrix)\n\t\ton['ts_ModelViewMatrixInverse'] && (uni['ts_ModelViewMatrixInverse'] = modelViewMatrixInverse as M4)\n\t\ton['ts_ProjectionMatrix']\n\t\t&& this.projectionMatrixVersion != gl.projectionMatrixVersion\n\t\t&& (uni['ts_ProjectionMatrix'] = gl.projectionMatrix)\n\t\tprojectionMatrixInverse && (uni['ts_ProjectionMatrixInverse'] = projectionMatrixInverse)\n\t\tmodelViewProjectionMatrix && (uni['ts_ModelViewProjectionMatrix'] = modelViewProjectionMatrix)\n\t\tmodelViewProjectionMatrix && on['ts_ModelViewProjectionMatrixInverse']\n\t\t&& (uni['ts_ModelViewProjectionMatrixInverse'] = modelViewProjectionMatrix.inversed())\n\t\ton['ts_NormalMatrix']\n\t\t&& this.modelViewMatrixVersion != gl.modelViewMatrixVersion\n\t\t&& (uni['ts_NormalMatrix'] = (modelViewMatrixInverse as M4).transposed())\n\t\tthis.uniforms(uni as any)\n\t\tthis.projectionMatrixVersion = gl.projectionMatrixVersion\n\t\tthis.modelViewMatrixVersion = gl.modelViewMatrixVersion\n\n\t\t// Create and enable attribute pointers as necessary.\n\t\tlet minVertexBufferLength = Infinity\n\t\tfor (const attribute in vertexBuffers) {\n\t\t\tconst buffer = vertexBuffers[attribute]\n\t\t\tassert(buffer.hasBeenCompiled)\n\t\t\tconst location = this.attributeLocations[attribute] || gl.getAttribLocation(this.program, attribute)\n\t\t\tif (location == -1 || !buffer.buffer) {\n\t\t\t\tif (!attribute.startsWith('ts_')) {\n\t\t\t\t\tconsole.warn(`Vertex buffer ${attribute} was not bound because the attribute is not active.`)\n\t\t\t\t}\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tthis.attributeLocations[attribute] = location\n\t\t\tgl.bindBuffer(WGL.ARRAY_BUFFER, buffer.buffer)\n\n\t\t\tgl.enableVertexAttribArray(location)\n\n\t\t\tgl.vertexAttribPointer(location, buffer.spacing, WGL.FLOAT, false, 0, 0)\n\n\t\t\tminVertexBufferLength = Math.min(minVertexBufferLength, buffer.count)\n\t\t}\n\n\t\t// Disable unused attribute pointers.\n\t\tfor (const attribute in this.attributeLocations) {\n\t\t\tif (!(attribute in vertexBuffers)) {\n\t\t\t\tgl.disableVertexAttribArray(this.attributeLocations[attribute])\n\t\t\t}\n\t\t}\n\n\t\tif (NLA_DEBUG) {\n\t\t\tconst numAttribs = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES)\n\t\t\tfor (let i = 0; i < numAttribs; ++i) {\n\t\t\t\tconst buffer=gl.getVertexAttrib(i, gl.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING)\n\t\t\t\tif (!buffer) {\n\t\t\t\t\tconst info = gl.getActiveAttrib(this.program, i)!\n\t\t\t\t\tif (!this.constantAttributes[info.name]) {\n\t\t\t\t\t\tconsole.warn('No buffer is bound to attribute ' + info.name + ' and it was not set with .attributes()')\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// console.log('name:', info.name, 'type:', info.type, 'size:', info.size)\n\t\t\t}\n\t\t}\n\n\t\t// Draw the geometry.\n\t\tif (minVertexBufferLength) {\n\t\t\tif (undefined === count) {\n\t\t\t\tcount = (indexBuffer ? indexBuffer.count : minVertexBufferLength)\n\t\t\t}\n\t\t\tassert(DRAW_MODE_CHECKS[mode](count), 'count ' + count + ' doesn\\'t fulfill requirement '\n\t\t\t\t+ DRAW_MODE_CHECKS[mode].toString() + ' for mode ' + DRAW_MODE_NAMES[mode])\n\n\t\t\tif (indexBuffer) {\n\t\t\t\tassert(indexBuffer.hasBeenCompiled)\n\t\t\t\tassert(minVertexBufferLength > indexBuffer.maxValue!)\n\t\t\t\tassert(count % indexBuffer.spacing == 0)\n\t\t\t\tassert(start % indexBuffer.spacing == 0)\n\t\t\t\tif (start + count > indexBuffer.count) {\n\t\t\t\t\tthrow new Error('Buffer not long enough for passed parameters start/length/buffer length' + ' ' + start + ' ' + count + ' ' + indexBuffer.count)\n\t\t\t\t}\n\t\t\t\tgl.bindBuffer(WGL.ELEMENT_ARRAY_BUFFER, indexBuffer.buffer!)\n\t\t\t\t// start parameter has to be multiple of sizeof(WGL.UNSIGNED_SHORT)\n\t\t\t\tgl.drawElements(mode, count, WGL.UNSIGNED_SHORT, 2 * start)\n\t\t\t} else {\n\t\t\t\tif (start + count > minVertexBufferLength) {\n\t\t\t\t\tthrow new Error('invalid')\n\t\t\t\t}\n\t\t\t\tgl.drawArrays(mode, start, count)\n\t\t\t}\n\t\t\tgl.drawCallCount++\n\t\t}\n\n\t\treturn this\n\t}\n}","import {assert, int} from 'ts3dutils'\n\nimport {currentGL, TSGLContext} from './index'\nimport GL = WebGLRenderingContextStrict\nimport GL2 = WebGL2RenderingContext\n\nexport interface TextureOptions {\n\twrap?: GL.TextureWrap // defaults to WGL.CLAMP_TO_EDGE, or set wrapS and wrapT individually.\n\twrapS?: GL.TextureWrap\n\twrapT?: GL.TextureWrap\n\tfilter?: GL.TextureMagFilter // defaults to WGL.LINEAR, or set minFilter and magFilter individually.\n\tminFilter?: GL.TextureMinFilter\n\tmagFilter?: GL.TextureMagFilter\n\tformat?: GL2.TextureFormat // defaults to WGL.RGBA.\n\tinternalFormat?: GL2.TextureInternalFormat\n\ttype?: GL.ReadPixelsType // defaults to WGL.UNSIGNED_BYTE.\n\tdata?: any\n}\n\nexport class Texture {\n\theight: int\n\twidth: int\n\ttexture: WebGLTexture\n\t// e.g. viewerGL.UNSIGNED_BYTE, viewerGL.FLOAT\n\tinternalFormat: GL2.TextureInternalFormat\n\tformat: GL2.TextureFormat\n\t// e.g. viewerGL.RGBA\n\ttype: GL.ReadPixelsType\n\n\t/**\n\t * Provides a simple wrapper around WebGL textures that supports render-to-texture.\n\t *\n\t * The arguments `width` and `height` give the size of the texture in texels.\n\t * WebGL texture dimensions must be powers of two unless `filter` is set to\n\t * either `WGL.NEAREST` or `WGL.LINEAR` and `wrap` is set to `WGL.CLAMP_TO_EDGE`\n\t * (which they are by default).\n\t *\n\t * Texture parameters can be passed in via the `options` argument.\n\t * Example usage:\n\t *\n\t *      let tex = new GL.Texture(256, 256, {\n\t\t *       magFilter: WGL.NEAREST,\n\t\t *       minFilter: WGL.LINEAR,\n\t\t *\n\t\t *       wrapS: WGL.REPEAT,\n\t\t *       wrapT: WGL.REPEAT,\n\t\t *\n\t\t *       format: WGL.RGB, // Defaults to WGL.RGBA\n\t\t *       type: WGL.FLOAT // Defaults to WGL.UNSIGNED_BYTE\n\t\t *     })\n\t *\n\t */\n\tconstructor(width: int, height: int, options: TextureOptions = {}, readonly gl = currentGL()) {\n\t\tthis.width = width\n\t\tthis.height = height\n\t\tthis.format = options.format || gl.RGBA\n\t\tthis.internalFormat = options.internalFormat || gl.RGBA\n\t\tthis.type = options.type || gl.UNSIGNED_BYTE\n\t\tconst magFilter = options.filter || options.magFilter || gl.LINEAR\n\t\tconst minFilter = options.filter || options.minFilter || gl.LINEAR\n\t\tif (this.type === gl.FLOAT) {\n\t\t\tif (gl.version != 2 && !gl.getExtension('OES_texture_float')) {\n\t\t\t\tthrow new Error('OES_texture_float is required but not supported')\n\t\t\t}\n\t\t\tif ((minFilter !== gl.NEAREST || magFilter !== gl.NEAREST) && !gl.getExtension('OES_texture_float_linear')) {\n\t\t\t\tthrow new Error('OES_texture_float_linear is required but not supported')\n\t\t\t}\n\t\t} else if (this.type === gl.HALF_FLOAT_OES) {\n\t\t\tif (!gl.getExtension('OES_texture_half_float')) {\n\t\t\t\tthrow new Error('OES_texture_half_float is required but not supported')\n\t\t\t}\n\t\t\tif ((minFilter !== gl.NEAREST || magFilter !== gl.NEAREST) && !gl.getExtension('OES_texture_half_float_linear')) {\n\t\t\t\tthrow new Error('OES_texture_half_float_linear is required but not supported')\n\t\t\t}\n\t\t}\n\n\t\tthis.texture = gl.createTexture()!\n\t\tgl.bindTexture(gl.TEXTURE_2D, this.texture)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, magFilter)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, minFilter)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, options.wrap || options.wrapS || gl.CLAMP_TO_EDGE)\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, options.wrap || options.wrapT || gl.CLAMP_TO_EDGE)\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat as any, width, height, 0, this.format as any, this.type as any, options.data)\n\t}\n\n\tsetData(data: ArrayBufferView) {\n\t\tthis.gl.bindTexture(this.gl.TEXTURE_2D, this.texture)\n\t\tthis.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.format as any, this.width, this.height, 0, this.format as any, this.type as any, data as any)\n\t}\n\n\tbind(unit: int) {\n\t\tthis.gl.activeTexture((this.gl.TEXTURE0 + unit) as GL.TextureUnit)\n\t\tthis.gl.bindTexture(this.gl.TEXTURE_2D, this.texture)\n\t}\n\n\tunbind(unit: int) {\n\t\tthis.gl.activeTexture((this.gl.TEXTURE0 + unit) as GL.TextureUnit)\n\t\tthis.gl.bindTexture(this.gl.TEXTURE_2D, null)\n\t}\n\n\tprivate framebuffer: WebGLFramebuffer | undefined\n\tstatic checkerBoardCanvas: HTMLCanvasElement\n\n\tdrawTo(render: (gl: TSGLContext) => void): void {\n\t\tconst gl = this.gl\n\t\tconst prevFramebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING)\n\t\tif (!this.framebuffer) {\n\t\t\t// create a renderbuffer for the depth component\n\t\t\tconst prevRenderbuffer = gl.getParameter(gl.RENDERBUFFER_BINDING)\n\t\t\tconst depthRenderbuffer = gl.createRenderbuffer()\n\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, depthRenderbuffer)\n\t\t\t// DEPTH_COMPONENT16 is the only depth format\n\t\t\tgl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.width, this.height)\n\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, prevRenderbuffer)\n\n\t\t\t// create a framebuffer to render to\n\t\t\tthis.framebuffer = gl.createFramebuffer()!\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer)\n\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0)\n\t\t\tgl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, depthRenderbuffer)\n\t\t\tif (gl.checkFramebufferStatus(gl.FRAMEBUFFER) !== gl.FRAMEBUFFER_COMPLETE) {\n\t\t\t\tthrow new Error('Rendering to this texture is not supported (incomplete this.framebuffer)')\n\t\t\t}\n\t\t} else if (prevFramebuffer !== this.framebuffer) {\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer)\n\t\t}\n\n\t\tconst prevViewport = gl.getParameter(gl.VIEWPORT)\n\n\t\tgl.viewport(0, 0, this.width, this.height)\n\t\trender(gl)\n\n\t\t// restore previous state\n\t\tprevFramebuffer !== this.framebuffer && gl.bindFramebuffer(gl.FRAMEBUFFER, prevFramebuffer)\n\t\tgl.viewport(prevViewport[0], prevViewport[1], prevViewport[2], prevViewport[3])\n\t}\n\n\tswapWith(other: Texture): void {\n\t\tassert(this.gl == other.gl)\n\t\tlet temp\n\t\ttemp = other.texture\n\t\tother.texture = this.texture\n\t\tthis.texture = temp\n\n\t\ttemp = other.width\n\t\tother.width = this.width\n\t\tthis.width = temp\n\n\t\ttemp = other.height\n\t\tother.height = this.height\n\t\tthis.height = temp\n\t}\n\n\t/**\n\t * Return a new texture created from `imgElement`, an `<img>` tag.\n\t */\n\tstatic fromImage(imgElement: HTMLImageElement | HTMLCanvasElement, options: TextureOptions = {}, gl: TSGLContext = currentGL()): Texture {\n\t\tconst texture = new Texture(imgElement.width, imgElement.height, options, gl)\n\t\ttry {\n\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, texture.format as any, texture.format as any, texture.type as any, imgElement)\n\t\t} catch (e) {\n\t\t\tif (location.protocol == 'file:') {\n\t\t\t\tthrow new Error('imgElement not loaded for security reasons (serve this page over \"http://\" instead)')\n\t\t\t} else {\n\t\t\t\tthrow new Error('imgElement not loaded for security reasons (imgElement must originate from the same ' +\n\t\t\t\t\t'domain as this page or use Cross-Origin Resource Sharing)')\n\t\t\t}\n\t\t}\n\t\tif (options.minFilter && options.minFilter != gl.NEAREST && options.minFilter != gl.LINEAR) {\n\t\t\tgl.generateMipmap(gl.TEXTURE_2D)\n\t\t}\n\t\treturn texture\n\t}\n\n\t/**\n\t * Returns a checkerboard texture that will switch to the correct texture when it loads.\n\t */\n\tstatic fromURLSwitch(url: string, options?: TextureOptions, gl = currentGL()): Texture {\n\t\tTexture.checkerBoardCanvas = Texture.checkerBoardCanvas || (function () {\n\t\t\tconst c = document.createElement('canvas').getContext('2d')\n\t\t\tif (!c) throw new Error('Could not create 2d canvas.')\n\t\t\tc.canvas.width = c.canvas.height = 128\n\t\t\tfor (let y = 0; y < c.canvas.height; y += 16) {\n\t\t\t\tfor (let x = 0; x < c.canvas.width; x += 16) {\n\t\t\t\t\t//noinspection JSBitwiseOperatorUsage\n\t\t\t\t\tc.fillStyle = (x ^ y) & 16 ? '#FFF' : '#DDD'\n\t\t\t\t\tc.fillRect(x, y, 16, 16)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn c.canvas\n\t\t})()\n\t\tconst texture = Texture.fromImage(Texture.checkerBoardCanvas, options)\n\t\tconst image = new Image()\n\t\timage.onload = () => Texture.fromImage(image, options, gl).swapWith(texture)\n\t\t// error event doesn't return a reason. Most likely a 404.\n\t\timage.onerror = () => { throw new Error('Could not load image ' + image.src + '. 404?') }\n\t\timage.src = url\n\t\treturn texture\n\t}\n\n\tstatic fromURL(url: string, options?: TextureOptions, gl = currentGL()): Promise<Texture> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst image = new Image()\n\t\t\timage.onload = () => resolve(Texture.fromImage(image, options, gl))\n\t\t\timage.onerror = () => reject('Could not load image ' + image.src + '. 404?')\n\t\t\timage.src = url\n\t\t})\n\t}\n}","/*\r\n** Copyright (c) 2012 The Khronos Group Inc.\r\n**\r\n** Permission is hereby granted, free of charge, to any person obtaining a\r\n** copy of this software and/or associated documentation files (the\r\n** 'Materials'), to deal in the Materials without restriction, including\r\n** without limitation the rights to use, copy, modify, merge, publish,\r\n** distribute, sublicense, and/or sell copies of the Materials, and to\r\n** permit persons to whom the Materials are furnished to do so, subject to\r\n** the following conditions:\r\n**\r\n** The above copyright notice and this permission notice shall be included\r\n** in all copies or substantial portions of the Materials.\r\n**\r\n** THE MATERIALS ARE PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\r\n** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\n** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\r\n** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\r\n** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.\r\n*/\r\n\r\n\r\n// tslint:disable\r\nimport GL = WebGLRenderingContextStrict\r\n\r\n// Various functions for helping debug WebGL apps.\r\n\r\n/**\r\n * Wrapped logging function.\r\n * @param msg Message to log.\r\n */\r\nfunction log(msg: string) {\r\n\tif (window.console && window.console.log) {\r\n\t\twindow.console.log(msg)\r\n\t}\r\n}\r\n\r\n/**\r\n * Wrapped error logging function.\r\n * @param msg Message to log.\r\n */\r\nfunction error(msg: string) {\r\n\tif (window.console && window.console.error) {\r\n\t\twindow.console.error(msg)\r\n\t} else {\r\n\t\tlog(msg)\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Which arguments are enums based on the number of arguments to the function.\r\n * So\r\n *    'texImage2D': {\r\n *       9: { 0:true, 2:true, 6:true, 7:true },\r\n *       6: { 0:true, 2:true, 3:true, 4:true },\r\n *    },\r\n *\r\n * means if there are 9 arguments then 6 and 7 are enums, if there are 6\r\n * arguments 3 and 4 are enums\r\n *\r\n * @type {!Object.<number, !Object.<number, string>}\r\n */\r\nconst glValidEnumContexts: { [funcName: string]: { [argCount: number]: { [argIndex: number]: boolean | { enumBitwiseOr: string[] } } } } = {\r\n\t// Generic setters and getters\r\n\r\n\t'enable': { 1: { 0: true } },\r\n\t'disable': { 1: { 0: true } },\r\n\t'getParameter': { 1: { 0: true } },\r\n\r\n\t// Rendering\r\n\r\n\t'drawArrays': { 3: { 0: true } },\r\n\t'drawElements': { 4: { 0: true, 2: true } },\r\n\r\n\t// Shaders\r\n\r\n\t'createShader': { 1: { 0: true } },\r\n\t'getShaderParameter': { 2: { 1: true } },\r\n\t'getProgramParameter': { 2: { 1: true } },\r\n\t'getShaderPrecisionFormat': { 2: { 0: true, 1: true } },\r\n\r\n\t// Vertex attributes\r\n\r\n\t'getVertexAttrib': { 2: { 1: true } },\r\n\t'vertexAttribPointer': { 6: { 2: true } },\r\n\r\n\t// Textures\r\n\r\n\t'bindTexture': { 2: { 0: true } },\r\n\t'activeTexture': { 1: { 0: true } },\r\n\t'getTexParameter': { 2: { 0: true, 1: true } },\r\n\t'texParameterf': { 3: { 0: true, 1: true } },\r\n\t'texParameteri': { 3: { 0: true, 1: true, 2: true } },\r\n\t// texImage2D and texSubImage2D are defined below with WebGL 2 entrypoints\r\n\t'copyTexImage2D': { 8: { 0: true, 2: true } },\r\n\t'copyTexSubImage2D': { 8: { 0: true } },\r\n\t'generateMipmap': { 1: { 0: true } },\r\n\t// compressedTexImage2D and compressedTexSubImage2D are defined below with WebGL 2 entrypoints\r\n\r\n\t// Buffer objects\r\n\r\n\t'bindBuffer': { 2: { 0: true } },\r\n\t// bufferData and bufferSubData are defined below with WebGL 2 entrypoints\r\n\t'getBufferParameter': { 2: { 0: true, 1: true } },\r\n\r\n\t// Renderbuffers and framebuffers\r\n\r\n\t'pixelStorei': { 2: { 0: true, 1: true } },\r\n\t// readPixels is defined below with WebGL 2 entrypoints\r\n\t'bindRenderbuffer': { 2: { 0: true } },\r\n\t'bindFramebuffer': { 2: { 0: true } },\r\n\t'checkFramebufferStatus': { 1: { 0: true } },\r\n\t'framebufferRenderbuffer': { 4: { 0: true, 1: true, 2: true } },\r\n\t'framebufferTexture2D': { 5: { 0: true, 1: true, 2: true } },\r\n\t'getFramebufferAttachmentParameter': { 3: { 0: true, 1: true, 2: true } },\r\n\t'getRenderbufferParameter': { 2: { 0: true, 1: true } },\r\n\t'renderbufferStorage': { 4: { 0: true, 1: true } },\r\n\r\n\t// Frame buffer operations (clear, blend, depth test, stencil)\r\n\r\n\t'clear': { 1: { 0: { 'enumBitwiseOr': ['COLOR_BUFFER_BIT', 'DEPTH_BUFFER_BIT', 'STENCIL_BUFFER_BIT'] } } },\r\n\t'depthFunc': { 1: { 0: true } },\r\n\t'blendFunc': { 2: { 0: true, 1: true } },\r\n\t'blendFuncSeparate': { 4: { 0: true, 1: true, 2: true, 3: true } },\r\n\t'blendEquation': { 1: { 0: true } },\r\n\t'blendEquationSeparate': { 2: { 0: true, 1: true } },\r\n\t'stencilFunc': { 3: { 0: true } },\r\n\t'stencilFuncSeparate': { 4: { 0: true, 1: true } },\r\n\t'stencilMaskSeparate': { 2: { 0: true } },\r\n\t'stencilOp': { 3: { 0: true, 1: true, 2: true } },\r\n\t'stencilOpSeparate': { 4: { 0: true, 1: true, 2: true, 3: true } },\r\n\r\n\t// Culling\r\n\r\n\t'cullFace': { 1: { 0: true } },\r\n\t'frontFace': { 1: { 0: true } },\r\n\r\n\t// ANGLE_instanced_arrays extension\r\n\r\n\t'drawArraysInstancedANGLE': { 4: { 0: true } },\r\n\t'drawElementsInstancedANGLE': { 5: { 0: true, 2: true } },\r\n\r\n\t// EXT_blend_minmax extension\r\n\r\n\t'blendEquationEXT': { 1: { 0: true } },\r\n\r\n\t// WebGL 2 Buffer objects\r\n\r\n\t'bufferData': {\r\n\t\t3: { 0: true, 2: true }, // WebGL 1\r\n\t\t4: { 0: true, 2: true }, // WebGL 2\r\n\t\t5: { 0: true, 2: true }  // WebGL 2\r\n\t},\r\n\t'bufferSubData': {\r\n\t\t3: { 0: true }, // WebGL 1\r\n\t\t4: { 0: true }, // WebGL 2\r\n\t\t5: { 0: true }  // WebGL 2\r\n\t},\r\n\t'copyBufferSubData': { 5: { 0: true, 1: true } },\r\n\t'getBufferSubData': { 3: { 0: true }, 4: { 0: true }, 5: { 0: true } },\r\n\r\n\t// WebGL 2 Framebuffer objects\r\n\r\n\t'blitFramebuffer': { 10: { 8: { 'enumBitwiseOr': ['COLOR_BUFFER_BIT', 'DEPTH_BUFFER_BIT', 'STENCIL_BUFFER_BIT'] }, 9: true } },\r\n\t'framebufferTextureLayer': { 5: { 0: true, 1: true } },\r\n\t'invalidateFramebuffer': { 2: { 0: true } },\r\n\t'invalidateSubFramebuffer': { 6: { 0: true } },\r\n\t'readBuffer': { 1: { 0: true } },\r\n\r\n\t// WebGL 2 Renderbuffer objects\r\n\r\n\t'getInternalformatParameter': { 3: { 0: true, 1: true, 2: true } },\r\n\t'renderbufferStorageMultisample': { 5: { 0: true, 2: true } },\r\n\r\n\t// WebGL 2 Texture objects\r\n\r\n\t'texStorage2D': { 5: { 0: true, 2: true } },\r\n\t'texStorage3D': { 6: { 0: true, 2: true } },\r\n\t'texImage2D': {\r\n\t\t9: { 0: true, 2: true, 6: true, 7: true }, // WebGL 1 & 2\r\n\t\t6: { 0: true, 2: true, 3: true, 4: true }, // WebGL 1\r\n\t\t10: { 0: true, 2: true, 6: true, 7: true } // WebGL 2\r\n\t},\r\n\t'texImage3D': {\r\n\t\t10: { 0: true, 2: true, 7: true, 8: true },\r\n\t\t11: { 0: true, 2: true, 7: true, 8: true }\r\n\t},\r\n\t'texSubImage2D': {\r\n\t\t9: { 0: true, 6: true, 7: true }, // WebGL 1 & 2\r\n\t\t7: { 0: true, 4: true, 5: true }, // WebGL 1\r\n\t\t10: { 0: true, 6: true, 7: true } // WebGL 2\r\n\t},\r\n\t'texSubImage3D': {\r\n\t\t11: { 0: true, 8: true, 9: true },\r\n\t\t12: { 0: true, 8: true, 9: true }\r\n\t},\r\n\t'copyTexSubImage3D': { 9: { 0: true } },\r\n\t'compressedTexImage2D': {\r\n\t\t7: { 0: true, 2: true }, // WebGL 1 & 2\r\n\t\t8: { 0: true, 2: true }, // WebGL 2\r\n\t\t9: { 0: true, 2: true }  // WebGL 2\r\n\t},\r\n\t'compressedTexImage3D': {\r\n\t\t8: { 0: true, 2: true },\r\n\t\t9: { 0: true, 2: true },\r\n\t\t10: { 0: true, 2: true }\r\n\t},\r\n\t'compressedTexSubImage2D': {\r\n\t\t8: { 0: true, 6: true }, // WebGL 1 & 2\r\n\t\t9: { 0: true, 6: true }, // WebGL 2\r\n\t\t10: { 0: true, 6: true } // WebGL 2\r\n\t},\r\n\t'compressedTexSubImage3D': {\r\n\t\t10: { 0: true, 8: true },\r\n\t\t11: { 0: true, 8: true },\r\n\t\t12: { 0: true, 8: true }\r\n\t},\r\n\r\n\t// WebGL 2 Vertex attribs\r\n\r\n\t'vertexAttribIPointer': { 5: { 2: true } },\r\n\r\n\t// WebGL 2 Writing to the drawing buffer\r\n\r\n\t'drawArraysInstanced': { 4: { 0: true } },\r\n\t'drawElementsInstanced': { 5: { 0: true, 2: true } },\r\n\t'drawRangeElements': { 6: { 0: true, 4: true } },\r\n\r\n\t// WebGL 2 Reading back pixels\r\n\r\n\t'readPixels': {\r\n\t\t7: { 4: true, 5: true }, // WebGL 1 & 2\r\n\t\t8: { 4: true, 5: true }  // WebGL 2\r\n\t},\r\n\r\n\t// WebGL 2 Multiple Render Targets\r\n\r\n\t'clearBufferfv': { 3: { 0: true }, 4: { 0: true } },\r\n\t'clearBufferiv': { 3: { 0: true }, 4: { 0: true } },\r\n\t'clearBufferuiv': { 3: { 0: true }, 4: { 0: true } },\r\n\t'clearBufferfi': { 4: { 0: true } },\r\n\r\n\t// WebGL 2 Query objects\r\n\r\n\t'beginQuery': { 2: { 0: true } },\r\n\t'endQuery': { 1: { 0: true } },\r\n\t'getQuery': { 2: { 0: true, 1: true } },\r\n\t'getQueryParameter': { 2: { 1: true } },\r\n\r\n\t// WebGL 2 Sampler objects\r\n\r\n\t'samplerParameteri': { 3: { 1: true, 2: true } },\r\n\t'samplerParameterf': { 3: { 1: true } },\r\n\t'getSamplerParameter': { 2: { 1: true } },\r\n\r\n\t// WebGL 2 Sync objects\r\n\r\n\t'fenceSync': { 2: { 0: true, 1: { 'enumBitwiseOr': [] } } },\r\n\t'clientWaitSync': { 3: { 1: { 'enumBitwiseOr': ['SYNC_FLUSH_COMMANDS_BIT'] } } },\r\n\t'waitSync': { 3: { 1: { 'enumBitwiseOr': [] } } },\r\n\t'getSyncParameter': { 2: { 1: true } },\r\n\r\n\t// WebGL 2 Transform Feedback\r\n\r\n\t'bindTransformFeedback': { 2: { 0: true } },\r\n\t'beginTransformFeedback': { 1: { 0: true } },\r\n\t'transformFeedbackVaryings': { 3: { 2: true } },\r\n\r\n\t// WebGL2 Uniform Buffer Objects and Transform Feedback Buffers\r\n\r\n\t'bindBufferBase': { 3: { 0: true } },\r\n\t'bindBufferRange': { 5: { 0: true } },\r\n\t'getIndexedParameter': { 2: { 0: true } },\r\n\t'getActiveUniforms': { 3: { 2: true } },\r\n\t'getActiveUniformBlockParameter': { 3: { 2: true } }\r\n}\r\n\r\n/**\r\n * Map of numbers to names.\r\n * @type {Object}\r\n */\r\nlet glEnums: { [k: number]: string } = null as any\r\n\r\n/**\r\n * Map of names to numbers.\r\n * @type {Object}\r\n */\r\nlet enumStringToValue: { [k: string]: GL.GLenum<string> } = null as any\r\n\r\n/**\r\n * Initializes this module. Safe to call more than once.\r\n * @param ctx A WebGL context. If\r\n *    you have more than one context it doesn't matter which one\r\n *    you pass in, it is only used to pull out constants.\r\n */\r\nexport function init() {\r\n\tif (null === glEnums) {\r\n\t\tglEnums = {}\r\n\t\tenumStringToValue = {}\r\n\t\tconst c = (window as any).WebGL2RenderingContext || (window as any).WebGLRenderingContext\r\n\t\tif (!c) throw new Error('Neither WebGL2RenderingContext nor WebGLRenderingContext exists on window.')\r\n\t\tfor (const propertyName in c) {\r\n\t\t\tconst prop = c[propertyName]\r\n\t\t\tif ('number' === typeof prop) {\r\n\t\t\t\tglEnums[prop] = propertyName\r\n\t\t\t\tenumStringToValue[propertyName] = prop as any\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * Returns true or false if value matches any WebGL enum\r\n * @param value Value to check if it might be an enum.\r\n * @return True if value matches one of the WebGL defined enums\r\n */\r\nexport function mightBeEnum(value: number): boolean {\r\n\tinit()\r\n\treturn (glEnums[value] !== undefined)\r\n}\r\n\r\n/**\r\n * Gets an string version of an WebGL enum.\r\n *\r\n * Example:\r\n *   var str = WebGLDebugUtil.glEnumToString(ctx.getError())\r\n *\r\n * @param value Value to return an enum for\r\n * @return The string version of the enum.\r\n */\r\nexport function glEnumToString(value: GL.GLenum<string>): string {\r\n\tinit()\r\n\tvar name = glEnums[value as any]\r\n\treturn (name !== undefined) ? ('gl.' + name) :\r\n\t\t('/*UNKNOWN WebGL ENUM*/ 0x' + (value as any).toString(16) + '')\r\n}\r\n\r\n/**\r\n * Converts the argument of a WebGL function to a string.\r\n * Attempts to convert enum arguments to strings.\r\n *\r\n * Example:\r\n *   WebGLDebugUtil.init(ctx)\r\n *   var str = WebGLDebugUtil.glFunctionArgToString('bindTexture', 2, 0, gl.TEXTURE_2D)\r\n *\r\n * would return 'TEXTURE_2D'\r\n *\r\n * @param functionName the name of the WebGL function.\r\n * @param numArgs the number of arguments passed to the function.\r\n * @param argumentIndex the index of the argument.\r\n * @param value The value of the argument.\r\n * @return The value as a string.\r\n */\r\nexport function glFunctionArgToString(functionName: string, numArgs: number, argumentIndex: number, value: any): string {\r\n\tconst funcInfo = glValidEnumContexts[functionName]\r\n\tif (funcInfo !== undefined) {\r\n\t\tconst funcOverloadInfo = funcInfo[numArgs]\r\n\t\tif (funcOverloadInfo !== undefined) {\r\n\t\t\tconst argInfo = funcOverloadInfo[argumentIndex]\r\n\t\t\tif (argInfo) {\r\n\t\t\t\tif (typeof argInfo === 'object') {\r\n\t\t\t\t\tconst enums = argInfo.enumBitwiseOr\r\n\t\t\t\t\tconst orEnums = []\r\n\t\t\t\t\tlet orResult = 0\r\n\t\t\t\t\tfor (let i = 0; i < enums.length; ++i) {\r\n\t\t\t\t\t\tconst enumValue = enumStringToValue[enums[i]]\r\n\t\t\t\t\t\tif ((value & enumValue) !== 0) {\r\n\t\t\t\t\t\t\torResult |= enumValue\r\n\t\t\t\t\t\t\torEnums.push(glEnumToString(enumValue))\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (orResult === value) {\r\n\t\t\t\t\t\treturn orEnums.join(' | ')\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\treturn glEnumToString(value)\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn glEnumToString(value)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tif (value === null) {\r\n\t\treturn 'null'\r\n\t} else if (value === undefined) {\r\n\t\treturn 'undefined'\r\n\t} else {\r\n\t\treturn value.toString()\r\n\t}\r\n}\r\n\r\n/**\r\n * Converts the arguments of a WebGL function to a string.\r\n * Attempts to convert enum arguments to strings.\r\n *\r\n * @param functionName the name of the WebGL function.\r\n * @param args The arguments.\r\n * @return The arguments as a string.\r\n */\r\nexport function glFunctionArgsToString(functionName: string, args: number[]): string {\r\n\t// apparently we can't do args.join(',')\r\n\tvar argStr = ''\r\n\tvar numArgs = args.length\r\n\tfor (var ii = 0; ii < numArgs; ++ii) {\r\n\t\targStr += ((ii == 0) ? '' : ', ') +\r\n\t\t\tglFunctionArgToString(functionName, numArgs, ii, args[ii])\r\n\t}\r\n\treturn argStr\r\n}\r\n\r\n\r\nfunction makePropertyWrapper(wrapper:any , original: any, propertyName: string) {\r\n\t//log('wrap prop: ' + propertyName)\r\n\twrapper.__defineGetter__(propertyName, function () {\r\n\t\treturn original[propertyName]\r\n\t})\r\n\t// TODO(gmane): this needs to handle properties that take more than\r\n\t// one value?\r\n\twrapper.__defineSetter__(propertyName, function (value: any) {\r\n\t\t//log('set: ' + propertyName)\r\n\t\toriginal[propertyName] = value\r\n\t})\r\n}\r\n\r\n/**\r\n * Given a WebGL context returns a wrapped context that calls\r\n * gl.getError after every command and calls a function if the\r\n * result is not NO_ERROR.\r\n *\r\n * You can supply your own function if you want. For example, if you'd like\r\n * an exception thrown on any GL error you could do this\r\n *\r\n *    function throwOnGLError(err, funcName, args) {\r\n *      throw new Error(WebGLDebugUtils.glEnumToString(err) +\r\n *            ' was caused by call to ' + funcName)\r\n *    }\r\n *\r\n *    ctx = WebGLDebugUtils.makeDebugContext(\r\n *        canvas.getContext('webgl'), throwOnGLError)\r\n *\r\n * @param ctx The webgl context to wrap.\r\n * @param opt_onErrorFunc The function\r\n *     to call when gl.getError returns an error. If not specified the default\r\n *     function calls console.log with a message.\r\n * @param opt_onFunc The\r\n *     function to call when each webgl function is called. You\r\n *     can use this to log all calls for example.\r\n * @param opt_err_ctx The webgl context\r\n *        to call getError on if different than ctx.\r\n */\r\nexport function makeDebugContext(\r\n\tctx: WebGLRenderingContextStrict,\r\n\topt_onErrorFunc?: (err: GL.Error, funcName: string, args: any[]) => void,\r\n\topt_onFunc?: (funcName: string, args: any[]) => void,\r\n\topt_err_ctx: WebGLRenderingContextStrict = ctx\r\n): WebGLRenderingContext {\r\n\tinit()\r\n\topt_onErrorFunc = opt_onErrorFunc || function (err, functionName, args) {\r\n\t\t// apparently we can't do args.join(',')\r\n\t\tvar argStr = ''\r\n\t\tvar numArgs = args.length\r\n\t\tfor (let i = 0; i < numArgs; ++i) {\r\n\t\t\targStr += ((i == 0) ? '' : ', ') +\r\n\t\t\t\tglFunctionArgToString(functionName, numArgs, i, args[i])\r\n\t\t}\r\n\t\terror('WebGL error ' + glEnumToString(err) + ' in ' + functionName +\r\n\t\t\t'(' + argStr + ')')\r\n\t}\r\n\r\n\t// Holds booleans for each GL error so after we get the error ourselves\r\n\t// we can still return it to the client app.\r\n\tconst glErrorShadow: { [k: number]: boolean } = {}\r\n\r\n\t// Makes a function that calls a WebGL function and then calls getError.\r\n\tfunction makeErrorWrapper(ctx: WebGLRenderingContextStrict, functionName: string) {\r\n\t\treturn function (...args: any[]) {\r\n\t\t\tif (opt_onFunc) {\r\n\t\t\t\topt_onFunc(functionName, args)\r\n\t\t\t}\r\n\t\t\tconst result = (ctx as any)[functionName].apply(ctx, args)\r\n\t\t\tconst err = opt_err_ctx.getError()\r\n\t\t\tif (err != 0) {\r\n\t\t\t\tglErrorShadow[err] = true\r\n\t\t\t\topt_onErrorFunc!(err, functionName, args)\r\n\t\t\t}\r\n\t\t\treturn result\r\n\t\t}\r\n\t}\r\n\r\n\t// Make a an object that has a copy of every property of the WebGL context\r\n\t// but wraps all functions.\r\n\tconst wrapper: any = {}\r\n\tfor (let propertyName in ctx) {\r\n\t\tconst prop = ctx[propertyName as keyof WebGLRenderingContextStrict]\r\n\t\tif ('function' === typeof prop) {\r\n\t\t\tif (propertyName != 'getExtension') {\r\n\t\t\t\twrapper[propertyName] = makeErrorWrapper(ctx, propertyName)\r\n\t\t\t} else {\r\n\t\t\t\tlet wrapped = makeErrorWrapper(ctx, propertyName)\r\n\t\t\t\twrapper[propertyName as any] = function () {\r\n\t\t\t\t\tconst result = wrapped.apply(ctx, arguments)\r\n\t\t\t\t\tif (!result) {\r\n\t\t\t\t\t\treturn null\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn makeDebugContext(result, opt_onErrorFunc, opt_onFunc, opt_err_ctx)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tmakePropertyWrapper(wrapper, ctx, propertyName)\r\n\t\t}\r\n\t}\r\n\r\n\t// Override the getError function with one that returns our saved results.\r\n\twrapper.getError = function () {\r\n\t\tfor (const err in glErrorShadow) {\r\n\t\t\tif (glErrorShadow.hasOwnProperty(err)) {\r\n\t\t\t\tif (glErrorShadow[err]) {\r\n\t\t\t\t\tglErrorShadow[err] = false\r\n\t\t\t\t\treturn parseInt(err)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn ctx.NO_ERROR\r\n\t}\r\n\r\n\treturn wrapper\r\n}\r\nexport function isWebGL2RenderingContext(o: any): o is WebGL2RenderingContext {\r\n\treturn !!o.createTransformFeedback\r\n}\r\n/**\r\n * Resets a context to the initial state.\r\n * @param ctx The webgl context to\r\n *     reset.\r\n */\r\nexport function resetToInitialState(ctx2: WebGL2RenderingContext | WebGLRenderingContextStrict) {\r\n\r\n\tif (isWebGL2RenderingContext(ctx2)) {\r\n\t\tctx2.bindVertexArray(null)\r\n\t}\r\n\r\n\tconst numAttribs = ctx2.getParameter(ctx2.MAX_VERTEX_ATTRIBS)\r\n\tconst tmp = ctx2.createBuffer()\r\n\tctx2.bindBuffer(ctx2.ARRAY_BUFFER, tmp)\r\n\tfor (let ii = 0; ii < numAttribs; ++ii) {\r\n\t\tctx2.disableVertexAttribArray(ii)\r\n\t\tctx2.vertexAttribPointer(ii, 4, ctx2.FLOAT, false, 0, 0)\r\n\t\tctx2.vertexAttrib1f(ii, 0)\r\n\t\tif (isWebGL2RenderingContext(ctx2)) {\r\n\t\t\tctx2.vertexAttribDivisor(ii, 0)\r\n\t\t}\r\n\t}\r\n\tctx2.deleteBuffer(tmp)\r\n\r\n\tconst numTextureUnits = ctx2.getParameter(ctx2.MAX_TEXTURE_IMAGE_UNITS)\r\n\tfor (let ii = 0; ii < numTextureUnits; ++ii) {\r\n\t\tctx2.activeTexture((ctx2.TEXTURE0 + ii) as GL.TextureUnit)\r\n\t\tctx2.bindTexture(ctx2.TEXTURE_CUBE_MAP, null)\r\n\t\tctx2.bindTexture(ctx2.TEXTURE_2D, null)\r\n\t\tif (isWebGL2RenderingContext(ctx2)) {\r\n\t\t\tctx2.bindTexture(ctx2.TEXTURE_2D_ARRAY, null)\r\n\t\t\tctx2.bindTexture(ctx2.TEXTURE_3D, null)\r\n\t\t\tctx2.bindSampler(ii, null)\r\n\t\t}\r\n\t}\r\n\r\n\tctx2.activeTexture(ctx2.TEXTURE0)\r\n\tctx2.useProgram(null)\r\n\tctx2.bindBuffer(ctx2.ARRAY_BUFFER, null)\r\n\tctx2.bindBuffer(ctx2.ELEMENT_ARRAY_BUFFER, null)\r\n\tctx2.bindFramebuffer(ctx2.FRAMEBUFFER, null)\r\n\tctx2.bindRenderbuffer(ctx2.RENDERBUFFER, null)\r\n\tctx2.disable(ctx2.BLEND)\r\n\tctx2.disable(ctx2.CULL_FACE)\r\n\tctx2.disable(ctx2.DEPTH_TEST)\r\n\tctx2.disable(ctx2.DITHER)\r\n\tctx2.disable(ctx2.SCISSOR_TEST)\r\n\tctx2.blendColor(0, 0, 0, 0)\r\n\tctx2.blendEquation(ctx2.FUNC_ADD)\r\n\tctx2.blendFunc(ctx2.ONE, ctx2.ZERO)\r\n\tctx2.clearColor(0, 0, 0, 0)\r\n\tctx2.clearDepth(1)\r\n\tctx2.clearStencil(-1)\r\n\tctx2.colorMask(true, true, true, true)\r\n\tctx2.cullFace(ctx2.BACK)\r\n\tctx2.depthFunc(ctx2.LESS)\r\n\tctx2.depthMask(true)\r\n\tctx2.depthRange(0, 1)\r\n\tctx2.frontFace(ctx2.CCW)\r\n\tctx2.hint(ctx2.GENERATE_MIPMAP_HINT, ctx2.DONT_CARE)\r\n\tctx2.lineWidth(1)\r\n\tctx2.pixelStorei(ctx2.PACK_ALIGNMENT, 4)\r\n\tctx2.pixelStorei(ctx2.UNPACK_ALIGNMENT, 4)\r\n\tctx2.pixelStorei(ctx2.UNPACK_FLIP_Y_WEBGL, false)\r\n\tctx2.pixelStorei(ctx2.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false)\r\n\tctx2.pixelStorei(ctx2.UNPACK_COLORSPACE_CONVERSION_WEBGL, ctx2.BROWSER_DEFAULT_WEBGL)\r\n\tctx2.polygonOffset(0, 0)\r\n\tctx2.sampleCoverage(1, false)\r\n\tctx2.scissor(0, 0, ctx2.canvas.width, ctx2.canvas.height)\r\n\tctx2.stencilFunc(ctx2.ALWAYS, 0, 0xFFFFFFFF)\r\n\tctx2.stencilMask(0xFFFFFFFF)\r\n\tctx2.stencilOp(ctx2.KEEP, ctx2.KEEP, ctx2.KEEP)\r\n\tctx2.viewport(0, 0, ctx2.canvas.width, ctx2.canvas.height)\r\n\tctx2.clear(ctx2.COLOR_BUFFER_BIT | ctx2.DEPTH_BUFFER_BIT | ctx2.STENCIL_BUFFER_BIT)\r\n\r\n\tif (isWebGL2RenderingContext(ctx2)) {\r\n\t\tctx2.drawBuffers([ctx2.BACK])\r\n\t\tctx2.readBuffer(ctx2.BACK)\r\n\t\tctx2.bindBuffer(ctx2.COPY_READ_BUFFER, null)\r\n\t\tctx2.bindBuffer(ctx2.COPY_WRITE_BUFFER, null)\r\n\t\tctx2.bindBuffer(ctx2.PIXEL_PACK_BUFFER, null)\r\n\t\tctx2.bindBuffer(ctx2.PIXEL_UNPACK_BUFFER, null)\r\n\t\tconst numTransformFeedbacks = ctx2.getParameter(ctx2.MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS)\r\n\t\tfor (let ii = 0; ii < numTransformFeedbacks; ++ii) {\r\n\t\t\tctx2.bindBufferBase(ctx2.TRANSFORM_FEEDBACK_BUFFER, ii, null)\r\n\t\t}\r\n\t\tconst numUBOs = ctx2.getParameter(ctx2.MAX_UNIFORM_BUFFER_BINDINGS)\r\n\t\tfor (let ii = 0; ii < numUBOs; ++ii) {\r\n\t\t\tctx2.bindBufferBase(ctx2.UNIFORM_BUFFER, ii, null)\r\n\t\t}\r\n\t\tctx2.disable(ctx2.RASTERIZER_DISCARD)\r\n\t\tctx2.pixelStorei(ctx2.UNPACK_IMAGE_HEIGHT, 0)\r\n\t\tctx2.pixelStorei(ctx2.UNPACK_SKIP_IMAGES, 0)\r\n\t\tctx2.pixelStorei(ctx2.UNPACK_ROW_LENGTH, 0)\r\n\t\tctx2.pixelStorei(ctx2.UNPACK_SKIP_ROWS, 0)\r\n\t\tctx2.pixelStorei(ctx2.UNPACK_SKIP_PIXELS, 0)\r\n\t\tctx2.pixelStorei(ctx2.PACK_ROW_LENGTH, 0)\r\n\t\tctx2.pixelStorei(ctx2.PACK_SKIP_ROWS, 0)\r\n\t\tctx2.pixelStorei(ctx2.PACK_SKIP_PIXELS, 0)\r\n\t\tctx2.hint(ctx2.FRAGMENT_SHADER_DERIVATIVE_HINT, ctx2.DONT_CARE)\r\n\t}\r\n\r\n\t// TODO: This should NOT be needed but Firefox fails with 'hint'\r\n\twhile (ctx2.getError()) {}\r\n}\r\n\r\n/**\r\n * Given a canvas element returns a wrapped canvas element that will\r\n * simulate lost context. The canvas returned adds the following functions.\r\n *\r\n * loseContext:\r\n *   simulates a lost context event.\r\n *\r\n * restoreContext:\r\n *   simulates the context being restored.\r\n *\r\n * lostContextInNCalls:\r\n *   loses the context after N gl calls.\r\n *\r\n * getNumCalls:\r\n *   tells you how many gl calls there have been so far.\r\n *\r\n * setRestoreTimeout:\r\n *   sets the number of milliseconds until the context is restored\r\n *   after it has been lost. Defaults to 0. Pass -1 to prevent\r\n *   automatic restoring.\r\n *\r\n * @param canvas The canvas element to wrap.\r\n */\r\nexport function makeLostContextSimulatingCanvas(canvas: HTMLCanvasElement) {\r\n\tconst canvas2 = canvas as any\r\n\tlet unwrappedContext_: any\r\n\tconst onLost_: WebGLContextEventListener[] = []\r\n\tconst onRestored_: WebGLContextEventListener[] = []\r\n\tlet wrappedContext_: any = {}\r\n\tlet contextId_ = 1\r\n\tlet contextLost_ = false\r\n\t// const resourceId_ = 0\r\n\tconst resourceDb_: WebGLObject[] = []\r\n\tlet numCallsToLoseContext_ = 0\r\n\tlet numCalls_ = 0\r\n\tlet canRestore_ = false\r\n\tlet restoreTimeout_ = 0\r\n\r\n\t// Holds booleans for each GL error so can simulate errors.\r\n\tconst glErrorShadow_: { [e: number]: boolean } = {}\r\n\r\n\tcanvas2.getContext = function (f) {\r\n\t\treturn function () {\r\n\t\t\tconst ctx = f.apply(canvas2, arguments)\r\n\t\t\t// Did we get a context and is it a WebGL context?\r\n\t\t\t\t// @ts-ignore\r\n\t\t\tif ((ctx instanceof WebGLRenderingContext) || (window.WebGL2RenderingContext && (ctx instanceof WebGL2RenderingContext))) {\r\n\t\t\t\tif (ctx != unwrappedContext_) {\r\n\t\t\t\t\tif (unwrappedContext_) {\r\n\t\t\t\t\t\tthrow new Error('got different context')\r\n\t\t\t\t\t}\r\n\t\t\t\t\tunwrappedContext_ = ctx\r\n\t\t\t\t\twrappedContext_ = makeLostContextSimulatingContext(unwrappedContext_)\r\n\t\t\t\t}\r\n\t\t\t\treturn wrappedContext_\r\n\t\t\t}\r\n\t\t\treturn ctx\r\n\t\t}\r\n\t}(canvas2.getContext)\r\n\r\n\tfunction wrapEvent(listener: WebGLContextEventListener | { handleEvent: WebGLContextEventListener }) {\r\n\t\tif (typeof (listener) == 'function') {\r\n\t\t\treturn listener\r\n\t\t} else {\r\n\t\t\treturn function (e: CustomWebGLContextEvent) {\r\n\t\t\t\tlistener.handleEvent(e)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction addOnContextLostListener(listener: WebGLContextEventListener | { handleEvent: WebGLContextEventListener }) {\r\n\t\tonLost_.push(wrapEvent(listener))\r\n\t}\r\n\r\n\tfunction addOnContextRestoredListener(listener: WebGLContextEventListener | { handleEvent: WebGLContextEventListener }) {\r\n\t\tonRestored_.push(wrapEvent(listener))\r\n\t}\r\n\r\n\r\n\tfunction wrapAddEventListener(canvas: HTMLCanvasElement) {\r\n\t\tconst f = canvas.addEventListener\r\n\t\tcanvas.addEventListener = function (type: string, listener: any) {\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase 'webglcontextlost':\r\n\t\t\t\t\taddOnContextLostListener(listener)\r\n\t\t\t\t\tbreak\r\n\t\t\t\tcase 'webglcontextrestored':\r\n\t\t\t\t\taddOnContextRestoredListener(listener)\r\n\t\t\t\t\tbreak\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tf.apply(canvas, arguments)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\twrapAddEventListener(canvas2)\r\n\r\n\tcanvas2.loseContext = function () {\r\n\t\tif (!contextLost_) {\r\n\t\t\tcontextLost_ = true\r\n\t\t\tnumCallsToLoseContext_ = 0\r\n\t\t\t++contextId_\r\n\t\t\twhile (unwrappedContext_.getError())\r\n\t\t\t\tclearErrors()\r\n\t\t\tglErrorShadow_[unwrappedContext_.CONTEXT_LOST_WEBGL] = true\r\n\t\t\tconst event = makeWebGLContextEvent('context lost')\r\n\t\t\tconst callbacks = onLost_.slice()\r\n\t\t\tsetTimeout(function () {\r\n\t\t\t\t//log('numCallbacks:' + callbacks.length)\r\n\t\t\t\tfor (let ii = 0; ii < callbacks.length; ++ii) {\r\n\t\t\t\t\t//log('calling callback:' + ii)\r\n\t\t\t\t\tcallbacks[ii](event)\r\n\t\t\t\t}\r\n\t\t\t\tif (restoreTimeout_ >= 0) {\r\n\t\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\t\tcanvas2.restoreContext()\r\n\t\t\t\t\t}, restoreTimeout_)\r\n\t\t\t\t}\r\n\t\t\t}, 0)\r\n\t\t}\r\n\t}\r\n\r\n\tcanvas2.restoreContext = function () {\r\n\t\tif (contextLost_) {\r\n\t\t\tif (onRestored_.length) {\r\n\t\t\t\tsetTimeout(function () {\r\n\t\t\t\t\tif (!canRestore_) {\r\n\t\t\t\t\t\tthrow new Error('can not restore. webglcontestlost listener did not call event.preventDefault')\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfreeResources()\r\n\t\t\t\t\tresetToInitialState(unwrappedContext_)\r\n\t\t\t\t\tcontextLost_ = false\r\n\t\t\t\t\tnumCalls_ = 0\r\n\t\t\t\t\tcanRestore_ = false\r\n\t\t\t\t\tconst callbacks = onRestored_.slice()\r\n\t\t\t\t\tconst event = makeWebGLContextEvent('context restored')\r\n\t\t\t\t\tfor (let ii = 0; ii < callbacks.length; ++ii) {\r\n\t\t\t\t\t\tcallbacks[ii](event)\r\n\t\t\t\t\t}\r\n\t\t\t\t}, 0)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcanvas2.loseContextInNCalls = function (numCalls: number) {\r\n\t\tif (contextLost_) {\r\n\t\t\tthrow new Error('You can not ask a lost context to be lost')\r\n\t\t}\r\n\t\tnumCallsToLoseContext_ = numCalls_ + numCalls\r\n\t}\r\n\r\n\tcanvas2.getNumCalls = function () {\r\n\t\treturn numCalls_\r\n\t}\r\n\r\n\tcanvas2.setRestoreTimeout = function (timeout: number) {\r\n\t\trestoreTimeout_ = timeout\r\n\t}\r\n\r\n\tfunction isWebGLObject(obj: any): obj is WebGLObject {\r\n\t\t//return false\r\n\t\treturn (obj instanceof WebGLBuffer ||\r\n\t\t\tobj instanceof WebGLFramebuffer ||\r\n\t\t\tobj instanceof WebGLProgram ||\r\n\t\t\tobj instanceof WebGLRenderbuffer ||\r\n\t\t\tobj instanceof WebGLShader ||\r\n\t\t\tobj instanceof WebGLTexture)\r\n\t}\r\n\r\n\tfunction checkResources(args: any[]) {\r\n\t\tfor (let i = 0; i < args.length; ++i) {\r\n\t\t\tconst arg = args[i]\r\n\t\t\tif (isWebGLObject(arg)) {\r\n\t\t\t\treturn (arg as any).__webglDebugContextLostId__ == contextId_\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\r\n\tfunction clearErrors() {\r\n\t\tconst k = Object.keys(glErrorShadow_) as any as number[]\r\n\t\tfor (let i = 0; i < k.length; ++i) {\r\n\t\t\tdelete glErrorShadow_[k[i]]\r\n\t\t}\r\n\t}\r\n\r\n\tfunction loseContextIfTime() {\r\n\t\t++numCalls_\r\n\t\tif (!contextLost_) {\r\n\t\t\tif (numCallsToLoseContext_ == numCalls_) {\r\n\t\t\t\tcanvas2.loseContext()\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Makes a function that simulates WebGL when out of context.\r\n\tfunction makeLostContextFunctionWrapper(ctx: WebGLRenderingContext, functionName: string) {\r\n\t\tconst f = (ctx as any)[functionName]\r\n\t\treturn function () {\r\n\t\t\t// log('calling:' + functionName)\r\n\t\t\t// Only call the functions if the context is not lost.\r\n\t\t\tloseContextIfTime()\r\n\t\t\tif (!contextLost_) {\r\n\t\t\t\t//if (!checkResources(arguments)) {\r\n\t\t\t\t//  glErrorShadow_[wrappedContext_.INVALID_OPERATION] = true\r\n\t\t\t\t//  return\r\n\t\t\t\t//}\r\n\t\t\t\tconst result = f.apply(ctx, arguments)\r\n\t\t\t\treturn result\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction freeResources() {\r\n\t\tfor (let ii = 0; ii < resourceDb_.length; ++ii) {\r\n\t\t\tconst resource = resourceDb_[ii]\r\n\t\t\tif (resource instanceof WebGLBuffer) {\r\n\t\t\t\tunwrappedContext_.deleteBuffer(resource)\r\n\t\t\t} else if (resource instanceof WebGLFramebuffer) {\r\n\t\t\t\tunwrappedContext_.deleteFramebuffer(resource)\r\n\t\t\t} else if (resource instanceof WebGLProgram) {\r\n\t\t\t\tunwrappedContext_.deleteProgram(resource)\r\n\t\t\t} else if (resource instanceof WebGLRenderbuffer) {\r\n\t\t\t\tunwrappedContext_.deleteRenderbuffer(resource)\r\n\t\t\t} else if (resource instanceof WebGLShader) {\r\n\t\t\t\tunwrappedContext_.deleteShader(resource)\r\n\t\t\t} else if (resource instanceof WebGLTexture) {\r\n\t\t\t\tunwrappedContext_.deleteTexture(resource)\r\n\t\t\t}\r\n\t\t\telse if (isWebGL2RenderingContext) {\r\n\t\t\t\t// @ts-ignore\r\n\t\t\t\tif (resource instanceof WebGLQuery) {\r\n\t\t\t\t\tunwrappedContext_.deleteQuery(resource)\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t} else if (resource instanceof WebGLSampler) {\r\n\t\t\t\t\tunwrappedContext_.deleteSampler(resource)\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t} else if (resource instanceof WebGLSync) {\r\n\t\t\t\t\tunwrappedContext_.deleteSync(resource)\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t} else if (resource instanceof WebGLTransformFeedback) {\r\n\t\t\t\t\tunwrappedContext_.deleteTransformFeedback(resource)\r\n\t\t\t\t\t// @ts-ignore\r\n\t\t\t\t} else if (resource instanceof WebGLVertexArrayObject) {\r\n\t\t\t\t\tunwrappedContext_.deleteVertexArray(resource)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tinterface CustomWebGLContextEvent {statusMessage: string, preventDefault: () => void}\r\n\ttype WebGLContextEventListener = (e: CustomWebGLContextEvent) => void\r\n\tfunction makeWebGLContextEvent(statusMessage: string): CustomWebGLContextEvent {\r\n\t\treturn {\r\n\t\t\tstatusMessage: statusMessage,\r\n\t\t\tpreventDefault: function () {\r\n\t\t\t\tcanRestore_ = true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn canvas2\r\n\r\n\tfunction makeLostContextSimulatingContext(ctx: WebGLRenderingContext) {\r\n\t\t// copy all functions and properties to wrapper\r\n\t\tfor (const propertyName in ctx) {\r\n\t\t\tif (typeof (ctx as any)[propertyName] == 'function') {\r\n\t\t\t\twrappedContext_[propertyName] = makeLostContextFunctionWrapper(\r\n\t\t\t\t\tctx, propertyName)\r\n\t\t\t} else {\r\n\t\t\t\tmakePropertyWrapper(wrappedContext_, ctx, propertyName)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Wrap a few functions specially.\r\n\t\twrappedContext_.getError = function () {\r\n\t\t\tloseContextIfTime()\r\n\t\t\tif (!contextLost_) {\r\n\t\t\t\tlet err\r\n\t\t\t\twhile (err = unwrappedContext_.getError()) {\r\n\t\t\t\t\tglErrorShadow_[err] = true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (const err in glErrorShadow_) {\r\n\t\t\t\tif (glErrorShadow_[err]) {\r\n\t\t\t\t\tdelete glErrorShadow_[err]\r\n\t\t\t\t\treturn err\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn wrappedContext_.NO_ERROR\r\n\t\t}\r\n\r\n\t\tconst creationFunctions = [\r\n\t\t\t'createBuffer',\r\n\t\t\t'createFramebuffer',\r\n\t\t\t'createProgram',\r\n\t\t\t'createRenderbuffer',\r\n\t\t\t'createShader',\r\n\t\t\t'createTexture'\r\n\t\t]\r\n\t\tif (isWebGL2RenderingContext) {\r\n\t\t\tcreationFunctions.push(\r\n\t\t\t\t'createQuery',\r\n\t\t\t\t'createSampler',\r\n\t\t\t\t'fenceSync',\r\n\t\t\t\t'createTransformFeedback',\r\n\t\t\t\t'createVertexArray'\r\n\t\t\t)\r\n\t\t}\r\n\t\tfor (let i = 0; i < creationFunctions.length; ++i) {\r\n\t\t\tconst functionName = creationFunctions[i]\r\n\t\t\twrappedContext_[functionName] = function (f) {\r\n\t\t\t\treturn function () {\r\n\t\t\t\t\tloseContextIfTime()\r\n\t\t\t\t\tif (contextLost_) {\r\n\t\t\t\t\t\treturn null\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst obj = f.apply(ctx, arguments)\r\n\t\t\t\t\tobj.__webglDebugContextLostId__ = contextId_\r\n\t\t\t\t\tresourceDb_.push(obj)\r\n\t\t\t\t\treturn obj\r\n\t\t\t\t}\r\n\t\t\t}((ctx as any)[functionName])\r\n\t\t}\r\n\r\n\t\tconst functionsThatShouldReturnNull = [\r\n\t\t\t'getActiveAttrib',\r\n\t\t\t'getActiveUniform',\r\n\t\t\t'getBufferParameter',\r\n\t\t\t'getContextAttributes',\r\n\t\t\t'getAttachedShaders',\r\n\t\t\t'getFramebufferAttachmentParameter',\r\n\t\t\t'getParameter',\r\n\t\t\t'getProgramParameter',\r\n\t\t\t'getProgramInfoLog',\r\n\t\t\t'getRenderbufferParameter',\r\n\t\t\t'getShaderParameter',\r\n\t\t\t'getShaderInfoLog',\r\n\t\t\t'getShaderSource',\r\n\t\t\t'getTexParameter',\r\n\t\t\t'getUniform',\r\n\t\t\t'getUniformLocation',\r\n\t\t\t'getVertexAttrib'\r\n\t\t]\r\n\t\tif (isWebGL2RenderingContext) {\r\n\t\t\tfunctionsThatShouldReturnNull.push(\r\n\t\t\t\t'getInternalformatParameter',\r\n\t\t\t\t'getQuery',\r\n\t\t\t\t'getQueryParameter',\r\n\t\t\t\t'getSamplerParameter',\r\n\t\t\t\t'getSyncParameter',\r\n\t\t\t\t'getTransformFeedbackVarying',\r\n\t\t\t\t'getIndexedParameter',\r\n\t\t\t\t'getUniformIndices',\r\n\t\t\t\t'getActiveUniforms',\r\n\t\t\t\t'getActiveUniformBlockParameter',\r\n\t\t\t\t'getActiveUniformBlockName'\r\n\t\t\t)\r\n\t\t}\r\n\t\tfor (let ii = 0; ii < functionsThatShouldReturnNull.length; ++ii) {\r\n\t\t\tconst functionName = functionsThatShouldReturnNull[ii]\r\n\t\t\twrappedContext_[functionName] = function (f) {\r\n\t\t\t\treturn function () {\r\n\t\t\t\t\tloseContextIfTime()\r\n\t\t\t\t\tif (contextLost_) {\r\n\t\t\t\t\t\treturn null\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn f.apply(ctx, arguments)\r\n\t\t\t\t}\r\n\t\t\t}(wrappedContext_[functionName])\r\n\t\t}\r\n\r\n\t\tconst isFunctions = [\r\n\t\t\t'isBuffer',\r\n\t\t\t'isEnabled',\r\n\t\t\t'isFramebuffer',\r\n\t\t\t'isProgram',\r\n\t\t\t'isRenderbuffer',\r\n\t\t\t'isShader',\r\n\t\t\t'isTexture'\r\n\t\t]\r\n\t\tif (isWebGL2RenderingContext) {\r\n\t\t\tisFunctions.push(\r\n\t\t\t\t'isQuery',\r\n\t\t\t\t'isSampler',\r\n\t\t\t\t'isSync',\r\n\t\t\t\t'isTransformFeedback',\r\n\t\t\t\t'isVertexArray'\r\n\t\t\t)\r\n\t\t}\r\n\t\tfor (let ii = 0; ii < isFunctions.length; ++ii) {\r\n\t\t\tconst functionName = isFunctions[ii]\r\n\t\t\twrappedContext_[functionName] = function (f) {\r\n\t\t\t\treturn function () {\r\n\t\t\t\t\tloseContextIfTime()\r\n\t\t\t\t\tif (contextLost_) {\r\n\t\t\t\t\t\treturn false\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn f.apply(ctx, arguments)\r\n\t\t\t\t}\r\n\t\t\t}(wrappedContext_[functionName])\r\n\t\t}\r\n\r\n\t\twrappedContext_.checkFramebufferStatus = function (f) {\r\n\t\t\treturn function () {\r\n\t\t\t\tloseContextIfTime()\r\n\t\t\t\tif (contextLost_) {\r\n\t\t\t\t\treturn wrappedContext_.FRAMEBUFFER_UNSUPPORTED\r\n\t\t\t\t}\r\n\t\t\t\treturn f.apply(ctx, arguments)\r\n\t\t\t}\r\n\t\t}(wrappedContext_.checkFramebufferStatus)\r\n\r\n\t\twrappedContext_.getAttribLocation = function (f) {\r\n\t\t\treturn function () {\r\n\t\t\t\tloseContextIfTime()\r\n\t\t\t\tif (contextLost_) {\r\n\t\t\t\t\treturn -1\r\n\t\t\t\t}\r\n\t\t\t\treturn f.apply(ctx, arguments)\r\n\t\t\t}\r\n\t\t}(wrappedContext_.getAttribLocation)\r\n\r\n\t\twrappedContext_.getVertexAttribOffset = function (f) {\r\n\t\t\treturn function () {\r\n\t\t\t\tloseContextIfTime()\r\n\t\t\t\tif (contextLost_) {\r\n\t\t\t\t\treturn 0\r\n\t\t\t\t}\r\n\t\t\t\treturn f.apply(ctx, arguments)\r\n\t\t\t}\r\n\t\t}(wrappedContext_.getVertexAttribOffset)\r\n\r\n\t\twrappedContext_.isContextLost = function () {\r\n\t\t\treturn contextLost_\r\n\t\t}\r\n\r\n\t\tif (isWebGL2RenderingContext) {\r\n\t\t\twrappedContext_.getFragDataLocation = function (f) {\r\n\t\t\t\treturn function () {\r\n\t\t\t\t\tloseContextIfTime()\r\n\t\t\t\t\tif (contextLost_) {\r\n\t\t\t\t\t\treturn -1\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn f.apply(ctx, arguments)\r\n\t\t\t\t}\r\n\t\t\t}(wrappedContext_.getFragDataLocation)\r\n\r\n\t\t\twrappedContext_.clientWaitSync = function (f) {\r\n\t\t\t\treturn function () {\r\n\t\t\t\t\tloseContextIfTime()\r\n\t\t\t\t\tif (contextLost_) {\r\n\t\t\t\t\t\treturn wrappedContext_.WAIT_FAILED\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn f.apply(ctx, arguments)\r\n\t\t\t\t}\r\n\t\t\t}(wrappedContext_.clientWaitSync)\r\n\r\n\t\t\twrappedContext_.getUniformBlockIndex = function (f) {\r\n\t\t\t\treturn function () {\r\n\t\t\t\t\tloseContextIfTime()\r\n\t\t\t\t\tif (contextLost_) {\r\n\t\t\t\t\t\treturn wrappedContext_.INVALID_INDEX\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn f.apply(ctx, arguments)\r\n\t\t\t\t}\r\n\t\t\t}(wrappedContext_.getUniformBlockIndex)\r\n\t\t}\r\n\r\n\t\treturn wrappedContext_\r\n\t}\r\n}\r\n\r\n","import chroma from 'chroma-js'\nimport { addOwnProperties, assert, DEG, int, M4, P3ZX, V, V3, } from 'ts3dutils'\nimport { glEnumToString } from './KhronosGroupWebGLDebug'\n\nimport { makeDebugContext, Mesh, Shader } from './index'\n\nimport GL = WebGLRenderingContextStrict\nexport type GL_COLOR = [number, number, number, number]\n/**\n * There's only one constant, use it for default values. Use chroma-js or similar for actual colors.\n */\nexport const GL_COLOR_BLACK: GL_COLOR = [0, 0, 0, 1]\n\nexport function currentGL(): TSGLContext {\n\treturn TSGLContextBase.gl\n}\n\nexport function isNumber(obj: any) {\n\tconst str = Object.prototype.toString.call(obj)\n\treturn str == '[object Number]' || str == '[object Boolean]'\n}\n\nexport type UniformType = V3 | M4 | number[] | boolean | number\nexport type TSGLContext = TSGLContextBase & (WebGLRenderingContextStrict | WebGL2RenderingContext)\nexport interface TSGLContextBase extends WebGLRenderingContextStrict {}\nexport class TSGLContextBase {\n\tmodelViewMatrix: M4 = M4.identity()\n\tprojectionMatrix: M4 = M4.identity()\n\tstatic readonly MODELVIEW: { __MATRIX_MODE_CONSTANT: any } = 0 as any\n\tstatic readonly PROJECTION: { __MATRIX_MODE_CONSTANT: any } = 1 as any\n\tMODELVIEW: typeof TSGLContextBase.MODELVIEW\n\tPROJECTION: typeof TSGLContextBase.PROJECTION\n\n\treadonly version: 1 | 2\n\n\tstatic HALF_FLOAT_OES: int = 0x8D61\n\tHALF_FLOAT_OES: int\n\n\tprivate tempMatrix = new M4()\n\tprivate resultMatrix = new M4()\n\tprivate modelViewStack: M4[] = []\n\tprivate projectionStack: M4[] = []\n\tprivate currentMatrixName: 'modelViewMatrix' | 'projectionMatrix'\n\tprivate stack: M4[]\n\n\tmeshes: { [name: string]: Mesh }\n\tshaders: { [name: string]: Shader }\n\tpublic drawCallCount: int = 0\n\tpublic projectionMatrixVersion: int = 0\n\tpublic modelViewMatrixVersion: int = 0\n\n\tprotected constructor(gl: TSGLContextBase, private immediate = {\n\t\tmesh: new Mesh()\n\t\t\t.addVertexBuffer('coords', 'ts_TexCoord')\n\t\t\t.addVertexBuffer('colors', 'ts_Color'),\n\t\tmode: -1 as GL.DrawMode | -1,\n\t\tcoord: [0, 0] as [number, number],\n\t\tcolor: [1, 1, 1, 1] as GL_COLOR,\n\t\tpointSize: 1,\n\t\tshader: Shader.create(`\n\t\t\tattribute vec4 ts_Color;\n\t\t\tattribute vec4 ts_Vertex;\n\t\t\tuniform mat4 ts_ModelViewProjectionMatrix;\n\t\t\tattribute vec2 ts_TexCoord;\n            uniform float pointSize;\n            varying vec4 color;\n            varying vec2 coord;\n            void main() {\n                color = ts_Color;\n                coord = ts_TexCoord;\n                gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\n                gl_PointSize = pointSize;\n            }\n\t\t`, `\n\t\t\tprecision highp float;\n            uniform sampler2D texture;\n            uniform float pointSize;\n            // uniform bool useTexture;\n            varying vec4 color;\n            varying vec2 coord;\n            void main() {\n                gl_FragColor = color;\n                // if (useTexture) gl_FragColor *= texture2D(texture, coord.xy);\n            }\n        `, gl),\n\t}) {\n\t\tthis.matrixMode(TSGLContextBase.MODELVIEW)\n\t}\n\n\t/// Implement the OpenGL modelview and projection matrix stacks, along with some other useful GLU matrix functions.\n\tmatrixMode(mode: { __MATRIX_MODE_CONSTANT: any }): void {\n\t\tswitch (mode) {\n\t\t\tcase this.MODELVIEW:\n\t\t\t\tthis.currentMatrixName = 'modelViewMatrix'\n\t\t\t\tthis.stack = this.modelViewStack\n\t\t\t\tbreak\n\t\t\tcase this.PROJECTION:\n\t\t\t\tthis.currentMatrixName = 'projectionMatrix'\n\t\t\t\tthis.stack = this.projectionStack\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tthrow new Error('invalid matrix mode ' + mode)\n\t\t}\n\t}\n\n\tloadIdentity(): void {\n\t\tM4.identity(this[this.currentMatrixName])\n\t\tthis.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++\n\t}\n\n\tloadMatrix(m4: M4) {\n\t\tM4.copy(m4, this[this.currentMatrixName])\n\t\tthis.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++\n\t}\n\n\tmultMatrix(m4: M4) {\n\t\tM4.multiply(this[this.currentMatrixName], m4, this.resultMatrix)\n\t\tconst temp = this.resultMatrix\n\t\tthis.resultMatrix = this[this.currentMatrixName]\n\t\tthis[this.currentMatrixName] = temp\n\t\tthis.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++\n\t}\n\n\tmirror(plane: { normal1: V3, w: number }) {\n\t\tthis.multMatrix(M4.mirror(plane))\n\t}\n\n\tperspective(fovDegrees: number, aspect: number, near: number, far: number) {\n\t\tthis.multMatrix(M4.perspectiveRad(fovDegrees * DEG, aspect, near, far, this.tempMatrix))\n\t}\n\n\tfrustum(left: number, right: number, bottom: number, top: number, near: number, far: number) {\n\t\tthis.multMatrix(M4.frustum(left, right, bottom, top, near, far, this.tempMatrix))\n\t}\n\n\tortho(left: number, right: number, bottom: number, top: number, near: number, far: number) {\n\t\tthis.multMatrix(M4.ortho(left, right, bottom, top, near, far, this.tempMatrix))\n\t}\n\n\tscale(x: number, y: number, z?: number): void\n\tscale(scale: number): void\n\tscale(v: V3): void\n\tscale(...args: any[]) {\n\t\tthis.multMatrix((M4.scale as any)(...args, this.tempMatrix))\n\t}\n\n\tmirroredX() {\n\t\tthis.multMatrix(M4.mirror(P3ZX))\n\t}\n\n\ttranslate(x: number, y?: number, z?: number): void\n\ttranslate(v: V3): void\n\ttranslate(x: any, y?: any, z?: any) {\n\t\tif (undefined !== y) {\n\t\t\tthis.multMatrix(M4.translate(x, y, z, this.tempMatrix))\n\t\t} else {\n\t\t\tthis.multMatrix(M4.translate(x, this.tempMatrix))\n\t\t}\n\t}\n\n\trotate(angleDegrees: number, x: number, y: number, z: number) {\n\t\tthis.multMatrix(M4.rotate(angleDegrees * DEG, {x, y, z}, this.tempMatrix))\n\t}\n\n\tlookAt(eye: V3, center: V3, up: V3) {\n\t\tthis.multMatrix(M4.lookAt(eye, center, up, this.tempMatrix))\n\t}\n\n\tpushMatrix() {\n\t\tthis.stack.push(M4.copy(this[this.currentMatrixName]))\n\t}\n\n\tpopMatrix() {\n\t\tconst pop = this.stack.pop()\n\t\tassert(undefined !== pop)\n\t\tthis[this.currentMatrixName] = pop as M4\n\t\tthis.currentMatrixName == 'projectionMatrix' ? this.projectionMatrixVersion++ : this.modelViewMatrixVersion++\n\t}\n\n\t/**\n\t * World coordinates (WC) to screen/window coordinates matrix\n\t */\n\twcToWindowMatrix() {\n\t\tconst viewport = this.getParameter(this.VIEWPORT)\n\t\tconst [x, y, w, h] = viewport\n\t\tconst viewportToScreenMatrix = new M4([\n\t\t\tw / 2, 0, 0, x + w / 2,\n\t\t\th / 2, 0, 0, y + h / 2,\n\t\t\t0, 0, 1, 0,\n\t\t\t0, 0, 0, 1,\n\t\t])\n\t\treturn M4.multiplyMultiple(viewportToScreenMatrix, this.projectionMatrix, this.modelViewMatrix)\n\t}\n\n\t/////////// IMMEDIATE MODE\n\t// ### Immediate mode\n\t//\n\t// Provide an implementation of OpenGL's deprecated immediate mode. This is\n\t// deprecated for a reason: constantly re-specifying the geometry is a bad\n\t// idea for performance. You should use a `GL.Mesh` instead, which specifies\n\t// the geometry once and caches it on the graphics card. Still, nothing\n\t// beats a quick `viewerGL.begin(WGL.POINTS); viewerGL.vertex(1, 2, 3); viewerGL.end();` for\n\t// debugging. This intentionally doesn't implement fixed-function lighting\n\t// because it's only meant for quick debugging tasks.\n\n\n\tpointSize(pointSize: number): void {\n\t\tthis.immediate.shader.uniforms({pointSize: pointSize})\n\t}\n\n\tbegin(mode: GL.DrawMode) {\n\t\tif (this.immediate.mode != -1) throw new Error('mismatched viewerGL.begin() and viewerGL.end() calls')\n\t\tthis.immediate.mode = mode\n\t\tthis.immediate.mesh.colors = []\n\t\tthis.immediate.mesh.coords = []\n\t\tthis.immediate.mesh.vertices = []\n\t}\n\n\tcolor(cssColor: string): void\n\tcolor(r: number, g: number, b: number, a?: number): void\n\tcolor(hexInt: int): void\n\tcolor(glColor: GL_COLOR): void\n\tcolor(...args: any[]) {\n\t\tthis.immediate.color =\n\t\t\t(1 == args.length && Array.isArray(args[0]))\n\t\t\t\t? args[0]\n\t\t\t\t: (1 == args.length && 'number' == typeof args[0])\n\t\t\t\t? hexIntToGLColor(args[0])\n\t\t\t\t: (1 == args.length && 'string' == typeof args[0])\n\t\t\t\t\t? chroma(args[0]).gl()\n\t\t\t\t\t: [args[0], args[1], args[2], args[3] || 1]\n\t}\n\n\ttexCoord(s: number, t: number): void\n\ttexCoord(coords: [number, number]): void\n\ttexCoord(coords: { x: number, y: number }): void\n\ttexCoord(...args: any[]) {\n\t\tthis.immediate.coord = V.apply(undefined, args).toArray(2)\n\t}\n\n\tvertex(v: V3): void\n\tvertex(x: number, y: number, z: number): void\n\tvertex(...args: any[]) {\n\t\tthis.immediate.mesh.colors.push(this.immediate.color)\n\t\tthis.immediate.mesh.coords.push(this.immediate.coord)\n\t\tthis.immediate.mesh.vertices.push(V.apply(undefined, args))\n\t}\n\n\tend(): void {\n\t\tif (this.immediate.mode == -1) throw new Error('mismatched viewerGL.begin() and viewerGL.end() calls')\n\t\tthis.immediate.mesh.compile()\n\t\tthis.immediate.shader.uniforms({\n\t\t\tuseTexture: !!TSGLContextBase.gl.getParameter(this.TEXTURE_BINDING_2D),\n\t\t}).drawBuffers(this.immediate.mesh.vertexBuffers, undefined, this.immediate.mode)\n\t\tthis.immediate.mode = -1\n\t}\n\n\n\t////////// MISCELLANEOUS METHODS\n\tstatic gl: TSGLContextBase\n\n\tmakeCurrent() {\n\t\tTSGLContextBase.gl = this\n\t}\n\n\t/**\n\t * Starts an animation loop.\n\t */\n\tanimate(callback: (this: TSGLContextBase, domHighResTimeStamp: number, timeSinceLast: number) => void): () => void {\n\t\tconst requestAnimationFrame: typeof window.requestAnimationFrame =\n\t\t\twindow.requestAnimationFrame ||\n\t\t\t(window as any).mozRequestAnimationFrame ||\n\t\t\twindow.webkitRequestAnimationFrame ||\n\t\t\tfunction (callback: FrameRequestCallback) {\n\t\t\t\tsetTimeout(() => callback(performance.now()), 1000 / 60)\n\t\t\t}\n\t\tlet time = performance.now(), keepUpdating = true\n\t\tconst update = (now: number) => {\n\t\t\tif (keepUpdating) {\n\t\t\t\tcallback.call(this, now, now - time)\n\t\t\t\ttime = now\n\t\t\t\trequestAnimationFrame(update)\n\t\t\t}\n\t\t}\n\t\trequestAnimationFrame(update)\n\t\treturn () => { keepUpdating = false }\n\t}\n\n\n\t/**\n\t * Provide an easy way to get a fullscreen app running, including an\n\t * automatic 3D perspective projection matrix by default. This should be\n\t * called once.\n\t *\n\t * Just fullscreen, no automatic camera:\n\t *\n\t *     viewerGL.fullscreen({ camera: false })\n\t *\n\t * Adjusting field of view, near plane distance, and far plane distance:\n\t *\n\t *     viewerGL.fullscreen({ fov: 45, near: 0.1, far: 1000 })\n\t *\n\t * Adding padding from the edge of the window:\n\t *\n\t *     viewerGL.fullscreen({ paddingLeft: 250, paddingBottom: 60 })\n\t */\n\tfullscreen(options: {\n\t\tpaddingTop?: number,\n\t\tpaddingLeft?: number,\n\t\tpaddingRight?: number,\n\t\tpaddingBottom?: number,\n\t\tcamera?: boolean,\n\t\tfov?: number,\n\t\tnear?: number,\n\t\tfar?: number\n\t} = {}) {\n\n\t\tconst top = options.paddingTop || 0\n\t\tconst left = options.paddingLeft || 0\n\t\tconst right = options.paddingRight || 0\n\t\tconst bottom = options.paddingBottom || 0\n\t\tif (!document.body) {\n\t\t\tthrow new Error('document.body doesn\\'t exist yet (call viewerGL.fullscreen() from ' +\n\t\t\t\t'window.onload() or from inside the <body> tag)')\n\t\t}\n\t\tdocument.body.appendChild(this.canvas)\n\t\tdocument.body.style.overflow = 'hidden'\n\t\tthis.canvas.style.position = 'absolute'\n\t\tthis.canvas.style.left = left + 'px'\n\t\tthis.canvas.style.top = top + 'px'\n\t\tthis.canvas.style.width = window.innerWidth - left - right + 'px'\n\t\tthis.canvas.style.bottom = window.innerHeight - top - bottom + 'px'\n\n\t\tconst gl = this\n\n\t\tfunction windowOnResize() {\n\t\t\tgl.canvas.width = (window.innerWidth - left - right) * window.devicePixelRatio\n\t\t\tgl.canvas.height = (window.innerHeight - top - bottom) * window.devicePixelRatio\n\t\t\tgl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n\t\t\tif (options.camera) {\n\t\t\t\tgl.matrixMode(TSGLContextBase.PROJECTION)\n\t\t\t\tgl.loadIdentity()\n\t\t\t\tgl.perspective(options.fov || 45, gl.canvas.width / gl.canvas.height,\n\t\t\t\t\toptions.near || 0.1, options.far || 1000)\n\t\t\t\tgl.matrixMode(TSGLContextBase.MODELVIEW)\n\t\t\t}\n\t\t}\n\n\t\twindow.addEventListener('resize', windowOnResize)\n\t\twindowOnResize()\n\t\treturn this\n\t}\n\n\tviewportFill() {\n\t\tthis.viewport(0, 0, this.canvas.width, this.canvas.height)\n\t}\n\n\tstatic create(options: Partial<GL.WebGLContextAttributes & {canvas: HTMLCanvasElement, throwOnError: boolean}> = {}): TSGLContext {\n\t\tconst canvas = options.canvas || document.createElement('canvas')\n\t\tif (!options.canvas) {\n\t\t\tcanvas.width = 800\n\t\t\tcanvas.height = 600\n\t\t}\n\t\tif (!('alpha' in options)) options.alpha = false\n\t\tlet newGL: any = undefined\n\t\ttry {\n\t\t\tnewGL = canvas.getContext('webgl2', options)\n\t\t\tnewGL && (newGL.version = 2)\n\t\t\tif (!newGL) {\n\t\t\t\tnewGL = (canvas.getContext('webgl', options) || canvas.getContext('experimental-webgl', options))\n\t\t\t\tnewGL && (newGL.version = 1)\n\t\t\t}\n\t\t\tconsole.log('getting context')\n\t\t} catch (e) {\n\t\t\tconsole.log(e, 'Failed to get context')\n\t\t}\n\t\tif (!newGL) throw new Error('WebGL not supported')\n\t\tif (options.throwOnError) {\n\t\t\tnewGL = makeDebugContext(newGL, (err, funcName) => {\n\t\t\t\tthrow new Error(glEnumToString(err) + ' was caused by ' + funcName)\n\t\t\t})\n\t\t}\n\n\t\tTSGLContextBase.gl = newGL\n\t\taddOwnProperties(newGL, TSGLContextBase.prototype)\n\t\taddOwnProperties(newGL, new TSGLContextBase(newGL))\n\t\t//addEventListeners(newGL)\n\t\treturn newGL\n\t}\n}\nexport namespace TSGLContext {\n\t/**\n\t * `create()` creates a new WebGL context and augments it with more methods. The alpha channel is disabled\n\t * by default because it usually causes unintended transparencies in the canvas.\n\t */\n\texport const create = TSGLContextBase.create\n}\n\n// enum WGL_ERROR {\n// \tNO_ERROR = WGL.NO_ERROR,\n// \tINVALID_ENUM = WGL.INVALID_ENUM,\n// \tINVALID_VALUE = WGL.INVALID_VALUE,\n// \tINVALID_OPERATION = WGL.INVALID_OPERATION,\n// \tINVALID_FRAMEBUFFER_OPERATION = WGL.INVALID_FRAMEBUFFER_OPERATION,\n// \tOUT_OF_MEMORY = WGL.OUT_OF_MEMORY,\n// \tCONTEXT_LOST_WEBGL = WGL.CONTEXT_LOST_WEBGL,\n// }\n\nTSGLContextBase.prototype.MODELVIEW = TSGLContextBase.MODELVIEW\nTSGLContextBase.prototype.PROJECTION = TSGLContextBase.PROJECTION\nTSGLContextBase.prototype.HALF_FLOAT_OES = TSGLContextBase.HALF_FLOAT_OES\n\n\n/**\n *\n * Push two triangles:\n * c - d\n * | \\ |\n * a - b\n */\nexport function pushQuad(triangles: int[], flipped: boolean, a: int, b: int, c: int, d: int) {\n\tif (flipped) {\n\t\ttriangles.push(\n\t\t\ta, c, b,\n\t\t\tb, c, d)\n\t} else {\n\t\ttriangles.push(\n\t\t\ta, b, c,\n\t\t\tb, d, c)\n\t}\n}\n\nfunction hexIntToGLColor(color: int): GL_COLOR {\n\treturn [(color >> 16) / 255.0, ((color >> 8) & 0xff) / 255.0, (color & 0xff) / 255.0, 1.0]\n}\n","precision mediump float;\r\n\r\nuniform mat4 ts_ModelViewProjectionMatrix;\r\nuniform mat3 ts_NormalMatrix;\r\n\r\nattribute vec3 ts_Normal;\r\nattribute vec4 ts_Vertex;\r\nattribute vec4 ts_Color;\r\n\r\nvarying vec3 normal;\r\nvarying vec4 color;\r\n\r\nvoid main() {\r\n\tgl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\r\n\tnormal = ts_NormalMatrix * ts_Normal;\r\n\tcolor = ts_Color;\r\n}","/// <reference path=\"../types.d.ts\" />\r\nimport { V3, DEG, V, clamp } from 'ts3dutils'\r\nimport { TSGLContext, Mesh, Shader } from 'tsgl'\r\n\r\nimport posNormalColorVS from '../shaders/posNormalColorVS.glslx'\r\nimport chroma from 'chroma-js'\r\n\r\n/**\r\n * Move camera using mouse.\r\n */\r\nexport function camera(gl: TSGLContext) {\r\n\tlet yRot = -10 * DEG\r\n\tlet zRot = 90 * DEG\r\n\tlet camera = new V3(0, -5, 1)\r\n\tconst mesh = Mesh.sphere().computeWireframeFromFlatTriangles().compile()\r\n\tconst shader = Shader.create(posNormalColorVS, `\r\nprecision mediump float;\r\nuniform float brightness;\r\nvarying vec3 normal;\r\nvoid main() {\r\n\tgl_FragColor = vec4(brightness * (normal * 0.5 + 0.5), 1.0);\r\n}\r\n`)\r\n\r\n\tlet lastPos = V3.O\r\n\t// scene rotation\r\n\tgl.canvas.onmousemove = function (e) {\r\n\t\tconst pagePos = V(e.pageX, e.pageY)\r\n\t\tconst delta = lastPos.to(pagePos)\r\n\t\tif (e.buttons & 1) {\r\n\t\t\tzRot -= delta.x * 0.25 * DEG\r\n\t\t\tyRot = clamp(yRot - delta.y * 0.25 * DEG, -85 * DEG, 85 * DEG)\r\n\t\t}\r\n\t\tlastPos = pagePos\r\n\t}\r\n\tgl.canvas.contentEditable = 'true'\r\n\tconst keys: { [key: string]: boolean } = {}\r\n\tgl.canvas.onkeydown = function (e) {\r\n\t\tkeys[e.code] = true\r\n\t}\r\n\tgl.canvas.onkeyup = function (e) {\r\n\t\tkeys[e.code] = false\r\n\t}\r\n\r\n\tgl.clearColor(1, 1, 1, 1)\r\n\r\n\t// setup camera\r\n\r\n\tgl.enable(gl.CULL_FACE)\r\n\tgl.enable(gl.POLYGON_OFFSET_FILL)\r\n\tgl.polygonOffset(1, 1)\r\n\tgl.clearColor(0.8, 0.8, 0.8, 1)\r\n\tgl.enable(gl.DEPTH_TEST)\r\n\r\n\tgl.vertexAttrib1f(0, 42)\r\n\tgl.enableVertexAttribArray(0)\r\n\tconsole.log(gl.getVertexAttrib(0, gl.CURRENT_VERTEX_ATTRIB))\r\n\tconsole.log(gl.getVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_ENABLED))\r\n\r\n\tconst gl2 = gl as any as WebGL2RenderingContext\r\n\tconst vao = gl2.createVertexArray()\r\n\tgl2.bindVertexArray(vao)\r\n\tgl2.vertexAttrib1f(0, 31)\r\n\tconsole.log(gl.getVertexAttrib(0, gl.CURRENT_VERTEX_ATTRIB))\r\n\tconsole.log(gl.getVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_ENABLED))\r\n\r\n\tgl2.bindVertexArray(null)\r\n\tconsole.log(gl.getVertexAttrib(0, gl.CURRENT_VERTEX_ATTRIB))\r\n\tconsole.log(gl.getVertexAttrib(0, gl.VERTEX_ATTRIB_ARRAY_ENABLED))\r\n\r\n\treturn gl.animate(function (_abs, diff) {\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\t\tgl.loadIdentity()\r\n\t\tconst speed = diff / 1000 * 4\r\n\r\n\t\t// Forward movement\r\n\t\tconst forwardMov = +!!(keys.KeyW || keys.ArrowUp) - +!!(keys.KeyS || keys.ArrowDown)\r\n\t\tconst forwardV3 = V3.sphere(zRot, yRot)\r\n\r\n\t\t// Sideways movement\r\n\t\tconst sideMov = +!!(keys.KeyA || keys.ArrowLeft) - +!!(keys.KeyD || keys.ArrowRight)\r\n\t\tconst sideV3 = V3.sphere(zRot + Math.PI / 2, 0)\r\n\r\n\t\tconst movementV3 = forwardV3.times(forwardMov).plus(sideV3.times(sideMov))\r\n\t\tcamera = movementV3.likeO() ? camera : camera.plus(movementV3.toLength(speed))\r\n\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\r\n\t\tgl.matrixMode(gl.PROJECTION)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.perspective(70, gl.canvas.width / gl.canvas.height, 0.1, 1000)\r\n\t\tgl.lookAt(camera, camera.plus(forwardV3), V3.Z)\r\n\r\n\t\tgl.matrixMode(gl.MODELVIEW)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.rotate(-zRot, 0, 0, 1)\r\n\t\tgl.rotate(-yRot, 0, 1, 0)\r\n\t\tgl.translate(-camera.x, -camera.y, -camera.z)\r\n\r\n\t\tshader.uniforms({ brightness: 1 }).attributes({ts_Color: chroma('red').gl()}).draw(mesh, gl.TRIANGLES)\r\n\t\tshader.uniforms({ brightness: 0 }).draw(mesh, gl.LINES)\r\n\t})\r\n}\r\n\r\n(camera as any).info = 'LMB-drag to move camera.'","/// <reference path=\"../types.d.ts\" />\r\nimport { clamp, int, M4, TAU, V, V3 } from 'ts3dutils'\r\n\r\nimport { TSGLContext, Mesh, pushQuad, Shader, Texture, isWebGL2RenderingContext } from 'tsgl'\r\n\r\nexport { TSGLContext }\r\n\r\n/**\r\n * Draw soft shadows by calculating a light map in multiple passes.\r\n */\r\nexport function gpuLightMap(gl: TSGLContext & WebGL2RenderingContext) {\r\n\tif (!isWebGL2RenderingContext(gl)) throw new Error('needs WebGL2')\r\n\tgl.getExtension('EXT_color_buffer_float')\r\n\t// modified version of https://evanw.github.io/lightgl.js/tests/gpulightmap.html\r\n\r\n\tlet angleX = 0\r\n\tlet angleY = 0\r\n\tif (gl.version !== 2 && (!gl.getExtension('OES_texture_float') || !gl.getExtension('OES_texture_float_linear'))) {\r\n\t\tdocument.write('This demo requires the OES_texture_float and OES_texture_float_linear extensions to run')\r\n\t\tthrow new Error('not supported')\r\n\t}\r\n\tconst texturePlane = Mesh.plane()\r\n\tconst textureShader = Shader.create(`\r\n  attribute vec2 ts_TexCoord;\r\n  varying vec2 coord;\r\n  void main() {\r\n    coord = ts_TexCoord;\r\n    gl_Position = vec4(coord * 2.0 - 1.0, 0.0, 1.0);\r\n  }\r\n`, `\r\nprecision highp float;\r\n  uniform sampler2D texture;\r\n  varying vec2 coord;\r\n  void main() {\r\n    gl_FragColor = texture2D(texture, coord);\r\n  }\r\n`)\r\n\r\n\tconst depthMap = new Texture(1024, 1024, { format: gl.RGBA })\r\n\tconst depthShader = Shader.create(`\r\n\tuniform mat4 ts_ModelViewProjectionMatrix;\r\n\tattribute vec4 ts_Vertex;\r\n\t// GL does not make the fragment position in NDC available, (gl_FragCoord is in window coords)\r\n\t// so we have an addition varying pos to calculate it ourselves.\r\n  varying vec4 pos;\r\n  void main() {\r\n    gl_Position = pos = ts_ModelViewProjectionMatrix * ts_Vertex;\r\n  }\r\n`, `\r\nprecision highp float;\r\n  varying vec4 pos;\r\n  void main() {\r\n    float depth = pos.z / pos.w;\r\n    gl_FragColor = vec4(depth * 0.5 + 0.5);\r\n  }\r\n`)\r\n\r\n\tconst shadowTestShader = Shader.create(`\r\n  uniform mat4 shadowMapMatrix;\r\n  uniform vec3 light;\r\n  attribute vec4 offsetPosition;\r\n  attribute vec3 ts_Normal;\r\n  attribute vec2 ts_TexCoord;\r\n  varying vec4 shadowMapPos; // position inside the shadow map frustrum\r\n  varying vec3 normal;\r\n\r\n  void main() {\r\n    normal = ts_Normal;\r\n    shadowMapPos = shadowMapMatrix * offsetPosition;\r\n    gl_Position = vec4(ts_TexCoord * 2.0 - 1.0, 0.0, 1.0);\r\n  }\r\n`, `\r\n\tprecision highp float;\r\n  uniform float sampleCount;\r\n  uniform sampler2D depthMap;\r\n  uniform vec3 light;\r\n  varying vec4 shadowMapPos;\r\n  varying vec3 normal;\r\n  uniform vec4 res;\r\n\r\n  void main() {\r\n    /* Run shadow test */\r\n    const float bias = -0.0025;\r\n    float depth = texture2D(depthMap, shadowMapPos.xy / shadowMapPos.w * 0.5 + 0.5).r;\r\n    float shadow = (bias + shadowMapPos.z / shadowMapPos.w * 0.5 + 0.5 - depth > 0.0) ? 1.0 : 0.0;\r\n\r\n    /* Points on polygons facing away from the light are always in shadow */\r\n    float color = dot(normal, light) > 0.0 ? 1.0 - shadow : 0.0;\r\n    gl_FragColor = vec4(vec3(color), 1.0 / (1.0 + sampleCount));\r\n  }\r\n`)\r\n\r\n\t/**\r\n\t * Wrapper for a Mesh made only of quads (two triangles in a \"square\") and\r\n\t * an associated automatically UV-unwrapped texture.\r\n\t */\r\n\tclass QuadMesh {\r\n\t\tmesh = new Mesh()\r\n\t\t\t.addVertexBuffer('normals', 'ts_Normal')\r\n\t\t\t.addIndexBuffer('TRIANGLES')\r\n\t\t\t.addVertexBuffer('coords', 'ts_TexCoord')\r\n\t\t\t.addVertexBuffer('offsetCoords', 'offsetCoord')\r\n\t\t\t.addVertexBuffer('offsetPositions', 'offsetPosition')\r\n\t\tindex: int = 0\r\n\t\tlightmapTexture: Texture | undefined\r\n\t\tbounds: { center: V3, radius: number } | undefined\r\n\t\tsampleCount: int = 0\r\n\t\tcountedQuads = 0\r\n\r\n\t\t// Add a quad given its four vertices and allocate space for it in the lightmap\r\n\t\taddQuad(a: V3, b: V3, c: V3, d: V3) {\r\n\r\n\t\t\t// Add vertices\r\n\t\t\tconst vl = this.mesh.vertices.length\r\n\t\t\tthis.mesh.vertices.push(a, b, c, d)\r\n\r\n\t\t\t// Add normal\r\n\t\t\tconst normal = V3.normalOnPoints(a, b, c).unit()\r\n\t\t\tthis.mesh.normals.push(normal, normal, normal, normal)\r\n\r\n\t\t\t// A quad is two triangles\r\n\t\t\tpushQuad(this.mesh.TRIANGLES, false, vl, vl + 1, vl + 2, vl + 3)\r\n\r\n\t\t\tthis.countedQuads++\r\n\t\t}\r\n\r\n\t\taddDoubleQuad(a: V3, b: V3, c: V3, d: V3) {\r\n\t\t\t// Need a separate lightmap for each side of the quad\r\n\t\t\tthis.addQuad(a, b, c, d)\r\n\t\t\tthis.addQuad(a, c, b, d)\r\n\t\t}\r\n\r\n\t\taddCube(m4?: M4) {\r\n\t\t\t[\r\n\t\t\t\t[V3.O, V3.Y, V3.X, V3.XY],\r\n\t\t\t\t[V3.Z, new V3(1, 0, 1), new V3(0, 1, 1), V3.XYZ],\r\n\t\t\t\t[V3.O, V3.X, V3.Z, new V3(1, 0, 1)],\r\n\t\t\t\t[V3.X, new V3(1, 1, 0), new V3(1, 0, 1), new V3(1, 1, 1)],\r\n\t\t\t\t[new V3(1, 1, 0), V3.Y, V3.XYZ, new V3(0, 1, 1)],\r\n\t\t\t\t[V3.Y, V3.O, new V3(0, 1, 1), V3.Z],\r\n\t\t\t].forEach(vs => (this.addQuad as any)(...(m4 ? m4.transformedPoints(vs) : vs)))\r\n\t\t}\r\n\r\n\t\tcompile(texelsPerSide: int) {\r\n\t\t\tconst numQuads = this.mesh.vertices.length / 4\r\n\t\t\tif (numQuads % 1 != 0) throw new Error('not quads')\r\n\t\t\tconst quadsPerSide = Math.ceil(Math.sqrt(numQuads))\r\n\r\n\t\t\tfor (let i = 0; i < numQuads; i++) {\r\n\t\t\t\t// Compute location of texture cell\r\n\t\t\t\tconst s = i % quadsPerSide\r\n\t\t\t\tconst t = (i - s) / quadsPerSide\r\n\r\n\t\t\t\t// Coordinates that are on the edge of border texels (to avoid cracks when rendering)\r\n\t\t\t\tconst rs0 = s / quadsPerSide\r\n\t\t\t\tconst rt0 = t / quadsPerSide\r\n\t\t\t\tconst rs1 = (s + 1) / quadsPerSide\r\n\t\t\t\tconst rt1 = (t + 1) / quadsPerSide\r\n\t\t\t\tthis.mesh.coords.push(\r\n\t\t\t\t\t[rs0, rt0],\r\n\t\t\t\t\t[rs1, rt0],\r\n\t\t\t\t\t[rs0, rt1],\r\n\t\t\t\t\t[rs1, rt1])\r\n\r\n\t\t\t\tconst half = 1 / texelsPerSide\r\n\r\n\t\t\t\tconst [a, b, c, d] = this.mesh.vertices.slice(i * 4, (i + 1) * 4)\r\n\r\n\t\t\t\t// Add fake positions\r\n\t\t\t\tfunction bilerp(x: number, y: number) {\r\n\t\t\t\t\treturn a.times((1 - x) * (1 - y)).plus(b.times(x * (1 - y)))\r\n\t\t\t\t\t\t.plus(c.times((1 - x) * y)).plus(d.times(x * y))\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.mesh.offsetPositions.push(\r\n\t\t\t\t\tbilerp(-half, -half),\r\n\t\t\t\t\tbilerp(1 + half, -half),\r\n\t\t\t\t\tbilerp(-half, 1 + half),\r\n\t\t\t\t\tbilerp(1 + half, 1 + half))\r\n\r\n\t\t\t\tconst s0 = (s + half) / quadsPerSide\r\n\t\t\t\tconst t0 = (t + half) / quadsPerSide\r\n\t\t\t\tconst s1 = (s + 1 - half) / quadsPerSide\r\n\t\t\t\tconst t1 = (t + 1 - half) / quadsPerSide\r\n\t\t\t\tthis.mesh.offsetCoords.push(\r\n\t\t\t\t\t[s0, t0],\r\n\t\t\t\t\t[s1, t0],\r\n\t\t\t\t\t[s0, t1],\r\n\t\t\t\t\t[s1, t1])\r\n\r\n\t\t\t}\r\n\t\t\t// Finalize mesh\r\n\t\t\tthis.mesh.compile()\r\n\t\t\tthis.bounds = this.mesh.getBoundingSphere()\r\n\r\n\t\t\t// Create textures\r\n\t\t\tconst textureSize = quadsPerSide * texelsPerSide\r\n\t\t\tconsole.log('texture size: ' + textureSize)\r\n\t\t\tthis.lightmapTexture = new Texture(textureSize, textureSize,\r\n\t\t\t\t{ internalFormat: gl.RGBA32F, format: gl.RGBA, type: gl.FLOAT, filter: gl.LINEAR })\r\n\t\t}\r\n\r\n\t\tdrawShadow(dir: V3) {\r\n\t\t\t// Construct a camera looking from the light toward the object\r\n\t\t\tconst r = this.bounds!.radius, c = this.bounds!.center\r\n\t\t\tgl.matrixMode(gl.PROJECTION)\r\n\t\t\tgl.pushMatrix()\r\n\t\t\tgl.loadIdentity()\r\n\t\t\tgl.ortho(-r, r, -r, r, -r, r)\r\n\t\t\tgl.matrixMode(gl.MODELVIEW)\r\n\t\t\tgl.pushMatrix()\r\n\t\t\tgl.loadIdentity()\r\n\t\t\tconst at = c.minus(dir)\r\n\t\t\tconst useY = (dir.maxElement() != dir.z)\r\n\t\t\tconst up = new V3(+!useY, 0, +useY).cross(dir)\r\n\t\t\tgl.lookAt(c, at, up)\r\n\r\n\t\t\t// Render the object viewed from the light using a shader that returns the fragment depth\r\n\t\t\tconst mesh = this.mesh\r\n\t\t\tconst shadowMapMatrix = gl.projectionMatrix.times(gl.modelViewMatrix)\r\n\t\t\tdepthMap.drawTo(function (gl) {\r\n\t\t\t\tgl.enable(gl.DEPTH_TEST)\r\n\t\t\t\tgl.clearColor(1, 1, 1, 1)\r\n\t\t\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\t\t\t\tdepthShader.draw(mesh)\r\n\t\t\t})\r\n\r\n\t\t\t//Run the shadow test for each texel in the lightmap and\r\n\t\t\t//accumulate that onto the existing lightmap contents\r\n\t\t\tconst sampleCount = this.sampleCount++\r\n\t\t\tdepthMap.bind(0)\r\n\t\t\tthis.lightmapTexture!.drawTo(function (gl) {\r\n\t\t\t\tgl.enable(gl.BLEND)\r\n\t\t\t\tgl.disable(gl.CULL_FACE)\r\n\t\t\t\tgl.disable(gl.DEPTH_TEST)\r\n\t\t\t\tgl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\r\n\t\t\t\tshadowTestShader.uniforms({\r\n\t\t\t\t\tshadowMapMatrix: shadowMapMatrix,\r\n\t\t\t\t\tsampleCount: sampleCount,\r\n\t\t\t\t\tlight: dir,\r\n\t\t\t\t}).draw(mesh)\r\n\t\t\t\tgl.disable(gl.BLEND)\r\n\t\t\t})\r\n\t\t\tdepthMap.unbind(0)\r\n\r\n\t\t\t// Reset the transform\r\n\t\t\tgl.matrixMode(gl.PROJECTION)\r\n\t\t\tgl.popMatrix()\r\n\t\t\tgl.matrixMode(gl.MODELVIEW)\r\n\t\t\tgl.popMatrix()\r\n\t\t}\r\n\t}\r\n\r\n\t// Make a mesh of quads\r\n\tconst numArcQuads = 32\r\n\tconst groundTilesPerSide = 5\r\n\tconst quadMesh = new QuadMesh()\r\n\t// Arc of randomly oriented quads\r\n\tquadMesh.addCube(M4.multiplyMultiple(\r\n\t\tM4.translate(0, 0, -0.2),\r\n\t\tM4.rotateAB(V3.XYZ, V3.Z)))\r\n\tfor (let i = 0; i < numArcQuads; i++) {\r\n\t\tconst r = 0.4\r\n\t\tconst t = i / numArcQuads * TAU\r\n\t\tconst center = V(0, 0, Math.sqrt(3) / 2 - 0.2).plus(V(0, 1.5, 0).times(Math.cos(t))).plus(V(1, 0, -1).toLength(1.5).times(Math.sin(t)))\r\n\t\t// const center = V3.sphere(0, (i + Math.random()) / numArcQuads * Math.PI)\r\n\t\tconst a = V3.randomUnit()\r\n\t\tconst b = V3.randomUnit().cross(a).unit()\r\n\t\tquadMesh.addCube(M4.multiplyMultiple(\r\n\t\t\tM4.translate(center),\r\n\t\t\tM4.forSys(a, b),\r\n\t\t\tM4.scale(r, r, r),\r\n\t\t\tM4.translate(-0.5, -0.5, -0.5)))\r\n\t}\r\n\r\n\t// Plane of quads\r\n\tfor (let x = 0; x < groundTilesPerSide; x++) {\r\n\t\tfor (let z = 0; z < groundTilesPerSide; z++) {\r\n\t\t\tconst dx = x - groundTilesPerSide / 2\r\n\t\t\tconst dz = z - groundTilesPerSide / 2\r\n\t\t\tquadMesh.addQuad(\r\n\t\t\t\tnew V3(dx, dz, 0),\r\n\t\t\t\tnew V3(dx + 1, dz, 0),\r\n\t\t\t\tnew V3(dx, dz + 1, 0),\r\n\t\t\t\tnew V3(dx + 1, dz + 1, 0),\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\tquadMesh.compile(128)\r\n\r\n\t// The mesh will be drawn with texture mapping\r\n\tconst mesh = quadMesh.mesh\r\n\tconst textureMapShader = Shader.create(`\r\n\t\tattribute vec4 ts_Vertex;\r\n\t\tuniform mat4 ts_ModelViewProjectionMatrix;\r\n        attribute vec2 offsetCoord;\r\n        varying vec2 coord;\r\n        void main() {\r\n            coord = offsetCoord;\r\n            gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\r\n        }\r\n`, `\r\n\t\tprecision highp float;\r\n        uniform sampler2D texture;\r\n        varying vec2 coord;\r\n        void main() {\r\n            gl_FragColor = texture2D(texture, coord);\r\n        }\r\n`)\r\n\r\n\r\n\tlet lastPos = V3.O\r\n\t// scene rotation\r\n\tgl.canvas.onmousemove = function (e) {\r\n\t\tconst pagePos = V(e.pageX, e.pageY)\r\n\t\tconst delta = lastPos.to(pagePos)\r\n\t\tif (e.buttons & 1) {\r\n\t\t\tangleY += delta.x\r\n\t\t\tangleX = clamp(angleX + delta.y, -90, 90)\r\n\t\t}\r\n\t\tlastPos = pagePos\r\n\t}\r\n\r\n\tlet flip = false\r\n\r\n\tgl.enable(gl.CULL_FACE)\r\n\tgl.enable(gl.DEPTH_TEST)\r\n\r\n\tconst lightDir = V3.XYZ\r\n\tconst ambientFraction = 0.4\r\n\r\n\treturn gl.animate(function (_abs, _diff) {\r\n\t\tconst gl = this\r\n\r\n\t\tgl.enable(gl.CULL_FACE)\r\n\t\tgl.clearColor(0.9, 0.9, 0.9, 1)\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\r\n\t\t// setup camera\r\n\t\tgl.matrixMode(gl.PROJECTION)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.perspective(70, gl.canvas.width / gl.canvas.height, 0.1, 1000)\r\n\t\tgl.lookAt(V(0, -3, 3), V3.O, V3.Z)\r\n\r\n\t\tgl.matrixMode(gl.MODELVIEW)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.rotate(angleX, 1, 0, 0)\r\n\t\tgl.rotate(angleY, 0, 0, 1)\r\n\r\n\t\t// Alternate between a shadow from a random point on the sky hemisphere\r\n\t\t// and a random point near the light (creates a soft shadow)\r\n\t\tflip = !flip\r\n\t\tconst dir = Math.random() < ambientFraction\r\n\t\t\t? V3.randomUnit()\r\n\t\t\t: lightDir.plus(V3.randomUnit().times(0.1 * Math.sqrt(Math.random()))).unit()\r\n\t\tquadMesh.drawShadow(dir.z < 0 ? dir.negated() : dir)\r\n\r\n\t\t// Draw the mesh with the ambient occlusion so far\r\n\t\tgl.enable(gl.DEPTH_TEST)\r\n\t\tgl.enable(gl.CULL_FACE)\r\n\t\tquadMesh.lightmapTexture!.bind(0)\r\n\t\ttextureMapShader.draw(mesh)\r\n\r\n\t\t// Draw depth map overlay\r\n\t\tgl.disable(gl.CULL_FACE)\r\n\t\tquadMesh.lightmapTexture!.bind(0)\r\n\t\tgl.viewport(10, 10, 10 + 256, 10 + 256)\r\n\t\ttextureShader.draw(texturePlane)\r\n\t\tgl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\r\n\r\n\t})\r\n}\r\n(gpuLightMap as any).info = 'LMB-drag to rotate camera.'","/// <reference path=\"../types.d.ts\" />\r\nimport { TSGLContext,  } from 'tsgl'\r\nimport { V3, V } from 'ts3dutils'\r\n\r\n/**\r\n * OpenGL-style immediate mode.\r\n */\r\nexport function immediateMode(gl: TSGLContext) {\r\n\t// setup camera\r\n\tgl.disable(gl.CULL_FACE)\r\n\tgl.matrixMode(gl.PROJECTION)\r\n\tgl.loadIdentity()\r\n\tgl.perspective(90, gl.canvas.width / gl.canvas.height, 0.0001, 1000000)\r\n\tgl.lookAt(V(0, -3, 2), V3.O, V3.Z)\r\n\tgl.matrixMode(gl.MODELVIEW)\r\n\r\n\tgl.enable(gl.DEPTH_TEST)\r\n\tgl.clearColor(1, 1, 1, 0)\r\n\r\n\treturn gl.animate(function (abs, _diff) {\r\n\t\tconst angleDeg = abs / 1000 * 45\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\t\tgl.loadIdentity()\r\n\t\t// gl.translate(0, 0, -5)\r\n\t\tgl.rotate(angleDeg, 0, 0, 1)\r\n\r\n\t\tgl.color(0.5, 0.5, 0.5)\r\n\t\tgl.lineWidth(1)\r\n\t\tgl.begin(gl.LINES)\r\n\t\tfor (let i = -10; i <= 10; i++) {\r\n\t\t\tgl.vertex(i, -10, 0)\r\n\t\t\tgl.vertex(i, +10, 0)\r\n\t\t\tgl.vertex(-10, i, 0)\r\n\t\t\tgl.vertex(+10, i, 0)\r\n\t\t}\r\n\t\tgl.end()\r\n\r\n\t\tgl.pointSize(10)\r\n\t\tgl.begin(gl.POINTS)\r\n\r\n\t\tgl.color(1, 0, 0)\r\n\t\tgl.vertex(1, 0, 0)\r\n\r\n\t\tgl.color(0, 1, 0)\r\n\t\tgl.vertex(0, 1, 0)\r\n\r\n\t\tgl.color(0, 0, 1)\r\n\t\tgl.vertex(0, 0, 1)\r\n\r\n\t\tgl.end()\r\n\r\n\t\tgl.lineWidth(2)\r\n\t\tgl.begin(gl.LINE_LOOP)\r\n\t\tgl.color('red')\r\n\t\tgl.vertex(1, 0, 0)\r\n\t\tgl.color('green')\r\n\t\tgl.vertex(0, 1, 0)\r\n\t\tgl.color('blue')\r\n\t\tgl.vertex(0, 0, 1)\r\n\t\tgl.end()\r\n\r\n\t\tgl.begin(gl.TRIANGLES)\r\n\t\tgl.color(1, 1, 0)\r\n\t\tgl.vertex(0.5, 0.5, 0)\r\n\t\tgl.color(0, 1, 1)\r\n\t\tgl.vertex(0, 0.5, 0.5)\r\n\t\tgl.color(1, 0, 1)\r\n\t\tgl.vertex(0.5, 0, 0.5)\r\n\t\tgl.end()\r\n\t})\r\n}","precision mediump float;\r\nvarying vec4 color;\r\nvoid main() {\r\n    gl_FragColor = color;\r\n}","/// <reference path=\"../types.d.ts\" />\r\nimport { TSGLContext, Mesh, Shader } from 'tsgl'\r\nimport chroma from 'chroma-js'\r\n// import colorFS from '../shaders/colorFS.glslx'\r\nimport posNormalColorVS from '../shaders/posNormalColorVS.glslx'\r\nimport varyingColorFS from '../shaders/varyingColorFS.glslx'\r\nimport { V3, arrayFromFunction, AABB, V, M4, DEG, time } from 'ts3dutils'\r\n\r\n/**\r\n * Calculate and render magnetic field lines.\r\n */\r\nexport function mag(gl: TSGLContext) {\r\n\tconst cubeMesh = Mesh.cube()\r\n\t// simple pos/color\r\n\tconst shader = Shader.create(posNormalColorVS, varyingColorFS)\r\n\tgl.clearColor(1, 1, 1, 1)\r\n\r\n\ttype PointCharge = { pos: V3, charge: number }\r\n\r\n\t// given a magnetic field created by fieldCharges, calculate the field strength/dir at pos\r\n\tfunction fieldAtPos(fieldCharges: PointCharge[], pos: V3) {\r\n\t\tconst fieldChargeForces = fieldCharges.map(p => {\r\n\t\t\tconst posToP = pos.to(p.pos)\r\n\t\t\tconst r = posToP.length()\r\n\t\t\tconst partialForceMagnitude = p.charge / r / r\r\n\t\t\tconst partialForce = posToP.toLength(partialForceMagnitude)\r\n\t\t\treturn partialForce\r\n\t\t})\r\n\t\treturn V3.add(...fieldChargeForces)\r\n\t}\r\n\r\n\t/**\r\n\t * Iteratively calculate a field line\r\n\t * @param fieldCharges charge defining magnetic field\r\n\t * @param bounds within which to calc field lines\r\n\t * @param start start point of field line\r\n\t * @param dir step size to take. negative to plot field line in reverse\r\n\t */\r\n\tfunction* qPath(fieldCharges: PointCharge[], bounds: AABB, start: V3, dir: number) {\r\n\t\tlet pos = start, f, i = 0\r\n\t\twhile (true) {\r\n\t\t\tf = fieldAtPos(fieldCharges, pos)\r\n\t\t\tpos = pos.plus(f.toLength(dir))\r\n\r\n\t\t\tif (!bounds.containsPoint(pos) // pos outside bounds\r\n\t\t\t\t|| i++ > 1000 // to many iterations\r\n\t\t\t\t|| f.squared() > 2.5e7 // force to high, i.e. to close to charge\r\n\t\t\t) break\r\n\t\t\tyield pos\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns array of PointCharges to model a bar magnet.\r\n\t * @param count\r\n\t */\r\n\tfunction barMagnet(count = 4) {\r\n\t\treturn arrayFromFunction(count * count, i => {\r\n\t\t\tconst x = i % count\r\n\t\t\tconst y = (i / count) | 0\r\n\t\t\treturn { pos: V((0.5 + x) / count, (0.5 + y) / count, 0), charge: (+(x < count / 2) || -1) }\r\n\t\t})\r\n\t}\r\n\r\n\tconst enabledBarMagnets = [true, true, true, true, true]\r\n\tconst barMagnetMatrices = [\r\n\t\tM4.scale(0.2, 0.1, 0.02).rotateZ(20 * DEG).translate(0.5, 0.5, 0.1),\r\n\t\tM4.scale(0.1, 0.05, 0.02).rotateZ(60 * DEG).translate(0.2, 0.1),\r\n\t\tM4.scale(0.2, 0.02, 0.02).rotateY(-100 * DEG).rotateZ(120 * DEG).translate(0.2, 0.8),\r\n\t\tM4.scale(0.2, 0.1, 0.02).rotateX(90 * DEG).rotateZ(270 * DEG).translate(0.9, 0.4, 0.1),\r\n\t\tM4.scale(0.2, 0.1, 0.02).rotateX(90 * DEG).rotateZ(270 * DEG).translate(0.9, 0.9, 0.1),\r\n\t]\r\n\r\n\tconst bounds = new AABB(V3.O, V(1, 1, 0.3))\r\n\tlet linesDensity = 10\r\n\tconst linesMesh = new Mesh().addIndexBuffer('LINES')\r\n\r\n\tfunction calculateFieldLines() {\r\n\t\tconst ps: PointCharge[] = []\r\n\t\tbarMagnetMatrices.forEach((mat, index) => enabledBarMagnets[index] && ps.push(...barMagnet(6).map(p => {\r\n\t\t\tp.pos = mat.transformPoint(p.pos)\r\n\t\t\treturn p\r\n\t\t})))\r\n\r\n\t\tlinesMesh.LINES.clear()\r\n\t\tlinesMesh.vertices.clear()\r\n\t\tconsole.log('generation took (ms): ' + time(() => {\r\n\t\t\tfor (const [x, y, z] of grid3d(linesDensity, linesDensity, Math.ceil(0.4 * linesDensity))) {\r\n\t\t\t\tconst start = V(x, y, z * bounds.max.z)\r\n\t\t\t\tlinesMesh.vertices.push(start)\r\n\t\t\t\tconst STEP = 0.01\r\n\t\t\t\tfor (const p of qPath(ps, bounds, start, STEP)) {\r\n\t\t\t\t\tlinesMesh.vertices.push(p)\r\n\t\t\t\t\tlinesMesh.LINES.push(linesMesh.vertices.length - 2, linesMesh.vertices.length - 1)\r\n\t\t\t\t}\r\n\t\t\t\tlinesMesh.vertices.push(start)\r\n\t\t\t\tfor (const p of qPath(ps, bounds, start, -STEP)) {\r\n\t\t\t\t\tlinesMesh.vertices.push(p)\r\n\t\t\t\t\tlinesMesh.LINES.push(linesMesh.vertices.length - 2, linesMesh.vertices.length - 1)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}))\r\n\t\tlinesMesh.compile()\r\n\t}\r\n\r\n\tcalculateFieldLines()\r\n\r\n\tconst vectorFieldMesh = new Mesh()\r\n\r\n\tconst fieldLinesXSide = 64\r\n\tconst vectorFieldVectorLength = 2 * 0.9 / fieldLinesXSide\r\n\tvectorFieldMesh.vertices = ballGrid(fieldLinesXSide).flatMap(\r\n\t\tp => [new V3(p.x, p.y, -vectorFieldVectorLength / 2), new V3(p.x, p.y, vectorFieldVectorLength / 2)])\r\n\r\n\t// vectorFieldMesh.vertices = arrayFromFunction(fieldLinesXSide * fieldLinesXSide * 2, i => {\r\n\t//     const startOrEnd = i % 2\r\n\t//     const x = ((i / 2) | 0) % fieldLinesXSide\r\n\t//     const y = ((i / 2 / fieldLinesXSide) | 0) % fieldLinesXSide\r\n\t//     return new V3(x / fieldLinesXSide, y / fieldLinesXSide, (startOrEnd || -1) * 0.01)\r\n\t// })\r\n\tvectorFieldMesh.compile()\r\n\r\n\t// setup camera\r\n\tgl.matrixMode(gl.PROJECTION)\r\n\tgl.loadIdentity()\r\n\tgl.perspective(45, gl.canvas.width / gl.canvas.height, 0.1, 1000)\r\n\tgl.lookAt(V(0.5, 2, 1), V(0.5, 0.5), V3.Z)\r\n\tgl.matrixMode(gl.MODELVIEW)\r\n\tgl.clearColor(1, 1, 1, 0)\r\n\r\n\tgl.enable(gl.DEPTH_TEST)\r\n\r\n\t// vectorFieldShader.uniforms({\r\n\t// \t'ps[0]': ps as any,\r\n\t// \tcolor: chroma('red').gl(),\r\n\t// })\r\n\r\n\tgl.canvas.tabIndex = 0\r\n\tgl.canvas.focus()\r\n\r\n\tgl.canvas.addEventListener('keypress', e => {\r\n\t\tconst index = e.key.charCodeAt(0) - '1'.charCodeAt(0)\r\n\t\tif (0 <= index && index <= 4) {\r\n\t\t\tenabledBarMagnets[index] = !enabledBarMagnets[index]\r\n\t\t\tcalculateFieldLines()\r\n\t\t}\r\n\r\n\t\tif (e.key == '+' && linesDensity < 50) {\r\n\t\t\tlinesDensity++\r\n\t\t\tcalculateFieldLines()\r\n\t\t}\r\n\r\n\t\tif (e.key == '-' && linesDensity > 1) {\r\n\t\t\tlinesDensity--\r\n\t\t\tcalculateFieldLines()\r\n\t\t}\r\n\t})\r\n\r\n\treturn gl.animate(function (abs, _diff) {\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.multMatrix(M4.rotateLine(V(0.5, 0.5), V3.Z, abs / 5000))\r\n\t\t// gl.translate(-1, -1, -1)\r\n\t\t// gl.scale(2)\r\n\r\n\t\tshader.attributes({ ts_Color: chroma('black').gl() }).draw(linesMesh, gl.LINES)\r\n\t\tbarMagnetMatrices.forEach((mat, index) => {\r\n\t\t\tif (enabledBarMagnets[index]) {\r\n\t\t\t\tgl.pushMatrix()\r\n\t\t\t\tgl.multMatrix(mat)\r\n\t\t\t\tgl.scale(0.5, 1, 1)\r\n\t\t\t\tshader.attributes({ ts_Color: chroma('red').gl() }).draw(cubeMesh, gl.LINES)\r\n\t\t\t\tgl.translate(1, 0)\r\n\t\t\t\tshader.attributes({ ts_Color: chroma('blue').gl() }).draw(cubeMesh, gl.LINES)\r\n\t\t\t\tgl.popMatrix()\r\n\t\t\t}\r\n\t\t})\r\n\t\tgl.scale(bounds.max)\r\n\t\tshader.attributes({ ts_Color: chroma('grey').gl() }).draw(cubeMesh, gl.LINES)\r\n\t\t// vectorFieldShader.drawBuffers(vectorFieldMesh.vertexBuffers, undefined, DRAW_MODES.LINES)\r\n\t})\r\n}\r\n\r\n\r\n/**\r\n * Returns a 1d array of V3s in a 2d-grid. The V3s are all within [0; 1]²\r\n * The V3s are spaced like circles fit together as tight as possible. i.e. rows offset by half the x-spacing.\r\n * .   .   .\r\n *   .   .   .\r\n * .   .   .\r\n *\r\n * @param xCount\r\n */\r\nfunction ballGrid(xCount = 64) {\r\n\tconst xSpacing = 1 / xCount\r\n\tconst ySpacing = xSpacing * Math.sqrt(3) / 2\r\n\tconst yCount = (1 / ySpacing) | 0\r\n\treturn arrayFromFunction(xCount * yCount, i => {\r\n\t\tconst x = i % xCount\r\n\t\tconst y = (i / xCount) | 0\r\n\t\treturn new V3((x + (y % 2) * 0.5) / xCount, y / yCount, 0)\r\n\t})\r\n}\r\n\r\nfunction grid3d(xCount = 64, yCount = xCount, zCount = 1) {\r\n\treturn arrayFromFunction(xCount * yCount * zCount, i => {\r\n\t\tconst x = i % xCount\r\n\t\tconst y = (i / xCount) % yCount | 0\r\n\t\tconst z = (i / xCount / yCount) | 0\r\n\t\treturn new V3(x / xCount, y / yCount, z / zCount)\r\n\t})\r\n}\r\n\r\n(mag as any).info = 'Press keys 1-5 to toggle magnets, +/- to change to number of field lines.'","/// <reference path=\"../types.d.ts\" />\r\nimport { Mesh, Texture, Shader, TSGLContext } from 'tsgl'\r\nimport { V3, V } from 'ts3dutils'\r\n\r\n/**\r\n * Blend two textures while rendering them to a quad.\r\n */\r\nexport function multiTexture(gl: TSGLContext) {\r\n\tconst mesh = Mesh.plane()\r\n\tconst texture = Texture.fromURLSwitch('texture.png')\r\n\tconst texture2 = Texture.fromURLSwitch('texture2.png')\r\n\tconst shader = Shader.create<{ texture: 'SAMPLER_2D', texture2: 'SAMPLER_2D' }, {}>(`\r\n\tattribute vec2 ts_TexCoord;\r\n\tattribute vec4 ts_Vertex;\r\n\tuniform mat4 ts_ModelViewProjectionMatrix;\r\n  varying vec2 coord;\r\n  void main() {\r\n    coord = ts_TexCoord;\r\n    gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\r\n  }\r\n`, `\r\n\tprecision highp float;\r\n  uniform sampler2D texture;\r\n  uniform sampler2D texture2;\r\n  varying vec2 coord;\r\n  void main() {\r\n    //gl_FragColor = vec4(coord.x, coord.y, 0, 1);\r\n    gl_FragColor = texture2D(texture, coord) - texture2D(texture2, coord);\r\n  }\r\n`)\r\n\tgl.clearColor(1, 1, 1, 1)\r\n\r\n\t// setup camera\r\n\tgl.matrixMode(gl.PROJECTION)\r\n\tgl.loadIdentity()\r\n\tgl.perspective(40, gl.canvas.width / gl.canvas.height, 0.1, 1000)\r\n\tgl.lookAt(V(0, -2, 1.5), V3.O, V3.Z)\r\n\tgl.matrixMode(gl.MODELVIEW)\r\n\r\n\tgl.enable(gl.DEPTH_TEST)\r\n\r\n\treturn gl.animate(function (abs, _diff) {\r\n\t\tconst angleDeg = abs / 1000 * 45\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\t\tgl.loadIdentity()\r\n\r\n\t\t//gl.translate(0, 0, -5)\r\n\t\tgl.rotate(angleDeg, 0, 0, 1)\r\n\t\tgl.translate(-0.5, -0.5)\r\n\r\n\t\ttexture.bind(0)\r\n\t\ttexture2.bind(1)\r\n\t\tshader.uniforms({\r\n\t\t\ttexture: 0,\r\n\t\t\ttexture2: 1,\r\n\t\t}).draw(mesh)\r\n\t})\r\n}","#version 300 es\r\nprecision mediump float;\r\nin vec4 ts_Vertex;\r\nout vec4 pos;\r\nvoid main() {\r\n\tgl_Position = ts_Vertex;\r\n\tpos = ts_Vertex;\r\n}","#version 300 es\r\nprecision highp float;\r\n\r\nconst float INFINITY = 1.0e9;\r\nconst int TRIANGLE_COUNT = 1024;\r\nuniform vec3 sphereCenters[8];\r\nuniform mat4 ts_ModelViewProjectionMatrixInverse;\r\nuniform float sphereRadii[8];\r\nuniform sampler2D vertices;\r\nuniform sampler2D texCoords;\r\nuniform sampler2D triangleTexture;\r\n\r\nin vec4 pos;\r\n\r\nout vec4 fragColor;\r\n\r\nfloat intersectSphere(vec3 origin, vec3 ray, vec3 sphereCenter, float sphereRadius) {\r\n\tvec3 toSphere = origin - sphereCenter;\r\n\tfloat a = dot(ray, ray);\r\n\tfloat b = 2.0 * dot(toSphere, ray);\r\n\tfloat c = dot(toSphere, toSphere) - sphereRadius * sphereRadius;\r\n\tfloat discriminant = b * b - 4.0 * a * c;\r\n\tif (discriminant > 0.0) {\r\n\t\tfloat t = (-b - sqrt(discriminant)) / (2.0 * a);\r\n\t\tif (t > 0.0) return t;\r\n\t}\r\n\treturn INFINITY;\r\n}\r\n\r\nstruct TriangleHitTest {\r\n\tfloat t;\r\n\tvec3 hit;\r\n\tfloat u;\r\n\tfloat v;\r\n};\r\nconst TriangleHitTest INFINITY_HIT = TriangleHitTest(INFINITY, vec3(0.0), 0.0, 0.0);\r\n\r\n\r\n// taken from https://en.wikipedia.org/wiki/M%C3%B6ller%E2%80%93Trumbore_intersection_algorithm\r\nTriangleHitTest intersectTriangle(vec3 rayOrigin, vec3 rayVector, vec3 vertex0, vec3 vertex1, vec3 vertex2) {\r\n    const float EPSILON = 0.0000001;\r\n    vec3 edge1, edge2, h, s, q;\r\n    float a,f,u,v;\r\n    edge1 = vertex1 - vertex0;\r\n    edge2 = vertex2 - vertex0;\r\n    h = cross(rayVector, edge2);\r\n    a = dot(edge1, h);\r\n    if (a > -EPSILON && a < EPSILON)\r\n        return INFINITY_HIT;\r\n    f = 1.0/a;\r\n    s = rayOrigin - vertex0;\r\n    u = f * dot(s, h);\r\n    if (u < 0.0 || u > 1.0)\r\n        return INFINITY_HIT;\r\n    q = cross(s, edge1);\r\n    v = f * dot(rayVector, q);\r\n    if (v < 0.0 || u + v > 1.0)\r\n        return INFINITY_HIT;\r\n    // At this stage we can compute t to find out where the intersection point is on the line.\r\n    float t = f * dot(edge2, q);\r\n    if (t > 0.0001) // ray intersection\r\n    {\r\n        return TriangleHitTest(t, rayOrigin + rayVector * t, u, v);\r\n    }\r\n    else // This means that there is a line intersection but not a ray intersection.\r\n        return INFINITY_HIT;\r\n}\r\n\r\n// use texelFetch because we don't want to interpolate values\r\nvec3 vertexi(int i) {\r\n\treturn texelFetch(vertices, ivec2(i, 0), 0).xyz;\r\n}\r\nvec3 textcoordi(int i) {\r\n\treturn texelFetch(texCoords, ivec2(i, 0), 0).xyz;\r\n}\r\n\r\nvoid main() {\r\n\t// pos.xy is the pixel we are drawing in normalized device coordinates (NDC, from -1 to +1)\r\n\t// the starting ray in NDC is (origin=pos.xy, dir=Z)\r\n\t// with ts_ModelViewProjectionMatrixInverse we transform the start and end point into world coordinates\r\n\tvec3 rayStart = (ts_ModelViewProjectionMatrixInverse * vec4(pos.xy, 1.0, 1.0)).xyz;\r\n\tvec3 rayEnd = (ts_ModelViewProjectionMatrixInverse * vec4(pos.xy, -1.0, 1.0)).xyz;\r\n\tvec3 rayDir = rayEnd - rayStart;\r\n\r\n\t// start with a black fragment\r\n\tfragColor = vec4(0.0, 0.0, 0.0, 1.0);\r\n\r\n\t// mask is the fraction of the fragment we haven't calculated yet\r\n\tvec4 mask = vec4(1.0, 1.0, 1.0, 1.0);\r\n\r\n\tfor (int bounce = 0; bounce < 8; bounce++) {\r\n\t\t/* Find the closest intersection with the scene */\r\n\t\tvec3 closestHit;\r\n\t\tvec4 closestColor = vec4(0.0);\r\n\t\tfloat closestT = INFINITY;\r\n\t\tvec3 closestNormal;\r\n\t\tfloat closestSpecular = 0.0;\r\n\t\tfor (int s = 0; s < 8; s++) {\r\n\t\t\tif (sphereRadii[s] == 0.0) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tfloat sphereT = intersectSphere(rayStart, rayDir, sphereCenters[s], sphereRadii[s]);\r\n\t\t\tif (sphereT < closestT) {\r\n\t\t\t\tclosestT = sphereT;\r\n\t\t\t\tclosestHit = rayStart + rayDir * sphereT;\r\n\t\t\t\tclosestNormal = (closestHit - sphereCenters[s]) / sphereRadii[s];\r\n\t\t\t\tclosestSpecular = 0.95;\r\n\t\t\t\tclosestColor = vec4(0.0);\r\n\t\t\t}\r\n\t\t}\r\n\t\tfor (int i = 0; i < TRIANGLE_COUNT; i++) {\r\n\t\t\tvec3 a = vertexi(i*3);\r\n\t\t\tvec3 b = vertexi(i*3+1);\r\n\t\t\tvec3 c = vertexi(i*3 + 2);\r\n\r\n\t\t\tif (a == vec3(0.0) && b == vec3(0.0)) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tTriangleHitTest hitTest = intersectTriangle(rayStart, rayDir, a, b, c);\r\n\t\t\tfloat triangleT = hitTest.t;\r\n\t\t\tif (triangleT < closestT) {\r\n\t\t\t\tclosestT = triangleT;\r\n\t\t\t\tvec3 ab = b - a;\r\n\t\t\t\tvec3 ac = c - a;\r\n\t\t\t\tclosestNormal = normalize(cross(ab, ac));\r\n\t\t\t\tclosestHit = hitTest.hit;\r\n\r\n\t\t\t\t// interpolate the texCoords of the three triangle vertices\r\n\t\t\t\tvec3 texCoordsAndSheen = textcoordi(i*3) * (1.0 - hitTest.u - hitTest.v) // a\r\n\t\t\t\t\t+ textcoordi(i*3+1) * (hitTest.u) // b\r\n\t\t\t\t\t+ textcoordi(i*3+2) * (hitTest.v); // c\r\n\t\t\t\tclosestColor = texture(triangleTexture, texCoordsAndSheen.xy);\r\n\t\t\t\tclosestSpecular = texCoordsAndSheen.z;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t/* The background is white */\r\n\t\tif (closestT == INFINITY) {\r\n\t\t\tfragColor += mask;\r\n\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tfragColor += mask * (1.0 - closestSpecular) * closestColor;\r\n\t\tif (0.0 == closestSpecular) {\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\trayDir = reflect(rayDir, closestNormal);\r\n\t\trayStart = closestHit;\r\n\t\tmask *= closestSpecular;\r\n\t}\r\n}","/// <reference path=\"../types.d.ts\" />\n\nimport { arrayFromFunction, clamp, DEG, V, V3, Tuple2 } from 'ts3dutils'\n\nimport { Mesh, Shader, Texture, TSGLContext, isWebGL2RenderingContext } from 'tsgl'\n\nimport rayTracerVS from '../shaders/rayTracerVS.glslx'\nimport rayTracerFS from '../shaders/rayTracerFS.glslx'\n\n/**\n * Realtime GPU ray tracing including reflection.\n */\nexport async function rayTracing(gl: TSGLContext) {\n\tif (!isWebGL2RenderingContext(gl)) throw new Error('require webgl2')\n\tlet angleX = 30\n\tlet angleY = 10\n\n\t// This is the mesh we tell WebGL to draw. It covers the whole view so each pixel will get a fragment shader call.\n\tconst mesh = Mesh.plane({ startX: -1, startY: -1, width: 2, height: 2 })\n\n\t// floor and dodecahedron are meshes we will ray-trace\n\t// add a vertex buffer \"specular\", which defines how reflective the mesh is.\n\t// specular=1 means it is perfectly reflective, specular=0 perfectly matte\n\t// meshes neeed coords vertex buffer as we will draw them with meshes\n\tconst floor = Mesh.plane({ startX: -4, startY: -4, width: 8, height: 8 })\n\t\t.addVertexBuffer('specular', 'specular')\n\t\t.rotateX(90 * DEG)\n\tfloor.specular = floor.vertices.map(_ => 0) // floor doesn't reflect\n\tconst dodecahedron = Mesh.sphere(0)\n\t\t.addVertexBuffer('specular', 'specular')\n\t\t.addVertexBuffer('coords', 'ts_TexCoord')\n\t\t.translate(3, 1)\n\t// d20 reflects most of the light\n\tdodecahedron.specular = dodecahedron.vertices.map(_ => 0.8)\n\t// all uv coordinates the same to pick a solid color from the texture\n\tdodecahedron.coords = dodecahedron.vertices.map(_ => [0, 0] as Tuple2<number>)\n\n\t// don't transform the vertices at all\n\t// out/in pos so we get the world position of the fragments\n\tconst shader = Shader.create(rayTracerVS, rayTracerFS)\n\n\t// define spheres which we will have the shader ray-trace\n\tconst sphereCenters = arrayFromFunction(8, i => [V(0.0, 1.6, 0.0), V(3, 3, 3), V(-3, 3, 3)][i] || V3.O)\n\tconst sphereRadii = arrayFromFunction(8, i => [1.5, 0.5, 0.5][i] || 0)\n\n\n\t// texture for ray-traced mesh\n\tconst floorTexture = await Texture.fromURL('./mandelbrot.jpg')\n\n\tconst showMesh = floor.concat(dodecahedron)\n\tconst textureWidth = 1024\n\tconst textureHeight = 1\n\n\t// verticesTexture contains the mesh vertices\n\t// vertices are unpacked so we don't have an extra index buffer for the triangles\n\tconst verticesTexture = new Texture(textureWidth, textureHeight)\n\tconst verticesBuffer = new Float32Array(textureWidth * textureHeight * 3)\n\tV3.pack(showMesh.TRIANGLES.map(i => showMesh.vertices[i]), verticesBuffer)\n\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB32F, textureWidth, textureHeight, 0, gl.RGB, gl.FLOAT, verticesBuffer)\n\n\t// uvTexture contains the uv coordinates for the vertices as wel as the specular value for each vertex\n\tconst uvTexture = new Texture(textureWidth, textureHeight, { format: gl.RGB, type: gl.FLOAT })\n\tconst uvBuffer = new Float32Array(textureWidth * textureHeight * 3)\n\tshowMesh.TRIANGLES.forEach((i, index) => {\n\t\tuvBuffer[index * 3] = showMesh.coords[i][0]\n\t\tuvBuffer[index * 3 + 1] = showMesh.coords[i][1]\n\t\tuvBuffer[index * 3 + 2] = showMesh.specular[i]\n\t})\n\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB32F, textureWidth, textureHeight, 0, gl.RGB, gl.FLOAT, uvBuffer)\n\n\tlet lastPos = V3.O\n\t// scene rotation\n\tgl.canvas.onmousemove = function (e) {\n\t\tconst pagePos = V(e.pageX, e.pageY)\n\t\tconst delta = lastPos.to(pagePos)\n\t\tif (e.buttons & 1) {\n\t\t\tangleY += delta.x\n\t\t\tangleX = clamp(angleX + delta.y, -90, 90)\n\t\t}\n\t\tlastPos = pagePos\n\t}\n\n\tgl.matrixMode(gl.PROJECTION)\n\tgl.loadIdentity()\n\n\tverticesTexture.bind(0)\n\tfloorTexture.bind(1)\n\tuvTexture.bind(2)\n\tshader.uniforms({\n\t\t'sphereCenters[0]': sphereCenters,\n\t\t'sphereRadii[0]': sphereRadii,\n\t\t'vertices': 0,\n\t\t'triangleTexture': 1,\n\t\t'texCoords': 2\n\t})\n\n\treturn gl.animate(function (_abs, _diff) {\n\n\t\t// Camera setup\n\t\tgl.matrixMode(gl.MODELVIEW)\n\t\tgl.loadIdentity()\n\t\t// gl.perspective(70, gl.canvas.width / gl.canvas.height, 0.1, 1000)\n\t\t// gl.lookAt(V(0, 200, 200), V(0, 0, 0), V3.Z)\n\t\tgl.translate(0, 0, -10)\n\t\tgl.rotate(angleX, 1, 0, 0)\n\t\tgl.rotate(angleY, 0, 1, 0)\n\t\tgl.scale(0.2)\n\n\t\tshader.draw(mesh)\n\n\t\t// Draw debug output to show that the raytraced scene lines up correctly with\n\t\t// the rasterized scene\n\t\tgl.color(0, 0, 0, 0.5)\n\t\tgl.enable(gl.BLEND)\n\t\tgl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\n\t\tgl.begin(gl.LINES)\n\t\tfor (let s = 4, i = -s; i <= s; i++) {\n\t\t\tgl.vertex(-s, 0, i)\n\t\t\tgl.vertex(s, 0, i)\n\t\t\tgl.vertex(i, 0, -s)\n\t\t\tgl.vertex(i, 0, s)\n\t\t}\n\t\tgl.end()\n\t\tgl.disable(gl.BLEND)\n\t})\n\n}\n(rayTracing as any).info = 'LMB-drag to rotate camera.'\n\n","import { arrayFromFunction, lerp, V, V3 } from 'ts3dutils'\r\n\r\nimport { TSGLContext, Mesh, Shader, Texture } from 'tsgl'\r\n\r\nconst { sin, PI } = Math\r\n\r\nimport gazeboJSON from '../../gazebo.json'\r\n\r\n/**\r\n * Render mesh to texture, then render that texture to another mesh.\r\n */\r\nexport function renderToTexture(gl: TSGLContext) {\r\n\tconst mesh = Mesh.load(gazeboJSON)\r\n\tconst sinVertices = arrayFromFunction(32, i => {\r\n\t\tconst x = lerp(-PI, PI, i / 31)\r\n\t\tconst y = sin(x)\r\n\t\treturn new V3(x / 7.64, y / 7.64, 0)\r\n\t})\r\n\tconst cyl = Mesh.offsetVertices(sinVertices, V3.Z, false)\r\n\tconst plane = Mesh.plane()\r\n\tconst texture = Texture.fromURLSwitch('texture.png')\r\n\tconst overlay = new Texture(1024, 1024)\r\n\tconst meshShader = Shader.create(`\r\n\tattribute vec3 ts_Normal;\r\n\tattribute vec4 ts_Vertex;\r\n\tuniform mat4 ts_ModelViewProjectionMatrix;\r\n  varying vec3 normal;\r\n  void main() {\r\n    normal = ts_Normal;\r\n    gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\r\n  }\r\n`, `\r\n\tprecision highp float;\r\n  varying vec3 normal;\r\n  void main() {\r\n    gl_FragColor = vec4(normal * 0.5 + 0.5, 1.0);\r\n  }\r\n`)\r\n\tconst planeShader = Shader.create(`\r\n\tattribute vec2 ts_TexCoord;\r\n\tattribute vec4 ts_Vertex;\r\n\tuniform mat4 ts_ModelViewProjectionMatrix;\r\n  varying vec2 coord;\r\n  void main() {\r\n    coord = ts_TexCoord.xy;\r\n    gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\r\n  }\r\n`, `\r\n\tprecision highp float;\r\n  uniform sampler2D texture;\r\n  uniform sampler2D overlay;\r\n  varying vec2 coord;\r\n  void main() {\r\n    gl_FragColor = (texture2D(overlay, coord) + texture2D(texture, coord)) / 2.0;\r\n  }\r\n`)\r\n\r\n\tgl.clearColor(1, 1, 1, 1)\r\n\tgl.enable(gl.DEPTH_TEST)\r\n\r\n\r\n\treturn gl.animate(function (abs) {\r\n\t\tconst angleDeg = abs / 1000 * 20\r\n\r\n\t\tgl.pushMatrix()\r\n\t\toverlay.drawTo(function (gl: TSGLContext) {\r\n\t\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\t\t\tgl.matrixMode(gl.PROJECTION)\r\n\t\t\tgl.loadIdentity()\r\n\t\t\tgl.perspective(60, 1, 0.1, 1000)\r\n\t\t\tgl.lookAt(V(0, -2, 0.5), V(0, 0, 0.5), V3.Z)\r\n\t\t\tgl.matrixMode(gl.MODELVIEW)\r\n\t\t\tgl.loadIdentity()\r\n\t\t\tgl.rotate(angleDeg, 0, 0, 1)\r\n\t\t\tgl.rotate(90, 1, 0, 0)\r\n\t\t\tgl.scale(0.01, 0.01, 0.01)\r\n\t\t\tmeshShader.draw(mesh)\r\n\t\t})\r\n\t\tgl.popMatrix()\r\n\r\n\t\tgl.matrixMode(gl.PROJECTION)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.perspective(70, gl.canvas.width / gl.canvas.height, 0.1, 1000)\r\n\t\tgl.lookAt(V(0, -2, 1), V(0.5, 0, 0), V3.Z)\r\n\t\tgl.matrixMode(gl.MODELVIEW)\r\n\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\t\ttexture.bind(0)\r\n\t\toverlay.bind(1)\r\n\t\tplaneShader.uniforms({\r\n\t\t\ttexture: 0,\r\n\t\t\toverlay: 1,\r\n\t\t})\r\n\r\n\t\tgl.loadIdentity()\r\n\t\t//gl.rotate(angleDeg, 0, 0, 1)\r\n\t\t//gl.rotate(30 * DEG, 1, 0, 0)\r\n\t\t//gl.rotate(90, 0,0,1)\r\n\t\tplaneShader.draw(cyl)\r\n\r\n\t\tgl.loadIdentity()\r\n\t\tgl.rotate(90, 1, 0, 0)\r\n\t\tgl.translate(0.5, 0)\r\n\t\tplaneShader.draw(plane)\r\n\t})\r\n}","import { Mesh, TSGLContext, Shader } from 'tsgl'\r\nimport { V3, V } from 'ts3dutils'\r\n\r\n/**\r\n * Draw a rotating cube.\r\n */\r\nexport async function setupDemo(gl: TSGLContext) {\r\n\tconst mesh = Mesh.cube()\r\n\tconst shader = Shader.create<{ color: 'FLOAT_VEC4' }, {}>(`\r\n\t\tuniform mat4 ts_ModelViewProjectionMatrix;\r\n\t\tattribute vec4 ts_Vertex;\r\n\t\tvarying vec4 foo;\r\n\t\tvoid main() {\r\n\t\t\tfoo = vec4(1.0, 1.0, 1.0, 1.0);\r\n\t\t\tgl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\r\n\t\t}\r\n\t`, `\r\n\t\tprecision highp float;\r\n\t\tuniform vec4 color;\r\n\t\tvarying vec4 bar;\r\n\t\tvoid main() {\r\n\t\t\tgl_FragColor = color;\r\n\t\t}\r\n\t`)\r\n\r\n\t// setup camera\r\n\tgl.matrixMode(gl.PROJECTION)\r\n\tgl.loadIdentity()\r\n\tgl.perspective(70, gl.canvas.width / gl.canvas.height, 0.1, 1000)\r\n\tgl.lookAt(V(0, -2, 1.5), V3.O, V3.Z)\r\n\tgl.matrixMode(gl.MODELVIEW)\r\n\r\n\tgl.enable(gl.DEPTH_TEST)\r\n\r\n\treturn gl.animate(function (abs, _diff) {\r\n\t\tconst angleDeg = abs / 1000 * 45\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.rotate(angleDeg, 0, 0, 1)\r\n\t\tgl.scale(1.5)\r\n\t\tgl.translate(-0.5, -0.5, -0.5)\r\n\r\n\t\tshader.uniforms({ color: [1, 1, 0, 1] }).draw(mesh)\r\n\t\tshader.uniforms({ color: [0, 0, 0, 1] }).draw(mesh, gl.LINES)\r\n\t})\r\n}\r\n","import { AABB, clamp, DEG, V, V3 } from 'ts3dutils'\r\n\r\nimport { TSGLContext, Mesh, Shader, Texture } from 'tsgl'\r\n\r\nimport cessnaJSON from '../../cessna.json'\r\n\r\n\r\n/**\r\n * Draw shadow of a mesh using a shadow map.\r\n */\r\nexport function shadowMap(gl: TSGLContext) {\r\n\r\n\t//const mesh = await fetch('dodecahedron.stl')\r\n\t//    .then(r => r.blob())\r\n\t//    .then(Mesh.fromBinarySTL)\r\n\t//    .then(mesh => mesh.translate(0,1,0).scale(5).compile())\r\n\tconst mesh = Mesh.load(cessnaJSON)\r\n\r\n\tlet angleX = 20\r\n\tlet angleY = 20\r\n\tlet useBoundingSphere = true\r\n\tconst cube = Mesh.cube()\r\n\tconst sphere = Mesh.sphere(2).computeWireframeFromFlatTriangles().compile()\r\n\tconst plane = Mesh.plane().translate(-0.5, -0.5).scale(300, 300, 1)\r\n\tconst depthMap = new Texture(1024, 1024, { format: gl.RGBA })\r\n\tconst texturePlane = Mesh.plane()\r\n\tconst boundingSphere = mesh.getBoundingSphere()\r\n\tconst boundingBox = mesh.getAABB()\r\n\tconst frustrumCube = Mesh.cube().scale(2).translate(V3.XYZ.negated())\r\n\tconst colorShader = Shader.create(`\r\n\tuniform mat4 ts_ModelViewProjectionMatrix;\r\n\tattribute vec4 ts_Vertex;\r\n  void main() {\r\n    gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\r\n  }\r\n`, `\r\n\tprecision highp float;\r\n  uniform vec4 color;\r\n  void main() {\r\n    gl_FragColor = color;\r\n  }\r\n`)\r\n\tconst depthShader = Shader.create(`\r\n\tuniform mat4 ts_ModelViewProjectionMatrix;\r\n\tattribute vec4 ts_Vertex;\r\n  varying vec4 pos;\r\n  void main() {\r\n    gl_Position = pos = ts_ModelViewProjectionMatrix * ts_Vertex;\r\n  }\r\n`, `\r\n\tprecision highp float;\r\n  varying vec4 pos;\r\n  void main() {\r\n    float depth = pos.z / pos.w;\r\n    gl_FragColor = vec4(depth * 0.5 + 0.5);\r\n  }\r\n`)\r\n\tconst displayShader = Shader.create(`\r\n\tuniform mat4 ts_ModelViewMatrix;\r\n\tuniform mat3 ts_NormalMatrix;\r\n\tuniform mat4 ts_ModelViewProjectionMatrix;\r\n\tattribute vec4 ts_Vertex;\r\n\tattribute vec3 ts_Normal;\r\n  uniform mat4 shadowMapMatrix;\r\n  uniform vec3 light;\r\n  varying vec4 coord;\r\n  varying vec3 normal;\r\n  varying vec3 toLight;\r\n  void main() {\r\n    toLight = light - (ts_ModelViewMatrix * ts_Vertex).xyz;\r\n    normal = ts_NormalMatrix * ts_Normal;\r\n    gl_Position = ts_ModelViewProjectionMatrix * ts_Vertex;\r\n    coord = shadowMapMatrix * gl_Position;\r\n  }\r\n`, `\r\n\tprecision highp float;\r\n  uniform sampler2D depthMap;\r\n  varying vec4 coord;\r\n  varying vec3 normal;\r\n  varying vec3 toLight;\r\n  void main() {\r\n    float shadow = 0.0;\r\n    if (coord.w > 0.0) {\r\n      float depth = 0.0;\r\n      vec2 sample = coord.xy / coord.w * 0.5 + 0.5;\r\n      if (clamp(sample, 0.0, 1.0) == sample) {\r\n        float sampleDepth = texture2D(depthMap, sample).r;\r\n        depth = (sampleDepth == 1.0) ? 1.0e9 : sampleDepth;\r\n      }\r\n      if (depth > 0.0) {\r\n        float bias = -0.002;\r\n        shadow = clamp(300.0 * (bias + coord.z / coord.w * 0.5 + 0.5 - depth), 0.0, 1.0);\r\n      }\r\n    }\r\n    float ambient = 0.1;\r\n    float diffuse = max(0.0, dot(normalize(toLight), normalize(normal)));\r\n    gl_FragColor = vec4((normal * 0.5 + 0.5) * mix(ambient, 1.0, diffuse * (1.0 - shadow)), 1.0);\r\n  }\r\n`)\r\n\tconst textureShader = Shader.create(`\r\n  varying vec2 coord;\r\n  attribute vec2 ts_TexCoord;\r\n  void main() {\r\n    coord = ts_TexCoord;\r\n    gl_Position = vec4(coord * 2.0 - 1.0, 0.0, 1.0);\r\n  }\r\n`, `\r\n\tprecision highp float;\r\n  uniform sampler2D texture;\r\n  varying vec2 coord;\r\n  void main() {\r\n    gl_FragColor = texture2D(texture, coord);\r\n  }\r\n`)\r\n\r\n\tlet lastPos = V3.O\r\n\t// scene rotation\r\n\tgl.canvas.onmousemove = function (e) {\r\n\t\tconst pagePos = V(e.pageX, e.pageY)\r\n\t\tconst delta = lastPos.to(pagePos)\r\n\t\tif (e.buttons & 1) {\r\n\t\t\tangleY += delta.x\r\n\t\t\tangleX = clamp(angleX + delta.y, -90, 90)\r\n\t\t}\r\n\t\tlastPos = pagePos\r\n\t}\r\n\r\n\r\n\tgl.canvas.contentEditable = 'true'\r\n\tgl.canvas.addEventListener('keypress', () => {\r\n\t\tuseBoundingSphere = !useBoundingSphere\r\n\t})\r\n\r\n\tgl.enable(gl.DEPTH_TEST)\r\n\r\n\tfunction cameraForBoundingSphere(light: V3, sphere: typeof boundingSphere) {\r\n\t\tconst distance = sphere.center.minus(light).length()\r\n\t\tconst angle = 2 * Math.asin(sphere.radius / distance)\r\n\t\tgl.matrixMode(gl.PROJECTION)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.perspective(angle / DEG, 1, distance - sphere.radius, distance + sphere.radius)\r\n\t\tgl.matrixMode(gl.MODELVIEW)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.lookAt(light, sphere.center, V3.Y)\r\n\t}\r\n\r\n\tfunction cameraForBoundingBox(light: V3, boundingBox: AABB) {\r\n\t\tconst center = boundingBox.min.plus(boundingBox.max).div(2)\r\n\t\tconst axisZ = center.minus(light).unit()\r\n\t\tconst axisX = axisZ.cross(new V3(0, 1, 0)).unit()\r\n\t\tconst axisY = axisX.cross(axisZ)\r\n\t\tlet near = Number.MAX_VALUE\r\n\t\tlet far = -Number.MAX_VALUE\r\n\t\tlet slopeNegX = 0\r\n\t\tlet slopePosX = 0\r\n\t\tlet slopeNegY = 0\r\n\t\tlet slopePosY = 0\r\n\r\n\t\t// Loop over all the points and find the maximum slope for each direction.\r\n\t\t// Incidentally, this algorithm works for convex hulls of any shape and will\r\n\t\t// return the optimal bounding frustum for every hull.\r\n\t\tconst bbPoints = boundingBox.corners()\r\n\t\tfor (const point of bbPoints) {\r\n\t\t\tconst toPoint = point.minus(light)\r\n\t\t\tconst dotZ = toPoint.dot(axisZ)\r\n\t\t\tconst slopeX = toPoint.dot(axisX) / dotZ\r\n\t\t\tconst slopeY = toPoint.dot(axisY) / dotZ\r\n\t\t\tslopeNegX = Math.min(slopeNegX, slopeX)\r\n\t\t\tslopeNegY = Math.min(slopeNegY, slopeY)\r\n\t\t\tslopePosX = Math.max(slopePosX, slopeX)\r\n\t\t\tslopePosY = Math.max(slopePosY, slopeY)\r\n\t\t\tnear = Math.min(near, dotZ)\r\n\t\t\tfar = Math.max(far, dotZ)\r\n\t\t}\r\n\r\n\t\t// Need to fit an oblique view frustum to get optimal bounds\r\n\t\tgl.matrixMode(gl.PROJECTION)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.frustum(slopeNegX * near, slopePosX * near, slopeNegY * near, slopePosY * near, near, far)\r\n\t\tgl.matrixMode(gl.MODELVIEW)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.lookAt(light, center, V3.Y)\r\n\t}\r\n\r\n\r\n\treturn gl.animate(function (abs) {\r\n\t\tconst time = abs / 1000\r\n\t\t// Move the light around\r\n\t\tconst light = new V3(100 * Math.sin(time * 0.2), 25, 20 * Math.cos(time * 0.2))\r\n\r\n\t\t// Construct a camera looking from the light toward the object. The view\r\n\t\t// frustum is fit so it tightly encloses the bounding volume of the object\r\n\t\t// (sphere or box) to make best use of shadow map resolution. A frustum is\r\n\t\t// a pyramid shape with the apex chopped off.\r\n\t\tif (useBoundingSphere) {\r\n\t\t\tcameraForBoundingSphere(light, boundingSphere)\r\n\t\t} else {\r\n\t\t\tcameraForBoundingBox(light, boundingBox)\r\n\t\t}\r\n\r\n\t\t// Render the object viewed from the light using a shader that returns the\r\n\t\t// fragment depth.\r\n\t\tconst shadowMapMatrix = gl.projectionMatrix.times(gl.modelViewMatrix)\r\n\t\tdepthMap.unbind(0)\r\n\t\tdepthMap.drawTo(function () {\r\n\t\t\tgl.clearColor(1, 1, 1, 1)\r\n\t\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\t\t\tdepthShader.draw(mesh)\r\n\t\t})\r\n\r\n\t\tconst shadowMapMatrixInversed = shadowMapMatrix.inversed()\r\n\r\n\t\t// Set up the camera for the scene\r\n\t\tgl.clearColor(0, 0, 0, 1)\r\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n\t\tgl.matrixMode(gl.PROJECTION)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.perspective(45, gl.canvas.width / gl.canvas.height, 1, 1000)\r\n\t\tgl.matrixMode(gl.MODELVIEW)\r\n\t\tgl.loadIdentity()\r\n\t\tgl.translate(0, 0, -100)\r\n\t\tgl.rotate(angleX, 1, 0, 0)\r\n\t\tgl.rotate(angleY, 0, 1, 0)\r\n\r\n\t\t// Draw view frustum\r\n\t\tgl.pushMatrix()\r\n\t\tgl.translate(light)\r\n\t\tcolorShader.uniforms({\r\n\t\t\tcolor: [1, 1, 0, 1],\r\n\t\t}).draw(sphere, gl.LINES)\r\n\t\tgl.popMatrix()\r\n\r\n\t\tgl.pushMatrix()\r\n\t\tgl.multMatrix(shadowMapMatrixInversed)\r\n\t\tcolorShader.uniforms({\r\n\t\t\tcolor: [1, 1, 0, 1],\r\n\t\t}).draw(frustrumCube, gl.LINES)\r\n\t\tgl.popMatrix()\r\n\r\n\t\t// Draw the bounding volume\r\n\t\tgl.pushMatrix()\r\n\t\tif (useBoundingSphere) {\r\n\t\t\tgl.translate(boundingSphere.center)\r\n\t\t\tgl.scale(boundingSphere.radius)\r\n\t\t\tcolorShader.uniforms({\r\n\t\t\t\tcolor: [0, 1, 1, 1],\r\n\t\t\t}).draw(sphere, gl.LINES)\r\n\t\t} else {\r\n\t\t\tgl.translate(boundingBox.min)\r\n\t\t\tgl.scale(boundingBox.size())\r\n\t\t\tcolorShader.uniforms({\r\n\t\t\t\tcolor: [0, 1, 1, 1],\r\n\t\t\t}).draw(cube, gl.LINES)\r\n\t\t}\r\n\t\tgl.popMatrix()\r\n\r\n\t\t// Draw mesh\r\n\t\tdepthMap.bind(0)\r\n\t\tdisplayShader.uniforms({\r\n\t\t\tshadowMapMatrix: shadowMapMatrix.times(gl.projectionMatrix.times(gl.modelViewMatrix).inversed()),\r\n\t\t\tlight: gl.modelViewMatrix.transformPoint(light),\r\n\t\t\tdepthMap: 0,\r\n\t\t}).draw(mesh)\r\n\r\n\t\t// Draw plane\r\n\t\tgl.pushMatrix()\r\n\t\tgl.rotate(-90, 1, 0, 0)\r\n\t\tdisplayShader.draw(plane)\r\n\t\tgl.popMatrix()\r\n\r\n\t\t// Draw depth map overlay\r\n\t\tgl.viewport(10, 10, 10 + 256, 10 + 256)\r\n\t\ttextureShader.draw(texturePlane)\r\n\t\tgl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\r\n\t})\r\n}\r\n(shadowMap as any).info = 'Press any key to toggle between sphere- or AABB-based camera clipping.'"],"names":["floatHashCode","CustomMap","PI","abs","V","currentGL","__awaiter","WGL","Buffer","Mesh","pushQuad","Shader","Texture","TSGLContextBase","time","TSGLContext","sin"],"mappings":"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,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACrE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAA;YACpE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACtE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAA;YACpE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACnE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YAClE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACpE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YAGhE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACtE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAA;YACpE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACrE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAA;YACpE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACpE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YAClE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACnE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YAGhE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACpE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YACnE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACrE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YACnE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACpE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YAClE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACpE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YAG/D,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACtE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YACnE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACrE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YACnE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;kBACrE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YAClE,CAAC,CAAC,EAAE,CAAC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AAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAChE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAEhE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAC/D,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAC/D,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAChE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAEhE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YACjE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YACjE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YACnE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAA;YAEnE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,E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EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,CAAA;YAC1C,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAA;YACrC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAA;YACrC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,CAAA;YAEpG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAA;YACrC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,CAAA;YAC1C,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAA;YACrC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,CAAA;YAEpG,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAA;YACrC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,GAAG,CAAC,GAAG,EAAE,GAAG,G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;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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"}